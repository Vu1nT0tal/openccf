[
    {
        "url": "https://doi.org/10.1109/TrustCom50675.2020.00054",
        "title": "ReDex: Unpacking Android Packed Apps by Executing Every Method",
        "authors": "Jiajin Cai, Tongxin Li, Can Huang, Xinhui Han",
        "abstract": "In recent years, Android commercial packers have been widely used to encrypt dex files of apps, making analysts and malware detection solutions hard to obtain the actual dex files for further analysis. Therefore, we propose a novel unpacking system named ReDex. ReDex uses Java reflection to execute all methods with forged arguments and collects the original instructions when the method is executing. Although apps may crash due to forged arguments, ReDex can collect its original instructions released by the commercial packer before the crash. Also, we design an exception/crash handling module, which can avoid most of the crashes and restart the unpacking process at the next method after the crash. The comparison with 2 state-of-the-art unpackers on 100 packed apps with source code and 140 wild packed apps shows that ReDex can unpack more apps. Besides, we conduct an experiment with 1,801 real-world apps packed by 7 representative packers. Of 21 million methods, ReDex can extract 19,239,743 (90.30%) methods. The exception/crash handling module effectively reduces the crash rate to 2.31%. In these packed apps, we find 4 interesting packing techniques. ReDex can deal with these packing techniques while 2 state-of-the-art unpackers cannot.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "近年来，Android商业打包程序被广泛用于加密应用程序的dex文件，使得分析师和恶意软件检测解决方案很难获得实际的dex文件进行进一步分析。因此，我们提出了一种新的拆包系统ReDex。ReDex使用Java反射来执行所有带有伪造参数的方法，并在方法执行时收集原始指令。虽然应用程序可能会因伪造的参数而崩溃，但ReDex可以收集商业打包程序在崩溃前发布的原始指令。此外，我们设计了一个异常/崩溃处理模块，它可以避免大多数的崩溃，并在崩溃后的下一个方法重新开始解包过程。在100个带源代码的打包应用程序和140个野生打包应用程序上与2个最先进的解包器的比较表明，ReDex可以解包更多的应用程序。此外，我们对7个有代表性的打包程序打包的1，801个真实应用进行了实验。在2100万个方法中，ReDex可以提取19239743个(90.30%)方法。异常/崩溃处理模块有效地将崩溃率降至2.31%。在这些打包的应用程序中，我们发现了4种有趣的打包技术。ReDex可以处理这些包装技术，而2个国家的艺术拆包不能。",
        "title_zh": "ReDex:通过执行每个方法来打开Android打包的应用程序",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2020.html",
        "conf_title": "19th TrustCom 2020: Guangzhou, China",
        "conf_url": "https://doi.org/10.1109/TrustCom50675.2020",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom50675.2020.00060",
        "title": "Family Identification of AGE-Generated Android Malware Using Tree-Based Feature",
        "authors": "Guga Suri, Jianming Fu, Rui Zheng, Xinying Liu",
        "abstract": "Application Generation Engine(AGE) is a development tool that can automatically generate simple Android applications by utilizing some boilerplate codes. People with little software programming background could also develop Android applications by using this tool based on their requirements. The emergence of AGE dramatically improves the ease of developing essential software and lowers the level of programming skills required for app developers. However, it also provides easy access for attackers to quickly develop a large number of malicious applications, which will seriously affect the device and data security of regular users. Since AGE mainly generates applications based on some boilerplate codes, the code structures of malicious apps created by AGE have a high degree of similarity when these apps belong to the same family. Based on the assumption that the package directory structures of the software from the same family are also similar, we designed a novel feature construction method to describe the application. Using this method, we extracted features from the leaf nodes of the smali tree, while each smali tree corresponds to the smali directory of the application. Unlike traditional static feature extraction of applications, the tree-based feature proposed in this paper can effectively counteract problems such as code obfuscation or reflection cause it can adequately reflect the semantic features of the smali files. To prove the effectiveness of tree-based features, we also conducted some experiments based on a dataset provided by the enterprise. This dataset contains 1792 AGE-generated applications, and these applications belong to 17 malicious families. We demonstrated that the feature construction method proposed in this paper is usable and can be applied to machine learning classification algorithms for the identification of malicious applications.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "应用程序生成引擎(AGE)是一个开发工具，可以利用一些样板代码自动生成简单的Android应用程序。没有多少软件编程背景的人也可以根据自己的需求使用这个工具开发Android应用程序。AGE的出现极大地提高了开发基本软件的容易程度，并降低了应用程序开发人员所需的编程技能水平。但也为攻击者快速开发大量恶意应用提供了便利，将严重影响正规用户的设备和数据安全。由于AGE主要基于一些样板代码生成应用，因此当这些应用属于同一家族时，AGE创建的恶意应用的代码结构具有高度的相似性。基于同一系列软件的包目录结构也相似的假设，我们设计了一种新的特征构造方法来描述应用。使用这种方法，我们从smali树的叶节点中提取特征，而每个smali树对应于应用程序的smali目录。与传统的应用程序静态特征提取不同，本文提出的基于树的特征能够充分反映小文件的语义特征，因此能够有效对抗代码混淆或反射等问题。为了证明基于树的特征的有效性，我们还基于企业提供的数据集进行了一些实验。该数据集包含1792个年龄生成的应用程序，这些应用程序属于17个恶意家族。我们证明了本文提出的特征构造方法是可用的，并且可以应用于用于识别恶意应用的机器学习分类算法。",
        "title_zh": "基于树特征的年龄生成Android恶意软件家族识别",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2020.html",
        "conf_title": "19th TrustCom 2020: Guangzhou, China",
        "conf_url": "https://doi.org/10.1109/TrustCom50675.2020",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom50675.2020.00086",
        "title": "Flowverine: Leveraging Dataflow Programming for Building Privacy-Sensitive Android Applications",
        "authors": "Eduardo Gomes, Igor Zavalyshyn, Nuno Santos, João Silva, Axel Legay",
        "abstract": "Software security is a fundamental dimension in the development of mobile applications (apps). Since many apps have access to sensitive data (e.g., collected from a smartphone's sensors), the presence of security vulnerabilities may put that data in danger and lead to privacy violations. Unfortunately, existing security solutions for Android are either too cumbersome to use by common app developers, or may require the modification of Android OS. This paper presents Flowverine, a system for building privacy-sensitive mobile apps for unmodified Android platforms. Flowverine exposes an API based on a dataflow programming model which allows for efficient taint tracking of sensitive data flows within each app. By checking such flows against a security policy, Flowverine can then prevent potential privacy violations. We implemented a prototype of our system. Our evaluation shows that Flowverine can be used to implement mobile applications that handle security-sensitive information flows while preserving compatibility with existing Android OS and incurring small performance overheads.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "软件安全性是移动应用程序开发中的一个基本方面。由于许多应用程序可以访问敏感数据(例如，从智能手机的传感器收集的数据)，安全漏洞的存在可能会将这些数据置于危险之中，并导致侵犯隐私。不幸的是，现有的Android安全解决方案要么过于繁琐，无法被普通应用程序开发人员使用，要么可能需要修改Android操作系统。本文介绍了Flowverine，这是一个为未经修改的Android平台构建隐私敏感的移动应用程序的系统。Flowverine公开了一个基于数据流编程模型的API，该模型允许对每个应用程序中的敏感数据流进行有效的污点跟踪。通过根据安全策略检查此类流量，Flowverine可以防止潜在的隐私侵犯。我们实现了系统的原型。我们的评估表明，Flowverine可用于实现处理安全敏感信息流的移动应用，同时保持与现有Android操作系统的兼容性，并产生少量性能开销。",
        "title_zh": "Flowverine:利用数据流编程构建隐私敏感的Android应用程序",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2020.html",
        "conf_title": "19th TrustCom 2020: Guangzhou, China",
        "conf_url": "https://doi.org/10.1109/TrustCom50675.2020",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom50675.2020.00094",
        "title": "Heimdall: Illuminating the Hidden Depths of Third-party Tracking in Android Applications",
        "authors": "Thomas Cory, Philip Raschke, Axel Küpper",
        "abstract": "Although the problems surrounding the ubiquity of Web tracking and its risk to the privacy of online users have attracted public attention in recent years, efforts to counter their adverse effects and protect the privacy and personal data of users, either through counter-tracking solutions or legislation, have done little to stem the tide. This problem is especially pronounced in the mobile world, where the generally opaque nature of mobile platforms prevents effective research to ascertain the nature and extent of third-party tracking and protect user privacy. For this reason, we present Heimdall, an Android Web traffic measurement tool designed to allow users and researchers to shed light on the inner workings of mobile applications and identify connections to third-party trackers that have the potential to abuse users' personal data present on their mobile devices. We demonstrate the feasibility of the concept underlying Heim-dall by using it to monitor the network traffic of 450 Android applications, mapping out their connections to 3,453 unique hosts. Analysing this dataset reveals that 70.9% of monitored apps communicate with known tracking and advertising hosts, highlighting the prevalence of third-party tracking in mobile applications.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "虽然围绕网络跟踪的普遍性及其对在线用户隐私的风险的问题近年来引起了公众的关注，但通过反跟踪解决方案或立法来消除其负面影响并保护用户隐私和个人数据的努力几乎没有阻止这一趋势。这一问题在移动领域尤为突出，因为移动平台普遍不透明的性质阻碍了有效的研究，无法确定第三方跟踪的性质和程度，也无法保护用户隐私。为此，我们推出了Heimdall，这是一款Android网络流量测量工具，旨在让用户和研究人员了解移动应用程序的内部工作原理，并识别与第三方追踪器的连接，这些追踪器有可能滥用用户移动设备上的个人数据。我们通过使用Heim-dall来监控450个Android应用程序的网络流量，绘制出它们与3，453个不同主机的连接，从而证明了这一概念的可行性。分析该数据集发现，70.9%的受监控应用程序与已知的跟踪和广告主机通信，这突显了第三方跟踪在移动应用程序中的流行。",
        "title_zh": "海姆达尔:揭示Android应用程序中第三方跟踪的隐藏深度",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2020.html",
        "conf_title": "19th TrustCom 2020: Guangzhou, China",
        "conf_url": "https://doi.org/10.1109/TrustCom50675.2020",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom50675.2020.00113",
        "title": "Forensic Analysis of Dating Applications on Android and iOS Devices",
        "authors": "Shinelle Hutchinson, Neesha Shantaram, Umit Karabiyik",
        "abstract": "Dating application use is on the rise, and with it comes the need to better understand what data can be recovered to assist in an investigation. While using these dating applications, people send countless messages (including pictures and videos) without ever considering exactly what data is being sent within that message. In this project, we conduct a forensic analysis of five popular dating applications (Her, Hily, Hinge, OkCupid, and Plenty of Fish (POF)) that are available on both Android and iOS devices. We also determined what forensically relevant data can be recovered from dating applications on both Android and iOS. Specifically, we determined what data can be recovered about the sender from the receiver's phone. Secondly, we identified any privacy concerns that result due to the recoverable data and discuss their implications for users. Lastly, we detailed the investigative process that should be followed and presented the locations of any relevant data to aid digital forensics investigators during an Investigation.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "约会应用程序的使用正在增加，随之而来的是需要更好地了解可以恢复哪些数据来帮助调查。当使用这些约会应用程序时，人们发送无数的消息(包括图片和视频),而从来没有考虑过该消息中到底发送了什么数据。在这个项目中，我们对Android和iOS设备上可用的五个流行的约会应用程序(Her、Hily、Hinge、OkCupid和大量的鱼(POF))进行了取证分析。我们还确定了哪些法医相关数据可以从Android和iOS上的约会应用程序中恢复。具体来说，我们确定了可以从接收方的电话中恢复发送方的哪些数据。其次，我们确定了由于可恢复数据而导致的任何隐私问题，并讨论了它们对用户的影响。最后，我们详细说明了应该遵循的调查流程，并提供了任何相关数据的位置，以在调查过程中帮助数字取证调查人员。",
        "title_zh": "Android和iOS设备上约会应用的取证分析",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2020.html",
        "conf_title": "19th TrustCom 2020: Guangzhou, China",
        "conf_url": "https://doi.org/10.1109/TrustCom50675.2020",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom50675.2020.00147",
        "title": "Factors Affecting Users' Disclosure Decisions in Android Runtime Permissions Model",
        "authors": "Rawan Baalous, Ronald Poet",
        "abstract": "Today, Android users are faced with several permissions' screens asking to access their personal information when using Android apps. In fact, Android users have to balance several considerations when choosing to grant or deny these data collection activities. Hence, it is important to understand how users' decisions are made and what factors play a role in users' decisions. A number of studies on the permissions' screens of Android devices have reported users discomfort and misunderstanding of the permission system. However, most studies were carried out on the old permission system where all permissions are presented at installation time, and the user has to either accept all the permissions or stop the installation. With the new permission system started with Android version 6.0 and higher, permissions are presented differently at run time. In this work, we aim to study users' disclosure decisions with the new run time system on Android. We have modeled users' disclosure decisions from three perspectives: dangerous permission type, clarity of rationale, and clarity of context. The study has been conducted on Amazon Mechanical Turk. The results show that dangerous permission type as well as clarity of the context have a statistical significant effect on users' disclosure decisions. On the other hand, clarity of dangerous permission's rationale does not contribute significantly to users' decisions. These findings shed light upon important factors that users consider in making privacy decisions in the new Android run time model. Such factors should be taken into account by Android apps developers when requesting access to users' private information.",
        "files": {
            "openAccessPdf": "http://eprints.gla.ac.uk/234950/1/234950.pdf"
        },
        "abstract_zh": "今天，Android用户在使用Android应用程序时会面临几个权限屏幕，要求访问他们的个人信息。事实上，Android用户在选择同意或拒绝这些数据收集活动时，必须平衡几个考虑因素。因此，了解用户的决策是如何做出的，以及哪些因素在用户的决策中起作用是很重要的。许多关于Android设备权限屏幕的研究报告了用户对权限系统的不适和误解。然而，大多数研究都是在旧的权限系统上进行的，在旧的权限系统中，所有权限都是在安装时显示的，用户必须要么接受所有权限，要么停止安装。随着Android及更高版本开始的新权限系统，权限在运行时以不同的方式呈现。在这项工作中，我们的目的是研究用户的披露决策与新的运行时间系统在Android上。我们从三个角度对用户的公开决定进行了建模:危险的权限类型、基本原理的清晰性和上下文的清晰性。这项研究是在亚马逊土耳其机器人上进行的。结果表明，危险的许可类型以及上下文的清晰度对用户的披露决策有显著的影响。另一方面，危险许可的基本原理的清晰性对用户的决策没有显著的帮助。这些发现揭示了用户在新的Android运行时模型中做出隐私决策时考虑的重要因素。Android应用程序开发者在请求访问用户的私人信息时，应该考虑这些因素。",
        "title_zh": "Android运行时权限模型中影响用户披露决策的因素",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2020.html",
        "conf_title": "19th TrustCom 2020: Guangzhou, China",
        "conf_url": "https://doi.org/10.1109/TrustCom50675.2020",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom50675.2020.00159",
        "title": "A Function-Centric Risk Assessment Approach for Android Applications",
        "authors": "Min Li, Haroon Elahi, Tao Peng, Fang Qi, Guojun Wang",
        "abstract": "Different risk evaluation approaches exist to protect users from potentially malicious apps. However, while assessing risks, the existing approaches ignore users' functional needs, and that app funGuojun Wangctions help their developers compete in the marketplace. In this paper, we propose a function-centric risk assessment approach for Android apps. The proposed approach combines operation research and machine learning methods to calculate the risks of an app and offers five competitive apps in the same app-category. We evaluate the proposed approach using 1,377 apps in sixteen app-categories, obtained from the most popular app store of 2019 in China, “Ying Yong Bao.” The experimental evaluation demonstrates the feasibility of the proposed approach. This approach can help users select safe apps in the marketplace that offer competitive functions.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "存在不同的风险评估方法来保护用户免受潜在恶意应用程序的攻击。然而，在评估风险时，现有的方法忽略了用户的功能需求，并且应用程序funGuojun Wangctions帮助他们的开发者在市场上竞争。本文提出了一种以功能为中心的Android应用风险评估方法。提出的方法结合了运筹学和机器学习方法来计算应用程序的风险，并在同一应用程序类别中提供五个竞争应用程序。我们使用16个应用类别中的1，377个应用来评估所提出的方法，这些应用来自2019年中国最受欢迎的应用商店“应永宝”实验评估证明了该方法的可行性。这种方法可以帮助用户在市场上选择提供竞争功能的安全应用。",
        "title_zh": "一种以功能为中心的Android应用风险评估方法",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2020.html",
        "conf_title": "19th TrustCom 2020: Guangzhou, China",
        "conf_url": "https://doi.org/10.1109/TrustCom50675.2020",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom50675.2020.00180",
        "title": "SecureESFS: Sharing Android External Storage Files in A Securer Way",
        "authors": "Shan Liang, Yuewu Wang, Lingguang Lei, Jiwu Jing, Quan Zhou",
        "abstract": "As an essential component on Android devices, External Storage is frequently used for sharing files between different apps. Therefore, compared to Internal Storage, the access control on the External Storage is usually very loose. However, a lot of sensitive files might be stored on the External Storage, which makes it an attractive target for the attackers. Since Android 10, a security mechanism named Scoped Storage has been introduced to protect the sensitive files on the External Storage. However, this mechanism is mainly used to protect the app-specific files, and can't support the sharing of sensitive files between trusted apps in a secure and flexible way. In this paper, we present a secure External Storage sensitive file sharing solution named SecureESFS. It first extends a Linux kernel security mechanism named ACL on the SDCardFS filesystem to protect the External Storage. With different ACL policy settings, the user can dynamically share sensitive files between trusted apps according to specific business needs. We also enforce the integrity protection on the ACL policies by checking the hash message authentication codes (HMAC) of these policies. Moreover, we design a transparent encryption mechanism in SecureESFS to protect the sensitive files on the External Storage, when the Android devices are physically accessed by the attackers, such as removing the SD card. For versions lower than Android 10, SecureESFS can provide independent protection and secure sharing for the sensitive files on the External Storage. For versions higher than Android 10, SecureESFS can achieve the secure sharing of sensitive files while Scoped Storage provides protection for the app-specific files. SecureESFS may also be used to enhance the security of the Scoped Storage mechanism. Experiments conducted on a prototype show that SecureESFS works well and incurs acceptable overhead.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "作为Android设备上的一个重要组件，外部存储经常用于在不同的应用程序之间共享文件。因此，与内部存储相比，外部存储的访问控制通常非常松散。然而，大量敏感文件可能存储在外部存储器上，这使得它成为攻击者的诱人目标。从Android 10开始，引入了名为Scoped Storage的安全机制来保护外部存储上的敏感文件。然而，这种机制主要用于保护特定于app的文件，不能以安全和灵活的方式支持可信app之间的敏感文件共享。在本文中，我们提出了一个名为SecureESFS的安全外部存储敏感文件共享解决方案。它首先在SDCardFS文件系统上扩展了一个名为ACL的Linux内核安全机制来保护外部存储。通过不同的ACL策略设置，用户可以根据特定的业务需求在受信任的应用程序之间动态共享敏感文件。我们还通过检查ACL策略的哈希消息认证码(HMAC)来加强这些策略的完整性保护。此外，我们在SecureESFS中设计了一个透明的加密机制，当攻击者物理访问Android设备时，例如移除SD卡，可以保护外部存储上的敏感文件。对于低于Android 10的版本，SecureESFS可以为外部存储上的敏感文件提供独立保护和安全共享。对于高于Android 10的版本，SecureESFS可以实现敏感文件的安全共享，而作用域存储则为应用程序特定的文件提供保护。SecureESFS还可用于增强作用域存储机制的安全性。在原型上进行的实验表明，SecureESFS运行良好，开销也可以接受。",
        "title_zh": "SecureESFS:以更安全的方式共享Android外部存储文件",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2020.html",
        "conf_title": "19th TrustCom 2020: Guangzhou, China",
        "conf_url": "https://doi.org/10.1109/TrustCom50675.2020",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom50675.2020.00195",
        "title": "Feature importance in Android malware detection",
        "authors": "Vasileios Kouliaridis, Georgios Kambourakis, Tao Peng",
        "abstract": "The topic of mobile malware detection on the Android platform has attracted significant attention over the last several years. However, while much research has been conducted toward mobile malware detection techniques, little attention has been devoted to feature selection and feature importance. That is, which app feature matters more when it comes to machine learning classification. After succinctly surveying all major, dated from 2012 to 2020, datasets used by state-of-the-art malware detection works in the literature, we analyse a critical mass of apps from the most contemporary and prevailing datasets, namely Drebin, VirusShare, and AndroZoo. Next, we rank the importance of app classification features pertaining to permissions and intents using the Information Gain algorithm for all the three above-mentioned datasets.",
        "files": {
            "openAccessPdf": "http://arxiv.org/pdf/2008.05299"
        },
        "abstract_zh": "在过去的几年里，Android平台上的移动恶意软件检测这一话题吸引了大量的关注。然而，尽管已经对移动恶意软件检测技术进行了大量研究，但是很少关注特征选择和特征重要性。也就是说，在机器学习分类方面，哪个应用功能更重要。在简洁地调查了从2012年到2020年文献中最先进的恶意软件检测作品使用的所有主要数据集后，我们分析了来自最新和最流行的数据集的大量应用程序，即Drebin、VirusShare和AndroZoo。接下来，我们使用上述三个数据集的信息增益算法，对与权限和意图相关的应用程序分类功能的重要性进行排名。",
        "title_zh": "Android恶意软件检测中的特征重要性",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2020.html",
        "conf_title": "19th TrustCom 2020: Guangzhou, China",
        "conf_url": "https://doi.org/10.1109/TrustCom50675.2020",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom50675.2020.00235",
        "title": "SeWG: Security-enhanced WireGuard for Android Based on TEE",
        "authors": "Yongkang Wu, Yiwei Shan, Zhichao Wang, Pengcheng Zhang, Min He, Jihong Liu",
        "abstract": "WireGuard, a novel VPN proposed in 2017, has been widely accepted in the industry, since it is simpler, leaner and more efficient than traditional VPNs. However, WireGuard ignores the risks of key stolen and abused on both desktop and mobile platform. These vulnerabilities might be utilized by attackers to sneak into the protected network through VPN tunnel provided by WireGuard easily without permission. It is especially obvious on mobile platforms, since they are mostly online all day and the attack scenarios are more complicated and changeable. In this paper, we propose an enhanced WireGuard Android version called SeWG based on TEE. We use TEE (Trusted Execution Environment) technology to achieve secure key storage, preventing the misuse of the private key. And we design corresponding dynamic authentication mechanisms for user mode and kernel mode respectively, to prevent malware from sneaking into the secure tunnel. Finally, we implement SeWg scheme on QSEE, the TEE platform developed by Qualcomm. Our experimental results demonstrate that SeWG can work well with high efficiency.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "WireGuard是2017年提出的一种新型VPN，已被业界广泛接受，因为它比传统VPN更简单、更精简、更高效。然而，WireGuard忽略了桌面和移动平台上密钥被盗和滥用的风险。这些漏洞可能被攻击者利用，通过WireGuard提供的VPN隧道轻易潜入受保护的网络。这一点在移动平台上尤为明显，因为移动平台大多全天在线，攻击场景更加复杂多变。在本文中，我们提出了一个基于TEE的增强型WireGuard Android版本SeWG。我们使用可信执行环境技术来实现安全的密钥存储，防止私钥的滥用。并针对用户态和内核态分别设计了相应的动态认证机制，防止恶意软件潜入安全隧道。最后，我们在高通开发的TEE平台QSEE上实现了SeWg方案。实验结果表明，SeWG能够高效地工作。",
        "title_zh": "SeWG:基于TEE的安全增强型Android wire guard",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2020.html",
        "conf_title": "19th TrustCom 2020: Guangzhou, China",
        "conf_url": "https://doi.org/10.1109/TrustCom50675.2020",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom50675.2020.00238",
        "title": "UIDroid: User-driven Based Hierarchical Access Control for Sensitive Information",
        "authors": "Luping Ma, Dali Zhu, Shunliang Zhang, Xiaohui Zhang, Shumin Peng, Ya Li",
        "abstract": "Nowadays, increasing Android applications attempt to obtain a large number of sensitive user information such as Contacts, SMS, Call logs, IMEI, IMSI without rational necessity, which has seriously threatened the privacy of users. However, the existing Android cannot effectively prevent the above risks. To solve this problem, this paper proposes a novel, user-driven sensitive information management model-UIDroid. UIDroid redefines the subject, object, definition of security level, legitimacy of operations, and system security status. With UIDroid, users could authorize the sub-functions of an application to access sensitive information with rational security levels based on essential requirements on the accuracy of the sensitive data. The prototype of UIDroid is developed to verify the feasibility of the UIDroid and compatibility with existing applications. Extensive experiments show that UIDroid can effectively prevent malicious applications from getting unnecessary sensitive user information with unnecessary accuracy. Meanwhile, the overall performance overhead introduced by UIDroid is less than 4.8%.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "如今，越来越多的Android应用试图在没有合理必要性的情况下获取大量用户敏感信息，如联系人、短信、通话记录、IMEI、IMSI等，这已经严重威胁到用户的隐私。然而，现有的Android无法有效防范上述风险。为了解决这一问题，本文提出了一种新的、用户驱动的敏感信息管理模型——ui droid。UIDroid重新定义了主体、客体、安全级别的定义、操作的合法性以及系统安全状态。通过UIDroid，用户可以根据对敏感数据准确性的基本要求，授权应用程序的子功能以合理的安全级别访问敏感信息。开发了UIDroid原型，验证了UIDroid的可行性以及与现有应用的兼容性。大量实验表明，UIDroid可以有效防止恶意应用以不必要的准确度获取不必要的敏感用户信息。同时，UIDroid引入的整体性能开销不到4.8%。",
        "title_zh": "UIDroid:基于用户驱动的敏感信息分级访问控制",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2020.html",
        "conf_title": "19th TrustCom 2020: Guangzhou, China",
        "conf_url": "https://doi.org/10.1109/TrustCom50675.2020",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom50675.2020.00241",
        "title": "Semantic redirection obfuscation: A control flow obfuscation based on Android Runtime",
        "authors": "Zhichao Wang, Yiwei Shan, Zhi Yang, Ruoyi Wang, Shuang Song",
        "abstract": "Reverse engineering, repackaging and misuse of Android apps are becoming more and more widespread. Many obfuscation schemes are not enough against sustainably evolving reverse engineering techniques, while others have performance problems or limitations. In this paper, we propose a novel scheme that redirects method invocation dynamically to hide the actual control flow of the program. Firstly, some pivotal methods are replaced by others unrelated methods, so that the actual semantics of the program no longer appear. Then by modifying the entry address of the methods in the obfuscated code, the methods execution automatically jumps to the corresponding target methods without any code modification. In order to accurately restore the control flow, the encrypted mapping is decrypted using dynamic passwords from the server in the standalone Java interpreter. Since the obfuscated program semantics and program execution results can not be significantly different, it is almost impossible to reveal the real logic of the program through static analysis. The scheme can also effectively increase the difficulty of dynamic analysis. The evaluation results show that the semantic redirection obfuscation scheme can well hide the actual control flow of the program and both the time and space consumption introduced are acceptable.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android应用的逆向工程、重新打包和滥用越来越普遍。许多混淆方案不足以对抗可持续发展的逆向工程技术，而其他方案存在性能问题或限制。在本文中，我们提出了一个新的方案，动态重定向方法调用来隐藏程序的实际控制流。首先，一些关键的方法被其他不相关的方法取代，这样程序的实际语义就不再出现。然后，通过修改混淆代码中方法的入口地址，方法执行自动跳转到相应的目标方法，而无需任何代码修改。为了准确地恢复控制流，在独立的Java解释器中使用来自服务器的动态密码对加密的映射进行解密。由于混淆后的程序语义和程序执行结果不可能有显著差异，所以通过静态分析揭示程序的真实逻辑几乎是不可能的。该方案还能有效增加动态分析的难度。评测结果表明，语义重定向混淆方案能够很好地隐藏程序的实际控制流程，引入的时间和空间消耗都是可以接受的。",
        "title_zh": "语义重定向混淆:基于Android运行时的控制流混淆",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2020.html",
        "conf_title": "19th TrustCom 2020: Guangzhou, China",
        "conf_url": "https://doi.org/10.1109/TrustCom50675.2020",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom50675.2020.00244",
        "title": "Android Malware Classification Using Machine Learning and Bio-Inspired Optimisation Algorithms",
        "authors": "Jack Pye, Biju Issac, Nauman Aslam, Husnain Rafiq",
        "abstract": "In recent years the number and sophistication of Android malware have increased dramatically. A prototype framework which uses static analysis methods for classification is proposed which employs two feature sets to classify Android malware, permissions declared in the Androidmanifest.xml and Android classes used from the Classes.dex file. The extracted features were then used to train a variety of machine learning algorithms including Random Forest, SGD, SVM and Neural networks. Each machine learning algorithm was subsequently optimised using optimisation algorithms, including the use of bio-inspired optimisation algorithms such as Particle Swarm Optimisation, Artificial Bee Colony optimisation (ABC), Firefly optimisation and Genetic algorithm. The prototype framework was tested and evaluated using three datasets. It achieved a good accuracy of 95.7 percent by using SVM and ABC optimisation for the CICAndMal2019 dataset, 94.9 percent accuracy (with fl-score of 96.7 percent) using Neural network for the KuafuDet dataset and 99.6 percent accuracy using an SGD classifier for the Andro-Dump dataset. The accuracy could be further improved through better feature selection.",
        "files": {
            "openAccessPdf": "http://nrl.northumbria.ac.uk/id/eprint/44730/1/Accepted%20Manuscript_Pye%20et%20al.pdf"
        },
        "abstract_zh": "近年来，Android恶意软件的数量和复杂程度急剧增加。提出了一个使用静态分析方法进行分类的原型框架，该框架采用两个特征集对Android恶意软件进行分类，即Androidmanifest.xml中声明的权限和Classes.dex文件中使用的Android类。提取的特征然后用于训练各种机器学习算法，包括随机森林、SGD、SVM和神经网络。每个机器学习算法随后使用优化算法进行优化，包括使用生物启发的优化算法，如粒子群优化、人工蜂群优化(ABC)、萤火虫优化和遗传算法。使用三个数据集对原型框架进行了测试和评估。通过对CICAndMal2019数据集使用SVM和ABC优化，它实现了95.7%的良好准确率，对KuafuDet数据集使用神经网络实现了94.9%的准确率(fl得分为96.7%)，对Andro-Dump数据集使用SGD分类器实现了99.6%的准确率。通过更好的特征选择可以进一步提高精确度。",
        "title_zh": "使用机器学习和生物优化算法的Android恶意软件分类",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2020.html",
        "conf_title": "19th TrustCom 2020: Guangzhou, China",
        "conf_url": "https://doi.org/10.1109/TrustCom50675.2020",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom50675.2020.00253",
        "title": "AndroTIME: Identifying Timing Side Channels in the Android API",
        "authors": "Gerald Palfinger, Bernd Prünster, Dominik Julian Ziegler",
        "abstract": "The permission system of Android has continuously evolved to better guard the privacy of users. New permissions have been introduced and existing methods which were abused now require a permission or have been entirely removed. Retrieving private data about users without their consent is thus getting continuously harder for applications. In this paper, we systematically analyse how timing-based side channels in the Android API can be used to circumvent this tight permission system. We introduce AndroTIME, a framework to automatically detect such side channels in the Android API. Using this automated approach, we were able to identify several new timing-based side-channel leaks in Android 10 and Android 11. The detected side channels enable querying for installed applications, active accounts, files, and browser logins. The leaked information could be used to fingerprint users, detect secret user habits, or even infer a concrete user identity.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android的权限系统不断进化，以更好地保护用户的隐私。引入了新的权限，被滥用的现有方法现在需要权限或已被完全移除。因此，对于应用程序来说，在未经用户同意的情况下获取用户的私人数据变得越来越困难。在这篇文章中，我们系统地分析了Android API中基于时间的侧通道是如何被用来绕过这个严格的许可系统的。我们引入了AndroTIME，这是一个在Android API中自动检测这种侧通道的框架。使用这种自动化方法，我们能够在Android 10和Android 11中识别出几个新的基于定时的侧信道泄漏。检测到的侧信道能够查询已安装的应用程序、活动帐户、文件和浏览器登录。泄露的信息可以用来采集用户的指纹，检测秘密的用户习惯，甚至推断出具体的用户身份。",
        "title_zh": "AndroTIME:在Android API中识别定时通道",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2020.html",
        "conf_title": "19th TrustCom 2020: Guangzhou, China",
        "conf_url": "https://doi.org/10.1109/TrustCom50675.2020",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom50675.2020.00254",
        "title": "FIDOnuous: A FIDO2/WebAuthn Extension to Support Continuous Web Authentication",
        "authors": "Eric Klieme, Jonathan Wilke, Niklas van Dornick, Christoph Meinel",
        "abstract": "For many years username and password are the common solution to protect sensitive web services despite its various drawbacks. While many alternatives were proposed to improve security, passwords are still included in any authentication procedure today. With the proposal of FIDO and FIDO2/WebAuthn a very promising approach was presented in the last years that may replace passwords at some time since it also enables password-less authentication in addition to work as a second factor for any web authentication. Although FIDO2/WebAuthn solves many problems of passwords using public/private key cryptography and the possibility to use strong authentication mechanisms like biometrics, it is still not capable of detecting an attacker once a successful login has happened. In this paper we evaluate the extension of FIDO2/WebAuthn to enable continuous authentication in the web. While this extension would enable the many proposals of continuous authentication for system or device protection to be used for web authentication, it allows the exchange of the relying parties' security requirements on the one hand and the authenticator's capabilities on the other hand, too. We evaluate our extension using an Android-based roaming authenticator communicating via Bluetooth Low Energy and show that the FIDO2/WebAuthn extension mechanism is suitable. While a real world deployment would require modifications in the different browser implementations, we further point out the challenges resulting from the different implementation levels and the high dynamics in the standard development such as different notification windows or parallelism issues.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "多年来，用户名和密码是保护敏感web服务的常用解决方案，尽管它有各种缺点。虽然提出了许多替代方案来提高安全性，但如今密码仍然包含在任何身份验证过程中。随着FIDO和FIDO2/WebAuthn的提出，在过去几年中出现了一种非常有前途的方法，该方法可能在某个时候取代密码，因为它除了作为任何web认证的第二个因素之外，还实现了无密码认证。尽管FIDO2/WebAuthn使用公钥/私钥密码术解决了许多密码问题，并且可以使用像生物测定学这样的强认证机制，但是一旦成功登录，它仍然不能检测到攻击者。在本文中，我们评估了FIDO2/WebAuthn的扩展，以实现web中的连续认证。虽然这种扩展将使得用于系统或设备保护的连续认证的许多提议能够用于web认证，但是它允许一方面交换依赖方的安全要求，另一方面也交换认证者的能力。我们使用基于Android的漫游认证器通过蓝牙低能耗通信来评估我们的扩展，并表明FIDO2/WebAuthn扩展机制是合适的。虽然实际部署需要在不同的浏览器实现中进行修改，但我们进一步指出了不同的实现级别和标准开发中的高动态性所带来的挑战，如不同的通知窗口或并行性问题。",
        "title_zh": "FIDOnuous:支持连续Web认证的FIDO2/WebAuthn扩展",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2020.html",
        "conf_title": "19th TrustCom 2020: Guangzhou, China",
        "conf_url": "https://doi.org/10.1109/TrustCom50675.2020",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom56396.2022.00020",
        "title": "HashDroid:Extraction of malicious features of Android applications based on function call graph pruning",
        "authors": "Pengfei Liu, Weiping Wang, Hong Song, Shigeng Zhang, Yulu Hong",
        "abstract": "With the Android system becoming the most popular operating system for mobile smart terminals, it is more likely to be targeted by malware. Therefore, many researches of malicous detection have emerged. Most of the features extracted of current malicious detection are discrete, such as single permission, single API, single component, API sequences and so on. These features can only detect the maliciousness of Android applications, but cannot characterize the malicious behavior of Android applications through these features. In this paper,we propose a method to automatically mine malicious features by pruning the function call graph(FCG) of Android applications. These extracted features not only have a good representation for the malicious behavior of Android applications, but also can efficiently detect the malicious. The method uses simhash to characterize the pruned subgraphs of FCG, and selects the subgraphs which play a decisive role in determining maliciousness as malicious features. These malicious features are then used for malicious detection of Android applications. The verification on public datasets shows that our method has a good effect of more than 97% in malicous detection of Android applications.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "随着Android系统成为移动智能终端最受欢迎的操作系统，它更有可能成为恶意软件的目标。因此，出现了许多恶意检测的研究。当前恶意检测提取的特征大多是离散的，如单权限、单API、单组件、API序列等。这些特征只能检测Android应用的恶意性，而不能通过这些特征来刻画Android应用的恶意行为。本文提出了一种通过修剪Android应用程序的函数调用图来自动挖掘恶意特征的方法。这些提取的特征不仅能很好地表征Android应用程序的恶意行为，而且能有效地检测出恶意行为。该方法使用simhash对FCG的剪枝子图进行表征，选择对判定恶意性起决定性作用的子图作为恶意特征。这些恶意功能随后被用于恶意检测Android应用程序。在公共数据集上的验证表明，该方法对Android应用程序的恶意检测具有97%以上的良好效果。",
        "title_zh": "HashDroid:基于函数调用图剪枝的Android应用恶意特征提取",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2022.html",
        "conf_title": "21st TrustCom 2022: Wuhan, China",
        "conf_url": "https://doi.org/10.1109/TrustCom56396.2022",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom56396.2022.00045",
        "title": "You Cannot Fully Trust Your Device: An Empirical Study of Client-Side Certificate Validation in WPA2-Enterprise Networks",
        "authors": "Li Song, Qiongxiao Wang, Shijie Jia, Jingqiang Lin, Linli Lu, Yanduo Fu",
        "abstract": "WPA2-Enterprise networks offer access to the Internet widely for multifarious client devices. Certificate-based authentication is adopted on the client-side to authenticate the server during network connection. Due to a lack of professional knowledge, client users commonly fully trust the devices, which may result in insecure network connection and user credential leakage. Previous works commonly focus on the security vulnerabilities due to the design weaknesses of the user interfaces from mainstream operating systems, while the built-in certificate validation implementations, which act as a block box for users to validate the received certificates, are not taken into consideration.In this paper, we design a series of comprehensive testings to evaluate the built-in certificate validation implementations of mainstream client devices for the first time. Moreover, we investigate the configuration options provided by the devices from different vendors, which may downgrade the security of the certificate validation. We select both Windows and Android (from vendors with the largest five market share) devices as our empirical study target. The results show that more than one security vulnerability exists in the built-in certificate validation implementations of the selected devices, and all the selected devices provide a certain option which may downgrade the security of certificate validation. We also conduct a real Evil Twin attack, which reveals that the user credentials can be cracked due to the discovered security vulnerabilities. Our findings have been responsibly disclosed to the relevant device vendors, and we received an assortment of responses, meanwhile many vendors (e.g., Huawei) have already positively acknowledged our findings.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "WPA2-企业网络为各种各样的客户端设备提供了广泛的互联网接入。在网络连接期间，客户端采用基于证书的认证来认证服务器。由于缺乏专业知识，客户端用户通常完全信任设备，这可能导致不安全的网络连接和用户凭据泄露。先前的工作通常集中于由于主流操作系统的用户界面的设计弱点而导致的安全漏洞，而内置的证书验证实现，其作为用户验证接收到的证书的阻止盒，没有被考虑。在本文中，我们首次设计了一系列全面的测试来评估主流客户端设备的内置证书验证实现。此外，我们调查了不同厂商的设备所提供的配置选项，这些选项可能会降低证书验证的安全性。我们选择Windows和Android(来自拥有最大五个市场份额的供应商)设备作为我们的实证研究目标。结果表明，所选设备的内置证书验证实现中存在不止一个安全漏洞，并且所有所选设备都提供了某种可能降低证书验证安全性的选项。我们还进行了一次真正的邪恶双胞胎攻击，这表明由于发现的安全漏洞，用户凭证可以被破解。我们的发现已经被负责任地披露给相关设备厂商，我们收到了各种各样的回应，同时许多厂商(如华为)已经积极认可了我们的发现。",
        "title_zh": "您不能完全信任您的设备:WPA2企业网络中客户端证书验证的实证研究",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2022.html",
        "conf_title": "21st TrustCom 2022: Wuhan, China",
        "conf_url": "https://doi.org/10.1109/TrustCom56396.2022",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom56396.2022.00051",
        "title": "To Fix or Not to Fix: A Critical Study of Crypto-misuses in the Wild",
        "authors": "Anna-Katharina Wickert, Lars Baumgärtner, Michael Schlichtig, Krishna Narasimhan, Mira Mezini",
        "abstract": "Recent studies have revealed that 87 % to 96 % of the Android apps using cryptographic APIs have a misuse which may cause security vulnerabilities. As previous studies did not conduct a qualitative examination of the validity and severity of the findings, our objective was to understand the findings in more depth. We analyzed a set of 936 open-source Java applications for cryptographic misuses. Our study reveals that 88.10 % of the analyzed applications fail to use cryptographic APIs securely. Through our manual analysis of a random sample, we gained new insights into effective false positives. For example, every fourth misuse of the frequently misused JCA class MessageDigest is an effective false positive due to its occurrence in a non-security context. As we wanted to gain deeper insights into the security implications of these misuses, we created an extensive vulnerability model for cryptographic API misuses. Our model includes previously undiscussed attacks in the context of cryptographic APIs such as DoS attacks. This model reveals that nearly half of the misuses are of high severity, e.g., hard-coded credentials and potential Man-in-the-Middle attacks.",
        "files": {
            "openAccessPdf": "http://arxiv.org/pdf/2209.11103"
        },
        "abstract_zh": "最近的研究表明，87 %到96 %的使用加密API的Android应用程序都有可能导致安全漏洞的误用。由于以前的研究没有对这些发现的有效性和严重性进行定性检查，我们的目标是更深入地了解这些发现。我们分析了一组936个开源Java应用程序的加密误用。我们的研究显示，88.10 %的分析应用程序无法安全地使用加密API。通过我们对随机样本的手动分析，我们对有效的假阳性有了新的认识。例如，经常被误用的JCA类MessageDigest的每四个误用是有效的误报，因为它出现在非安全上下文中。由于我们希望更深入地了解这些误用的安全含义，我们为加密API误用创建了一个广泛的漏洞模型。我们的模型包括以前未讨论过的加密API环境中的攻击，如DoS攻击。该模型揭示了近一半的误用具有高严重性，例如，硬编码凭据和潜在的中间人攻击。",
        "title_zh": "修复还是不修复:对野外密码误用的批判性研究",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2022.html",
        "conf_title": "21st TrustCom 2022: Wuhan, China",
        "conf_url": "https://doi.org/10.1109/TrustCom56396.2022",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom56396.2022.00062",
        "title": "A Comparative Study on the Security of Cryptocurrency Wallets in Android System",
        "authors": "Minfeng Qi, Zhiyu Xu, Tengyun Jiao, Sheng Wen, Yang Xiang, Gary Nan",
        "abstract": "The security of crypto wallets is a major concern in light of the recent prevalence of thefts. Aiming at the problem that there is no complete and reliable security detection model for Android-based crypto wallets, this study provides an evaluation framework based on the standard Android application security detection and unique security assessment of crypto wallets. The framework presents an attack-based detection approach, which identifies potential wallet security issues by simulating attacks and exploiting vulnerabilities. Ten popular Android crypto wallets are evaluated and compared to validate the framework’s practicability and accuracy. The test results demonstrate that the framework can accurately reflect the performance security of wallets. Additionally, the study proposes the corresponding actions to address the identified common security threats in crypto wallets.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "鉴于最近盗窃行为的流行，加密钱包的安全性是一个主要问题。针对基于Android的加密钱包没有完整可靠的安全检测模型的问题，提出了一种基于标准Android应用安全检测和加密钱包独特安全评估的评估框架。该框架提出了一种基于攻击的检测方法，通过模拟攻击和利用漏洞来识别潜在的钱包安全问题。通过对10款流行的Android加密钱包进行评估和比较，验证了该框架的实用性和准确性。测试结果表明，该框架能够准确反映钱包的性能安全性。此外，研究提出了相应的行动，以解决已确定的常见安全威胁的加密钱包。",
        "title_zh": "Android系统加密货币钱包的安全性比较研究",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2022.html",
        "conf_title": "21st TrustCom 2022: Wuhan, China",
        "conf_url": "https://doi.org/10.1109/TrustCom56396.2022",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom56396.2022.00191",
        "title": "Hierarchical Classification of Android Malware Traffic",
        "authors": "Giampaolo Bovenzi, Valerio Persico, Antonio Pescapè, Anna Piscitelli, Vincenzo Spadari",
        "abstract": "In the last few years, Android mobile devices have encountered a large spread and nowadays a huge part of the traffic traversing the Internet is related to them. In parallel, the number of possible threats and attacks has also increased, thus emphasizing the need for accurate automatic malware detection systems. In this paper, we design and evaluate a system to detect whether a traffic object (biflow) is benign or malicious, possibly understanding its specific nature in the latter case. The proposal leverages machine learning in a hierarchical fashion, in order to capitalize on the structure of the traffic data and reap both design and performance benefits. The comparative evaluation—performed considering the public CICAndMal2017 dataset—assesses the performance of several machine-learning algorithms and witnesses that the hierarchical approach leads to improved performance w.r.t. the flat approach (up to +0.18 F1-score, depending on the granularity of the analysis and the machine learning algorithm considered). In addition, we evaluate the impact of a reject-option mechanism, showing the trade-off between classification accuracy and ratio of classified biflows.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "在过去的几年中，Android移动设备遇到了很大的传播，现在互联网上很大一部分流量都与它们有关。与此同时，可能的威胁和攻击的数量也在增加，因此强调了对准确的自动恶意软件检测系统的需求。在本文中，我们设计并评估了一个系统来检测流量对象(双向流)是良性的还是恶意的，在后一种情况下可能理解其特定的性质。该提案以分层的方式利用机器学习，以便利用交通数据的结构，并获得设计和性能两方面的好处。对比评估-在考虑公共CICAndMal2017数据集的情况下进行-评估了几种机器学习算法的性能，并见证了分层方法相对于平面方法的性能改善(最高+0.18 F1分，取决于分析的粒度和所考虑的机器学习算法)。此外，我们评估了拒绝选项机制的影响，显示了分类准确性和分类双流比率之间的权衡。",
        "title_zh": "Android恶意软件流量的分层分类",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2022.html",
        "conf_title": "21st TrustCom 2022: Wuhan, China",
        "conf_url": "https://doi.org/10.1109/TrustCom56396.2022",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom53373.2021.00033",
        "title": "You Are (not) Who Your Peers Are: Identification of Potentially Excessive Permission Requests in Android Apps",
        "authors": "Prashanthi Mallojula, Javaria Ahmad, Fengjun Li, Bo Luo",
        "abstract": "Millions of Android applications are now deployed on billions of smartphones and tablet devices. An enormous amount of users' private data are being collected and made accessible to such apps. Extensive research efforts have been devoted to smartphone app security. In particular, the current practice of the app markets and app security scanners is to ensure that the requested permissions are consistent with the used permissions. On the other hand, mobile apps need to seek consent from users to approve various permissions to access user information. However, users often blindly accept permission requests and apps start to abuse this mechanism. For example, a flashlight app may obtain users' locations and send them out to the server. As long as a permission is requested by the app developer and approved by the users, the state-of-art detection mechanisms will treat it as benign. In this paper, we ask the question “are the permission requests really necessary?” The question is difficult to answer because it is hard to autonomously “comprehend” whether a permission is needed for the functionality of the app. We take the first attempt to tackle this challenge by comparing an app's permission requests with its peer apps, i.e., apps with similar functionalities. An app that requests/uses significantly more permissions than its peers is considered potentially malicious that will require further investigation. With this idea, we design a statistical approach to identify potentially excessive permission requests and evaluate it with apps from Play Store. Experiment results and case studies show that the proposed mechanism could effectively identify highly suspicious apps, which request many permissions that are not relevant to their functionalities.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "数以百万计的Android应用程序现在部署在数十亿部智能手机和平板设备上。大量用户的私人数据正在被收集，并被这些应用程序访问。人们已经对智能手机应用程序的安全性进行了广泛的研究。特别地，应用市场和应用安全扫描器的当前实践是确保请求的权限与使用的权限一致。另一方面，手机app需要征得用户同意，才能批准访问用户信息的各种权限。然而，用户经常盲目接受权限请求，应用程序开始滥用这一机制。例如，一个手电筒应用程序可以获得用户的位置，并将它们发送到服务器。只要应用程序开发人员请求许可，并且用户批准了许可，最先进的检测机制就会将其视为良性的。在本文中，我们提出了一个问题“权限请求真的有必要吗？”这个问题很难回答，因为很难自主地“理解”应用程序的功能是否需要许可。我们首先尝试通过将一个应用程序的权限请求与其对等应用程序(即具有相似功能的应用程序)进行比较来应对这一挑战。请求/使用权限明显多于同类应用的应用被视为潜在恶意应用，需要进一步调查。本着这个想法，我们设计了一种统计方法来识别潜在的过度许可请求，并使用Play Store的应用程序进行评估。实验结果和案例分析表明，该机制能够有效识别高度可疑的应用，这些应用请求了许多与其功能不相关的权限。",
        "title_zh": "你是(不是)你的同龄人:识别Android应用程序中潜在的过度权限请求",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2021.html",
        "conf_title": "20th TrustCom 2021: Shenyang, China",
        "conf_url": "https://doi.org/10.1109/TrustCom53373.2021",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom53373.2021.00056",
        "title": "Security Library for Safe Data Storage on Android Platform",
        "authors": "Aneta Poniszewska-Maranda, Lukasz Rogozinski, Witold Maranda",
        "abstract": "Smartphones have become an integral part of everyday human life. In addition to the usual activities such as phone calls and text messages, users are increasingly turning to e-banking, e-commerce or healthcare. The Android operating system offers a number of mechanisms and good practices related to the creation of secure applications, but research shows that there are still many vulnerabilities. The paper contains an overview of the currently existing methods of securing data stored on the Android platform, threats related to the discussed system and a proposition for their elimination in the form of the Android Secure library, which facilitates the management of dangerous application rights, validation of data entered and provides an additional layer of security using one-time password or device location. The proposed solution eliminates only selected problems that the Android system has, but of course the best form of security is a qualified team creating the application and users' awareness of existing threats.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "智能手机已经成为人类日常生活不可或缺的一部分。除了打电话和发短信等日常活动，用户越来越多地转向电子银行、电子商务或医疗保健。Android操作系统提供了许多与创建安全应用程序相关的机制和良好实践，但研究表明仍然存在许多漏洞。本文概述了当前保护Android平台上存储的数据的现有方法、与所讨论的系统相关的威胁以及以Android安全库的形式消除这些威胁的建议，该安全库有助于管理危险的应用程序权限、验证输入的数据，并使用一次性密码或设备位置提供额外的安全层。提议的解决方案仅消除了Android系统存在的特定问题，但当然最好的安全形式是由一个合格的团队创建应用程序，并让用户意识到现有的威胁。",
        "title_zh": "用于Android平台上安全数据存储的安全库",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2021.html",
        "conf_title": "20th TrustCom 2021: Shenyang, China",
        "conf_url": "https://doi.org/10.1109/TrustCom53373.2021",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom53373.2021.00097",
        "title": "AndroCreme: Unseen Android Malware Detection Based on Inductive Conformal Learning",
        "authors": "Gang Zhang, Hao Li, Zhenxiang Chen, Lizhi Peng, Yuhui Zhu, Chuan Zhao",
        "abstract": "Android platform is facing serious malware threats due to its popularity, as evidenced by the drastic increase on the number of mobile malware families and variants in recent years. Detecting malware variants and zero-day malware is a critical challenge that must be addressed to protect mobile devices against malware attacks. In this study, we present AndroCreme, a novel network intrusion detection system (NIDS) that can identify unseen malware by analyzing the network behavior of Android malware. To address the temporal bias issue in NIDS, we propose a method for rapid iterative update of the model based on data selection and data size limitation. The selection of effective data is carried out by induction and conformal technology, and the data scale is controlled by the method of time window and data cycle selection. To further achieve fast training speed and high efficiency, we leverage a gradient boosting framework that uses a tree-based learning algorithm, namely, LightGBM, as the meta predictor. We evaluate the performance of AndroCreme over 400K real-world network flows, which are collected from over 30K Android benignware and 21K malware applications. The experimental results show that, compared with the retraining method using all data, AndroCreme requires only a small amount of datareduce more than 3x to obtain better detection performance, which effectively solves the temporal bias.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "由于Android平台的流行，它正面临着严重的恶意软件威胁，近年来移动恶意软件家族和变种的数量急剧增加就是证明。检测恶意软件变体和零日恶意软件是保护移动设备免受恶意软件攻击必须解决的一个关键挑战。在这项研究中，我们提出了一种新的网络入侵检测系统(NIDS)Android creme，它可以通过分析Android恶意软件的网络行为来识别未知的恶意软件。为了解决NIDS中的时间偏差问题，我们提出了一种基于数据选择和数据大小限制的模型快速迭代更新方法。通过归纳和保形技术进行有效数据的选择，通过时间窗和数据周期选择的方法控制数据规模。为了进一步实现快速的训练速度和高效率，我们利用梯度提升框架，该框架使用基于树的学习算法，即LightGBM，作为元预测器。我们评估了超过400，000个真实世界网络流量的AndroCreme性能，这些流量是从超过30，000个Android benignware和21，000个恶意软件应用程序中收集的。实验结果表明，与使用全部数据的再训练方法相比，AndroCreme只需要少量的数据就可以获得3倍以上的检测性能，有效地解决了时间偏差问题。",
        "title_zh": "基于归纳共形学习的未知Android恶意软件检测",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2021.html",
        "conf_title": "20th TrustCom 2021: Shenyang, China",
        "conf_url": "https://doi.org/10.1109/TrustCom53373.2021",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom53373.2021.00098",
        "title": "A Novel Android Malware Detection Method Based on Visible User Interface",
        "authors": "Shuaishuai Tan, Zhiyi Tian, Xiaoxiong Zhong, Shui Yu, Weizhe Zhang, Guozhong Dong",
        "abstract": "Machine learning has been increasingly adopted to detect Android malwares. Most existing studies depend on features in code space such as information flows and API calls. Malware variants would engage these models in a never-ending war. Inspired by the observation that some variants share similar or even identical user interfaces (UIs), this paper explores employing visible UI screenshot as the indicator to build a novel Android malware detection method. To achieve this vision, we built the first Android Application Screenshot Dataset (AnASD) consisting of more than twenty thousand UI screenshots produced by both benign applications and malwares. A thorough analysis was conducted to characterize the dataset, especially the UI difference between benign applications and malwares. Then a set of state of the art deep learning classifiers on AnASD were trained and evaluated. The results of both sim-ilarity measurement and classification performance proved the feasibility to detect Android malwares based on user interfaces. To facilitate the research community, the dataset is free available at https://doi.org/10.6084/m9.figshare.14445768.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "机器学习已经越来越多地被用来检测Android恶意软件。大多数现有的研究依赖于代码空间的特性，如信息流和API调用。恶意软件变种会让这些模型卷入一场永无止境的战争。受观察到的一些变种共享相似甚至相同的用户界面(UI)的启发，本文探索采用可视UI截图作为指标来构建一种新的Android恶意软件检测方法。为了实现这一愿景，我们构建了第一个Android应用程序截图数据集(AnASD ),其中包含由良性应用程序和恶意软件生成的两万多个UI截图。对数据集进行了全面的分析，特别是良性应用程序和恶意软件之间的UI差异。然后在AnASD上训练和评估了一组先进的深度学习分类器。相似性度量和分类性能的结果证明了基于用户界面检测Android恶意软件的可行性。为了方便研究团体，数据集在https://doi.org/10.6084/m9.figshare.14445768.免费提供",
        "title_zh": "一种基于可视化用户界面的Android恶意软件检测方法",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2021.html",
        "conf_title": "20th TrustCom 2021: Shenyang, China",
        "conf_url": "https://doi.org/10.1109/TrustCom53373.2021",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom53373.2021.00115",
        "title": "DroidRadar: Android Malware Detection Based on Global Sensitive Graph Embedding",
        "authors": "Qige Song, Yongzheng Zhang, Junliang Yao",
        "abstract": "Android application markets face severe threats of malware attacks. Existing learning-based malware detection approaches rely on easily obfuscated features or unscalable sophisticated graph analysis techniques. In this paper, we propose DroidRadar, an accurate Android malware detection system based on lightweight graph embedding. The key insight of our method is constructing an entire Android application collection as a global graph schema and using sensitive APIs as bridge nodes to propagate inter-application information. We conduct statistical correlation analysis from different perspectives to model the application's usage pattern of sensitive APIs, then apply graph convolution network (GCN) to perform node embedding and malware detection. We evaluate DroidRadar on large scale datasets spanning nine years. Results show that DroidRadar has an average detection accuracy of 98.57% and a false-positive rate of 1.4 % on different time periods, which outperforms the state-of-the-art approaches, and it has strong robustness when detecting obfuscated malware variants.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android应用市场面临恶意软件攻击的严重威胁。现有的基于学习的恶意软件检测方法依赖于容易混淆的特征或不可扩展的复杂图形分析技术。本文提出了DroidRadar，一种基于轻量级图嵌入的Android恶意软件精确检测系统。我们的方法的关键是构建一个完整的Android应用程序集合作为全局图模式，并使用敏感的API作为桥节点来传播应用程序间的信息。我们从不同的角度进行统计相关性分析，以对敏感API的应用程序使用模式进行建模，然后应用图卷积网络(GCN)来执行节点嵌入和恶意软件检测。我们在历时九年的大规模数据集上评估了DroidRadar。结果表明，DroidRadar在不同时间段的平均检测准确率为98.57%，误报率为1.4 %，优于目前最先进的方法，并且在检测混淆恶意软件变体时具有很强的鲁棒性。",
        "title_zh": "DroidRadar:基于全局敏感图嵌入的Android恶意软件检测",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2021.html",
        "conf_title": "20th TrustCom 2021: Shenyang, China",
        "conf_url": "https://doi.org/10.1109/TrustCom53373.2021",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom53373.2021.00117",
        "title": "ReLF: Scalable Remote Live Forensics for Android",
        "authors": "Ruipeng Zhang, Mengjun Xie, Jiang Bian",
        "abstract": "The world has witnessed the proliferation of mobile technologies as well as smartphone-related cybercrimes in recent years. However, due to high mobility of smartphones and tablets and transient nature of those attacks, previous forensic approaches become inadequate to retrieve forensic data and respond to cybersecurity incidents in time, especially when the investigation involves a large number of mobile devices. In this paper, we propose ReLF 11Source code available at https://github.com/nexus-lab?q=relf, a remote live forensics system for Android smartphones and tablets. ReLF enables forensic investigators to effectively triage operating Android devices and acquire a wide range of forensic artifacts at scale. Compared to existing Android forensic tools that are publicly available, ReLF provides a much more comprehensive set of collectible artifacts and better OS compatibility. Our evaluation results demonstrate that the ReLF client only introduces minor energy overhead to Android devices and that the ReLF server can well handle a large number of Android devices with increasing workload. We also showcase how ReLF can be used in real-world forensic investigation through case studies.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "近年来，世界目睹了移动技术以及与智能手机相关的网络犯罪的激增。然而，由于智能手机和平板电脑的高度移动性以及这些攻击的短暂性，以前的取证方法不足以检索取证数据并及时应对网络安全事件，尤其是在调查涉及大量移动设备的情况下。在本文中，我们提出ReLF源代码可在https://github.com/nexus-lab?q=relf,一个远程现场取证系统的Android智能手机和平板电脑。ReLF使法医调查人员能够有效地对正在操作的Android设备进行分类，并大规模获取各种法医文物。与现有的公开可用的Android取证工具相比，ReLF提供了更全面的可收集工件集和更好的操作系统兼容性。我们的评估结果表明，ReLF客户端只会给Android设备带来很小的能量开销，ReLF服务器可以很好地处理大量工作负载不断增加的Android设备。我们还通过案例研究展示了ReLF如何用于现实世界的法医调查。",
        "title_zh": "ReLF:适用于Android的可扩展远程实时取证",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2021.html",
        "conf_title": "20th TrustCom 2021: Shenyang, China",
        "conf_url": "https://doi.org/10.1109/TrustCom53373.2021",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom53373.2021.00178",
        "title": "Secure Development Strategy Model Framework for Security of Mobile Applications",
        "authors": "Aneta Poniszewska-Maranda, Lukasz Chomatek, Joanna Ochelska-Mierzejewska",
        "abstract": "The growing popularity of mobile technologies and mobile systems, especially Android system, brings many possibilities. Using the mobile application, it is possible to make bank transfers, communicate with patients for applications used in medicine and many others. Popularity, unfortunately, also brings many risks. With the development of the Internet and information technology, the range of opportunities for cyber-criminals has developed. With the increasing popularity of systems and mobile devices, we can also observe an increase in attacks and the number of malicious software targeted for these technologies. The development of the mobile application fulfills more and more important role in the everyday lives of the visibly growing number of smartphone and tablet users, especially from the point of view of security aspects. The paper presents an outline of the proposed secure development model to overcome the existing threats faced by the mobile application developers and its implementation in the form of the mobile security framework.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "移动技术和移动系统的日益普及，尤其是Android系统，带来了许多可能性。使用移动应用程序，可以进行银行转账，与患者交流医疗应用程序和许多其他应用程序。不幸的是，受欢迎也带来许多风险。随着互联网和信息技术的发展，网络犯罪的机会范围也在扩大。随着系统和移动设备的日益普及，我们还可以观察到针对这些技术的攻击和恶意软件数量的增加。移动应用程序的开发在日益增多的智能手机和平板电脑用户的日常生活中扮演着越来越重要的角色，尤其是从安全角度来看。本文概述了提议的安全开发模型，以克服移动应用程序开发人员面临的现有威胁，并以移动安全框架的形式实现了该模型。",
        "title_zh": "移动应用安全的安全开发策略模型框架",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2021.html",
        "conf_title": "20th TrustCom 2021: Shenyang, China",
        "conf_url": "https://doi.org/10.1109/TrustCom53373.2021",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom/BigDataSE.2019.00047",
        "title": "Deep Android Malware Classification with API-Based Feature Graph",
        "authors": "Na Huang, Ming Xu, Ning Zheng, Tong Qiao, Kim-Kwang Raymond Choo",
        "abstract": "The rapid growth of Android malware apps poses a great security threat to users thus it is very important and urgent to detect Android malware effectively. What's more, the increasing unknown malware and evasion technique also call for novel detection method. In this paper, we focus on API feature and develop a novel method to detect Android malware. First, we propose a novel selection method for API feature related with the malware class. However, such API also has a legitimate use in benign app thus causing FP problem (misclassify benign as malware). Second, we further explore structure relationships between these APIs and map to a matrix interpreted as the hand-refined API-based feature graph. Third, a CNN-based classifier is developed for the API-based feature graph classification. Evaluations of a real-world dataset containing 3,697 malware apps and 3,312 benign apps demonstrate that selected API feature is effective for Android malware classification, just top 20 APIs can achieve high F1 of 94.3% under Random Forest classifier. When the available API features are few, classification performance including FPR indicator can achieve effective improvement effectively by complementing our further work.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android恶意软件应用的快速增长给用户带来了巨大的安全威胁，因此有效检测Android恶意软件非常重要和迫切。此外，日益增多的未知恶意软件和规避技术也需要新的检测方法。本文针对API特性，提出了一种新的检测Android恶意软件的方法。首先，我们提出了一种新的与恶意软件类别相关的API特征选择方法。然而，这种API在良性应用程序中也有合法用途，从而导致FP问题(将良性误分类为恶意软件)。其次，我们进一步探索这些API之间的结构关系，并映射到一个矩阵，该矩阵被解释为手工提炼的基于API的特征图。第三，开发了一个基于CNN的分类器，用于基于API的特征图分类。对包含3，697个恶意软件应用和3，312个良性应用的真实世界数据集的评估表明，所选API特征对于Android恶意软件分类是有效的，在随机森林分类器下，仅前20个API就可以达到94.3%的高F1。当可用的API特征较少时，通过补充我们进一步的工作，包括FPR指标在内的分类性能可以得到有效的提高。",
        "title_zh": "基于API特征图的Android恶意软件深度分类",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2019.html",
        "conf_title": "18th TrustCom / 13th BigDataSE 2019: Rotorua, New Zealand",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8883860/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/Trustcom.2015.353",
        "title": "Trust Evaluation in Mobile Devices: An Empirical Study",
        "authors": "Richard S. Weiss, Leon Reznik, Yanyan Zhuang, Andrew Hoffman, Darrell Pollard, Albert Rafetseder, Tao Li, Justin Cappos",
        "abstract": "Mobile devices today, such as smartphones and tablets, have become both more complex and diverse. This paper presents a framework to evaluate the trustworthiness of the individual components in a mobile system, as well as the entire system. The major components are applications, devices and networks of devices. Given this diversity and multiple levels of a mobile system, we develop a hierarchical trust evaluation methodology, which enables the combination of trust metrics and allows us to verify the trust metric for each component based on the trust metrics for others. The paper first demonstrates this idea for individual applications and Android-based smartphones. The methodology involves two stages: initial trust evaluation and trust verification. In the first stage, an expert rule system is used to produce trust metrics at the lowest level of the hierarchy. In the second stage, the trust metrics are verified by comparing data from components and a trust evaluation is produced for the combined system. This paper presents the results of two empirical studies, in which this methodology is applied and tested. The first study involves monitoring resource utilization and evaluating trust based on resource consumption patterns. We measured battery voltage, CPU utilization and network communication for individual apps and detected anomalous behavior that could be indicative of malicious code. The second study involves verification of the trust evaluation by comparing the data from two different devices: the GPS location from an Android smartphone in an automobile and the data from an on-board diagnostics (OBD) sensor of the same vehicle.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "如今，智能手机和平板电脑等移动设备变得更加复杂和多样化。本文提出了一个评估移动系统中各个组件以及整个系统的可信度的框架。主要组件是应用程序、设备和设备网络。考虑到移动系统的多样性和多层次性，我们开发了一种分层的信任评估方法，该方法支持信任度量的组合，并允许我们根据其他组件的信任度量来验证每个组件的信任度量。本文首先为个人应用程序和基于Android的智能手机演示了这一想法。该方法包括两个阶段:初始信任评估和信任验证。在第一阶段，使用专家规则系统在层级的最低层产生信任度量。在第二阶段，通过比较来自组件的数据来验证信任度量，并且为组合系统产生信任评估。本文介绍了两个实证研究的结果，其中应用和测试这种方法。第一项研究涉及监控资源利用和基于资源消耗模式评估信任。我们测量了各个应用程序的电池电压、CPU利用率和网络通信，并检测到可能表明恶意代码的异常行为。第二项研究涉及通过比较来自两个不同设备的数据来验证信任评估:来自汽车中Android智能手机的GPS位置和来自同一辆汽车的车载诊断(OBD)传感器的数据。",
        "title_zh": "移动设备中的信任评估:一项实证研究",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2015-1.html",
        "conf_title": "TrustCom/BigDataSE/ISPA 2015: Helsinki, Finland - Volume 1",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7293439/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/Trustcom.2015.358",
        "title": "JoKER: Trusted Detection of Kernel Rootkits in Android Devices via JTAG Interface",
        "authors": "Mordechai Guri, Yuri Poliak, Bracha Shapira, Yuval Elovici",
        "abstract": "Smartphones and tablets have become prime targets for malware, due to the valuable private and corporate information they hold. While Anti-Virus (AV) program may successfully detect malicious applications (apps), they remain ineffective against low-level rootkits that evade detection mechanisms by masking their own presence. Furthermore, any detection mechanism run on the same physical device as the monitored OS can be compromised via application, kernel or boot-loader vulnerabilities. Consequentially, trusted detection of kernel rootkits in mobile devices is a challenging task in practice. In this paper we present 'JoKER' - a system which aims at detecting rootkits in the Android kernel by utilizing the hardware's Joint Test Action Group (JTAG) interface for trusted memory forensics. Our framework consists of components that extract areas of a kernel's memory and reconstruct it for further analysis. We present the overall architecture along with its implementation, and demonstrate that the system can successfully detect the presence of stealthy rootkits in the kernel. The results show that although JTAG's main purpose is system testing, it can also be used for malware detection where traditional methods fail.",
        "files": {
            "openAccessPdf": "http://arxiv.org/pdf/1512.04116"
        },
        "abstract_zh": "智能手机和平板电脑已经成为恶意软件的主要目标，因为它们拥有宝贵的私人和企业信息。虽然反病毒(AV)程序可以成功地检测恶意应用程序(app ),但是它们对于通过掩盖自身存在来逃避检测机制的低级rootkits仍然是无效的。此外，在与受监控操作系统相同的物理设备上运行的任何检测机制都可能通过应用程序、内核或引导加载程序漏洞受到危害。因此，移动设备中内核rootkits的可信检测在实践中是一项具有挑战性的任务。在本文中，我们介绍了“JoKER”——一个旨在通过利用硬件的联合测试行动小组(JTAG)接口进行可信内存取证来检测Android内核中的rootkits的系统。我们的框架由一些组件组成，这些组件提取内核的内存区域，并对其进行重构以供进一步分析。我们提出了整体架构及其实现，并证明了该系统可以成功地检测到内核中的秘密rootkits的存在。结果表明，虽然JTAG的主要目的是系统测试，但它也可以用于传统方法失败的恶意软件检测。",
        "title_zh": "JoKER:通过JTAG界面可信地检测Android设备中的内核Rootkits",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2015-1.html",
        "conf_title": "TrustCom/BigDataSE/ISPA 2015: Helsinki, Finland - Volume 1",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7293439/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/Trustcom.2015.373",
        "title": "Identifying Unknown Android Malware with Feature Extractions and Classification Techniques",
        "authors": "Ludovic Apvrille, Axelle Apvrille",
        "abstract": "Android malware unfortunately have little difficulty to sneak in marketplaces. While known malware and their variants are nowadays quite well detected by antivirus scanners, new unknown malware, which are fundamentally different from others (e.g. \"0-day\"), remain an issue. To discover such new malware, the SherlockDroid framework filters masses of applications and only keeps the most likely to be malicious for future inspection by antivirus teams. Apart from crawling applications from marketplaces, SherlockDroid extracts code-level features, and then classifies unknown applications with Alligator. Alligator is a classification tool that efficiently and automatically combines several classification algorithms. To demonstrate the efficiency of our approach, we have extracted properties and classified over 600,000 applications during two crawling campaigns in July 2014 and October 2014, with the detection of one new malware, Android/Odpa.A!tr.spy, and two new riskware. With other findings, this increases SherlockDroid's \"Hall of Shame\" to 9 totally unknown malware and potentially unwanted applications.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "不幸的是，Android恶意软件很容易潜入市场。虽然已知的恶意软件及其变体如今可以被反病毒扫描器很好地检测到，但是与其他恶意软件(例如“0-day”)根本不同的新的未知恶意软件仍然是一个问题。为了发现这种新的恶意软件，SherlockDroid框架过滤大量的应用程序，只保留最有可能是恶意的，供防病毒团队将来检查。除了从市场中抓取应用程序，SherlockDroid还提取代码级特征，然后用鳄鱼对未知应用程序进行分类。Alligator是一个分类工具，它有效地自动结合了几种分类算法。为了证明我们方法的效率，我们在2014年7月和2014年10月的两次爬行活动中提取了超过600，000个应用的属性并进行分类，同时检测到一种新的恶意软件Android/Odpa。答！tr.spy和两个新的风险软件。随着其他发现，这将SherlockDroid的“耻辱堂”增加到9个完全未知的恶意软件和潜在的不需要的应用程序。",
        "title_zh": "利用特征提取和分类技术识别未知Android恶意软件",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2015-1.html",
        "conf_title": "TrustCom/BigDataSE/ISPA 2015: Helsinki, Finland - Volume 1",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7293439/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/Trustcom.2015.375",
        "title": "Efficient Detection of Zero-day Android Malware Using Normalized Bernoulli Naive Bayes",
        "authors": "Luiza Sayfullina, Emil Eirola, Dmitry Komashinsky, Paolo Palumbo, Yoan Miché, Amaury Lendasse, Juha Karhunen",
        "abstract": "According to a recent F-Secure report, 97% of mobile malware is designed for the Android platform which has a growing number of consumers. In order to protect consumers from downloading malicious applications, there should be an effective system of malware classification that can detect previously unseen viruses. In this paper, we present a scalable and highly accurate method for malware classification based on features extracted from Android application package (APK) files. We explored several techniques for tackling independence assumptions in Naive Bayes and proposed Normalized Bernoulli Naive Bayes classifier that resulted in an improved class separation and higher accuracy. We conducted a set of experiments on an up-to-date large dataset of APKs provided by F-Secure and achieved 0.1% false positive rate with overall accuracy of 91%.",
        "files": {
            "openAccessPdf": "https://users.ics.aalto.fi/sayfull1/android_malware_classification.pdf"
        },
        "abstract_zh": "根据最近的一份F-Secure报告，97%的移动恶意软件是为Android平台设计的，该平台的消费者越来越多。为了保护消费者不下载恶意应用程序，应该有一个有效的恶意软件分类系统，可以检测到以前未发现的病毒。本文提出了一种基于从安卓应用包(APK)文件中提取特征的可扩展的高精度恶意软件分类方法。我们探索了几种处理朴素贝叶斯中独立性假设的技术，并提出了归一化的伯努利朴素贝叶斯分类器，它导致了改进的类分离和更高的准确性。我们在F-Secure提供的最新大规模APKs数据集上进行了一系列实验，取得了0.1%的误报率和91%的总准确率。",
        "title_zh": "基于归一化伯努利朴素贝叶斯的零日Android恶意软件高效检测",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2015-1.html",
        "conf_title": "TrustCom/BigDataSE/ISPA 2015: Helsinki, Finland - Volume 1",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7293439/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/Trustcom.2015.376",
        "title": "A First Look at Android Malware Traffic in First Few Minutes",
        "authors": "Zhenxiang Chen, Hongbo Han, Qiben Yan, Bo Yang, Lizhi Peng, Lei Zhang, Jin Li",
        "abstract": "With the advent of mobile era, mobile terminals are going through a trend of surpassing PC to become the most popular computing device. Meanwhile, the hackers and viruswriters are paying close attention to the mobile terminals, especially the Android platform. The growing of malwares on the Android system has drawn attentions from both the academia and security industry. Recently, mobile network traffic analysis has been used to identify the malware. But due to the lack of a large-scale malware repository and a systematic analysis of network traffic features, the existing research mostly remain in theory. In this paper, we design an Android malware traffic behavior monitoring scheme to capture traffic data generated by malware samples in a real Internet environment. We capture the network traffic from 5560 malware samples in the first 5 minutes, and analyze the major compositions of the traffic data. We discover that HTTP and DNS traffic are accounted for more than 99% on the application layer traffic. We then present an analysis of related network features: DNS query, HTTP packet length, ratio of downlink to uplink traffic amount, HTTP request and Ad traffic feature. Our statistical results illustrate that: (1) more than 70% malwares generate malicious traffic in the first 5 minutes, (2) DNS query and HTTP request can be used to identify the malware, and the detection rate reaches 69.55% and 40.89% respectively, (3) Ad traffic can greatly affect the malware detection. We believe our research provides an in-depth analysis into mobile malwares' network behaviors.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "随着移动时代的到来，移动终端正在经历超越PC成为最受欢迎的计算设备的趋势。与此同时，黑客和病毒作者正在密切关注移动终端，尤其是Android平台。Android系统上恶意软件的增长引起了学术界和安全行业的关注。最近，移动网络流量分析已被用于识别恶意软件。但是由于缺乏大规模的恶意软件知识库和对网络流量特征的系统分析，现有的研究大多停留在理论上。在本文中，我们设计了一个Android恶意软件流量行为监测方案，以捕获真实互联网环境中恶意软件样本产生的流量数据。我们在前5分钟内从5560个恶意软件样本中捕获网络流量，并分析流量数据的主要组成部分。我们发现HTTP和DNS流量占应用层流量的99%以上。然后，我们对相关的网络特征进行分析:DNS查询、HTTP数据包长度、下行链路与上行链路流量的比率、HTTP请求和Ad流量特征。我们的统计结果表明:(1)超过70%的恶意软件在前5分钟内产生恶意流量；(2)DNS查询和HTTP请求可以用来识别恶意软件，检测率分别达到69.55%和40.89%；(3)广告流量对恶意软件检测有很大影响。我们相信我们的研究提供了对移动恶意软件网络行为的深入分析。",
        "title_zh": "最初几分钟内对Android恶意软件流量的初步观察",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2015-1.html",
        "conf_title": "TrustCom/BigDataSE/ISPA 2015: Helsinki, Finland - Volume 1",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7293439/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/Trustcom.2015.377",
        "title": "Fast Identification of Obfuscation and Mobile Advertising in Mobile Malware",
        "authors": "Marián Kühnel, Manfred Smieschek, Ulrike Meyer",
        "abstract": "The presence of mobile malware on Android devices is indisputable. For static analysis of mobile malware, the nature of the source code is of particular interest as it determines the amount of resources required for an in-depth analysis. On the one hand, the more obfuscation is used in the code, the more time is needed for static analysis. On the other hand, correct identification of various benign third party libraries can considerably speed up static analysis as these libraries can be omitted. In this paper we focus on very fast identification of Identifier renaming, Reflection, Encryption, and mobile Advertising (IREA) in mobile malware. We propose heuristics for detecting IREA in mobile malware and provide a chronological quantitative analysis of IREA in mobile malware gathered between October 2009 and July 2014. The chronological quantitative analysis reveals general facts about the evolution of mobile malware, e.g. that identifier renaming is still on the rise, reflection hit its peak in 2012 and that more than 10% of mobile malware employ third party libraries for mobile advertising and encryption purposes.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android设备上存在移动恶意软件是不争的事实。对于移动恶意软件的静态分析，源代码的性质尤其重要，因为它决定了深入分析所需的资源量。一方面，代码中使用的模糊处理越多，静态分析所需的时间就越多。另一方面，正确识别各种良性第三方库可以大大加快静态分析，因为这些库可以被省略。在本文中，我们重点研究如何快速识别移动恶意软件中的标识符重命名、反射、加密和移动广告(IREA)。我们提出了检测移动恶意软件中IREA的启发式方法，并提供了2009年10月至2014年7月期间收集的移动恶意软件中IREA的时序定量分析。按时间顺序排列的定量分析揭示了移动恶意软件演变的一般事实，例如，标识符重命名仍在增加，反射在2012年达到顶峰，超过10%的移动恶意软件出于移动广告和加密目的使用第三方库。",
        "title_zh": "快速识别移动恶意软件中的混淆和移动广告",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2015-1.html",
        "conf_title": "TrustCom/BigDataSE/ISPA 2015: Helsinki, Finland - Volume 1",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7293439/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/Trustcom.2015.401",
        "title": "Transparent Page-Based Kernel and User Space Execution Tracing from a Custom Minimal ARM Hypervisor",
        "authors": "Julian Horsch, Sascha Wessel",
        "abstract": "In this paper, we present a framework for transparent kernel and user execution tracing from a minimal ARM hypervisor. The framework utilizes hardware-supported virtualization on modern ARM CPUs to restrict the number of executable pages in the system without interfering with the traced guest. The resulting page faults give the framework access to page-granular control flow information. The framework is transparent and agnostic to kernel and user space software not requiring any changes or additional components in the traced guest. The application scenarios for the framework include malware analysis, malware detection and runtime integrity protection. We furthermore present a detailed example application for the framework which uses the provided trace data to enforce a particular page-granular control flow to defend the guest against control flow hijacking attacks like return-oriented programming. The detailed performance analysis of our prototype implementation running on a Cortex-A15 development board with Android shows that the framework and the example application perform well even in adverse benchmarking scenarios. Therefore, the framework not only can be useful for realizing virtualization-based security mechanisms known and researched on x86 platforms for ARM, but also shows that the very lightweight ARM hardware virtualization support allows for new mechanisms relying on very frequent interaction with the hypervisor.",
        "files": {
            "openAccessPdf": "http://publica.fraunhofer.de/bitstreams/4de1def0-67ba-4463-b519-15fafa788866/download"
        },
        "abstract_zh": "在本文中，我们提出了一个从最小的ARM虚拟机管理程序透明的内核和用户执行跟踪框架。该框架利用现代ARM CPUs上硬件支持的虚拟化来限制系统中可执行页面的数量，而不会干扰被跟踪的客户。产生的页面错误使框架能够访问页面粒度的控制流信息。该框架对内核和用户空间软件是透明的和不可知的，不需要被跟踪的客户中的任何改变或附加组件。该框架的应用场景包括恶意软件分析、恶意软件检测和运行时完整性保护。此外，我们还提供了该框架的一个详细的示例应用程序，它使用提供的跟踪数据来实施特定的页面粒度控制流，以保护访客免受控制流劫持攻击，如面向返回的编程。我们的原型实现在运行Android的Cortex-A15开发板上运行，详细的性能分析表明，该框架和示例应用即使在不利的基准测试场景中也表现良好。因此，该框架不仅可用于实现在x86平台上为ARM所知和研究的基于虚拟化的安全机制，还表明非常轻量级的ARM硬件虚拟化支持允许依赖于与管理程序的非常频繁的交互的新机制。",
        "title_zh": "来自定制的最小ARM虚拟机管理程序的透明的基于页面的内核和用户空间执行跟踪",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2015-1.html",
        "conf_title": "TrustCom/BigDataSE/ISPA 2015: Helsinki, Finland - Volume 1",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7293439/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/Trustcom.2015.466",
        "title": "CaptureMe: Attacking the User Credential in Mobile Banking Applications",
        "authors": "Mohamed Ali El-Serngawy, Chamseddine Talhi",
        "abstract": "Recently, the wide use of smart devices (phones and tablets) encourage financial institution to consider mobile banking applications as a necessity service to their clients. In this paper, we propose a screenshot attack \"CaptureMe\" to investigate the security risks of the password visibility feature on Android platform with the mobile banking applications. In CaptureMe attack we used different known techniques to take screenshot images and we applied highly efficient Optical Character Recognition (OCR) analysis using tesseract-ocr engine to extract the user credential from the taken screenshot images. We also explore the possible protection mechanisms against CaptureMe with more than 130 mobile banking applications exist in Google play store.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "最近，智能设备(手机和平板电脑)的广泛使用促使金融机构将移动银行应用视为其客户的必要服务。提出一种截图攻击\" CaptureMe \",研究Android平台上手机银行应用的密码可见性的安全风险。在CaptureMe攻击中，我们使用不同的已知技术来拍摄屏幕截图图像，并使用tesseract-ocr引擎应用高效的光学字符识别(OCR)分析来从拍摄的屏幕截图图像中提取用户凭证。我们还探索了针对CaptureMe的可能保护机制，Google play商店中有超过130个移动银行应用程序。",
        "title_zh": "CaptureMe:攻击移动银行应用程序中的用户凭证",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2015-1.html",
        "conf_title": "TrustCom/BigDataSE/ISPA 2015: Helsinki, Finland - Volume 1",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7293439/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/Trustcom.2015.474",
        "title": "A Dynamic Credible Factory Reset Mechanism of Personal Data in Android Device",
        "authors": "Dali Zhu, Zheming Fan, Na Pang",
        "abstract": "Due to plenty of confidential and private information stored on the phone, the security of it has become more prominent increasingly. The private information storing on Android devices can be recovered easily even if it is reset by traditional data factory reset process. It is extremely unsafe and unreliable especially for the phone lent to others. In this paper, we proposed a dynamic credible factory mechanism of personal data in Android device to protect privacy. Not only it can allow users to factory reset the system quickly and safely, but it also thoroughly crushes application data files while applications are not deleted. The mechanism is based on a private file recognition algorithm that checks the properties of file tree dynamically proposed in the paper and credible erase on data blocks pointed from special inode of private files on the flash storage under the condition of no remounting and no rebooting. It aims to provide a more secure, fast crush method in Android system to prevent individual private data being recovered maliciously. We implemented our credible factory mechanism to evaluate their performance.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "由于手机上存储了大量的机密和私人信息，手机的安全性日益突出。存储在Android设备上的私人信息可以很容易地恢复，即使它是由传统的数据工厂重置过程重置。这是非常不安全和不可靠的，尤其是借给别人的手机。本文提出了一种在Android设备中保护隐私的个人数据动态可信工厂机制。它不仅可以让用户快速安全地将系统重置为出厂设置，还可以在不删除应用程序的情况下彻底粉碎应用程序数据文件。该机制基于本文提出的动态检查文件树属性的私有文件识别算法，以及在不重装和不重启的情况下对闪存上私有文件的特定索引节点指向的数据块进行可信擦除。旨在Android系统中提供一种更加安全、快速的粉碎方法，防止个人隐私数据被恶意恢复。我们实施了可信的工厂机制来评估他们的表现。",
        "title_zh": "Android设备中个人数据的动态可信工厂重置机制",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2015-1.html",
        "conf_title": "TrustCom/BigDataSE/ISPA 2015: Helsinki, Finland - Volume 1",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7293439/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/Trustcom.2015.477",
        "title": "DroidCIA: A Novel Detection Method of Code Injection Attacks on HTML5-Based Mobile Apps",
        "authors": "Yen-Lin Chen, Hahn-Ming Lee, Albert B. Jeng, Te-En Wei",
        "abstract": "Smartphones have become more and more popular recently. There are many different smartphone systems, such as Android, iOS, etc. Based on HTML5, now developers can have a convenient framework to develop cross-platform HTML5- based mobile apps. Unfortunately, HTML5-based apps are also susceptible to cross-site scripting attacks like most web applications. Attackers can inject malicious scripts from many different injection channels. In this paper, we propose a new way to detect a known malicious script injected by using HTML5 text box input type along with \"document.getElementById(\"TagID\").value\". This new text box injection channel was not detected by other researchers so far because they only analyzed JavaScript APIs, but overlooked HTML files which captured text box input type information. Later, we applied this new method to a vulnerable app set with 8303 cases obtained from Google Play. We detected a total of 351 vulnerable apps with accuracy 99%, which included 347 detected also by other researchers as well as 4 extra vulnerable apps that belonged to this text box injection channel. We also implemented a Code Injection Attack detection tool named DroidCIA that automated the drawing of JavaScript API call graph and the combination of API with HTML information.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "智能手机最近越来越受欢迎。有许多不同的智能手机系统，如Android、iOS等。基于HTML5，现在开发者可以有一个方便的框架来开发跨平台的基于HTML5的移动应用。不幸的是，像大多数web应用程序一样，基于HTML5的应用程序也容易受到跨站点脚本攻击。攻击者可以从许多不同的注入渠道注入恶意脚本。在本文中，我们提出了一种新的方法来检测通过使用HTML5文本框输入类型以及“document . getelementbyid(“TagID”)注入的已知恶意脚本。值”。到目前为止，其他研究人员没有检测到这个新的文本框注入通道，因为他们只分析了JavaScript APIs，而忽略了捕获文本框输入类型信息的HTML文件。后来，我们将这种新方法应用于一个有漏洞的应用程序集，该应用程序集包含从Google Play获得的8303个案例。我们总共检测到351个易受攻击的应用程序，准确率为99%，其中包括其他研究人员检测到的347个应用程序以及属于该文本框注入通道的4个额外易受攻击的应用程序。我们还实现了一个名为DroidCIA的代码注入攻击检测工具，它可以自动绘制JavaScript API调用图，并将API与HTML信息相结合。",
        "title_zh": "DroidCIA:一种新的基于HTML5的移动应用程序代码注入攻击检测方法",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2015-1.html",
        "conf_title": "TrustCom/BigDataSE/ISPA 2015: Helsinki, Finland - Volume 1",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7293439/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/Trustcom.2015.482",
        "title": "A Review of Free Cloud-Based Anti-Malware Apps for Android",
        "authors": "Jason Walls, Kim-Kwang Raymond Choo",
        "abstract": "The traditional way of protecting a system against malicious threats and loss of personal data by using locally installed anti-malware software is unlikely to work on mobile devices due to the changing threat landscape and the mobile device resource limitations (e.g. storage and battery life). A number of anti-malware providers have migrated to the cloud where the computationally demanding tasks of analyzing malware is conducted by cloud-based server. However, the effectiveness of these anti-mobile apps has not been studied. Therefore, in this paper, we evaluate the effectiveness of ten popular free cloud-based anti-malware apps using a known Android malware dataset. We hope that this research will contribute towards a better understanding of the effectiveness of Android cloud-based anti-malware apps.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "由于不断变化的威胁形势和移动设备资源限制(例如存储和电池寿命)，通过使用本地安装的反恶意软件来保护系统免受恶意威胁和个人数据丢失的传统方式不太可能在移动设备上工作。许多反恶意软件提供商已经迁移到云中，在云中，分析恶意软件的计算要求很高的任务由基于云的服务器执行。然而，这些反移动应用的有效性尚未得到研究。因此，在本文中，我们使用一个已知的Android恶意软件数据集来评估十个流行的免费基于云的反恶意软件应用的有效性。我们希望这项研究将有助于更好地理解Android基于云的反恶意软件应用的有效性。",
        "title_zh": "安卓免费云反恶意软件应用综述",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2015-1.html",
        "conf_title": "TrustCom/BigDataSE/ISPA 2015: Helsinki, Finland - Volume 1",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7293439/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/Trustcom.2015.483",
        "title": "Forensic Collection and Analysis of Thumbnails in Android",
        "authors": "Ming Di Leom, Christian Javier D'Orazio, Gaye Deegan, Kim-Kwang Raymond Choo",
        "abstract": "JPEG thumbnail images are of interest in forensic investigations as images from the thumbnail cache could be intact even when the original pictures have been deleted. In addition, a deleted thumbnail is less likely to be fragmented due to its small size. The focus of existing literature is generally on the desktop environment. Considering the increasing capability of smart mobile devices, particularly Android devices, to take pictures and videos on the go, it is important to understand how thumbnails can be collected from these devices. In this paper, we examine and describe the various thumbnail sources in Android devices and propose a methodology for thumbnail collection and analysis from Android devices. We also demonstrate the utility of our proposed methodology using a case study (e.g. thumbnails could be recovered even when the file system is heavily fragmented). Our findings also indicate that collective information obtained from the recovered fragmented JPEG image (e.g. metadata) and the thumbnail could be akin to recovering the full image for forensic purposes.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "JPEG缩略图在法庭调查中很有意义，因为即使原始图片已被删除，缩略图缓存中的图像也可能完好无损。此外，被删除的缩略图由于其较小的尺寸而不太可能被分割。现有文献的焦点通常集中在桌面环境上。考虑到智能移动设备(尤其是Android设备)在旅途中拍摄照片和视频的能力越来越强，了解如何从这些设备中收集缩略图非常重要。在本文中，我们检查和描述了Android设备中的各种缩略图源，并提出了一种从Android设备中收集和分析缩略图的方法。我们还使用案例研究展示了我们提出的方法的实用性(例如，即使在文件系统严重碎片化的情况下，缩略图也可以恢复)。我们的发现还表明，从恢复的片段JPEG图像(例如，元数据)和缩略图获得的集体信息可以类似于恢复完整的图像用于法医目的。",
        "title_zh": "Android中缩略图的取证收集和分析",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2015-1.html",
        "conf_title": "TrustCom/BigDataSE/ISPA 2015: Helsinki, Finland - Volume 1",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7293439/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/Trustcom.2015.488",
        "title": "Android Cache Taxonomy and Forensic Process",
        "authors": "Felix Immanuel, Ben Martini, Kim-Kwang Raymond Choo",
        "abstract": "Android is one of the most popular and widely used mobile operating systems and one of the most actively researched products in the field of mobile forensics. However, analysis of Android caches has been, to date, an understudied research topic, which limits its potential use in forensic investigations. Due to the diversity of cache formats on Android, we propose a cache taxonomy based on app usage. Using this taxonomy as a base, a systematic process, known as the Android Cache Forensic Process, is proposed to forensically classify, extract and analyze Android caches. Various cache formats utilized by 11 popular Android apps are analyzed. As part of this analysis, a number of cache formats are decoded and several cache formats commonly used by Android apps are documented from a forensic perspective. Based on our technical findings, an Android Cache Viewer prototype was also developed. This prototype is able to decode a number of Android cache formats and display the contents in an accessible manner.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android是最受欢迎和使用最广泛的移动操作系统之一，也是移动取证领域研究最活跃的产品之一。然而，迄今为止，对Android缓存的分析一直是一个研究不足的研究课题，这限制了它在法医调查中的潜在用途。由于Android上缓存格式的多样性，我们提出了一种基于应用使用的缓存分类方法。使用这种分类法作为基础，提出了一种称为Android缓存取证过程的系统化过程来对Android缓存进行取证分类、提取和分析。分析了11个流行的Android应用程序使用的各种缓存格式。作为该分析的一部分，许多缓存格式被解码，并且从取证的角度记录了Android应用程序常用的几种缓存格式。基于我们的技术发现，还开发了一个Android缓存查看器原型。这个原型能够解码许多Android缓存格式，并以一种可访问的方式显示内容。",
        "title_zh": "Android缓存分类和取证流程",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2015-1.html",
        "conf_title": "TrustCom/BigDataSE/ISPA 2015: Helsinki, Finland - Volume 1",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7293439/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/Trustcom.2015.494",
        "title": "Preventing Library Spoofing on Android",
        "authors": "Dennis Titze, Julian Schütte",
        "abstract": "Dynamic loading of libraries is a widely used technique in Android applications. But including and executing external library code does not only have benefits, it can have severe detrimental security implications for the application and the user. In this paper we explain the mechanisms of loading external library code into an Android application and discuss resulting security implications. Since an attacker can easily impersonate libraries if the application does not perform the necessary verification, loading such code can introduce severe security problems. As a remedy, we present how external code can be verified and since currently available application often do not perform such verification, we introduce a novel way to enforce this verification. A prototype of this system has been published as open-source which can be easily integrated into existing apps and libraries.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "动态加载库是Android应用程序中广泛使用的技术。但是，包含和执行外部库代码不仅有好处，还会给应用程序和用户带来严重的安全隐患。在本文中，我们解释了将外部库代码加载到Android应用程序中的机制，并讨论了由此带来的安全隐患。因为如果应用程序不执行必要的验证，攻击者可以很容易地模拟库，所以加载这样的代码会带来严重的安全问题。作为一种补救措施，我们介绍了如何验证外部代码，由于当前可用应用程序通常不执行这种验证，我们引入了一种新的方法来实施这种验证。该系统的原型已经作为开源软件发布，可以很容易地集成到现有的应用程序和库中。",
        "title_zh": "防止Android上的库欺骗",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2015-1.html",
        "conf_title": "TrustCom/BigDataSE/ISPA 2015: Helsinki, Finland - Volume 1",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7293439/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/Trustcom.2015.535",
        "title": "From ZeuS to Zitmo: Trends in Banking Malware",
        "authors": "Najla Etaher, George R. S. Weir, Mamoun Alazab",
        "abstract": "In the crimeware world, financial botnets are a global threat to banking organizations. Such malware purposely performs financial fraud and steals critical information from clients' computers. A common example of banking malware is the ZeuS botnet. Recently, variants of this malware have targeted mobile platforms, as The-ZeuS-in-the-Mobile or Zitmo. With the rise in mobile systems, platform security is becoming a major concern across the mobile world, with rising incidence of compromising Android devices. In similar vein, there have been mobile botnet attacks on iPhones, Blackberry and Symbian devices. In this setting, we report on trends and developments of ZeuS and its variants.",
        "files": {
            "openAccessPdf": "https://strathprints.strath.ac.uk/54485/1/Etaher_etal_IEEE_TrustCom_2015_From_ZeuS_to_Zitmo_Trends_in_banking.pdf"
        },
        "abstract_zh": "在犯罪软件领域，金融僵尸网络是对银行组织的全球性威胁。这种恶意软件故意进行金融欺诈，并从客户的计算机中窃取关键信息。银行业恶意软件的一个常见例子是宙斯僵尸网络。最近，这种恶意软件的变种已经瞄准了移动平台，如移动宙斯或Zitmo。随着移动系统的兴起，平台安全正成为整个移动世界的一个主要问题，危及Android设备的事件不断增加。同样，iPhones、黑莓和Symbian设备也遭到了移动僵尸网络攻击。在这种背景下，我们报告宙斯和它的变种的趋势和发展。",
        "title_zh": "从ZeuS到Zitmo:银行业恶意软件趋势",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2015-1.html",
        "conf_title": "TrustCom/BigDataSE/ISPA 2015: Helsinki, Finland - Volume 1",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7293439/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/Trustcom/BigDataSE/ICESS.2017.215",
        "title": "Practical Application-Level Dynamic Taint Analysis of Android Apps",
        "authors": "Julian Schütte, Alexander Küchler, Dennis Titze",
        "abstract": "Dynamic taint analysis traces data flows in applications at runtime and allows detection and consequently prevention of flow-based vulnerabilities, such as data leaks or injection attacks. While dynamic taint analysis spanning all components of the stack is potentially more precise, it requires adaptations of components across the OS stack and thus does not allow to analyze applications in their real runtime environment. In this paper, we introduce a dynamic taint analysis framework for Android applications which injects a taint analysis directly into an application's bytecode and can thus operate on any stock Android platform. Our approach is more precise than previous ones, copes with flow-aware source and sink definitions, and propagates data flows across process boundaries, including propagation over file I/O and inter process communication. We explain how our framework performs with popular apps from the Google Play Store and show that it achieves a precision which is comparable to the most precise platform-level tainting framework.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "动态污点分析在运行时跟踪应用程序中的数据流，并允许检测和预防基于流的漏洞，如数据泄漏或注入攻击。虽然跨堆栈所有组件的动态污点分析可能更精确，但它需要跨OS堆栈的组件的适应，因此不允许在应用的真实运行时环境中分析应用。在本文中，我们介绍了一个用于Android应用程序的动态污点分析框架，它将污点分析直接注入到应用程序的字节码中，因此可以在任何Android平台上运行。我们的方法比以前的方法更精确，处理流感知的源和接收器定义，并跨进程边界传播数据流，包括通过文件I/O和进程间通信的传播。我们解释了我们的框架如何与谷歌Play商店的流行应用程序一起执行，并表明它达到了与最精确的平台级污染框架相当的精度。",
        "title_zh": "Android应用程序的实际应用级动态污点分析",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2017.html",
        "conf_title": "16th TrustCom / 11th BigDataSE / 14th ICESS 2017: Sydney, Australia",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8027145/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/Trustcom/BigDataSE/ICESS.2017.230",
        "title": "SimiDroid: Identifying and Explaining Similarities in Android Apps",
        "authors": "Li Li, Tegawendé F. Bissyandé, Jacques Klein",
        "abstract": "App updates and repackaging are recurrent in the Android ecosystem, filling markets with similar apps that must be identified and analysed to accelerate user adoption, improve development efforts, and prevent malware spreading. Despite the existence of several approaches to improve the scalability of detecting repackaged/cloned apps, researchers and practitioners are eventually faced with the need for a comprehensive pairwise comparison to understand and validate the similarities among apps. This paper describes the design of SimiDroid, a framework for multi-level comparison of Android apps. SimiDroid is built with the aim to support the understanding of similarities/changes among app versions and among repackaged apps. In particular, we demonstrate the need and usefulness of such a framework based on different case studies implementing different analysing scenarios for revealing various insights on how repackaged apps are built. We further show that the similarity comparison plugins implemented in SimiDroid yield more accurate results than the state-of-the-art.",
        "files": {
            "openAccessPdf": "https://orbilu.uni.lu/bitstream/10993/31644/1/li2017simidroid.pdf"
        },
        "abstract_zh": "应用程序更新和重新打包在Android生态系统中反复出现，市场上充斥着类似的应用程序，必须对这些应用程序进行识别和分析，以加速用户采用，改善开发工作，并防止恶意软件传播。尽管存在几种方法来提高检测重新打包/克隆的应用程序的可扩展性，但研究人员和实践者最终都需要进行全面的成对比较，以了解和验证应用程序之间的相似性。本文描述了一个用于Android应用多层次比较的框架SimiDroid的设计。SimiDroid旨在支持理解应用程序版本之间以及重新打包的应用程序之间的相似性/变化。特别是，我们证明了这样一个框架的必要性和有效性，该框架基于不同的案例研究，实施不同的分析方案，以揭示关于如何构建重新打包的应用程序的各种见解。我们进一步展示了在SimiDroid中实现的相似性比较插件产生了比现有技术更准确的结果。",
        "title_zh": "SimiDroid:识别和解释Android应用程序中的相似之处",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2017.html",
        "conf_title": "16th TrustCom / 11th BigDataSE / 14th ICESS 2017: Sydney, Australia",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8027145/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/Trustcom/BigDataSE/ICESS.2017.232",
        "title": "TransCrypt: Transparent Main Memory Encryption Using a Minimal ARM Hypervisor",
        "authors": "Julian Horsch, Manuel Huber, Sascha Wessel",
        "abstract": "Attacks on memory, revealing secrets, for example, via DMA or cold boot, are a long known problem. In this paper, we present TransCrypt, a concept for transparent and guest-agnostic, dynamic kernel and user main memory encryption using a custom minimal hypervisor. The concept utilizes the address translation features provided by hardware-based virtualization support of modern CPUs to restrict the guest to a small working set of recently accessed physical pages. The rest of the pages, which constitute the majority of memory, remain securely encrypted. Furthermore, we present a transparent and guest-agnostic mechanism for recognizing pages to be excluded from encryption to still ensure correct system functionality, for example, for pages shared with peripheral devices. The detailed evaluation using our fully functional prototype on an ARM Cortex-A15 development board running Android shows that TransCrypt is able to effectively protect secrets in memory while keeping the performance impact small. For example, the system is able to keep the E-mail account password of a typical user in the Android mail app's memory encrypted 98.99% of the time, while still reaching 81.7% and 99.8% of native performance in different benchmarks.",
        "files": {
            "openAccessPdf": "http://publica.fraunhofer.de/bitstreams/46c43e05-4cac-4b8a-b063-91804a755ad4/download"
        },
        "abstract_zh": "通过DMA或冷启动等方式攻击内存、泄露机密是一个众所周知的问题。在本文中，我们介绍了TransCrypt，这是一个透明的、来宾不可知的、动态的内核和用户主内存加密的概念，它使用一个定制的最小虚拟机管理程序。该概念利用现代CPU的基于硬件的虚拟化支持所提供的地址转换功能，将访客限制在最近访问的物理页面的一个小工作集内。其余的页面构成了内存的大部分，仍然是安全加密的。此外，我们提出了一种透明的、与客户无关的机制，用于识别要从加密中排除的页面，以仍然确保正确的系统功能，例如，对于与外围设备共享的页面。在运行Android的ARM Cortex-A15开发板上使用我们的全功能原型进行的详细评估表明，TransCrypt能够有效地保护内存中的秘密，同时保持较小的性能影响。例如，该系统能够在98.99%的时间内将典型用户的电子邮件帐户密码加密保存在Android mail应用程序的内存中，同时在不同的基准测试中仍然达到81.7%和99.8%的原生性能。",
        "title_zh": "TransCrypt:使用最小ARM虚拟机管理程序的透明主内存加密",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2017.html",
        "conf_title": "16th TrustCom / 11th BigDataSE / 14th ICESS 2017: Sydney, Australia",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8027145/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/Trustcom/BigDataSE/ICESS.2017.237",
        "title": "CSCdroid: Accurately Detect Android Malware via Contribution-Level-Based System Call Categorization",
        "authors": "Shaofeng Zhang, Xi Xiao",
        "abstract": "The detection of the malicious application or malware on Android platform is a very concerned issue. Many studies have demonstrated their effect from static property analysis and dynamic analysis. However, their accuracy and efficacy still cannot satisfy the demand. In this paper, we propose CSCdroid, an accurate malware detection approach for Android via contribution-level-based system call (SC) categorization. Different from existing works, which use all SCs to construct feature vectors so as to determine the security of applications, CSCdroid first introduces a concept named contribution to quantitatively evaluate SCs relevance for malware identification. Based on the contribution level, CSCdroid can categorize SCs into two types, determinate SCs and normal SCs. Eventually, CSCdroid builds a Markov chain by replacing all normal SCs with one specific SC in the SC sequence. Then it constructs the target feature vector from the probability matrix and use the Support Vector Machine (SVM) to detect Android malware. Such way can effectively reduce the state number of Markov chains, and cut down the dimension of the feature vectors into the SVM classifier. Our evaluation confirms our approach possesses the malware detection ability with a high accuracy rate.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android平台上恶意应用程序或恶意软件的检测是一个非常受关注的问题。许多研究从静态特性分析和动态分析两方面论证了它们的作用。然而，它们的准确性和有效性仍然不能满足需求。在本文中，我们提出了CSCdroid，一种基于贡献级别的系统调用(SC)分类的Android恶意软件检测方法。与现有的利用所有SCs构建特征向量来确定应用程序安全性的工作不同，CSCdroid首次引入了贡献度的概念来定量评估SCs与恶意软件识别的相关性。根据贡献级别，CSCdroid可以将SCs分为两种类型，确定性SCs和正常SCs。最终，CSCdroid通过用SC序列中的一个特定SC替换所有正常SC来构建马尔可夫链。然后从概率矩阵中构造目标特征向量，使用支持向量机(SVM)来检测Android恶意软件。这种方法可以有效地减少马尔可夫链的状态数，降低进入SVM分类器的特征向量的维数。我们的评估证实了我们的方法具有高准确率的恶意软件检测能力。",
        "title_zh": "CSCdroid:通过基于贡献级别的系统调用分类准确检测Android恶意软件",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2017.html",
        "conf_title": "16th TrustCom / 11th BigDataSE / 14th ICESS 2017: Sydney, Australia",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8027145/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/Trustcom/BigDataSE/ICESS.2017.243",
        "title": "T2Droid: A TrustZone-Based Dynamic Analyser for Android Applications",
        "authors": "Sileshi Demesie Yalew, Gerald Q. Maguire Jr., Seif Haridi, Miguel Correia",
        "abstract": "Android has become the most widely used mobile operating system (OS) in recent years. There is much research on methods for detecting malicious Android applications. Dynamic analysis methods detect such applications by evaluating their behaviour during execution. However, such mechanisms may be ineffective as malware is often able to disable antimalware software. This paper presents the design of T2DROID, a dynamic analyser for Android that uses traces of Android API function calls and kernel syscalls, and that is protected from malware by leveraging the ARM TrustZone security extension. In our experimental evaluation T2DROID achieved accuracy and precision of 0.98 and 0.99, respectively, with a kNN classifier.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android已经成为近年来使用最广泛的移动操作系统(OS)。有很多关于检测恶意Android应用程序的方法的研究。动态分析方法通过评估应用程序在执行期间的行为来检测这些应用程序。然而，这种机制可能是无效的，因为恶意软件通常能够禁用反恶意软件。本文介绍了T2DROID的设计，这是一个用于Android的动态分析器，它使用Android API函数调用和内核系统调用的跟踪，并通过利用ARM TrustZone安全扩展来防止恶意软件。在我们的实验评估中，T2DROID使用kNN分类器分别实现了0.98和0.99的准确度和精度。",
        "title_zh": "T2Droid:基于TrustZone的Android应用程序动态分析器",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2017.html",
        "conf_title": "16th TrustCom / 11th BigDataSE / 14th ICESS 2017: Sydney, Australia",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8027145/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/Trustcom/BigDataSE/ICESS.2017.249",
        "title": "SneakLeak: Detecting Multipartite Leakage Paths in Android Apps",
        "authors": "Shweta Bhandari, Frédéric Herbreteau, Vijay Laxmi, Akka Zemmari, Partha S. Roop, Manoj Singh Gaur",
        "abstract": "In this paper, a technique is proposed to address the threat emerging from multiple colluding Android applications (apps). Existing techniques have focused on single app analysis which may be defeated by scattering leakage-capable path segments across multiple apps. In such a scenario, individual app shall appear benign. Whereas, together with other conspiring apps, if present, can lead to information leakage. This threat is known as app collusion. Relay of private and sensitive information from one app to another is possible via multiple communication mechanisms provided by Android. In this paper, we present SneakLeak, a new model-checking based technique for detection of app collusion. The proposed method analyze multiple apps simultaneously. SneakLeak can identify any set of conspiring apps that might be involved in the collusion. To demonstrate the efficacy of our proposal, we experimented with Android apps exhibiting collusion through inter-app communication. The apps are taken from test dataset named DroidBench. Our experiments show that the technique can precisely detect the presence/absence of collusion among apps.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "在本文中，提出了一种技术来解决来自多个串通的Android应用程序(应用程序)的威胁。现有技术集中于单个应用程序分析，这可能会因将可能泄漏的路径段分散在多个应用程序中而失败。在这种情况下，单个应用程序应该是良性的。然而，与其他阴谋应用程序一起，如果存在，可能会导致信息泄漏。这种威胁被称为应用共谋。通过Android提供的多种通信机制，可以将隐私和敏感信息从一个应用程序传递到另一个应用程序。在本文中，我们提出了SneakLeak，一种新的基于模型检测的应用共谋检测技术。所提出的方法同时分析多个应用。SneakLeak可以识别任何一组可能参与共谋的共谋应用程序。为了证明我们的建议的有效性，我们对通过应用间通信表现出共谋的Android应用进行了实验。这些应用来自名为DroidBench的测试数据集。我们的实验表明，该技术可以精确地检测应用程序之间是否存在共谋。",
        "title_zh": "SneakLeak:检测Android应用程序中的多部分泄漏路径",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2017.html",
        "conf_title": "16th TrustCom / 11th BigDataSE / 14th ICESS 2017: Sydney, Australia",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8027145/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/Trustcom/BigDataSE/ICESS.2017.255",
        "title": "SniffDroid: Detection of Inter-App Privacy Leaks in Android",
        "authors": "Vineeta Jain, Shweta Bhandari, Vijay Laxmi, Manoj Singh Gaur, Mohamed Mosbah",
        "abstract": "Android has deprecated the use of readable/writeable mode for shared preferences from API level 17. Hence, the researchers are not paying much attention towards the privacy leak via shared preferences. However, Android app developers are still using these modes in practice. This may have serious ramifications such as privacy leakage, privilege escalation, etc, and may pose a severe threat to an user’s privacy. In this paper, we present an automaton based static analysis technique named SniffDroid to detect the inter-app privacy leaks via shared preferences in Android. To evaluate the performance of SniffDroid in real-time, we tested it on our developed dataset of 21 apps and 240 Google playstore apps. These apps are chosen from various categories such as banking, wallet, location, shopping, etc. SniffDroid conducts analysis at the component level. The empirical results of the proposed method indicate that SniffDroid operates in linear time w.r.t. the number of components. It works efficiently on apps of all sizes and is scalable.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android不赞成从API级开始使用共享首选项的可读/可写模式。因此，研究人员并不太关注通过共享偏好造成的隐私泄露。然而，Android应用开发者在实践中仍在使用这些模式。这可能会产生严重的后果，如隐私泄露、权限提升等，并可能对用户的隐私造成严重威胁。本文提出了一种基于自动机的静态分析技术SniffDroid，用于检测Android中通过共享偏好的应用间隐私泄露。为了实时评估SniffDroid的性能，我们在我们开发的21个应用程序和240个Google playstore应用程序的数据集上进行了测试。这些应用程序选自各种类别，如银行、钱包、位置、购物等。SniffDroid在组件级别进行分析。实验结果表明，SniffDroid的运行时间与组件数量呈线性关系。它可以在各种规模的应用上高效运行，并且可扩展。",
        "title_zh": "SniffDroid:检测Android中的应用程序间隐私泄露",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2017.html",
        "conf_title": "16th TrustCom / 11th BigDataSE / 14th ICESS 2017: Sydney, Australia",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8027145/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/Trustcom/BigDataSE/ICESS.2017.258",
        "title": "Improving Leakage Path Coverage in Android Apps",
        "authors": "Garima Modi, Vijay Laxmi, Smita Naval, Manoj Singh Gaur",
        "abstract": "With the phenomenal increase in Android apps usage and storing of personal information on mobile devices, securing this sensitive information has assumed significance. The Android application developers knowingly or unknowingly create apps that may directly or indirectly leak this information to outside world. The majority of state-of-the-art approachesdetect leaks through inter-component communication (ICC) within an app. Android allows inter-component communication (ICC) within the components of the same application or across multiple applications. ICC mechanism is used for the exchange of information among apps. Via ICC, an app or a set of apps can send the sensitive information out of the application or device.In this paper, we propose an approach for intra-app as well as inter-app data transfer analysis through intents and/or sharedpreferences that improve the coverage of leakage paths detectedas compared to existing approaches. Our proposed approach iscapable of analyzing more than two applications at a time. Wehave evaluated proposed approach on the DroidBench datasetand 116 real-time apps randomly selected and downloadedfrom Google PlayStore. We detected 1298 inter-component pathswithin an app and 215 inter-app sensitive paths. Our approachreported ~17.71% of more inter-component paths using sharedpreferences for data transfer.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "随着Android应用程序使用和移动设备上个人信息存储的显著增加，保护这些敏感信息变得越来越重要。Android应用程序开发人员有意或无意地创建可能直接或间接向外界泄露这些信息的应用程序。大多数先进的方法通过应用程序内的组件间通信(ICC)来检测泄漏。Android允许在同一应用程序的组件内或跨多个应用程序进行组件间通信(ICC)。ICC机制用于应用程序之间的信息交换。通过ICC，一个或一组应用程序可以将敏感信息发送到应用程序或设备之外。在本文中，我们提出了一种通过意向和/或共享参考进行应用内和应用间数据传输分析的方法，与现有方法相比，该方法提高了检测到的泄漏路径的覆盖率。我们提出的方法能够同时分析两个以上的应用程序。我们在DroidBench数据集和116个从Google PlayStore随机选择和下载的实时应用上评估了所提出的方法。我们检测到1298个应用内的组件间路径和215个应用间敏感路径。我们的方法报告了大约17.71%的更多组件间路径使用sharedpreferences进行数据传输。",
        "title_zh": "提高Android应用中的泄漏路径覆盖率",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2017.html",
        "conf_title": "16th TrustCom / 11th BigDataSE / 14th ICESS 2017: Sydney, Australia",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8027145/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/Trustcom/BigDataSE/ICESS.2017.292",
        "title": "Ordol: Obfuscation-Resilient Detection of Libraries in Android Applications",
        "authors": "Dennis Titze, Michael Lux, Julian Schütte",
        "abstract": "Android apps often include libraries supporting certain features, or allowing rapid app development. Due to Android's system design, libraries are not easily distinguishable from the app's core code. But detecting libraries in apps is needed especially in app analysis, e.g., to determine if functionality is executed in the app, or in the code of the library.Previous approaches detected libraries in ways which are susceptible to code obfuscation. For some approaches, even simple obfuscation will cause unrecognised libraries.Our approach - Ordol - builds upon approaches from plagiarism detection to detect a specific library version inside an app in an obfuscation-resilient manner. We show that Ordol can cope well with obfuscated code and can be easily applied to real life apps.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android应用程序通常包括支持某些功能的库，或者允许快速应用程序开发。由于Android的系统设计，库不容易与应用程序的核心代码区分开来。但是需要检测应用中的库，尤其是在应用分析中，例如，确定功能是在应用中执行的，还是在库的代码中执行的。以前的方法以易受代码混淆影响的方式检测库。对于某些方法，即使简单的混淆也会导致无法识别的库。我们的方法——Ordol——建立在剽窃检测方法的基础上，以一种模糊弹性的方式检测应用程序中的特定库版本。我们证明了Ordol可以很好地处理混乱的代码，并且可以很容易地应用于现实生活中的应用程序。",
        "title_zh": "ordol:Android应用程序中的模糊弹性库检测",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2017.html",
        "conf_title": "16th TrustCom / 11th BigDataSE / 14th ICESS 2017: Sydney, Australia",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8027145/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/Trustcom/BigDataSE/ICESS.2017.303",
        "title": "Detecting Permission Over-claim of Android Applications with Static and Semantic Analysis Approach",
        "authors": "Junwei Tang, Ruixuan Li, Hongmu Han, Heng Zhang, Xiwu Gu",
        "abstract": "Android access control granularity based on its permission mechanism is relatively coarse, which cannot effectively protect the user privacy. Many Android applications do not strictly abide by the principle of least privilege (PLP). Both benign and malicious apps may request more permissions than those they really use. We rethink previous permission over-claim problem of Android applications, and extend it to three kinds of problems: Explicit Permission Over-claim, Implicit Permission Over-claim and Ad Library Permission Over-claim. The latter two problems are new that have not been raised by any previous work. Static analysis is to decompile the applications to generate intermediate code and then analyze the usage of permissions. Our static analysis on 10710 applications shows that 76.08% of them may have Explicit Permission Over-claim problem, among those there are 424 applications that have sensitive permissions, which are only used in the advertisement library’s code of the applications rather than developer’s own code. They have Ad Library Permission Over-claim problem. The main idea of our semantic analysis is to calculate the semantic similarity between apps’ descriptions and function phrases. If the similarity exceeds a certain threshold, the app is considered relevant to the corresponding function. We compare the results of the semantic analysis with those of manual reading of 102 Android application descriptions. The F-measures of the three chosen functions are 80.82%, 70.48% and 89.62%, respectively. The evaluation results show our method can efficiently detect the above three kinds of permission over claim problems which indicates that our method would be helpful for normal users to have a clear understanding of permission usage of Android applications.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "基于Android权限机制的访问控制粒度相对较粗，无法有效保护用户隐私。很多Android应用并没有严格遵守最小特权原则(PLP)。良性和恶意应用程序可能会请求比它们实际使用的更多的权限。我们反思以往Android应用的权限过度索取问题，并将其扩展为三类问题:显式权限过度索取、隐式权限过度索取和Ad库权限过度索取。后两个问题是新的，以前的工作没有提出过。静态分析是将应用程序反编译生成中间代码，然后分析权限的使用情况。我们对10710个应用程序的静态分析表明，其中76.08%的应用程序可能存在显式的权限过度声明问题，其中有424个应用程序具有敏感权限，这些权限仅在应用程序的广告库代码中使用，而不在开发者自己的代码中使用。他们有广告库权限过度要求的问题。我们语义分析的主要思想是计算应用程序描述和功能短语之间的语义相似度。如果相似度超过某个阈值，则认为该应用与相应的功能相关。我们将语义分析的结果与人工阅读102个Android应用程序描述的结果进行了比较。三个函数的F值分别为80.82%、70.48%和89.62%。评估结果表明，该方法能够有效检测上述三种权限过度声明问题，有助于普通用户清楚地了解Android应用程序的权限使用情况。",
        "title_zh": "用静态和语义分析方法检测Android应用程序的权限过度声明",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2017.html",
        "conf_title": "16th TrustCom / 11th BigDataSE / 14th ICESS 2017: Sydney, Australia",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8027145/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom/BigDataSE.2018.00050",
        "title": "Towards Better Ocular Recognition for Secure Real-World Applications",
        "authors": "Reza M. Parizi, Ali Dehghantanha, Kim-Kwang Raymond Choo",
        "abstract": "In the last decade, biometric has become one of the most common uses for verification and authentication of someone's personal identity. Biometrics are defined as the measurement and analysis of unique physical or behavioral characteristics. Fingerprint is undoubtedly the most well-known biometric, but in the recent years ocular recognition has taken a huge jump forward. Ocular recognition (OR) is one of the most reliable personal identification methods in biometrics that can have flexible applications as opposed to the iris recognition. The basic breakdown of the eye is the iris, cornea, retina, pupil, sclera, and conjunctiva. The iris is where eye is actually colored; this is determined by the amount and type of pigment in one's iris. Iris recognition is an accurate form of ocular recognition. It works by using biometric systems to apply pattern recognition to a person's eye since no two people have the same patterns in their eye. Ocular recognition has been used as an identification method on both Apple and Android devices without much popularity. The reason for this is mainly related to the issues with the underlying algorithm used that affects the accuracy and security measures. Many different algorithms have been proposed and tested; some are more accurate than others. Our goal is to investigate different technologies currently used to help combine the best parts of both (Iris and Retina) in order to propose a better system for future implementation. With the proper design, ocular recognition could be a great tool for user authentication in emerging Internet of Things (IoT) and mobile markets.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "在过去的十年中，生物识别已经成为验证和鉴定个人身份的最常见用途之一。生物识别被定义为对独特的身体或行为特征的测量和分析。指纹无疑是最广为人知的生物特征，但是在最近几年，视觉识别已经向前迈进了一大步。眼睛识别是生物特征识别中最可靠的身份识别方法之一，与虹膜识别相比，它具有灵活的应用。眼睛的基本结构是虹膜、角膜、视网膜、瞳孔、巩膜和结膜。虹膜是眼睛着色的地方；这是由一个人虹膜中色素的数量和类型决定的。虹膜识别是眼睛识别的一种精确形式。它的工作原理是使用生物识别系统对一个人的眼睛进行模式识别，因为没有两个人的眼睛有相同的模式。视觉识别一直被用作苹果和安卓设备上的识别方法，但没有太多普及。其原因主要与所使用的影响准确性和安全措施的底层算法的问题有关。已经提出并测试了许多不同的算法；有些比其他的更准确。我们的目标是研究目前用于帮助组合两者(虹膜和视网膜)最佳部分的不同技术，以便为未来的实施提出更好的系统。通过适当的设计，视觉识别可以成为新兴物联网(IoT)和移动市场中用户身份验证的重要工具。",
        "title_zh": "面向安全现实世界应用的更好视觉识别",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2018.html",
        "conf_title": "17th TrustCom / 12th BigDataSE 2018: New York, NY, USA",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8454845/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom/BigDataSE.2018.00055",
        "title": "Adversarial Gait Detection on Mobile Devices Using Recurrent Neural Networks",
        "authors": "Devu Manikantan Shila, Emeka Eyisi",
        "abstract": "This paper presents an implicit and continuous user verification service, called dCASTRA, for mobile devices based on walking patterns inferred from smart phone sensors. We use LSTM (Long Short Term Memory) neural networks for learning gait biometrics from raw accelerometer and gyroscope data and enable a device centric implementation of the deep learning models for faster predictions. One of the challenges in building a gait biometric model is to differentiate the sensor data pertaining to the walking activity from other activities such as sitting, standing, climbing, running and driving, etc. We design a multi-layer framework, where the initial layer relies on Google Activity Recognition Service to extract the segments corresponding to the walking activity with high confidence and feed extracted time series data to LSTM networks in the subsequent layer. The use of LSTMs eliminate the need for tedious feature engineering and further enable us to capture long-term dependencies within temporal sequences, often overlooked by existing efforts. We use Google TensorFlow to develop LSTM based gait biometrics and deploy on Android-based smart phones for real-time prediction and evaluation. We compare dCASTRA with our prior effort and with other deep network architectures such as Convolutional Neural Networks (CNNs). Our results manifest that LSTM and CNN based dCASTRA identifies users in an average 5-6 steps (using 50 Hz sensor sampling rate) with 99% detection accuracy. However, CNNs face significant training overhead as opposed to LSTMs which in turn limits its ability to be deployed in practice.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "本文提出了一种隐式和连续的用户验证服务，称为dCASTRA，用于基于从智能手机传感器推断的行走模式的移动设备。我们使用LSTM(长短期记忆)神经网络从原始加速度计和陀螺仪数据中学习步态生物特征，并实现以设备为中心的深度学习模型实施，以实现更快的预测。构建步态生物统计模型的挑战之一是将与行走活动有关的传感器数据与诸如坐、站、爬、跑和驾驶等其他活动区分开来。我们设计了一个多层框架，其中初始层依靠Google Activity Recognition Service提取与行走活动相对应的高置信度片段，并将提取的时间序列数据提供给后续层的LSTM网络。LSTMs的使用消除了对乏味的特征工程的需要，并且进一步使我们能够捕捉时间序列内的长期依赖性，这通常被现有的努力所忽略。我们使用Google TensorFlow开发基于LSTM的步态生物识别技术，并部署在基于Android的智能手机上进行实时预测和评估。我们将dCASTRA与我们之前的工作以及其他深度网络架构(如卷积神经网络(CNN))进行了比较。我们的结果表明，基于LSTM和CNN的dCASTRA以平均5-6步(使用50 Hz传感器采样率)识别用户，检测准确率为99%。然而，与LSTMs相比，CNN面临着巨大的训练开销，这反过来限制了其在实践中部署的能力。",
        "title_zh": "使用递归神经网络的移动设备上的对抗性步态检测",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2018.html",
        "conf_title": "17th TrustCom / 12th BigDataSE 2018: New York, NY, USA",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8454845/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom/BigDataSE.2018.00093",
        "title": "DroidPro: An AOTC-Based Bytecode-Hiding Scheme for Packing the Android Applications",
        "authors": "Judong Bao, Yongqiang He, Weiping Wen",
        "abstract": "Android is an open source mobile operating system represented by the Open Handset Alliance (OHA), developed by Google and other organizations since 2007, which has taken up most of the market share of smart devices. However, the applications on the platform are facing the increasingly serious security threat. Although the Android system itself provides a set of security mechanism to protect the safety of the system and applications, there are still many security risks. In order to hide the vulnerability of the applications and prevent the malicious users from tampering the apps, multiple anti-analysis methods have been applied by many Android packers to consolidate the apps. Bytecode-hiding is one of the most effective anti-analysis method, which can extract some bytecode from the Dex files and hide them from the vision of malicious analysts. Mostly, the hidden bytecode was encrypted, which can be recovered in runtime. But the conventional bytecode-hiding methods are always low-efficient and unsafe on some occasions, where the hidden bytecode can be recovered by the malicious analysts in some way. In this paper, we propose a bytecode-hiding scheme based on Ahead-Of-Time (AOT) compilation, called DroidPro, which can compile some chosen bytecode of Dex files of apps to native code in ahead-of-time that will be much harder to reverse. In our experiments, the apps packed by the packer associated with our bytecode-hiding scheme are more efficient and safer than other packers that use other bytecode-hiding schemes.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android是以开放手机联盟(Open Handset Alliance，OHA)为代表的开源移动操作系统，自2007年由谷歌等机构开发，占据了智能设备的大部分市场份额。然而，该平台上的应用正面临着日益严重的安全威胁。虽然Android系统本身提供了一套安全机制来保护系统和应用的安全，但是仍然存在很多安全隐患。为了隐藏应用程序的漏洞，防止恶意用户篡改应用程序，许多Android打包程序应用了多种反分析方法来巩固应用程序。字节码隐藏是最有效的反分析方法之一，它可以从Dex文件中提取一些字节码并隐藏起来，不让恶意分析者发现。大多数情况下，隐藏的字节码是加密的，可以在运行时恢复。但是传统的字节码隐藏方法在某些场合总是低效和不安全的，在这些场合，隐藏的字节码可以被恶意的分析者以某种方式恢复。在本文中，我们提出了一种基于提前(AOT)编译的字节码隐藏方案，称为DroidPro，它可以提前将应用程序的Dex文件中选定的字节码编译成本地代码，这将更加难以逆转。在我们的实验中，由与我们的字节码隐藏方案相关联的打包程序打包的应用程序比使用其他字节码隐藏方案的打包程序更高效、更安全。",
        "title_zh": "DroidPro:一个基于AOTC的字节码隐藏方案，用于打包Android应用程序",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2018.html",
        "conf_title": "17th TrustCom / 12th BigDataSE 2018: New York, NY, USA",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8454845/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom/BigDataSE.2018.00115",
        "title": "NTPDroid: A Hybrid Android Malware Detector Using Network Traffic and System Permissions",
        "authors": "Anshul Arora, Sateesh Kumar Peddoju",
        "abstract": "Two kinds of techniques, namely Static and Dynamic Analysis, have been proposed in the literature to detect Android malware. Permissions and Network Traffic are the widely used detection attributes. Malicious apps download malware at run-time and evade static permissions based detection while they can be detected by the network traffic. The malware that do not require network connectivity evade network traffic based detection which can be detected by permissions analysis. Therefore, we believe that combining the network traffic and system permissions will enhance the detection rate. Hence, in this work, we combine both the attributes and propose a hybrid detection model named NTPDroid, that extracts Network Traffic features and Permissions from the applications. To the best of our knowledge, this is the first attempt towards combining these important sources of Android malware detection. We train and test the proposed model using the FP-Growth algorithm to generate the frequent patterns consisting of traffic features and permissions. Experimental results demonstrate a detection accuracy of 94.25%, better than frequent patterns obtained independently.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "在文献中已经提出了两种技术，即静态和动态分析，来检测Android恶意软件。权限和网络流量是广泛使用的检测属性。恶意应用程序在运行时下载恶意软件，并逃避基于静态权限的检测，尽管它们可以被网络流量检测到。不需要网络连接的恶意软件避开了基于网络流量的检测，该检测可以通过权限分析来检测。因此，我们认为结合网络流量和系统权限将提高检测率。因此，在本文中，我们将这两种属性结合起来，提出了一种混合检测模型NTPDroid，从应用程序中提取网络流量特征和权限。据我们所知，这是第一次尝试将Android恶意软件检测的这些重要来源结合起来。我们使用FP-Growth算法来训练和测试所提出的模型，以生成由流量特征和权限组成的频繁模式。实验结果表明，检测准确率达到94.25%，优于独立获取的频繁模式。",
        "title_zh": "NTPDroid:使用网络流量和系统权限的混合Android恶意软件检测器",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2018.html",
        "conf_title": "17th TrustCom / 12th BigDataSE 2018: New York, NY, USA",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8454845/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom/BigDataSE.2018.00129",
        "title": "Detecting Data Leakage from Databases on Android Apps with Concept Drift",
        "authors": "Gökhan Kul, Shambhu J. Upadhyaya, Varun Chandola",
        "abstract": "Mobile databases are the statutory backbones of many applications on smartphones, and they store a lot of sensitive information. However, vulnerabilities in the operating system or the app logic can lead to sensitive data leakage by giving the adversaries unauthorized access to the app's database. In this paper, we study such vulnerabilities to define a threat model, and we propose an OS-version independent protection mechanism that app developers can utilize to detect such attacks. To do so, we model the user behavior with the database query workload created by the original apps. Here, we model the drift in behavior by comparing probability distributions of the query workload features over time. We then use this model to determine if the app behavior drift is anomalous. We evaluate our framework on real-world workloads of three different popular Android apps, and we show that our system was able to detect more than 90% of such attacks.",
        "files": {
            "openAccessPdf": "http://arxiv.org/pdf/1805.11780"
        },
        "abstract_zh": "移动数据库是智能手机上许多应用程序的法定主干，它们存储了大量敏感信息。然而，操作系统或应用程序逻辑中的漏洞可能会导致敏感数据泄露，因为它会让对手未经授权访问应用程序的数据库。在本文中，我们研究了这种漏洞以定义一个威胁模型，并提出了一个独立于操作系统版本的保护机制，应用程序开发人员可以利用它来检测这种攻击。为此，我们用原始应用程序创建的数据库查询工作负载对用户行为进行建模。这里，我们通过比较一段时间内查询工作负载特性的概率分布，对行为漂移进行建模。然后，我们使用该模型来确定应用程序行为漂移是否异常。我们在三个不同的流行Android应用程序的真实工作负载上评估了我们的框架，我们表明我们的系统能够检测到90%以上的此类攻击。",
        "title_zh": "基于概念漂移的Android应用数据库数据泄漏检测",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2018.html",
        "conf_title": "17th TrustCom / 12th BigDataSE 2018: New York, NY, USA",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8454845/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom/BigDataSE.2018.00133",
        "title": "Privacy Parameter Variation Using RAPPOR on a Malware Dataset",
        "authors": "Peter Aaby, Juanjo Mata De Acuna, Richard Macfarlane, William J. Buchanan",
        "abstract": "Stricter data protection regulations and the poor application of privacy protection techniques have resulted in a requirement for data-driven companies to adopt new methods of analysing sensitive user data. The RAPPOR (Randomized Aggregatable Privacy-Preserving Ordinal Response) method adds parameterised noise, which must be carefully selected to maintain adequate privacy without losing analytical value. This paper applies RAPPOR privacy parameter variations against a public dataset containing a list of running Android applications data. The dataset is filtered and sampled into small (10,000); medium (100,000); and large (1,200,000) sample sizes while applying RAPPOR with ? = 10; 1.0; and 0.1 (respectively low; medium; high privacy guarantees). Also, in order to observe detailed variations within high to medium privacy guarantees (? = 0.5 to 1.0), a second experiment is conducted by progressively adjusting the value of ? over the same populations. The first experiment verifies the original RAPPOR studies using ? = 1 with a non-existent recoverability in the small sample size, and detectable signal from medium to large sample sizes as also demonstrated in the original RAPPOR paper. Further results, using high privacy guarantees, show that the large sample size, in contrast to medium, suffers 2.75 times more in terms of recoverability when increasing privacy guarantees from ? = 1.0 to 0.8. Overall, the paper demonstrates that high privacy guarantees to restrict the analysis only to the most dominating strings.",
        "files": {
            "openAccessPdf": "https://napier-repository.worktribe.com/preview/1282065/70OZm1HZoOkDqL5KdRVqdk.pdf"
        },
        "abstract_zh": "更严格的数据保护法规和隐私保护技术的不良应用导致数据驱动型公司需要采用新的方法来分析敏感用户数据。RAPPOR(随机化可聚合隐私保护顺序响应)方法增加了参数化噪声，必须仔细选择，以保持足够的隐私性，同时不损失分析价值。本文针对包含运行的Android应用程序数据列表的公共数据集应用RAPPOR隐私参数变量。数据集过滤采样成小(10000)；中(10万)；和大样本(1，200，000)的情况下使用RAPPOR？= 10;1.0;和0.1(分别为低；中等；高隐私保障)。此外，为了观察高到中隐私保证(？= 0.5至1.0)，通过逐步调整的值进行第二次实验。在同样的人群中。第一个实验验证了RAPPOR最初的研究。= 1，在小样本量中不存在可恢复性，从中等到大样本量中可检测到信号，这也在RAPPOR的原始论文中得到证实。使用高隐私保证的进一步结果表明，与中样本相比，当增加隐私保证时，大样本在可恢复性方面遭受2.75倍的损失。= 1.0到0.8。总的来说，本文证明了高隐私保证将分析限制在最主要的字符串。",
        "title_zh": "在恶意软件数据集上使用RAPPOR的隐私参数变化",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2018.html",
        "conf_title": "17th TrustCom / 12th BigDataSE 2018: New York, NY, USA",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8454845/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom/BigDataSE.2018.00141",
        "title": "SDLI: Static Detection of Leaks Across Intents",
        "authors": "Rocco Salvia, Pietro Ferrara, Fausto Spoto, Agostino Cortesi",
        "abstract": "Intents are Android's intra and inter-application communication mechanism. They specify an action to perform, with extra data, and are sent to a receiver component or broadcast to many components. Components, in the same or in a distinct app, receive the intent if they are available to perform the desired action. Hence, a sound static analyzer must be aware of information flows through intents. That can be achieved by considering intents as both source (when reading) and sink (when writing) of confidential data. But this is overly conservative if the intent stays inside the same app or if the set of apps installed on the device is known in advance. In such cases, a sound approximation of the flow of intents leads to a more precise analysis. This work describes SDLI, a novel static analyzer that, for each app, creates an XML summary file reporting a description of the tainted information in outwards intents and of the intents the app is available to serve. SDLI discovers confidential information leaks when two apps communicate, by matching their XML summaries, looking for tainted outwards intents of the first app that can be inwards intents of the second app. The tool is implemented inside Julia, an industrial static analyzer. On the DroidBench testcases, its shows a precision higher than 75%. On some popular apps from the Google Play marketplace, it spots inter-apps leaks of confidential data, hence showing its practical effectiveness.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "意图是Android的内部和应用程序间的通信机制。它们用额外的数据指定要执行的动作，并被发送到接收器组件或广播到许多组件。相同或不同应用程序中的组件，如果它们可用于执行所需的动作，则接收意图。因此，一个可靠的静态分析器必须意识到信息流的意图。这可以通过将意图视为机密数据的来源(当读取时)和接收器(当写入时)来实现。但是，如果意图停留在同一个应用程序内部，或者如果预先知道设备上安装的应用程序集，这就过于保守了。在这种情况下，意图流的合理近似导致更精确的分析。这项工作描述了SDLI，这是一个新颖的静态分析器，它为每个应用程序创建一个XML摘要文件，报告对外部意图和应用程序可用意图中受污染信息的描述。当两个应用程序通信时，SDLI发现机密信息泄漏，通过匹配它们的XML摘要，寻找第一个应用程序的受污染的外部意图，这些意图可能是第二个应用程序的内部意图。该工具在工业静态分析器Julia中实现。在DroidBench测试用例上，其准确率高于75%。在Google Play marketplace的一些热门应用上，它发现了应用间机密数据的泄露，因此显示了它的实际有效性。",
        "title_zh": "SDLI:跨意图的静态泄漏检测",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2018.html",
        "conf_title": "17th TrustCom / 12th BigDataSE 2018: New York, NY, USA",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8454845/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom/BigDataSE.2018.00145",
        "title": "Website Fingerprinting by Power Estimation Based Side-Channel Attacks on Android 7",
        "authors": "Yi Qin, Chuan Yue",
        "abstract": "Power consumption data on smartphones can be used to infer user information like web browsing activities and location. Since the power consumption data was traditionally considered harmless to user privacy and developers need to use power information to develop energy-efficient apps, it can be obtained without user permission on Android systems older than Android 7. However, due to the updates in Android 7, the traditional methods of accessing power consumption data either don't work anymore or the data is coarse-grained, and less information can be leaked. In this paper, we propose a power estimation method and design a power estimation based side-channel attack to perform website fingerprinting. Results show that website fingerprinting can be performed with high accuracy using power estimation data on Android 7.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "智能手机上的功耗数据可以用来推断用户信息，如网页浏览活动和位置。由于功耗数据传统上被认为对用户隐私无害，而且开发人员需要使用功耗信息来开发节能应用程序，因此在早于Android 7的Android系统上，无需用户许可就可以获得功耗数据。然而，由于Android 7中的更新，传统的访问功耗数据的方法要么不再有效，要么数据是粗粒度的，可以泄露的信息更少。本文提出了一种能量估计方法，并设计了一种基于能量估计的旁路攻击来实现网站指纹识别。结果表明，使用Android 7上的功率估计数据，可以高精度地执行网站指纹识别。",
        "title_zh": "基于功耗估计的Android 7网站指纹旁路攻击",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2018.html",
        "conf_title": "17th TrustCom / 12th BigDataSE 2018: New York, NY, USA",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8454845/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom/BigDataSE.2018.00147",
        "title": "Countering Intrusiveness Using New Security-Centric Ranking Algorithm Built on Top of Elasticsearch",
        "authors": "Fadi Mohsen, Hamed Abdelhaq, Halil Bisgin, Andrew Jolly, Michael Szczepanski",
        "abstract": "Mobile computing is dominating the technology market and it is expected to continue growing. Mobile thirdparty applications without any doubt contribute vastly to this growth. However, intrusive apps that tend to ask for plenty of permissions are becoming a common trend that influence the privacy of mobile users. Solutions have been proposed to detect and remove malicious apps from online markets or detect them after being installed. Yet, dealing with intrusive apps requires high user involvement and best judgment and comprehension. There have been a very few works that aim at helping mobile users make calculated decisions to avoid intrusive apps. In this paper, we are proposing and evaluating a new security-centric ranking algorithm built on top of the Elasticsearch engine to assist users evade installing intrusive apps. The algorithm calculates an intrusiveness score for an app based on its requested permissions, received system actions, and on the privacy preferences of users. In doing so, we are proposing a new approach to capture users' privacy preferences. The approach is evaluated through an online user study. The ranking algorithm is being evaluated on a large corpus of Android apps contextual data and APK files by conducting a pilot study and benchchmarking study. The results show that the scoring and reranking steps add very small overhead. Moreover, participants of the online and pilot studies gave positive feedback for the ranking algorithm and privacy preferences solicitation approach. The results suggest that our proposal would definitely protect the privacy of mobile users and pushes developers into requesting the minimum privileges that are required for their apps to function.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "移动计算正在主导技术市场，并且预计将继续增长。毫无疑问，移动第三方应用极大地促进了这一增长。然而，倾向于要求大量权限的侵入式应用程序正成为影响移动用户隐私的常见趋势。已经提出了从在线市场检测和移除恶意应用或者在安装后检测它们的解决方案。然而，处理侵入性应用程序需要高度的用户参与以及最好的判断和理解。很少有作品旨在帮助移动用户做出深思熟虑的决定，以避免侵入性的应用程序。在本文中，我们提出并评估了一种新的以安全为中心的排名算法，该算法建立在Elasticsearch引擎之上，用于帮助用户避免安装侵入性的应用程序。该算法根据应用程序请求的权限、收到的系统操作以及用户的隐私偏好来计算其侵入性得分。为此，我们提出了一种新的方法来捕捉用户的隐私偏好。该方法通过在线用户研究进行评估。通过进行试点研究和基准测试研究，该排名算法正在Android apps上下文数据和APK文件的大型语料库上进行评估。结果显示，评分和重新排序步骤增加的开销非常小。此外，在线和试点研究的参与者对排名算法和隐私偏好征求方法给予了积极的反馈。结果表明，我们的建议肯定会保护移动用户的隐私，并促使开发者请求他们的应用程序运行所需的最低权限。",
        "title_zh": "使用建立在弹性搜索基础上的新的以安全为中心的排名算法来应对入侵",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2018.html",
        "conf_title": "17th TrustCom / 12th BigDataSE 2018: New York, NY, USA",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8454845/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom/BigDataSE.2018.00242",
        "title": "Analyzing HTTP-Based Information Exfiltration of Malicious Android Applications",
        "authors": "Soham Kelkar, Timothy Kraus, Daria Morgan, Junjie Zhang, Rui Dai",
        "abstract": "Exfiltrating sensitive information from smartphones has become one of the most significant security threats. We have built a system to identify HTTP-based information exfiltration of malicious Android applications. In this paper, we discuss the method to track the propagation of sensitive information in Android applications using static taint analysis. We have studied the leaked information, destinations to which information is exfiltrated, and their correlations with types of sensitive information. The analysis results based on 578 malicious Android applications have revealed that a significant portion of these applications are interested in identity-related sensitive information. The vast majority of malicious applications leak multiple types of sensitive information. We have also identified servers associated with three country codes including CN, US, and SG are most active in collecting sensitive information. The analysis results have also demonstrated that a wide range of non-default ports are used by suspicious URLs.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "智能手机的敏感信息已成为最重要的安全威胁之一。 我们已经建立了一个系统，以识别基于HTTP的恶意应用程序的信息渗透。 在本文中，我们讨论了使用静态污染分析在Android应用中跟踪敏感信息传播的方法。 我们已经研究了泄漏的信息，删除信息的目的地以及它们与敏感信息类型的相关性。 基于578种恶意应用应用程序的分析结果表明，这些应用中的很大一部分对与身份相关的敏感信息感兴趣。 绝大多数恶意应用程序泄漏了多种类型的敏感信息。 我们还确定了与CN，US和SG在内的三个国家代码相关的服务器，最活跃于收集敏感信息。 分析结果还表明，可疑URL使用了广泛的非默认端口。",
        "title_zh": "基于HTTP的恶意Android应用程序信息泄漏分析",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2018.html",
        "conf_title": "17th TrustCom / 12th BigDataSE 2018: New York, NY, USA",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8454845/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom/BigDataSE.2018.00274",
        "title": "Let me Join Two Worlds! Analyzing the Integration of Web and Native Technologies in Hybrid Mobile Apps",
        "authors": "Shahrooz Pouryousef, Mariam Rezaiee, Ata Chizari",
        "abstract": "We can notice that security problems of inappropriate integration of native and web technologies in hybrid mobile applications (apps) have been covered in the related state-of-the-art research. However, analyzing hybrid mobile apps' unique behaviors has been seldom addressed. In this paper, we explore the influence of native and web technologies integration in hybrid mobile apps on the generated profile of mobile applications. Specifically, we analyze the type of Security Sensitive APIs (SS-APIs) exposed to web content and identify the corresponding usage patterns by systematically tracking function-call-graphs of a large number of hybrid and native mobile apps. Our investigations indicate that the generated profiles for hybrid and native mobile apps are considerably different. Using our proposed tool, called Hybrid-scanner, for tracking and analyzing internal behaviors of hybrid mobile apps, we show that there is more trace of API calling for triggering a specific SS-API in a hybrid mobile app in comparison with Android native mobile apps. In addition, we have found that almost 40% of SS-APIs in hybrid mobile apps are invoked by third-party libraries, e.g. advertisement libraries. This knowledge, however, is crucial for designing appropriate malware detection or vulnerability mitigation strategies. Based on our results, we discuss two main approaches in Android malware analysis field and enumerate some suggestions which should be considered in order to successfully detect malicious behaviors in such new type of apps.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "我们可以注意到，在相关的最先进的研究中涵盖了混合移动应用程序中本机和Web技术不当集成的安全问题。 但是，很少解决分析混合移动应用程序独特行为的独特行为。 在本文中，我们探讨了混合移动应用程序中本地和Web技术集成对移动应用程序生成的配置文件的影响。 具体而言，我们分析了暴露于Web内容的安全性敏感API（SS-API）的类型，并通过系统地跟踪大量混合动力和本机移动应用程序的功能通用图来识别相应的用法模式。 我们的调查表明，混合动力和本机移动应用程序的生成概况有很大不同。 使用我们建议的工具，称为Hybrid-Scanner，跟踪和分析混合移动应用程序的内部行为，我们表明，与Android Antial Mobile App相比，有更多的API迹象要求在混合移动应用程序中触发特定的SS-API 。 此外，我们发现，混合移动应用程序中近40％的SS-API被第三方库援引，例如 广告库。 但是，这些知识对于设计适当的恶意软件检测或缓解脆弱性策略至关重要。 根据我们的结果，我们讨论了Android恶意软件分析字段中的两种主要方法，并列举了一些建议，以便在这种新类型的应用程序中成功检测出恶意行为。",
        "title_zh": "让我加入两个世界！分析混合移动应用中Web和本地技术的集成",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2018.html",
        "conf_title": "17th TrustCom / 12th BigDataSE 2018: New York, NY, USA",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8454845/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom.2016.0070",
        "title": "A Deep Learning Approach to Android Malware Feature Learning and Detection",
        "authors": "Xin Su, Dafang Zhang, Wenjia Li, Kai Zhao",
        "abstract": "The growing amount and diversity of Android malware has significantly weakened the effectiveness of the conventional defense mechanisms, and thus Android platform often remains unprotected from new and unknown malware. To address these limitations, we propose DroidDeep, a malware detection approach for the Android platform based on the deep learning model. Deep learning emerges as a new area of machine learning research that has attracted increasing attention in artificial intelligence. To implement this, we first extract five types of features from the static analysis of Android apps. Then, we build the deep learning model to learn features from Android apps. Finally, the learned features are used to detect unknown Android malware. In an experiment with 3,986 benign apps and 3,986 malware, DroidDeep outperforms several existing malware detection approaches and achieves a 99.4% detection accuracy. Moreover, DroidDeep can achieve a remarkable run-time efficiency which makes it very easy to adapt to a lager scale of real-world Android malware detection.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "日益增长的Android恶意软件数量和多样性大大削弱了传统防御机制的有效性，因此Android平台通常无法抵御新的未知恶意软件。为了解决这些限制，我们提出了DroidDeep，一种基于深度学习模型的Android平台恶意软件检测方法。深度学习是机器学习研究的一个新领域，在人工智能领域引起了越来越多的关注。为了实现这一点，我们首先从Android应用的静态分析中提取五种类型的特征。然后，我们建立深度学习模型，从Android应用程序中学习功能。最后，使用学习到的特征来检测未知的Android恶意软件。在对3，986个良性应用和3，986个恶意软件的实验中，DroidDeep优于几种现有的恶意软件检测方法，并实现了99.4%的检测准确率。此外，DroidDeep可以实现显著的运行时效率，这使得它非常容易适应现实世界中更大规模的Android恶意软件检测。",
        "title_zh": "Android恶意软件特征学习和检测的深度学习方法",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2016.html",
        "conf_title": "TrustCom/BigDataSE/ISPA 2016: Tianjin, China",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7845250/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom.2016.0087",
        "title": "Classifying Android Malware with Dynamic Behavior Dependency Graphs",
        "authors": "Zimin Lin, Rui Wang, Xiaoqi Jia, Shengzhi Zhang, Chuankun Wu",
        "abstract": "Malware, a significant threat to maintain a healthy Android ecosystem, always receives considerable attentions. This paper proposes a new dynamic Android malware classification approach by constructing and analyzing the dynamic behavior dependency graphs together with both framework-level function call behaviors and their data dependencies. Features are extracted from behavior graphs of different malware families in an automated fashion, and are used to classify unknown Android apps. Towards verification, a prototype system is implemented, and both malicious and benign apps are used for test. The experiment results show that 94.7% of the evaluated malware are correctly classified and our approach is robust and can defeat multiple attacks.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "恶意软件是维护健康的Android生态系统的一个重要威胁，一直受到广泛关注。通过构建和分析动态行为依赖图，结合框架级函数调用行为及其数据依赖，提出了一种新的动态Android恶意软件分类方法。以自动化的方式从不同恶意软件家族的行为图中提取特征，并用于对未知的Android应用进行分类。为了验证，实现了一个原型系统，并使用恶意和良性应用程序进行测试。实验结果表明，94.7%的恶意软件被正确分类，我们的方法是鲁棒的，可以抵御多种攻击。",
        "title_zh": "基于动态行为依赖图的Android恶意软件分类",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2016.html",
        "conf_title": "TrustCom/BigDataSE/ISPA 2016: Tianjin, China",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7845250/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom.2016.0088",
        "title": "ForceDROID: Extracting Hidden Information in Android Apps by Forced Execution Technique",
        "authors": "Zimin Lin, Rui Wang, Xiaoqi Jia, Jingyu Yang, Daojuan Zhang, Chuankun Wu",
        "abstract": "Malware analysis technology is important for Android security. However, existing Android malware analysis approaches, both static approaches and dynamic approaches, have their own advantages and drawbacks. In this paper, by combining static and dynamic approaches, we propose the forced execution technique for Android apps to automatically extract their hidden information such as encoded URLs, promoting the security evaluation of Android apps. Our approach firstly searches some execution paths leading to critical functions based on static analysis. Then, by monitoring the control flow conditions of the target app, code on the selected paths is forcedly executed. In this process, an exception-tolerated execution sandbox is designed to ensure that selected execution flows finally reach the critical functions. Thus, important parameters related to the functions can be extracted with high probability. The main advantage of our approach is that the whole process is completely automatic and does not require complicated input contexts for the execution. We have implemented the prototype system ForceDROID. And two scenarios aiming at network connections and shell commands are designed to evaluate the effectiveness of our approach.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "恶意软件分析技术对于Android安全非常重要。然而，现有的Android恶意软件分析方法，无论是静态方法还是动态方法，都有各自的优缺点。本文通过静态和动态相结合的方法，提出了Android应用程序强制执行技术，以自动提取其隐藏信息，如编码的网址，促进Android应用程序的安全评估。我们的方法首先在静态分析的基础上搜索一些通向关键函数的执行路径。然后，通过监控目标app的控制流条件，强制执行所选路径上的代码。在此过程中，设计了一个允许异常的执行沙箱，以确保选定的执行流最终到达关键功能。因此，可以以高概率提取与函数相关的重要参数。我们的方法的主要优点是整个过程是完全自动的，并且不需要复杂的输入上下文来执行。我们已经实现了原型系统ForceDROID。针对网络连接和shell命令设计了两个场景来评估该方法的有效性。",
        "title_zh": "ForceDROID:通过强制执行技术提取Android应用中的隐藏信息",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2016.html",
        "conf_title": "TrustCom/BigDataSE/ISPA 2016: Tianjin, China",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7845250/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom.2016.0091",
        "title": "Security Analysis and Vulnerability Detection of Gesture-Based Lock in Android Applications",
        "authors": "Yu Wang, Yuqing Zhang, Kai Wang, Jingbo Yan",
        "abstract": "Gesture-based lock plays an important role in many Android applications to prevent unauthorized access. Unfortunately, application developers tend to abuse some features provided by Android platform and neglect their influence on the security. This may result in fatal vulnerabilities which can be exploited to bypass gesture-based lock. In this paper, we focus on the vulnerabilities of gesture-based locks in Android applications and propose a dynamic testing tool named Lock-Breaker to detect them. We test 63 popular applications from android markets using Lock-Breaker. The results show that 28 out of these 63 applications are facing security threats, and 13 of the 28 applications have obvious vulnerabilities. In the end, we make some suggestions on defence for vulnerabilities in gesture-based locks to help enhance the security of android applications.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "基于手势的锁在许多Android应用程序中起着重要的作用，以防止未经授权的访问。不幸的是，应用程序开发人员往往会滥用Android平台提供的一些功能，并忽略它们对安全性的影响。这可能会导致致命的漏洞，可被利用来绕过基于手势的锁定。本文针对Android应用中基于手势的锁的漏洞，提出了一种动态测试工具Lock-Breaker来检测这些漏洞。我们使用Lock-Breaker测试了来自android markets的63个流行应用。结果显示，这63款应用中有28款面临安全威胁，这28款应用中有13款存在明显漏洞。最后，我们对基于手势的锁的漏洞提出了一些防御建议，以帮助增强android应用程序的安全性。",
        "title_zh": "Android应用中手势锁的安全性分析和漏洞检测",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2016.html",
        "conf_title": "TrustCom/BigDataSE/ISPA 2016: Tianjin, China",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7845250/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom.2016.0104",
        "title": "SUIDroid: An Efficient Hardening-Resilient Approach to Android App Clone Detection",
        "authors": "Fang Lyu, Yapin Lin, Junfeng Yang, Junhai Zhou",
        "abstract": "The huge benefit of mobile application industry has attracted a large number of developers. However, application cloning is becoming a serious threat to the entire Android ecosystem, as it not only compromises the security and privacy of the app users but also robs app developers' revenue. As massive approaches have been proposed to address this issue, plagiarists also fight back through hardening their malicious code with the help of commercial packers. Previous work either not considers the hardening issue or just simply cracks the entire packed app, which may threat the security of legitimate packed app. In this paper, we propose SUIDroid, a novel app clone detection approach that can accurately detect the packed clone app without compromising the app hardening strategy. Another advantage of our detection approach is the accuracy. We propose a counting based technique to effectively filter the noisy-layout that can cause deviation. We evaluate our approach on two sets of app dataset. The experimental results on 160 packed malware samples demonstrate that SUIDroid is resilient to app hardening, and the evaluation on more than 100,000 real-world apps shows the efficiency of SUIDroid in real-world scenario.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "移动应用行业的巨大利益吸引了大量的开发者。然而，应用程序克隆正成为整个Android生态系统的严重威胁，因为它不仅危及应用程序用户的安全和隐私，还会剥夺应用程序开发者的收入。随着大量的方法被提出来解决这个问题，剽窃者也在商业包装者的帮助下通过强化他们的恶意代码来反击。以前的工作要么没有考虑加固问题，要么只是简单地破解整个打包应用，这可能威胁到合法打包应用的安全性。在本文中，我们提出了SUIDroid，一种新的应用克隆检测方法，可以准确地检测打包的克隆应用，而不影响应用加固策略。我们的检测方法的另一个优点是准确性。我们提出了一种基于计数的技术来有效地过滤可能导致偏差的噪声布局。我们在两组应用程序数据集上评估了我们的方法。在160个打包的恶意软件样本上的实验结果表明，SUIDroid对应用程序加固具有弹性，在超过100，000个真实世界应用程序上的评估显示了SUIDroid在真实世界场景中的效率。",
        "title_zh": "SUIDroid:一种高效的抗硬化Android应用克隆检测方法",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2016.html",
        "conf_title": "TrustCom/BigDataSE/ISPA 2016: Tianjin, China",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7845250/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom.2016.0110",
        "title": "Android App Malicious Behavior Detection Based on User Intention",
        "authors": "Jianming Fu, Pengwei Li, Yan Lin, Shuang Ding",
        "abstract": "Security-sensitive behaviors in Android applications (apps for short) may or may not be malicious. We propose that a fundamental difference between malicious and benign behaviors is that their corresponding user intentions are different, i.e., whether there is an association between the app behavior and user intention. The user knows and wants this behavior to happen. Based on this discovery, we first design and realize IBdroid, which can precisely monitor user inter-faces, user actions and security-sensitive behaviors of apps. Then the user intention features, which can perceive the correlations between user intention and app behavior from time, process, semantic and data perspectives, are extracted from the records obtained by IBdroid. Finally, an approach using user intention features is proposed to differentiate benign and malicious behaviors. In our evaluations, we correctly identify 333 out of 354 security-sensitive behaviors, achieving 96.43% precision and 91.53% recall, the experimental result demonstrates that our approach can effectively and accurately detect and block malicious behaviors of Android apps.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android应用程序(简称app)中的安全敏感行为可能是也可能不是恶意的。我们认为，恶意行为和良性行为的根本区别在于它们对应的用户意图不同，即应用程序行为和用户意图之间是否存在关联。用户知道并希望这种行为发生。基于这一发现，我们首先设计并实现了IBdroid，它可以精确地监控应用程序的用户界面、用户动作和安全敏感行为。然后从IBdroid获取的记录中提取用户意图特征，从时间、过程、语义和数据角度感知用户意图与app行为之间的关联。最后，提出了一种利用用户意图特征来区分良性和恶意行为的方法。在我们的评估中，我们从354个安全敏感行为中正确识别出333个，达到96.43%的准确率和91.53%的召回率，实验结果表明，我们的方法可以有效和准确地检测和阻止Android应用的恶意行为。",
        "title_zh": "基于用户意图的Android应用恶意行为检测",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2016.html",
        "conf_title": "TrustCom/BigDataSE/ISPA 2016: Tianjin, China",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7845250/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom.2016.0127",
        "title": "Anomadroid: Profiling Android Applications' Behaviors for Identifying Unknown Malapps",
        "authors": "Dan Su, Wei Wang, Xing Wang, Jiqiang Liu",
        "abstract": "Android has dominated the market of mobile devices. Meanwhile, it has become the main target for attackers. How to detect and analyze Android malicious applications (malapps) is an ongoing challenge. Current malapps have become increasingly sophisticated. In particular, zero-day (unknown) malapps appear very frequently and can evade most detection systems that are based on the signatures or patterns of existing malapps. In this work, we propose a system called Anomadroid (anomaly Android malapp detection system) that profiles the normal behaviors of Android apps based on only benign samples. Any app whose behaviors unacceptably deviate from the normal profile is identified as malicious. We firstly extract 4209 features that are divided into 9 categories such as permissions and APIs, from each app for the profiling. We then use term frequency-inverse document frequency (tf-idf) and employ k-Nearest Neighbor (k-NN) and Principal Component Analysis (PCA) for anomaly detection. We evaluate Anomadroid on a large app set consisting of 15,000 benign apps as well as 1500 malapps. The experimental results show that our system is better than existing methods and achieves a detection rate as 94.08% with false positive rate as 16.15%.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android已经统治了移动设备市场。同时，它也成为攻击者的主要目标。如何检测和分析Android恶意应用程序是一个持续的挑战。当前的malapps已经变得越来越复杂。特别是，零日(未知)恶意应用程序非常频繁地出现，并且可以逃避大多数基于现有恶意应用程序的特征或模式的检测系统。在这项工作中，我们提出了一个名为Anomadroid(异常Android malapp检测系统)的系统，该系统仅基于良性样本来描述Android应用程序的正常行为。任何行为不可接受地偏离正常配置文件的应用程序都被识别为恶意应用程序。我们首先从每个应用程序中提取4209个特征，分为权限和API等9个类别，用于进行概要分析。然后，我们使用术语频率-逆文档频率(tf-idf)并采用k-最近邻(k-NN)和主成分分析(PCA)进行异常检测。我们在由15，000个良性应用程序和1500个恶意应用程序组成的大型应用程序集上评估Anomadroid。实验结果表明，该系统的检测率为94.08%，误报率为16.15%，优于现有方法。",
        "title_zh": "Anomadroid:剖析Android应用程序的行为以识别未知的恶意应用程序",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2016.html",
        "conf_title": "TrustCom/BigDataSE/ISPA 2016: Tianjin, China",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7845250/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom.2016.0142",
        "title": "DroidContext: Identifying Malicious Mobile Privacy Leak Using Context",
        "authors": "Xiaolei Wang, Yuexiang Yang, Chuan Tang, Yingzhi Zeng, Jie He",
        "abstract": "Serious concerns have been raised about stealthy leakage of users privacy in mobile apps, and many recent approaches are also proposed to detect privacy leak in these apps. However, more and more benign mobile apps have to send out user's privacy for legitimate functions or user intention. To evade detection, new mobile malware starts to mimic privacy-related behaviors of benign apps that provide similar functionality, and mix malicious privacy leak with benign ones to reduce the chance of being observed. Since prior proposed approaches primarily focus on the privacy leak discovery, these evasive techniques in new mobile malware will make differentiating between malicious and benign privacy disclosures a difficult task during privacy leak analysis. In this paper, we propose DroidContext, an automated system that detects truly malicious privacy leakages in Android apps. DroidContext differentiates malicious and benign privacy disclosures using contexts (e.g., activation events and dependent operations that trigger and control privacy leak execution), purifying the privacy leak detection results for automatic and easy interpretation by filtering out benign privacy disclosures. We implement a prototype of DroidContext and evaluate DroidContext on 5560 mobile malware and 4800 Apkure apps. Experiment results show that, on average, DroidContext achieves a high 92.85% true positive during malicious privacy identification and the 95.45% true positive during benign privacy disclosures identification. The necessity of proposed contexts is also evaluated. Evaluation indicates that to keep the accuracy of privacy disclosure classification, our proposed contexts are all necessary.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "移动应用中用户隐私的秘密泄露引起了人们的严重关注，最近也提出了许多方法来检测这些应用中的隐私泄露。然而，越来越多的良性手机app为了合法功能或用户意图，不得不发出用户隐私。为了逃避检测，新的移动恶意软件开始模仿提供类似功能的良性应用程序的隐私相关行为，并将恶意隐私泄露与良性隐私泄露相混合，以减少被发现的机会。由于以前提出的方法主要集中在隐私泄露发现上，新移动恶意软件中的这些规避技术将使得在隐私泄露分析期间区分恶意和良性隐私泄露成为一项困难的任务。在本文中，我们提出了DroidContext，这是一个自动系统，可以检测Android应用程序中真正恶意的隐私泄露。DroidContext使用上下文(例如，触发和控制隐私泄露执行的激活事件和相关操作)来区分恶意和良性隐私泄露，通过过滤掉良性隐私泄露来净化隐私泄露检测结果以进行自动和容易的解释。我们实现了DroidContext的原型，并在5560个移动恶意软件和4800个Apkure应用程序上评估了DroidContext。实验结果表明，DroidContext在恶意隐私识别和良性隐私泄露识别中的正确率分别达到了92.85%和95.45%。建议的背景的必要性也被评估。评估表明，为了保持隐私泄露分类的准确性，我们提出的上下文都是必要的。",
        "title_zh": "DroidContext:利用上下文识别恶意移动隐私泄露",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2016.html",
        "conf_title": "TrustCom/BigDataSE/ISPA 2016: Tianjin, China",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7845250/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom.2016.0160",
        "title": "Forensic Analysis of Email on Android Volatile Memory",
        "authors": "Long Chen, Yue Mao",
        "abstract": "With the popularity of smart phones and the emergence of the mobile office mode, the traditional email forensics that works for computer has been already unable to satisfy the demands of reality, so forensic work needs to be expanded to a range of mobile devices, such as mobile phone, tablet, etc. In this paper, we will focus on examining if we can discover email-related information in the volatile memory of the mobile phone. Specifically, we choose Android mobile as a research focus, and two Chinese mainstream Android email applications—MailMaster and QQMail are as email client to the experimental test. Finally, we not only sort out the email-related information stored in the volatile memory, but also identify the patterns of the information saved in the memory. Moreover, based on these patterns, we also develop a tool named EmailFinder that can automatically extract the email-related information from memory dump. It can be utilized as a forensic tool on Android phones to assist forensic investigators retrieve email-related evidence from memory dump.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "随着智能手机的普及和移动办公模式的出现，传统的针对电脑的邮件取证已经无法满足现实的需求，取证工作需要扩展到一系列移动设备，如手机、平板电脑等。在本文中，我们将重点研究是否可以在手机的易失性存储器中发现与电子邮件相关的信息。具体来说，我们选择Android手机作为研究重点，以两个中国主流的Android电子邮件应用——mail master和QQMail作为邮件客户端进行实验测试。最后，我们不仅整理存储在易失性存储器中的与电子邮件相关的信息，还识别存储在存储器中的信息的模式。此外，基于这些模式，我们还开发了一个名为EmailFinder的工具，可以从内存转储中自动提取邮件相关信息。它可以用作Android手机上的取证工具，帮助取证调查人员从内存转储中检索与电子邮件相关的证据。",
        "title_zh": "Android易失性存储器上电子邮件的取证分析",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2016.html",
        "conf_title": "TrustCom/BigDataSE/ISPA 2016: Tianjin, China",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7845250/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom.2016.0183",
        "title": "An Indoor and Outdoor Seamless Positioning System Based on Android Platform",
        "authors": "Minglei Jia, Yanqin Yang, Lei Kuang, Wenchao Xu, Tianxing Chu, Hongzhi Song",
        "abstract": "The proliferation of powerful mobile devices, along with the increasing demand of location information, has driven the researches to develop positioning applications with higher accuracy. In this paper, we build an Android application which achieved the aim of seamless positioning between the inside and the outside. The system contains four parts: outdoor positioning, which uses GPS and Baidu Map, indoor positioning, which adopts Wi-Fi fingerprint positioning, contextual detection, including indoor and outdoor detection and floor detection, which takes advantage of multiple sensors integrated on Android, functional configuration, whose work is to establish and manage Wi-Fi fingerprint database. We developed an Android APP that runs on the smartphones and experiments have been carried out in real environment with good accuracy of output. Experimental results indicate a remarkable performance improvement by using the proposed method about HMM.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "功能强大的移动设备的激增，以及对位置信息日益增长的需求，推动了研究人员开发具有更高精度的定位应用。本文构建了一个Android应用程序，实现了内外无缝定位的目的。该系统包含四个部分:室外定位，使用GPS和百度地图；室内定位，采用Wi-Fi指纹定位；上下文检测，包括室内外检测和楼层检测，利用Android上集成的多个传感器；功能配置，其工作是建立和管理Wi-Fi指纹数据库。我们开发了一个运行在智能手机上的Android应用程序，并在真实环境中进行了实验，具有良好的输出准确性。实验结果表明，该方法能显著提高隐马尔可夫模型的性能。",
        "title_zh": "基于Android平台的室内外无缝定位系统",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2016.html",
        "conf_title": "TrustCom/BigDataSE/ISPA 2016: Tianjin, China",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7845250/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom.2016.0224",
        "title": "NVM-Assisted Non-redundant Logging for Android Systems",
        "authors": "Yuanchao Xu, Zeyi Hou",
        "abstract": "Logging is the most widely used technique to ensure the consistency of persistent data structures across system crashes or power failures in Android systems. Recent proposals are primarily limited to resolving the journaling of journal anomaly in order to mitigate or eliminate explicit redundant logging, and therefore fail to reduce non-trivial overhead induced by implicit redundant logging. In this paper, we analyze the root cause of implicit redundant logging, and then present i-FTL, a byte-addressable non-volatile memory (NVM) assisted non-redundant logging scheme for Android systems. i-FTL consists of two primary technical ingredients: i) filesystem metadata-aware application-level transaction, ii) NVM-assisted FTL mapping table. The evaluation demonstrates that i-FTL yields approximate 3x performance speedup over the ext4 file system with ordered journal mode and 10% on average performance speedup over X-FTL.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "日志记录是最广泛使用的技术，可确保在Android系统中跨系统崩溃或功率故障的持续数据结构的一致性。 最近的建议主要仅限于解决日志异常的日记，以减轻或消除显式冗余记录，因此无法减少由隐式冗余日志记录引起的非平凡的开销。 在本文中，我们分析了隐式冗余日志记录的根本原因，然后介绍了I-FETL，这是Android Systems的Byte-dy-dress-dress-dress-dress-dress-foldlatile Memenne（NVM）辅助非冗余记录方案。 I-FTL由两种主要技术成分组成：i）文件系统元数据感知应用程序级事务，ii）NVM辅助的FTL映射表。 评估表明，I-FEFL在Ext4文件系统上产生大约3倍的性能加速，并具有有序的日记帐模式，而在X-FTL上的平均性能加速为10％。",
        "title_zh": "用于Android系统的NVM辅助非冗余日志记录",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2016.html",
        "conf_title": "TrustCom/BigDataSE/ISPA 2016: Tianjin, China",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7845250/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom.2016.0225",
        "title": "VSP: A Virtual Smartphone Platform to Enhance the Capability of Physical Smartphone",
        "authors": "Meng Lai, Jiajun Wang, Tao Song, Ning Liu, Zhengwei Qi, Weijia Zhou",
        "abstract": "Smart mobile devices have become ubiquitous, and people prefer to choose smartphone in daily life rather than use traditional personal computer. However, due to the hardware capability, performance of smartphones varies greatly and sometimes it cannot meet the demand of users. Furthermore, if smartphone is attacked by malicious application, the local private sensitive information will be leaked which in turn will cause huge losses. This paper proposes VSP, a Virtual Smartphone Platform. It offers a new way to enhance the capability of physical smartphone by providing virtual smartphone (VS) deployed in cloud. Users operate VS remotely through the thin-client of VSP on physical smartphones, and ignore the limits of physical mobile devices. The isolation of VS in cloud platform guarantees the security between VSes, and also prevents access to private sensitive information on physical devices. The evaluation indicates that average bandwidth cost with zlib is about 80 kBps and it is suitable for use in practice. Index Terms—Virtualization, Android, Remote Display, Cloud Computing, Ant Colony Optimization.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "智能移动设备已经变得无处不在，人们在日常生活中更愿意选择智能手机，而不是使用传统的个人电脑。然而，由于硬件能力的原因，智能手机的性能差异很大，有时无法满足用户的需求。此外，如果智能手机受到恶意应用程序的攻击，本地隐私敏感信息将被泄露，进而造成巨大损失。本文提出了虚拟智能手机平台VSP。它通过提供部署在云中的虚拟智能手机，为增强物理智能手机的功能提供了一种新的方法。用户在物理智能手机上通过VSP的瘦客户端远程操作VS，而忽略了物理移动设备的限制。云平台中VS的隔离保证了VSE之间的安全性，也防止了对物理设备上私有敏感信息的访问。评估表明，zlib的平均带宽成本约为80 kBps，适合实际应用。索引术语—虚拟化、Android、远程显示、云计算、蚁群优化。",
        "title_zh": "VSP:增强物理智能手机功能的虚拟智能手机平台",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2016.html",
        "conf_title": "TrustCom/BigDataSE/ISPA 2016: Tianjin, China",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7845250/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom.2016.0269",
        "title": "DroidCollector: A High Performance Framework for High Quality Android Traffic Collection",
        "authors": "Dong Cao, Shanshan Wang, Qun Li, Zhenxiang Chen, Qiben Yan, Lizhi Peng, Bo Yang",
        "abstract": "In this mobile era, people have become increasingly dependent on smart devices. Smartphones have emerged as the most popular smart computing device. However, numerous security issues affecting smartphones have been exposed. In recent years, mobile network traffic based approaches have been proposed to identify malware malicious behaviors, but these approaches, especially the approaches using machine learning methods are largely constrained by the difficulty of mobile traffic dataset collection. Without sufficient and effective mobile traffic dataset, research focusing on mobile network traffic will be hindered. This study introduces DroidCollector, a high performance framework for high quality Android traffic collection. This framework leverages multithreading to perform active and automatic network traffic collection. Using this framework, we collect 808 MB and 330 MB traffic data generated by 6000 benign apps and 5560 malicious apps in a short period of time, respectively. The collected high quality traffic is mostly generated from apps and with little irrelevant traffic. We also apply machine learning algorithm on the extracted traffic features to identify malicious network behaviors. The experimental result shows that it can achieve a malicious traffic detection rate of 98% on average.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "在这个移动时代，人们越来越依赖智能设备。 智能手机已成为最受欢迎的智能计算设备。 但是，已经暴露了许多影响智能手机的安全问题。 近年来，已经提出了基于移动网络流量的方法来识别恶意行为，但是这些方法，尤其是使用机器学习方法的方法在很大程度上受到移动流量数据集收集的难度的限制。 如果没有足够有效的移动流量数据集，则将阻碍关注移动网络流量的研究。 这项研究介绍了DroidCollector，这是一个高质量Android交通收集的高性能框架。 该框架利用多线程来执行主动和自动网络流量收集。 使用此框架，我们分别在短时间内收集了由6000个良性应用程序和5560个恶意应用程序生成的808 MB和330 MB流量数据。 收集的高质量流量主要是由应用程序产生的，而且流量几乎无关。 我们还将机器学习算法应用于提取的流量功能，以识别恶意网络行为。 实验结果表明，它可以平均达到98％的恶意交通检测率。",
        "title_zh": "DroidCollector:一个用于高质量Android流量收集的高性能框架",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2016.html",
        "conf_title": "TrustCom/BigDataSE/ISPA 2016: Tianjin, China",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7845250/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TrustCom.2016.0283",
        "title": "On Probabilistic Application Compliance",
        "authors": "Antonio La Marra, Fabio Martinelli, Andrea Saracino, Alessandro Aldini",
        "abstract": "The Security-by-Contract is a paradigm developed to offer a secure environment in which mobile applications can be executed by respecting the security policies of interest. Especially in the Android Apps marketplace, establishing precisely the expected secure app behavior is typically a complex operation that is prone to approximations. Hence, it is worth considering extensions of purely functional approaches that allow the security relevant actions to be quantitatively assessed. This also opens the possibility to balance the application of (expensive) enforcement mechanisms with the security guarantees. With these objectives in view, in this paper we define a probabilistic extension of the Security-by-Contract model, and we show its impact in real-world scenarios through the analysis of several practical Android applications.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "逐项合同是开发的范式，旨在提供一个安全的环境，在该环境中，可以通过尊重感兴趣的安全策略来执行移动应用程序。 尤其是在Android Apps Marketplace中，精确确定预期的安全应用程序行为通常是一个容易近似的复杂操作。 因此，值得考虑纯粹的功能方法的扩展，这些方法可以定量评估安全性相关的行动。 这也打开了平衡（昂贵）执法机制与安全保证的可能性。 考虑到这些目标，在本文中，我们定义了逐项合同模型的概率扩展，并通过分析几种实用的Android应用程序来显示其在现实情况中的影响。",
        "title_zh": "概率应用合规性",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/trustcom/trustcom2016.html",
        "conf_title": "TrustCom/BigDataSE/ISPA 2016: Tianjin, China",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7845250/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-030-52683-2_6",
        "title": "Understanding Android VoIP Security: A System-Level Vulnerability Assessment",
        "authors": "En He, Daoyuan Wu, Robert H. Deng",
        "abstract": "",
        "files": {
            "openAccessPdf": "https://link.springer.com/content/pdf/10.1007%2F978-3-030-52683-2_6.pdf"
        },
        "abstract_zh": "",
        "title_zh": "了解Android VoIP安全：系统级漏洞评估",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/dimva/dimva2020.html",
        "conf_title": "DIMVA 2020: Lisbon, Portugal",
        "conf_url": "https://doi.org/10.1007/978-3-030-52683-2",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-030-80825-9_16",
        "title": "PetaDroid: Adaptive Android Malware Detection Using Deep Learning",
        "authors": "ElMouatez Billah Karbab, Mourad Debbabi",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "Petadroid：使用深度学习的自适应Android恶意软件检测",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/dimva/dimva2021.html",
        "conf_title": "DIMVA 2021: Virtual Event",
        "conf_url": "https://doi.org/10.1007/978-3-030-80825-9",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-93411-2_4",
        "title": "Honey, I Shrunk Your App Security: The State of Android App Hardening",
        "authors": "Vincent Haupert, Dominik Christian Maier, Nicolas Schneider, Julian Kirsch, Tilo Müller",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "亲爱的，我缩小了您的应用程序安全：Android应用的状态硬化",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/dimva/dimva2018.html",
        "conf_title": "DIMVA 2018: Saclay, France",
        "conf_url": "https://doi.org/10.1007/978-3-319-93411-2",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-40667-1_8",
        "title": "On the Lack of Consensus in Anti-Virus Decisions: Metrics and Insights on Building Ground Truths of Android Malware",
        "authors": "Médéric Hurier, Kevin Allix, Tegawendé F. Bissyandé, Jacques Klein, Yves Le Traon",
        "abstract": "",
        "files": {
            "openAccessPdf": "https://orbilu.uni.lu/bitstream/10993/27845/1/PAPER.pdf"
        },
        "abstract_zh": "",
        "title_zh": "关于反病毒决策中缺乏共识：关于建立Android恶意软件地面真理的指标和见解",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/dimva/dimva2016.html",
        "conf_title": "DIMVA 2016: San Sebastián, Spain",
        "conf_url": "https://doi.org/10.1007/978-3-319-40667-1",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-20550-2_15",
        "title": "On the Security and Engineering Implications of Finer-Grained Access Controls for Android Developers and Users",
        "authors": "Yanick Fratantonio, Antonio Bianchi, William K. Robertson, Manuel Egele, Christopher Kruegel, Engin Kirda, Giovanni Vigna",
        "abstract": "",
        "files": {
            "openAccessPdf": "https://cs.ucsb.edu/%7Evigna/publications/2015_DIMVA_AndroidAccess.pdf"
        },
        "abstract_zh": "",
        "title_zh": "关于Android开发人员和用户的细粒度访问控件的安全性和工程含义",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/dimva/dimva2015.html",
        "conf_title": "DIMVA 2015: Milan, Italy",
        "conf_url": "https://doi.org/10.1007/978-3-319-20550-2",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-60876-1_12",
        "title": "Deep Ground Truth Analysis of Current Android Malware",
        "authors": "Fengguo Wei, Yuping Li, Sankardas Roy, Xinming Ou, Wu Zhou",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "目前的Android恶意软件的深层真相分析",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/dimva/dimva2017.html",
        "conf_title": "DIMVA 2017: Bonn, Germany",
        "conf_url": "https://doi.org/10.1007/978-3-319-60876-1",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/DSN48063.2020.00048",
        "title": "Libspector : Context-Aware Large-Scale Network Traffic Analysis of Android Applications",
        "authors": "Onur Zungur, Gianluca Stringhini, Manuel Egele",
        "abstract": "Android applications (apps) are a combination of code written by the developers as well as third-party libraries that carry out most commonly used functionalities such as advertisement and payments. Running apps in a monitoring environment allows researchers to measure how much network traffic is exchanged between an app and remote endpoints. However, current systems currently do not have the ability to reliably distinguish traffic that is generated by different libraries. This is important, because while mobile users are paying for data traffic without distinctions, some of this traffic is useful (e.g., data for core app functionalities), whereas the rest of the traffic can be considered a nuisance (e.g., excessive advertisements). In this paper, we present Libspector, a system that precisely attributes network traffic coming from an Android app to the library that generated it. To this end, we instrument the Android Framework to inspect the network connections initiated by apps, provide fine-grained information on the libraries in use, and calculate method coverage information while performing dynamic analysis. We then perform a measurement on 25,000 popular Android apps and investigate the relation between different categories of apps with the use of specific libraries. We analyze the method coverage of our dynamic analysis method, and further characterize the endpoint connections established by the Android apps. Our results indicate that advertisement libraries account for over a quarter of the total data transmission. We further observe that there is no strict 1-to-1 correlation between the similar categories of network endpoints and libraries which initiated the data transfer.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android应用程序(apps)是由开发者编写的代码和第三方库的组合，执行最常用的功能，如广告和支付。在监控环境中运行应用程序允许研究人员测量应用程序和远程端点之间交换的网络流量。然而，当前的系统不具备可靠地区分不同库产生的流量的能力。这一点很重要，因为虽然移动用户不加区别地为数据流量付费，但其中一些流量是有用的(例如核心应用功能的数据)，而其余的流量则可能被视为令人讨厌的(例如过多的广告)。在本文中，我们介绍了Libspector，这是一个可以精确地将来自Android应用程序的网络流量归属于生成它的库的系统。为此，我们使用Android框架来检查应用程序启动的网络连接，提供正在使用的库的细粒度信息，并在执行动态分析的同时计算方法覆盖信息。然后，我们对25，000个流行的Android应用程序进行了测量，并调查了不同类别的应用程序与特定库的使用之间的关系。我们分析了我们的动态分析方法的方法覆盖范围，并进一步描述了Android应用程序建立的端点连接。我们的结果表明，广告库占总数据传输的四分之一以上。我们进一步观察到，在发起数据传输的相似类别的网络端点和库之间没有严格的一对一的关联。",
        "title_zh": "libspector:Android应用的上下文感知大规模网络流量分析",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/dsn/dsn2020.html",
        "conf_title": "50th DSN 2020: Valencia, Spain",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/9145511/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/DSN48063.2020.00053",
        "title": "Hybrid Firmware Analysis for Known Mobile and IoT Security Vulnerabilities",
        "authors": "Pengfei Sun, Luis Garcia, Gabriel Salles-Loustau, Saman A. Zonouz",
        "abstract": "Mobile and IoT operating systems–and their ensuing software updates–are usually distributed as binary files. Given that these binary files are commonly closed source, users or businesses who want to assess the security of the software need to rely on reverse engineering. Further, verifying the correct application of the latest software patches in a given binary is an open problem. The regular application of software patches is a central pillar for improving mobile and IoT device security. This requires developers, integrators, and vendors to propagate patches to all affected devices in a timely and coordinated fashion. In practice, vendors follow different and sometimes improper security update agendas for both mobile and IoT products. Moreover, previous studies revealed the existence of a hidden patch gap: several vendors falsely reported that they patched vulnerabilities. Therefore, techniques to verify whether vulnerabilities have been patched or not in a given binary are essential. Deep learning approaches have shown to be promising for static binary analyses with respect to inferring binary similarity as well as vulnerability detection. However, these approaches fail to capture the dynamic behavior of these systems, and, as a result, they may inundate the analysis with false positives when performing vulnerability discovery in the wild. In particular, they cannot capture the fine-grained characteristics necessary to distinguish whether a vulnerability has been patched or not. In this paper, we present PATCHECKO, a vulnerability and patch presence detection framework for executable binaries. PATCHECKO relies on a hybrid, cross-platform binary code similarity analysis that combines deep learning-based static binary analysis with dynamic binary analysis. PATCHECKO does not require access to the source code of the target binary nor that of vulnerable functions. We evaluate PATCHECKO on the most recent Google Pixel 2 smartphone and the Android Things IoT firmware images, within which 25 known CVE vulnerabilities have been previously reported and patched. Our deep learning model shows a vulnerability detection accuracy of over 93%. We further prune the candidates found by the deep learning stage–which includes false positives–via dynamic binary analysis. Consequently, PATCHECKO successfully identifies the correct matches among the candidate functions in the top 3 ranked outcomes 100% of the time. Furthermore, PATCHECKO's differential engine distinguishes between functions that are still vulnerable and those that are patched with an accuracy of 96%.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "移动和物联网操作系统——及其随之而来的软件更新——通常以二进制文件的形式分发。鉴于这些二进制文件通常是封闭源代码，想要评估软件安全性的用户或企业需要依靠逆向工程。此外，验证给定二进制文件中最新软件补丁的正确应用是一个公开的问题。定期应用软件补丁是提高移动和物联网设备安全性的核心支柱。这要求开发人员、集成商和供应商及时、协调地将补丁传播到所有受影响的设备。在实践中，对于移动和物联网产品，供应商遵循不同且有时不正确的安全更新议程。此外，以前的研究揭示了隐藏的补丁漏洞的存在:几个供应商错误地报告他们修补了漏洞。因此，验证给定二进制文件中的漏洞是否已被修补的技术是必不可少的。深度学习方法已被证明在推断二进制相似性以及脆弱性检测方面对于静态二进制分析是有前途的。然而，这些方法无法捕捉这些系统的动态行为，因此，当在野外执行漏洞发现时，它们可能会使分析淹没在误报中。特别是，它们无法捕获区分漏洞是否已被修补所需的细粒度特征。在本文中，我们介绍了PATCHECKO，这是一个针对可执行二进制文件的漏洞和补丁检测框架。PATCHECKO依靠一种混合的、跨平台的二进制代码相似性分析，该分析结合了基于深度学习的静态二进制分析和动态二进制分析。PATCHECKO不需要访问目标二进制文件的源代码，也不需要访问易受攻击的函数的源代码。我们在最新的谷歌Pixel 2智能手机和Android Things物联网固件映像上评估了PATCHECKO，其中25个已知的CVE漏洞此前已被报告和修补。我们的深度学习模型显示漏洞检测准确率超过93%。我们通过动态二进制分析，进一步删减深度学习阶段发现的候选项，其中包括误报。因此，PATCHECKO在100%的时间里成功地在前3个排序结果的候选函数中识别出正确的匹配。此外，PATCHECKO的差分引擎以96%的准确率区分了仍易受攻击的函数和已修补的函数。",
        "title_zh": "针对已知移动和物联网安全漏洞的混合固件分析",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/dsn/dsn2020.html",
        "conf_title": "50th DSN 2020: Valencia, Spain",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/9145511/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/DSN48987.2021.00063",
        "title": "When Program Analysis Meets Bytecode Search: Targeted and Efficient Inter-procedural Analysis of Modern Android Apps in BackDroid",
        "authors": "Daoyuan Wu, Debin Gao, Robert H. Deng, Rocky K. C. Chang",
        "abstract": "Widely-used Android static program analysis tools, e.g., Amandroid and FlowDroid, perform the whole-app inter-procedural analysis that is comprehensive but fundamentally difficult to handle modern (large) apps. The average app size has increased three to four times over five years. In this paper, we explore a new paradigm of targeted inter-procedural analysis that can skip irrelevant code and focus only on the flows of security-sensitive sink APIs. To this end, we propose a technique called on-the-fly bytecode search, which searches the disassembled app bytecode text just in time when a caller needs to be located. In this way, it guides targeted (and backward) inter-procedural analysis step by step until reaching entry points, without relying on a whole-app graph. Such search-based inter-procedural analysis, however, is challenging due to Java polymorphism, callbacks, asynchronous flows, static initializers, and inter-component communication in Android apps. We overcome these unique obstacles in our context by proposing a set of bytecode search mechanisms that utilize flexible searches and forward object taint analysis. Atop this new inter-procedural analysis, we further adjust the traditional backward slicing and forward constant propagation to provide the complete dataflow tracking of sink API calls. We have implemented a prototype called BackDroid and compared it with Amandroid in analyzing 3,178 modern popular apps for crypto and SSL misconfigurations. The evaluation shows that for such sink-based problems, BackDroid is 37 times faster (2.13v.s. 78.15 minutes) and has no timed-out failure (v.s. 35% in Amandroid) while maintaining close or even better detection effectiveness.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "广泛使用的Android静态程序分析工具，如Amandroid和FlowDroid，执行全面的整个应用程序间分析，但从根本上难以处理现代(大型)应用程序。在过去的五年中，应用程序的平均大小增加了三到四倍。在本文中，我们探索了一种新的有针对性的过程间分析范式，它可以跳过不相关的代码，只关注安全敏感的sink APIs流。为此，我们提出了一种称为动态字节码搜索的技术，当需要定位调用者时，它会及时搜索反汇编的应用程序字节码文本。通过这种方式，它一步一步地指导有针对性的(和向后的)过程间分析，直到到达入口点，而不依赖于整个应用程序图。然而，由于Java多态性、回调、异步流、静态初始化器和Android应用中的组件间通信，这种基于搜索的过程间分析具有挑战性。我们通过提出一组字节码搜索机制来克服我们上下文中的这些独特障碍，这些机制利用了灵活的搜索和转发对象污点分析。在这个新的过程间分析之上，我们进一步调整了传统的向后切片和向前常数传播，以提供对接收器API调用的完整数据流跟踪。我们实现了一个名为BackDroid的原型，并将其与Amandroid进行了比较，分析了3178个现代流行应用程序的加密和SSL错误配置。评估表明，对于这种基于sink的问题，BackDroid的速度快了37倍(2.13v.s. 78.15分钟)，并且没有超时故障(在Amandroid中为35%)，同时保持接近甚至更好的检测效率。",
        "title_zh": "当程序分析遇到字节码搜索:BackDroid中现代Android应用程序的有针对性和高效的程序间分析",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/dsn/dsn2021.html",
        "conf_title": "51st DSN 2021: Taipei, Taiwan",
        "conf_url": "https://doi.org/10.1109/DSN48987.2021",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/DSN-S52858.2021.00025",
        "title": "Designing Adversarial Attack and Defence for Robust Android Malware Detection Models",
        "authors": "Hemant Rathore, Sanjay K. Sahay, Jasleen Dhillon, Mohit Sewak",
        "abstract": "The last decade witnessed an exponential rise of Android smartphones and malware attacks on them. Researchers have investigated and proposed many promising malware detection models based on machine learning. However, these malware detection models are susceptible to adversarial attacks which threaten the Android security ecosystem. In this article, we propose to develop malware detection models which are more robust against adversarial attacks. We first designed an i-bit adversarial attack policy which achieved an average fooling rate of 51% with maximum ten modifications across twelve different malware detection models. Later we also propose an adversarial defence mechanism which enhanced the robustness of the malware detection models by reducing the fooling rate to one-third against the same adversarial attack.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "过去十年见证了Android智能手机和恶意软件攻击的指数级增长。研究人员已经研究并提出了许多基于机器学习的有前途的恶意软件检测模型。然而，这些恶意软件检测模型容易受到威胁Android安全生态系统的对抗性攻击。在这篇文章中，我们提出开发恶意软件检测模型，更强大的对抗敌对攻击。我们首先设计了一个I位对抗性攻击策略，在12个不同的恶意软件检测模型中，通过最多10次修改，实现了51%的平均欺骗率。随后，我们还提出了一种对抗性防御机制，通过将相同对抗性攻击的愚弄率降低到三分之一，增强了恶意软件检测模型的鲁棒性。",
        "title_zh": "为鲁棒的Android恶意软件检测模型设计对抗性攻击和防御",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/dsn/dsn2021s.html",
        "conf_title": "51th DSN 2021: Taipei, Taiwan - Supplemental Volume",
        "conf_url": "https://doi.org/10.1109/DSN-S52858.2021",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/DSN53405.2022.00056",
        "title": "WideLeak: How Over-the-Top Platforms Fail in Android",
        "authors": "Gwendal Patat, Mohamed Sabt, Pierre-Alain Fouque",
        "abstract": "Nowadays, most content providers rely on DRM (Digital Right Management) to protect media from illegal distribution. Becoming a major platform for streaming, Android provides its own DRM framework that does not comply with existing DRM standards. Thus, OTT (over-the-top) platforms need to adapt their apps to suit Android design, despite a fragmented ecosystem and little public documentation. Unfortunately, the security implications of how OTT apps leverage Widevine, the most popular Android DRM, have not been studied yet.In this paper, we report the first experimental study on the state of Widevine use in the wild. Our study explores OTT compliance with Widevine guidelines regarding asset protection and legacy phone support. With the evaluation of premium OTT apps, our experiments bring to light that most apps adopt weak and potentially vulnerable practices. We illustrate our findings by showing how to easily recover media content from many OTT apps, including Netflix.",
        "files": {
            "openAccessPdf": "https://hal-univ-rennes1.archives-ouvertes.fr/hal-03637107/file/wideleak.pdf"
        },
        "abstract_zh": "如今，大多数内容提供商依靠DRM(数字版权管理)来保护媒体免受非法分发。作为流媒体的主要平台，Android提供了自己的DRM框架，该框架不符合现有的DRM标准。因此，OTT (over-the-top)平台需要调整其应用程序以适应Android设计，尽管生态系统支离破碎，公共文档也很少。不幸的是，OTT应用如何利用最流行的Android DRM wide vine的安全影响尚未得到研究。在这篇文章中，我们报道了第一个关于野生野生葡萄使用状况的实验研究。我们的研究探讨了OTT是否符合Widevine关于资产保护和传统电话支持的指导方针。通过对优质OTT应用的评估，我们的实验揭示了大多数应用采用了薄弱和潜在易受攻击的做法。我们通过展示如何从包括网飞在内的许多OTT应用中轻松恢复媒体内容来说明我们的发现。",
        "title_zh": "wide leak:Android中的高端平台是如何失败的",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/dsn/dsn2022.html",
        "conf_title": "52nd DSN 2022: Baltimore, MD, USA",
        "conf_url": "https://doi.org/10.1109/DSN53405.2022",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/DSN53405.2022.00059",
        "title": "SIMulation: Demystifying (Insecure) Cellular Network based One-Tap Authentication Services",
        "authors": "Ziyi Zhou, Xing Han, Zeyuan Chen, Yuhong Nan, Juanru Li, Dawu Gu",
        "abstract": "A recently emerged cellular network based One-Tap Authentication (OTAuth) scheme allows app users to quickly sign up or log in to their accounts conveniently: Mobile Network Operator (MNO) provided tokens instead of user passwords are used as identity credentials. After conducting a first in-depth security analysis, however, we have revealed several fundamental design flaws among popular OTAuth services, which allow an adversary to easily (1) perform unauthorized login and register new accounts as the victim, (2) illegally obtain identities of victims, and (3) interfere OTAuth services of legitimate apps. To further evaluate the impact of our identified issues, we propose a pipeline that integrates both static and dynamic analysis. We examined 1,025/894 Android/iOS apps, each app holding more than 100 million installations. We confirmed 396/398 Android/iOS apps are affected. Our research systematically reveals the threats against OTAuth services. Finally, we provide suggestions on how to mitigate these threats accordingly.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "最近出现的基于蜂窝网络的一键认证(OTAuth)方案允许应用程序用户快速注册或方便地登录他们的帐户:移动网络运营商(MNO)提供的令牌而不是用户密码被用作身份凭证。然而，在进行了第一次深入的安全分析后，我们发现了流行的OTAuth服务中的几个基本设计缺陷，这些缺陷允许对手轻松地(1)执行未经授权的登录并注册新帐户作为受害者，(2)非法获取受害者的身份，以及(3)干扰合法应用程序的OTAuth服务。为了进一步评估我们确定的问题的影响，我们提出了一个集成静态和动态分析的管道。我们检查了1，025/894个Android/iOS应用程序，每个应用程序都有超过1亿次安装。我们确认396/398个Android/iOS应用程序受到影响。我们的研究系统地揭示了对OTAuth服务的威胁。最后，我们就如何相应地减轻这些威胁提供了建议。",
        "title_zh": "模拟:解密(不安全的)基于蜂窝网络的一键认证服务",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/dsn/dsn2022.html",
        "conf_title": "52nd DSN 2022: Baltimore, MD, USA",
        "conf_url": "https://doi.org/10.1109/DSN53405.2022",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/DSN53405.2022.00062",
        "title": "SAINTDroid: Scalable, Automated Incompatibility Detection for Android",
        "authors": "Bruno Vieira Resende e Silva, Clay Stevens, Niloofar Mansoor, Witawas Srisa-an, Tingting Yu, Hamid Bagheri",
        "abstract": "With the ever-increasing popularity of mobile devices over the last decade, mobile applications and the frameworks upon which they are built frequently change, leading to a confusing jumble of devices and applications utilizing differing features even within the same framework. For Android apps and devices—the largest such framework and marketplace— mismatches between the version of the app API installed on a device and the version targeted by the developers of an app running on that device can lead to run-time crashes, providing a poor user experience. This paper presents SAINTDroid, a holistic compatibility analysis approach that seamlessly examines both the application code and the framework code by gradually loading and analyzing classes as needed during the compatibility analysis to enable efficient and scalable identification of various types of crash-leading Android compatibility issues. We applied SAINTDroid to 3,590 real-world apps and compared the analysis results against the state-of-the-art techniques, which corroborates that SAINTDroid is up to 76% more successful in detecting compatibility issues while issuing significantly fewer false alarms. The experimental results also show that SAINTDroid is remarkably (up to 8.3 times and four times on average) faster than the state-of-the-art techniques.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "在过去十年中，随着移动设备的日益普及，移动应用和构建移动应用的框架频繁变化，导致即使在同一框架内也使用不同特征的设备和应用混乱混杂。对于Android应用和设备——最大的此类框架和市场——来说，设备上安装的应用API版本与该设备上运行的应用的开发者所针对的版本之间的不匹配可能会导致运行时崩溃，从而提供糟糕的用户体验。本文介绍了SAINTDroid，这是一种全面的兼容性分析方法，通过在兼容性分析期间根据需要逐步加载和分析类，无缝地检查应用程序代码和框架代码，以便高效和可扩展地识别各种类型的导致崩溃的Android兼容性问题。我们将SAINTDroid应用于3，590个真实世界的应用程序，并将分析结果与最先进的技术进行了比较，这证实了SAINTDroid在检测兼容性问题方面的成功率提高了76%，同时发出的错误警报明显减少。实验结果还表明，SAINTDroid明显快于现有技术(平均快8.3倍和4倍)。",
        "title_zh": "SAINTDroid:适用于Android的可扩展自动不兼容检测",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/dsn/dsn2022.html",
        "conf_title": "52nd DSN 2022: Baltimore, MD, USA",
        "conf_url": "https://doi.org/10.1109/DSN53405.2022",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/DSN.2015.17",
        "title": "Secure Dynamic Software Loading and Execution Using Cross Component Verification",
        "authors": "Byungho Min, Vijay Varadharajan",
        "abstract": "In this paper, we propose a cross verification mechanism for secure execution and dynamic component loading. Our mechanism is based on a combination of code signing and same-origin policy, and it blocks several types of attacks from drive-by download attacks to malicious component loadings such as DLL hijacking, DLL side-loading, binary hijacking, typical DLL injection and loading of newly installed malware components, even when malicious components have valid digital signatures. Considering modern malware often uses stolen private keys to sign its binaries and bypass code signing mechanism, we believe the proposed mechanism can significantly improve the security of modern computing platforms. In addition, the proposed mechanism protects proprietary software components so that unauthorised use of such components cannot occur. We have implemented a prototype for Microsoft Windows 7 and XP SP3, and evaluated application execution and dynamic component loading behaviour under our security mechanism. The proposed mechanism is general, and can be applied to other major computing platforms including Android, Linux and Mac OS X.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "本文提出了一种安全执行和动态组件加载的交叉验证机制。我们的机制基于代码签名和同源策略的组合，并且它阻止几种类型的攻击，从驱动下载攻击到恶意组件加载，例如DLL劫持、DLL侧加载、二进制劫持、典型的DLL注入和新安装的恶意组件的加载，即使恶意组件具有有效的数字签名。考虑到现代恶意软件通常使用窃取的私钥对其二进制文件进行签名，并绕过代码签名机制，我们认为所提出的机制可以显著提高现代计算平台的安全性。此外，所提出的机制保护专有软件组件，从而不会发生对这些组件的未授权使用。我们已经为微软Windows 7和XP SP3实现了一个原型，并在我们的安全机制下评估了应用执行和动态组件加载行为。所提出的机制是通用的，可以应用于包括Android、Linux和Mac OS X在内的其他主流计算平台。",
        "title_zh": "使用交叉组件验证的安全动态软件加载和执行",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/dsn/dsn2015.html",
        "conf_title": "DSN 2015: Rio de Janeiro, Brazil",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7265894/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/DSN.2015.15",
        "title": "Decomposable Trust for Android Applications",
        "authors": "Earlence Fernandes, Ajit Aluri, Alexander Crowell, Atul Prakash",
        "abstract": "Current operating system designs require applications (apps) to implicitly place trust in a large amount of code. Taking Android as an example, apps must trust both the kernel as well as privileged userspace services that consist of hundreds of thousands of lines of code. Malware apps, on the other hand, aim to exploit any vulnerabilities in the above large trusted base to escalate their privileges. Once malware escalates its privileges, additional attacks become feasible, such as stealing credentials by scanning memory pages or intercepting user interactions of sensitive apps, e.g., those used for banking or health management. This paper introduces a novel mechanism, called Anception, that strategically deprivileges a significant portion of the kernel and system services, moving them to an untrusted container, thereby significantly reducing the attack surface for privilege escalation available to malware. Anception supports unmodified apps, running on a modified Android kernel. It achieves performance close to native Android on several popular macro benchmarks and provides security against many types of known Android root exploits.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "当前的操作系统设计要求应用程序(app)隐含地信任大量代码。以Android为例，应用程序必须信任内核和特权用户空间服务，这些服务由成千上万行代码组成。另一方面，恶意软件应用程序旨在利用上述大型可信基础中的任何漏洞来提升其权限。一旦恶意软件提升其权限，其他攻击变得可行，例如通过扫描内存页面或拦截敏感应用程序(例如，用于银行或健康管理的应用程序)的用户交互来窃取凭证。本文介绍了一种新的机制，称为Anception，它从战略上剥夺了内核和系统服务的重要部分，将它们移动到不可信的容器中，从而大大减少了恶意软件对权限提升的攻击面。Anception支持未经修改的应用程序，运行在经过修改的Android内核上。它在几个流行的宏基准上实现了接近原生Android的性能，并提供了针对许多类型的已知Android root漏洞的安全性。",
        "title_zh": "Android应用程序的可分解信任",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/dsn/dsn2015.html",
        "conf_title": "DSN 2015: Rio de Janeiro, Brazil",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7265894/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/DSN.2018.00049",
        "title": "FragDroid: Automated User Interface Interaction with Activity and Fragment Analysis in Android Applications",
        "authors": "Jia Chen, Ge Han, Shanqing Guo, Wenrui Diao",
        "abstract": "Recent years have witnessed the enormous growth of Android phones in the consumer market. On the other hand, as the most popular mobile platform, Android also attracts lots of attackers' attention. As a result, more and more Android malicious apps appear in the wild, which poses a serious threat to user's security and privacy. To such massive volume of Android malware, automated UI testing techniques have become the mainstream solutions because of the detection efficiency and accuracy. However, all existing UI testing techniques treat the Activity as the basic unit of UI interactions and cannot carry out a fine-grained analysis for Fragments. Due to the lack of Fragment-level analysis, the path coverage is usually quite limited. To fill this gap, in this paper, we propose FragDroid, a novel automated UI testing framework supporting both Activity and Fragment analysis. To achieve the Fragment-level testing, we design the Activity & Fragment Transition Model (AFTM) to simulate the internal interactions of an app, and ATFM could be utilized to generate test cases automatically through UI interactions. With the assist of AFTM, FragDroid achieves accessing most Activities and Fragments contained in the app along with the capability of detecting arbitrary API calls. We implemented a prototype of FragDroid and evaluated it on 15 popular apps. The results show FragDroid successfully covered 66% Fragments and the corresponding API calls of testing apps. Also, the traditional approaches have to miss at least 9.6% of API calls invoked in Fragments.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "近年来，Android手机在消费市场上取得了巨大的增长。另一方面，作为最流行的移动平台，Android也吸引了大量攻击者的注意。因此，越来越多的Android恶意应用出现在野外，对用户的安全和隐私造成了严重威胁。面对如此海量的Android恶意软件，自动化UI测试技术因其检测效率和准确性成为主流解决方案。然而，所有现有的UI测试技术都将活动视为UI交互的基本单元，无法对片段进行细粒度的分析。由于缺乏片段级分析，路径覆盖通常非常有限。为了填补这一空白，在本文中，我们提出了FragDroid，一个新颖的支持活动和片段分析的自动化UI测试框架。为了实现片段级测试，我们设计了活动和片段转换模型(AFTM)来模拟应用程序的内部交互，并利用ATFM通过UI交互自动生成测试用例。在AFTM的帮助下，FragDroid实现了访问应用程序中包含的大多数活动和片段，以及检测任意API调用的能力。我们实现了一个FragDroid的原型，并在15个流行的应用程序上对其进行了评估。实验结果表明，FragDroid成功覆盖了66%的测试应用的片段和相应的API调用。此外，传统方法必须错过至少9.6%的片段调用的API调用。",
        "title_zh": "frag droid:Android应用程序中带有活动和片段分析的自动化用户界面交互",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/dsn/dsn2018.html",
        "conf_title": "48th DSN 2018: Luxembourg City, Luxembourg",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8415926/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/DSN.2018.00050",
        "title": "How Reliable is My Wearable: A Fuzz Testing-Based Study",
        "authors": "Edgardo Barsallo Yi, Amiya Maji, Saurabh Bagchi",
        "abstract": "As wearable devices like smartwatches and fitness monitors gain in popularity and are being touted for clinical purposes, it becomes important to evaluate the reliability of Android Wear OS and apps on such devices. To date there has been no study done by systematic error injection into the OS or the apps. We address this gap in this work. We develop and open source a fuzz testing tool for Android Wear apps and services, called Qui-Gon Jinn (QGJ). We perform an extensive fault injection study by mutating inter-process communication messages and UI events and direct about 1.5M such mutated events at 46 apps. These apps are divided into two categories: health/fitness and other. The results of our study show some patterns distinct from prior studies of Android. Over the years, input validation has improved and fewer NullPointerExceptions are seen, however, Android Wear apps crash from unhandled IllegalStateExceptions at a higher rate. There are occasional troubling cases of the entire device rebooting due to unprivileged mutated messages. Reassuringly the apps are quite robust to mutations of UI events with only 0.05% of them causing an app crash.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "随着智能手表和健身监视器等可穿戴设备越来越受欢迎，并被吹捧为用于临床目的，评估Android Wear操作系统和应用在此类设备上的可靠性变得非常重要。迄今为止，还没有对操作系统或应用程序中的系统错误注入进行研究。我们在这项工作中填补了这一空白。我们为Android Wear应用和服务开发并开源了一个模糊测试工具，名为Qui-Gon Jinn (QGJ)。我们通过变异进程间通信消息和UI事件进行了广泛的故障注入研究，并在46个应用程序中引导了大约150万个这样的变异事件。这些app分为两类:健康/健身和其他。我们的研究结果显示了一些与之前Android研究截然不同的模式。这些年来，输入验证已经得到了改进，出现的NullPointerExceptions更少，但是，Android Wear应用程序更容易因未处理的IllegalStateExceptions而崩溃。偶尔会出现由于未授权的变异消息而导致整个设备重启的麻烦情况。令人放心的是，这些应用程序对UI事件的突变非常健壮，只有0.05%的突变会导致应用程序崩溃。",
        "title_zh": "我的可穿戴设备有多可靠:一项基于模糊测试的研究",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/dsn/dsn2018.html",
        "conf_title": "48th DSN 2018: Luxembourg City, Luxembourg",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8415926/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/DSN.2018.00054",
        "title": "MobiCeal: Towards Secure and Practical Plausibly Deniable Encryption on Mobile Devices",
        "authors": "Bing Chang, Fengwei Zhang, Bo Chen, Yingjiu Li, Wen Tao Zhu, Yangguang Tian, Zhan Wang, Albert Ching",
        "abstract": "We introduce MobiCeal, the first practical Plausibly Deniable Encryption (PDE) system for mobile devices that can defend against strong coercive multi-snapshot adversaries, who may examine the storage medium of a user's mobile device at different points of time and force the user to decrypt data. MobiCeal relies on \"dummy write\" to obfuscate the differences between multiple snapshots of storage medium due to existence of hidden data. By incorporating PDE in block layer, MobiCeal supports a broad deployment of any block-based file systems on mobile devices. More importantly, MobiCeal is secure against side channel attacks which pose a serious threat to existing PDE schemes. A proof of concept implementation of MobiCeal is provided on an LG Nexus 4 Android phone using Android 4.2.2. It is shown that the performance of MobiCeal is significantly better than prior PDE systems against multi-snapshot adversaries.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "我们介绍了MobiCeal，这是第一个用于移动设备的实用可信可否认加密(PDE)系统，可以抵御强大的强制性多快照对手，他们可以在不同的时间点检查用户移动设备的存储介质，并强迫用户解密数据。由于隐藏数据的存在，MobiCeal依靠“虚拟写入”来混淆存储介质的多个快照之间的差异。通过在块层中加入PDE，MobiCeal支持在移动设备上广泛部署任何基于块的文件系统。更重要的是，MobiCeal可以抵御对现有PDE方案构成严重威胁的边信道攻击。在使用Android 4.2.2的LG Nexus 4 Android手机上提供了MobiCeal的概念验证实现。结果表明，在对抗多快照对手时，MobiCeal的性能明显优于现有的PDE系统。",
        "title_zh": "移动加密:在移动设备上实现安全实用的可信可否认加密",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/dsn/dsn2018.html",
        "conf_title": "48th DSN 2018: Luxembourg City, Luxembourg",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8415926/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/DSN.2018.00075",
        "title": "DexLego: Reassembleable Bytecode Extraction for Aiding Static Analysis",
        "authors": "Zhenyu Ning, Fengwei Zhang",
        "abstract": "The scale of Android applications in the market is growing rapidly. To efficiently detect the malicious behavior in these applications, an array of static analysis tools are proposed. However, static analysis tools suffer from code hiding techniques like packing, dynamic loading, self modifying, and reflection. In this paper, we thus present DexLego, a novel system that performs a reassembleable bytecode extraction for aiding static analysis tools to reveal the malicious behavior of Android applications. DexLego leverages just-in-time collection to extract data and bytecode from an application at runtime, and reassembles them to a new Dalvik Executable (DEX) file offline. The experiments on DroidBench and real-world applications show that DexLego precisely reconstructs the behavior of an application in the reassembled DEX file, and significantly improves analysis result of the existing static analysis systems.",
        "files": {
            "openAccessPdf": "http://arxiv.org/pdf/1803.02471"
        },
        "abstract_zh": "市场上Android应用的规模正在快速增长。为了有效地检测这些应用程序中的恶意行为，提出了一组静态分析工具。然而，静态分析工具受制于代码隐藏技术，如打包、动态加载、自我修改和反射。因此，在本文中，我们提出了DexLego，这是一个新的系统，它执行可重组的字节码提取，以帮助静态分析工具揭示Android应用程序的恶意行为。DexLego利用即时收集在运行时从应用程序中提取数据和字节码，并离线将它们重新组装到一个新的Dalvik可执行(DEX)文件中。在DroidBench和真实应用程序上的实验表明，DexLego在重组后的DEX文件中精确地重构了应用程序的行为，显著改善了现有静态分析系统的分析结果。",
        "title_zh": "DexLego:帮助静态分析的可重组字节码提取",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/dsn/dsn2018.html",
        "conf_title": "48th DSN 2018: Luxembourg City, Luxembourg",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8415926/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/DSN.2016.47",
        "title": "Overhaul: Input-Driven Access Control for Better Privacy on Traditional Operating Systems",
        "authors": "Kaan Onarlioglu, William Robertson, Engin Kirda",
        "abstract": "The prevailing security model for OSes focuses on isolating users from each other, however, the changing computing landscape has led to the extension of traditional access control models for single-user devices. Modern OSes for mobile devices such as iOS and Android have taken the opportunity provided by these new platforms to introduce permission systems in which users can manage access to sensitive resources during application installation or runtime. One drawback of similar efforts on desktop environments is that applications must be rewritten with this security model in mind, which hinders traditional OSes from enjoying the benefits of user-driven access control. We present a novel architecture for retrofitting a dynamic, input-driven access control model into traditional OSes. In this model, access to privacy-sensitive resources is mediated based on the temporal proximity of user interactions to access requests, and requests are communicated back to the user via visual alerts. We present a prototype implementation and demonstrate how input-driven access control can be realized for resources such as the microphone, camera, clipboard, and screen contents. Our approach is transparent to applications and users, and incurs no discernible performance overhead.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "目前流行的操作系统安全模型侧重于将用户相互隔离，然而，不断变化的计算环境导致了传统的单用户设备访问控制模型的扩展。iOS和Android等现代移动设备操作系统利用这些新平台提供的机会引入了权限系统，用户可以在应用程序安装或运行时管理对敏感资源的访问。在桌面环境上进行类似努力的一个缺点是，应用程序必须根据这种安全模型进行重写，这阻碍了传统操作系统享受用户驱动的访问控制的好处。我们提出了一种新的架构，用于将动态的、输入驱动的访问控制模型改造到传统的操作系统中。在这种模型中，对隐私敏感资源的访问是基于用户交互与访问请求的时间接近度来调节的，并且请求通过视觉警报传达回用户。我们展示了一个原型实现，并演示了如何对麦克风、摄像头、剪贴板和屏幕内容等资源实现输入驱动的访问控制。我们的方法对应用程序和用户是透明的，不会导致明显的性能开销。",
        "title_zh": "革新:输入驱动的访问控制，在传统操作系统上实现更好的隐私保护",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/dsn/dsn2016.html",
        "conf_title": "46th DSN 2016: Toulouse, France",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7579391/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/DSN.2016.53",
        "title": "Practical, Formal Synthesis and Automatic Enforcement of Security Policies for Android",
        "authors": "Hamid Bagheri, Alireza Sadeghi, Reyhaneh Jabbarvand Behrouz, Sam Malek",
        "abstract": "As the dominant mobile computing platform, Android has become a prime target for cyber-security attacks. Many of these attacks are manifested at the application level, and through the exploitation of vulnerabilities in apps downloaded from the popular app stores. Increasingly, sophisticated attacks exploit the vulnerabilities in multiple installed apps, making it extremely difficult to foresee such attacks, as neither the app developers nor the store operators know a priori which apps will be installed together. This paper presents an approach that allows the end-users to safeguard a given bundle of apps installed on their device from such attacks. The approach, realized in a tool, called SEPAR, combines static analysis with lightweight formal methods to automatically infer security-relevant properties from a bundle of apps. It then uses a constraint solver to synthesize possible security exploits, from which fine-grained security policies are derived and automatically enforced to protect a given device. In our experiments with over 4,000 Android apps, SEPAR has proven to be highly effective at detecting previously unknown vulnerabilities as well as preventing their exploitation.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "作为占主导地位的移动计算平台，Android已经成为网络安全攻击的主要目标。这些攻击中的许多都表现在应用程序级别，并通过利用从流行的应用程序商店下载的应用程序中的漏洞。复杂的攻击越来越多地利用多个已安装应用程序中的漏洞，这使得预测此类攻击变得极其困难，因为应用程序开发人员和商店运营商都不知道哪些应用程序将被一起安装。本文介绍了一种方法，允许最终用户保护安装在他们设备上的给定应用包免受此类攻击。这种方法是在一个名为SEPAR的工具中实现的，它将静态分析与轻量级形式方法结合起来，从一堆应用程序中自动推断出安全相关的属性。然后，它使用约束求解器来综合可能的安全利用，从中导出细粒度的安全策略并自动执行以保护给定的设备。在我们对超过4，000个Android应用程序的实验中，SEPAR已被证明在检测以前未知的漏洞以及防止其被利用方面非常有效。",
        "title_zh": "Android安全策略的实用、正式综合和自动实施",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/dsn/dsn2016.html",
        "conf_title": "46th DSN 2016: Toulouse, France",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7579391/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/DSN.2016.54",
        "title": "Don't Just BYOD, Bring-Your-Own-App Too! Protection via Virtual Micro Security Perimeters",
        "authors": "Gabriel Salles-Loustau, Luis Garcia, Kaustubh R. Joshi, Saman A. Zonouz",
        "abstract": "Mobile devices are increasingly becoming a melting pot of different types of data ranging from sensitive corporate documents to commercial media to personal content produced and shared via online social networks. While it is desirable for such diverse content to be accessible from the same device via a unified user experience and through a rich plethora of mobile apps, ensuring that this data remains protected has become challenging. Even though different data types have very different security and privacy needs and accidental instances of data leakage are common, today's mobile operating systems include few, if any, facilities for fine-grained data protection and isolation. In this paper, we present SWIRLS, an Android-based mobile OS that provides a rich policy-based information-flow data protection abstraction for mobile apps to support BYOD (bring-your-own-device) use cases. SWIRLS allows security and privacy policies to be attached to individual pieces of data contained in signed and encrypted capsules, and enforces these policies as the data flows through the device. Unlike current BYOD solutions like VMs and containers that create duplication and cognitive overload, SWIRLS provides a single environment that allows users to access content belonging to different security contexts using the same applications without fear of inadverdant or malicious data leakage. SWIRLS also unburdens app developers from having to worry about security policies, and provides APIs through which they can create seamless multi-security-context user interfaces. To implement it's abstractions, SWIRLS develops a cryptographically protected capsule distribution and installation scheme, enhances Taintdroid-based taint-tracking mechanisms to support efficient kernel and user-space security policy enforcement, implements techniques for persisting security context along with data, and provides transparent security-context switching mechanisms. Using our Android-based prototype (>25K LOC), we show a number of data protection use-cases such as isolation of personal and work data, limiting document sharing and preventing leakage based on document classification, and security policies based on geo-and time-fencing. Our experiments show that SWIRLS imposes a very minimal overhead in both battery consumption and performance.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "移动设备正日益成为不同类型数据的大熔炉，从敏感的公司文件到商业媒体，再到通过在线社交网络制作和分享的个人内容。虽然人们希望通过统一的用户体验和丰富的移动应用程序从同一台设备上访问如此多样的内容，但确保这些数据受到保护却变得颇具挑战性。尽管不同的数据类型具有非常不同的安全性和隐私需求，并且数据泄漏的意外情况很常见，但当今的移动操作系统几乎没有(如果有的话)用于细粒度数据保护和隔离的设施。在本文中，我们介绍了基于Android的移动操作系统SWIRLS，它为移动应用程序提供了丰富的基于策略的信息流数据保护抽象，以支持BYOD(自带设备)用例。SWIRLS允许将安全和隐私政策附加到包含在签名和加密胶囊中的单个数据片段上，并在数据流经设备时强制执行这些政策。与当前的BYOD解决方案(如虚拟机和容器)不同，这些解决方案会造成重复和认知超载，而SWIRLS提供了一个单一的环境，允许用户使用相同的应用程序访问属于不同安全环境的内容，而不必担心无意或恶意的数据泄漏。SWIRLS还让应用程序开发人员不必担心安全策略，并提供了API，他们可以通过这些API创建无缝的多安全上下文用户界面。为了实现其抽象，SWIRLS开发了一个加密保护的胶囊分发和安装方案，增强了基于Taintdroid的污点跟踪机制以支持高效的内核和用户空间安全策略实施，实现了将安全上下文与数据一起持久化的技术，并提供了透明的安全上下文切换机制。使用我们基于Android的原型(> 25K LOC)，我们展示了许多数据保护用例，如隔离个人和工作数据、基于文档分类限制文档共享和防止泄露，以及基于地理和时间防护的安全策略。我们的实验表明，漩涡在电池消耗和性能方面的开销非常小。",
        "title_zh": "不要自带设备，也要自带应用！通过虚拟微安全边界提供保护",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/dsn/dsn2016.html",
        "conf_title": "46th DSN 2016: Toulouse, France",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7579391/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/DSN.2016.55",
        "title": "Can We Trust the Privacy Policies of Android Apps?",
        "authors": "Le Yu, Xiapu Luo, Xule Liu, Tao Zhang",
        "abstract": "Recent years have witnessed the sharp increase of malicious apps that steal users' personal information. To address users' concerns about privacy risks, more and more apps are accompanied with privacy policies written in natural language because it is difficult for users to infer an app's behaviors according to the required permissions. However, little is known whether these privacy policies are trustworthy or not. It is worth noting that a questionable privacy policy may result from careless preparation by an app developer or intentional deception by an attacker. In this paper, we conduct the first systematic study on privacy policy by proposing a novel approach to automatically identify three kinds of problems in privacy policy. After tackling several challenging issues, we realize our approach in a system, named PPChecker, and evaluate it with real apps and privacy policies. The experimental results show that PPChecker can effectively identify questionable privacy policies with high precision. Moreover, applying PPChecker to 1,197 popular apps, we found that 282 apps (i.e., 23.6%) have at least one kind of problems. This study sheds light on the research of improving and regulating apps' privacy policies.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "近年来，窃取用户个人信息的恶意应用急剧增加。为了解决用户对隐私风险的担忧，越来越多的应用程序附带了用自然语言编写的隐私政策，因为用户很难根据所需的权限推断应用程序的行为。然而，很少有人知道这些隐私政策是否值得信赖。值得注意的是，有问题的隐私政策可能是由应用程序开发人员的粗心准备或攻击者的故意欺骗造成的。本文首次对隐私策略进行了系统的研究，提出了一种新的方法来自动识别隐私策略中的三类问题。在解决了几个具有挑战性的问题后，我们在一个名为PPChecker的系统中实现了我们的方法，并用实际应用和隐私策略对其进行了评估。实验结果表明，PPChecker能有效识别可疑隐私策略，准确率较高。此外，将PPChecker应用于1197个流行应用程序，我们发现282个应用程序(即23.6%)至少存在一种问题。该研究为改进和规范应用程序隐私政策的研究提供了启示。",
        "title_zh": "我们能相信安卓应用的隐私政策吗？",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/dsn/dsn2016.html",
        "conf_title": "46th DSN 2016: Toulouse, France",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7579391/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/DSN.2016.56",
        "title": "Repackage-Proofing Android Apps",
        "authors": "Lannan Luo, Yu Fu, Dinghao Wu, Sencun Zhu, Peng Liu",
        "abstract": "App repackaging has become a severe threat to theAndroid ecosystem. While various protection techniques, such as watermarking and repackaging detection, have been proposed, a defense that stops repackaged apps from working on user devices, i.e., repackage-proofing, is missing. We propose a technique that builds a reliable and stealthy repackage-proofing capability into Android apps. A large number of detection nodes are inserted into the original app without incurring much overhead, each is woven into the surrounding code to blur itself. Once repackaging is detected, a response node injects a failure in the form of delayed malfunctions, making it difficult to trace back. The response nodes and detection nodes form high-degree connections and communicate through stealthy communication channels, such that upon detection several of the many response nodes are selected stochastically to take actions, which further obfuscates and enhances the protection. We have built a prototype. The evaluation shows that the technique is effective and efficient.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "应用程序重新打包已经对机器人生态系统构成了严重威胁。虽然已经提出了各种保护技术，例如水印和重新打包检测，但是缺少阻止重新打包的应用在用户设备上工作的防御措施，即重新打包防护。我们提出了一种技术，在Android应用程序中建立一种可靠的、秘密的防重新包装功能。大量检测节点被插入到原始应用程序中，而不会产生太多开销，每个节点都被编织到周围的代码中，以模糊自身。一旦重新打包被检测到，响应节点就会以延迟故障的形式注入一个失败，从而很难追溯。响应节点和检测节点形成高度连接，并通过秘密通信信道进行通信，使得在检测时随机选择多个响应节点中的几个来采取行动，这进一步混淆和增强了保护。我们已经建造了一个原型。评价表明该技术是有效的。",
        "title_zh": "重新包装验证Android应用程序",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/dsn/dsn2016.html",
        "conf_title": "46th DSN 2016: Toulouse, France",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7579391/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/DSN.2016.59",
        "title": "Secure Point-of-Care Medical Diagnostics via Trusted Sensing and Cyto-Coded Passwords",
        "authors": "Tuan Le, Gabriel Salles-Loustau, Laleh Najafizadeh, Mehdi Javanmard, Saman A. Zonouz",
        "abstract": "Trustworthy and usable healthcare requires not only effective disease diagnostic procedures to ensure delivery of rapid and accurate outcomes, but also lightweight user privacy-preserving capabilities for resource-limited medical sensing devices. In this paper, we present MedSen, a portable, inexpensive and secure smartphone-based biomarker1 detection sensor to provide users with easy-to-use real-time disease diagnostic capabilities without the need for in-person clinical visits. To minimize the deployment cost and size without sacrificing the diagnostic accuracy, security and time requirement, MedSen operates as a dongle to the user's smartphone and leverages the smartphone's computational capabilities for its real-time data processing. From the security viewpoint, MedSen introduces a new hardware-level trusted sensing framework, built in the sensor, to encrypt measured analog signals related to cell counting in the patient's blood sample, at the data acquisition point. To protect the user privacy, MedSen's in-sensor encryption scheme conceals the user's private information before sending them out for cloud-based medical diagnostics analysis. The analysis outcomes are sent back to Med-Sen for decryption and user notifications. Additionally, MedSen introduces cyto-coded passwords to authenticate the user to the cloud server without the need for explicit screen password entry. Each user's password constitutes a predetermined number of synthetic beads with different dielectric characteristics. MedSen mixes the password beads with the user's blood before submitting the data for diagnostics analysis. The cloud server authenticates the user based on the statistics and characteristics of the beads with the blood sample, and links the user's identity to the encrypted analysis outcomes. We have implemented a real-world working prototype of MedSen through bio-sensor fabrication and smartphone app (Android) implementations. Our results show that MedSen can reliably classify different users based on their cyto-coded passwords with high accuracy. MedSen's built-in analog signal encryption guarantees the user's privacy by considering the smartphone and cloud server possibly untrusted (curious but honest). MedSen's end-to-end time requirement for disease diagnostics is approximately 0.2 seconds on average.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "可信和可用的医疗保健不仅需要有效的疾病诊断程序来确保提供快速和准确的结果，还需要资源有限的医疗传感设备具有轻量级的用户隐私保护能力。在本文中，我们介绍了一种便携式、廉价且安全的基于智能手机的生物标记1检测传感器MedSen，它可以为用户提供易于使用的实时疾病诊断功能，而无需亲临临床。为了在不牺牲诊断准确性、安全性和时间要求的情况下最大限度地降低部署成本和尺寸，MedSen充当用户智能手机的加密狗，并利用智能手机的计算能力进行实时数据处理。从安全角度来看，MedSen引入了一种新的硬件级可信传感框架，内置于传感器中，在数据采集点对与患者血样中细胞计数相关的测量模拟信号进行加密。为了保护用户隐私，MedSen的传感器内加密方案在将用户的私人信息发送出去进行基于云的医疗诊断分析之前，会隐藏这些信息。分析结果被发送回Med-Sen进行解密和用户通知。此外，MedSen引入了细胞编码密码，无需显式输入屏幕密码即可向云服务器验证用户身份。每个用户的密码由预定数量的具有不同介电特性的合成珠子组成。在提交数据进行诊断分析之前，MedSen会将密码珠与用户的血液混合。云服务器基于带有血液样本的珠子的统计数据和特征来认证用户，并将用户的身份链接到加密的分析结果。我们已经通过生物传感器制造和智能手机应用程序(Android)实施实现了MedSen的真实工作原型。我们的结果表明，MedSen可以基于不同用户的细胞编码密码高精度地对其进行可靠分类。MedSen内置的模拟信号加密通过考虑智能手机和云服务器可能不可信(好奇但诚实)来保证用户的隐私。MedSen对疾病诊断的端到端时间要求平均约为0.2秒。",
        "title_zh": "通过可信的传感和细胞编码密码实现安全的现场医疗诊断",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/dsn/dsn2016.html",
        "conf_title": "46th DSN 2016: Toulouse, France",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7579391/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/DSN-W.2016.33",
        "title": "MimeoDroid: Large Scale Dynamic App Analysis on Cloned Devices via Machine Learning Classifiers",
        "authors": "Parvez Faruki, Akka Zemmari, Manoj Singh Gaur, Vijay Laxmi, Mauro Conti",
        "abstract": "The exponential adoption of Android applications (apps) among the users has attracted malware authors to evade the default emulator based dynamic analysis systems. The evolving Android malware behaves benign once it identifies Goldfish emulator, often used for app development and malware analysis. Once a malware identifies the Goldfish virtual device, it behaves benign or prevents malicious code execution. The exponential increase of such stealth malware necessitates a detection approach which coerces the malicious apps to reveal the hidden behavior. To detect malicious apps and characterize their association we propose MimeoDroid (enriched replica of real Android device), a modified virtual clone to coerce the malware to believe being executed on an actual device. We automate relevant feature extraction and classification of Processor, memory usage, Binder IPC transfers, network interaction, battery charging status and manifest permission(s) to detect malicious behavior using Tree based machine learning classifiers. MimeoDroid is a lightweight machine learning based malware analysis and characterization to detect malicious apps that would evade the existing analyzers.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android应用程序(apps)在用户中的指数级采用吸引了恶意软件作者来规避默认的基于仿真器的动态分析系统。不断发展的Android恶意软件一旦识别出金鱼仿真器，就会表现良好，通常用于应用程序开发和恶意软件分析。一旦恶意软件识别出金鱼虚拟设备，它就会表现良好或者阻止恶意代码的执行。这种隐形恶意软件的指数增长需要一种检测方法，该方法迫使恶意应用程序揭示隐藏的行为。为了检测恶意应用程序并描述它们之间的关联，我们提出了MimeoDroid(真实Android设备的丰富副本)，这是一种经过修改的虚拟克隆，可以强制恶意软件相信正在真实设备上执行。我们使用基于树的机器学习分类器，对处理器、内存使用、绑定IPC传输、网络交互、电池充电状态和显示许可的相关特征提取和分类进行自动化，以检测恶意行为。MimeoDroid是一个轻量级的基于机器学习的恶意软件分析和表征，用于检测可以规避现有分析器的恶意应用程序。",
        "title_zh": "MimeoDroid:通过机器学习分类器对克隆设备进行大规模动态应用程序分析",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/dsn/dsn2016w.html",
        "conf_title": "46th DSN 2016: Toulouse, France - Workshops",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7575326/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/DSN.2017.12",
        "title": "IM-Visor: A Pre-IME Guard to Prevent IME Apps from Stealing Sensitive Keystrokes Using TrustZone",
        "authors": "Chen Tian, Yazhe Wang, Peng Liu, Qihui Zhou, Chengyi Zhang, Zhen Xu",
        "abstract": "Third-party IME (Input Method Editor) apps are often the preference means of interaction for Android users' input. In this paper, we first discuss the insecurity of IME apps, including the Potentially Harmful Apps (PHA) and malicious IME apps, which may leak users' sensitive keystrokes. The current defense system, such as I-BOX, is vulnerable to the prefix-substitution attack and the colluding attack due to the post-IME nature. We provide a deeper understanding that all the designs with the post-IME nature are subject to the prefix-substitution and colluding attacks. To remedy the above post-IME system's flaws, we propose a new idea, pre-IME, which guarantees that \"Is this touch event a sensitive keystroke?\" analysis will always access user touch events prior to the execution of any IME app code. We designed an innovative TrustZone-based framework named IM-Visor which has the pre-IME nature. Specifically, IM-Visor creates the isolation environment named STIE as soon as a user intends to type on a soft keyboard, then the STIE intercepts, translates and analyzes the user's touch input. If the input is sensitive, the translation of keystrokes will be delivered to user apps through a trusted path. Otherwise, IM-Visor replays non-sensitive keystroke touch events for IME apps or replays non-keystroke touch events for other apps. A prototype of IM-Visor has been implemented and tested with several most popular IMEs. The experimental results show that IM-Visor has small runtime overheads.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "第三方IME(输入法编辑器)应用通常是Android用户输入的首选交互方式。在本文中，我们首先讨论了IME应用程序的不安全性，包括潜在有害应用程序(PHA)和恶意IME应用程序，它们可能会泄露用户的敏感按键。当前的防御系统，如I-BOX，由于后IME性质，容易受到前缀替换攻击和共谋攻击。我们提供了一个更深的理解，即所有具有后IME性质的设计都受到前缀替换和共谋攻击。为了弥补上述后IME系统的缺陷，我们提出了一个新的想法，前IME，它保证“这个触摸事件是一个敏感的按键吗？”分析将总是在执行任何IME应用程序代码之前访问用户触摸事件。我们设计了一个基于信任区的创新框架IM-Visor，它具有前IME性质。具体来说，IM-Visor会在用户打算在软键盘上打字时立即创建名为STIE的隔离环境，然后STIE会拦截、转换和分析用户的触摸输入。如果输入是敏感的，按键的翻译将通过一个可信的路径传递给用户应用程序。否则，IM-Visor会重播IME应用程序的非敏感按键触摸事件，或重播其他应用程序的非按键触摸事件。一个IM Visor的原型已经在几个最流行的ime上实现和测试。实验结果表明，IM Visor具有较小的运行时间开销。",
        "title_zh": "IM-Visor:IME时代之前的一种防护措施，用于防止IME应用程序使用TrustZone窃取敏感的按键",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/dsn/dsn2017.html",
        "conf_title": "47th DSN 2017: Denver, CO, USA",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8019912/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/DSN.2017.33",
        "title": "Ghost Installer in the Shadow: Security Analysis of App Installation on Android",
        "authors": "Yeonjoon Lee, Tongxin Li, Nan Zhang, Soteris Demetriou, Mingming Zha, XiaoFeng Wang, Kai Chen, Xiao-yong Zhou, Xinhui Han, Michael Grace",
        "abstract": "Android allows developers to build apps with app installation functionality themselves with minimal restriction and support like any other functionalities. Given the critical importance of app installation, the security implications of the approach can be significant. This paper reports the first systematic study on this issue, focusing on the security guarantees of different steps of the App Installation Transaction (AIT). We demonstrate the serious consequences of leaving AIT development to individual developers: most installers (e.g., Amazon AppStore, DTIgnite, Baidu) are riddled with various security-critical loopholes, which can be exploited by attackers to silently install any apps, acquiring dangerous-level permissions or even unauthorized access to system resources. Surprisingly, vulnerabilities were found in all steps of AIT. The attacks we present, dubbed Ghost Installer Attack (GIA), are found to pose a realistic threat to Android ecosystem. Further, we developed both a user-app-level and a system-level defense that are innovative and practical.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android允许开发者像其他功能一样，在最少的限制和支持下，自己构建具有应用安装功能的应用。鉴于应用程序安装的至关重要性，这种方法的安全含义可能非常重要。本文首次系统地研究了这一问题，重点研究了应用程序安装交易(AIT)不同步骤的安全保障。我们展示了将AIT开发留给个体开发人员的严重后果:大多数安装程序(例如，Amazon AppStore、DTIgnite、百度)都充满了各种安全关键漏洞，攻击者可以利用这些漏洞静默安装任何应用程序，获得危险级别的权限，甚至未经授权访问系统资源。令人惊讶的是，AIT的所有步骤都发现了漏洞。我们提出的攻击被称为Ghost Installer攻击(GIA)，被发现对Android生态系统构成了现实威胁。此外，我们开发了创新实用的用户应用级和系统级防御。",
        "title_zh": "影子下的Ghost安装程序:Android上应用安装的安全性分析",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/dsn/dsn2017.html",
        "conf_title": "47th DSN 2017: Denver, CO, USA",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8019912/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/DSN.2017.14",
        "title": "DyDroid: Measuring Dynamic Code Loading and Its Security Implications in Android Applications",
        "authors": "Zhengyang Qu, Shahid Alam, Yan Chen, Xiaoyong Zhou, Wangjun Hong, Ryan D. Riley",
        "abstract": "Android has provided dynamic code loading (DCL) since API level one. DCL allows an app developer to load additional code at runtime. DCL raises numerous challenges with regards to security and accountability analysis of apps. While previous studies have investigated DCL on Android, in this paper we formulate and answer three critical questions that are missing from previous studies: (1) Where does the loaded code come from (remotely fetched or locally packaged), and who is the responsible entity to invoke its functionality? (2) In what ways is DCL utilized to harden mobile apps, specifically, application obfuscation? (3) What are the security risks and implications that can be found from DCL in off-the-shelf apps? We design and implement DyDroid, a system which uses both dynamic and static analysis to analyze dynamically loaded code. Dynamic analysis is used to automatically exercise apps, capture DCL behavior, and intercept the loaded code. Static analysis is used to investigate malicious behavior and privacy leakage in that dynamically loaded code. We have used DyDroid to analyze over 46K apps with little manual intervention, allowing us to conduct a large-scale measurement to investigate five aspects of DCL, such as source identification, malware detection, vulnerability analysis, obfuscation analysis, and privacy tracking analysis. We have several interesting findings. (1) 27 apps are found to violate the content policy of Google Play by executing code downloaded from remote servers. (2) We determine the distribution, pros/cons, and implications of several common obfuscation methods, including DEX encryption/loading. (3) DCL's stealthiness enables it to be a channel to deploy malware, and we find 87 apps loading malicious binaries which are not detected by existing antivirus tools. (4) We found 14 apps that are vulnerable to code injection attacks due to dynamically loading code which is writable by other apps. (5) DCL is mainly used by third-party SDKs, meaning that app developers may not know what sort of sensitive functionality is injected into their apps.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android从API一级开始就提供了动态代码加载(DCL)。DCL允许应用开发者在运行时加载额外的代码。DCL在应用程序的安全性和责任分析方面提出了许多挑战。虽然以前的研究已经调查了Android上的DCL，但在本文中，我们阐述并回答了以前的研究中遗漏的三个关键问题:(1)加载的代码来自哪里(远程获取或本地打包)，谁是调用其功能的负责实体？(DCL以何种方式被用来强化移动应用，特别是应用混淆？(3)从现成应用中的DCL可以发现哪些安全风险和影响？我们设计并实现了DyDroid，一个同时使用动态和静态分析来分析动态加载代码的系统。动态分析用于自动运行应用程序，捕获DCL行为，并拦截加载的代码。静态分析用于调查动态加载代码中的恶意行为和隐私泄露。我们使用DyDroid分析了超过46K个应用程序，几乎没有人工干预，使我们能够进行大规模测量，以调查DCL的五个方面，如来源识别、恶意软件检测、漏洞分析、混淆分析和隐私跟踪分析。我们有几个有趣的发现。(1)发现27款应用通过执行从远程服务器下载的代码，违反了Google Play的内容政策。(2)我们确定了几种常见混淆方法的分布、优缺点和含义，包括DEX加密/加载。(3) DCL的隐蔽性使其成为部署恶意软件的渠道，我们发现87个应用程序加载了现有反病毒工具无法检测到的恶意二进制文件。(4)我们发现14个应用程序由于动态加载可由其他应用程序写入的代码而容易受到代码注入攻击。(5) DCL主要由第三方SDK使用，这意味着应用程序开发人员可能不知道他们的应用程序中注入了什么样的敏感功能。",
        "title_zh": "DyDroid:测量Android应用程序中的动态代码加载及其安全含义",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/dsn/dsn2017.html",
        "conf_title": "47th DSN 2017: Denver, CO, USA",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8019912/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/DSN.2017.40",
        "title": "JGRE: An Analysis of JNI Global Reference Exhaustion Vulnerabilities in Android",
        "authors": "Yacong Gu, Kun Sun, Purui Su, Qi Li, Yemian Lu, Lingyun Ying, Dengguo Feng",
        "abstract": "Android system applies a permission-based security model to restrict unauthorized apps from accessing system services, however, this security model cannot constrain authorized apps from sending excessive service requests to exhaust the limited system resource allocated for each system service. As references from native code to a Java object, JNI Global References (JGR) are prone to memory leaks, since they are not automatically garbage collected. Moreover, JGR exhaustion may lead to process abort or even Android system reboot when the victim process could not afford the JGR requests triggered by malicious apps through inter-process communication. In this paper, we perform a systematic study on JGR exhaustion (JGRE) attacks against all system services in Android. Our experimental results show that among the 104 system services in Android 6.0.1, 32 system services have 54 vulnerabilities. Particularly, 22 system services can be successfully attacked without any permission support. After reporting those vulnerabilities to Android security team and getting confirmed, we study the existing ad hoc countermeasures in Android against JGRE attacks. Surprisingly, among the 10 system services that have been protected, 8 system services are still vulnerable to JGRE attacks. Finally, we develop an effective defense mechanism to defeat all identified JGRE attacks by adopting Android's low memory killer (LMK) mechanism.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android系统采用基于权限的安全模型来限制未经授权的应用程序访问系统服务，然而，这种安全模型不能限制授权的应用程序发送过多的服务请求来耗尽分配给每个系统服务的有限系统资源。作为从本机代码到Java对象的引用，JNI全局引用(JGR)容易发生内存泄漏，因为它们不会被自动垃圾收集。此外，当受害进程无法承受恶意应用程序通过进程间通信触发的JGR请求时，JGR耗尽可能导致进程中止甚至Android系统重启。在本文中，我们对安卓系统中针对所有系统服务的JGR穷举(JGRE)攻击进行了系统的研究。我们的实验结果显示，在Android 6.0.1的104个系统服务中，有32个系统服务存在54个漏洞。特别是，22个系统服务可以在没有任何权限支持的情况下被成功攻击。在向Android安全团队报告这些漏洞并得到确认后，我们研究了Android中针对JGRE攻击的现有特别对策。令人惊讶的是，在已经被保护的10个系统服务中，8个系统服务仍然容易受到JGRE攻击。最后，我们开发了一种有效的防御机制，通过采用Android的低内存杀手(LMK)机制来击败所有已识别的JGRE攻击。",
        "title_zh": "JGRE:安卓系统中JNI全局引用耗尽漏洞分析",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/dsn/dsn2017.html",
        "conf_title": "47th DSN 2017: Denver, CO, USA",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8019912/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/DSN-W.2017.17",
        "title": "MAS: Mobile-Apps Assessment and Analysis System",
        "authors": "Chia-Wei Tien, Tse-Yung Huang, Ting-Chun Huang, Wei-Ho Chung, Sy-Yen Kuo",
        "abstract": "Mobile apps are widely adopted in daily life, and contain increasing security flaws. Many regulatory agencies and organizations have announced security guidelines for app development. However, most security guidelines involving technicality and compliance with this requirement is not easily feasible. Thus, we propose Mobile Apps Assessment and Analysis System (MAS), an automatic security validation system to improve guideline compliance. MAS combines static and dynamic analysis techniques, which can be used to verify whether android apps meet the security guideline requirements. We implemented MAS in practice and verified 143 real-world apps produced by the Taiwan government. Besides, we also validated 15,000 popular apps collected from Google Play Store produced in three countries. We found that most apps contain at least three security issues. Finally, we summarize the results and list the most common security flaws for consideration in further app development.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "移动应用在日常生活中被广泛采用，并且包含越来越多的安全缺陷。许多监管机构和组织已经宣布了应用程序开发的安全指南。然而，大多数涉及技术细节和符合这一要求的安全指南并不容易实现。因此，我们提出了移动应用评估和分析系统(MAS ),这是一个自动安全验证系统，用于提高指南合规性。MAS结合了静态和动态分析技术，可用于验证android应用程序是否符合安全指南要求。我们在实践中实现了MAS，并验证了台湾政府制作的143个真实世界的app。此外，我们还验证了从谷歌Play商店收集的15，000个来自三个国家的流行应用程序。我们发现大多数应用程序至少包含三个安全问题。最后，我们总结了结果，并列出了最常见的安全缺陷，供进一步开发应用程序时参考。",
        "title_zh": "MAS:移动应用评估和分析系统",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/dsn/dsn2017w.html",
        "conf_title": "47th DSN 2017: Denver, CO, USA - Workshops",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8020727/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/DSN58367.2023.00052",
        "title": "DARPA: Combating Asymmetric Dark UI Patterns on Android with Run-time View Decorator",
        "authors": "Zhaoxin Cai, Yuhong Nan, Xueqiang Wang, Mengyi Long, Qihua Ou, Min Yang, Zibin Zheng",
        "abstract": "It has been extensively discussed that online services, such as shopping websites, may exploit dark user interface (UI) patterns to mislead users into performing unwanted and even harmful activities on the UI, e.g., subscribing to recurring purchases unknowingly. Most recently, the growing popularity of mobile platforms has led to an ever-extending reach of dark UI patterns in mobile apps, leading to security and privacy risks to end users. A systematic study of such patterns, including how to detect and mitigate them on mobile platforms, unfortunately, has not been conducted. In this paper, we fill the research gap by investigating the dark UI patterns in mobile apps. Specifically, we show the prevalence of the asymmetric dark UI patterns (AUI) in real-world apps, and reveal their risks by characterizing the AUI (e.g., subjects, hosts, and patterns). Then, through user studies, we demonstrate the demand for effective solutions to mitigate the potential risks of AUI. To meet the needs, we propose DARPA - an end-to-end and generic CV-based solution to identify AUIs at run-time and mitigate the risks by highlighting the AUIs with run-time UI decoration. Our evaluation shows that DARPA is highly accurate and introduces negligible overhead. Additionally, running DARPA does not require any modifications to the apps being analyzed and to the operating system.",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "DARPA:用运行时视图装饰器对抗Android上不对称的深色UI模式",
        "abstract_zh": "已经广泛讨论了诸如购物网站之类的在线服务可能利用黑暗用户界面(UI)模式来误导用户在UI上执行不想要的甚至有害的活动，例如在不知情的情况下订阅重复购买。最近，移动平台越来越受欢迎，导致移动应用程序中的黑色UI模式不断扩展，给最终用户带来了安全和隐私风险。不幸的是，还没有对这种模式进行系统的研究，包括如何在移动平台上检测和缓解它们。在本文中，我们通过研究移动应用程序中的暗UI模式来填补研究空白。具体来说，我们展示了现实应用中非对称暗UI模式(AUI)的流行，并通过表征AUI(例如，主题、主机和模式)揭示了它们的风险。然后，通过用户研究，我们展示了对有效解决方案的需求，以减轻AUI的潜在风险。为了满足这种需求，我们提出了DARPA——一种端到端的通用的基于CV的解决方案，用于在运行时识别aui，并通过用运行时UI装饰突出显示aui来降低风险。我们的评估表明DARPA是高度准确的，并且引入的开销可以忽略不计。此外，运行DARPA不需要对正在分析的应用程序和操作系统进行任何修改。",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/dsn/dsn2023.html",
        "conf_title": "53rd DSN 2023: Porto, Portugal",
        "conf_url": "https://doi.org/10.1109/DSN58367.2023",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.46586/tches.v2022.i4.490-526",
        "title": "BreakMi: Reversing, Exploiting and Fixing Xiaomi Fitness Tracking Ecosystem",
        "authors": "Marco Casagrande, Eleonora Losiouk, Mauro Conti, Mathias Payer, Daniele Antonioli",
        "abstract": "Xiaomi is the leading company in the fitness tracking industry. Successful attacks on its fitness tracking ecosystem would result in severe consequences, including the loss of sensitive health and personal data. Despite these relevant risks, we know very little about the security mechanisms adopted by Xiaomi. In this work, we uncover them and show that they are insecure. In particular, Xiaomi protects its fitness tracking ecosystem with custom application-layer protocols spoken over insecure Bluetooth Low-Energy (BLE) connections (ignoring standard BLE security mechanisms already supported by their devices) and TLS connections. We identify severe vulnerabilities affecting such proprietary protocols, including unilateral and replayable authentication. Those issues are critical as they affect all Xiaomi trackers released since 2016 and up-to-date Xiaomi companion apps for Android and iOS. We show in practice how to exploit the identified vulnerabilities by presenting six impactful attacks. Four attacks enable to wirelessly impersonate any Xiaomi fitness tracker and companion app, man-in-the-middle (MitM) them, and eavesdrop on their communication. The other two attacks leverage a malicious Android application to remotely eavesdrop on data from a tracker and impersonate a Xiaomi fitness app. Overall, the attacks have a high impact as they can be used to exfiltrate and inject sensitive data from any Xiaomi tracker and compatible app. We propose five practical and low-overhead countermeasures to mitigate the presented vulnerabilities. Moreover, we present breakmi, a modular toolkit that we developed to automate our reverse-engineering process and attacks. breakmi understands Xiaomi application-layer proprietary protocols, reimplements Xiaomi security mechanisms, and automatically performs our attacks. We demonstrate that our toolkit can be generalized by extending it to be compatible with the Fitbit ecosystem. We will open-source breakmi.",
        "files": {
            "openAccessPdf": "https://tches.iacr.org/index.php/TCHES/article/download/9704/9234"
        },
        "abstract_zh": "小米是健身追踪行业的领军企业。对其健身跟踪生态系统的成功攻击将导致严重的后果，包括敏感的健康和个人数据的丢失。尽管存在这些相关风险，但我们对小米采用的安全机制知之甚少。在这部作品中，我们揭露了他们，并表明他们是不安全的。特别是，小米通过不安全的蓝牙低能量(BLE)连接(忽略其设备已经支持的标准BLE安全机制)和TLS连接使用定制的应用层协议来保护其健身跟踪生态系统。我们发现了影响此类专有协议的严重漏洞，包括单向和可重复身份验证。这些问题至关重要，因为它们影响了自2016年以来发布的所有小米追踪器以及最新的小米Android和iOS配套应用。我们在实践中展示了如何通过展示六种有影响力的攻击来利用已识别的漏洞。四种攻击可以无线模拟任何小米健身追踪器和配套应用程序，中间人(MitM)他们，并窃听他们的通信。另外两种攻击利用恶意的Android应用程序远程窃听追踪器的数据，并冒充小米健身应用程序。总体而言，这些攻击具有很高的影响力，因为它们可以用来从任何小米追踪器和兼容的应用程序中渗透和注入敏感数据。我们提出了五种实用且低开销的对策来减轻这些漏洞。此外，我们还介绍了breakmi，这是一个模块化的工具包，我们开发它是为了自动化我们的逆向工程过程和攻击。breakmi理解小米应用层专有协议，重新实现小米安全机制，自动执行我们的攻击。我们证明了我们的工具包可以通过扩展来与Fitbit生态系统兼容。我们将开源breakmi。",
        "title_zh": "BreakMi:反转、开拓、修复小米健身追踪生态系统",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tches/tches2022.html",
        "conf_title": "IACR Transactions on Cryptographic Hardware and Embedded Systems, Volume 2022",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.46586/tches.v2022.i4.490-526",
        "title": "BreakMi: Reversing, Exploiting and Fixing Xiaomi Fitness Tracking Ecosystem",
        "authors": "Marco Casagrande, Eleonora Losiouk, Mauro Conti, Mathias Payer, Daniele Antonioli",
        "abstract": "Xiaomi is the leading company in the fitness tracking industry. Successful attacks on its fitness tracking ecosystem would result in severe consequences, including the loss of sensitive health and personal data. Despite these relevant risks, we know very little about the security mechanisms adopted by Xiaomi. In this work, we uncover them and show that they are insecure. In particular, Xiaomi protects its fitness tracking ecosystem with custom application-layer protocols spoken over insecure Bluetooth Low-Energy (BLE) connections (ignoring standard BLE security mechanisms already supported by their devices) and TLS connections. We identify severe vulnerabilities affecting such proprietary protocols, including unilateral and replayable authentication. Those issues are critical as they affect all Xiaomi trackers released since 2016 and up-to-date Xiaomi companion apps for Android and iOS. We show in practice how to exploit the identified vulnerabilities by presenting six impactful attacks. Four attacks enable to wirelessly impersonate any Xiaomi fitness tracker and companion app, man-in-the-middle (MitM) them, and eavesdrop on their communication. The other two attacks leverage a malicious Android application to remotely eavesdrop on data from a tracker and impersonate a Xiaomi fitness app. Overall, the attacks have a high impact as they can be used to exfiltrate and inject sensitive data from any Xiaomi tracker and compatible app. We propose five practical and low-overhead countermeasures to mitigate the presented vulnerabilities. Moreover, we present breakmi, a modular toolkit that we developed to automate our reverse-engineering process and attacks. breakmi understands Xiaomi application-layer proprietary protocols, reimplements Xiaomi security mechanisms, and automatically performs our attacks. We demonstrate that our toolkit can be generalized by extending it to be compatible with the Fitbit ecosystem. We will open-source breakmi.",
        "files": {
            "openAccessPdf": "https://tches.iacr.org/index.php/TCHES/article/download/9704/9234"
        },
        "abstract_zh": "小米是健身追踪行业的领军企业。对其健身跟踪生态系统的成功攻击将导致严重的后果，包括敏感的健康和个人数据的丢失。尽管存在这些相关风险，但我们对小米采用的安全机制知之甚少。在这部作品中，我们揭露了他们，并表明他们是不安全的。特别是，小米通过不安全的蓝牙低能量(BLE)连接(忽略其设备已经支持的标准BLE安全机制)和TLS连接使用定制的应用层协议来保护其健身跟踪生态系统。我们发现了影响此类专有协议的严重漏洞，包括单向和可重复身份验证。这些问题至关重要，因为它们影响了自2016年以来发布的所有小米追踪器以及最新的小米Android和iOS配套应用。我们在实践中展示了如何通过展示六种有影响力的攻击来利用已识别的漏洞。四种攻击可以无线模拟任何小米健身追踪器和配套应用程序，中间人(MitM)他们，并窃听他们的通信。另外两种攻击利用恶意的Android应用程序远程窃听追踪器的数据，并冒充小米健身应用程序。总体而言，这些攻击具有很高的影响力，因为它们可以用来从任何小米追踪器和兼容的应用程序中渗透和注入敏感数据。我们提出了五种实用且低开销的对策来减轻这些漏洞。此外，我们还介绍了breakmi，这是一个模块化的工具包，我们开发它是为了自动化我们的逆向工程过程和攻击。breakmi理解小米应用层专有协议，重新实现小米安全机制，自动执行我们的攻击。我们证明了我们的工具包可以通过扩展来与Fitbit生态系统兼容。我们将开源breakmi。",
        "title_zh": "BreakMi:反转、开拓、修复小米健身追踪生态系统",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tches/tches2022.html",
        "conf_title": "IACR Transactions on Cryptographic Hardware and Embedded Systems, Volume 2022",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-030-05487-8_4",
        "title": "AndroParse - An Android Feature Extraction Framework and Dataset",
        "authors": "Robert Schmicker, Frank Breitinger, Ibrahim M. Baggili",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "Android特征提取框架和数据集",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/icdf2c/icdf2c2018.html",
        "conf_title": "10th ICDF2C 2018: New Orleans, LA, USA",
        "conf_url": "https://doi.org/10.1007/978-3-030-05487-8",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-73697-6_18",
        "title": "Coriander: A Toolset for Generating Realistic Android Digital Evidence Datasets",
        "authors": "Irvin Homem",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "芫荽:用于生成逼真的Android数字证据数据集的工具集",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/icdf2c/icdf2c2017.html",
        "conf_title": "9th ICDF2C 2017: Prague, Czech Republic",
        "conf_url": "https://doi.org/10.1007/978-3-319-73697-6",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-031-36574-4_6",
        "title": "Watch Your WeChat Wallet: Digital Forensics Approach on WeChat Payments on Android",
        "authors": "Jiaxuan Zhou, Umit Karabiyik",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "看好你的微信钱包:Android上微信支付的数字取证方法",
        "abstract_zh": "",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/icdf2c/icdf2c2022.html",
        "conf_title": "13th ICDF2C 2022:\nBoston, MA, USA",
        "conf_url": "https://doi.org/10.1007/978-3-031-36574-4",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-031-36574-4_7",
        "title": "Crypto Wallet Artifact Detection on Android Devices Using Advanced Machine Learning Techniques",
        "authors": "Abhishek Bhattarai, Maryna Veksler, Hadi Sahin, Ahmet Kurt, Kemal Akkaya",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "使用高级机器学习技术在Android设备上检测加密钱包伪像",
        "abstract_zh": "",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/icdf2c/icdf2c2022.html",
        "conf_title": "13th ICDF2C 2022:\nBoston, MA, USA",
        "conf_url": "https://doi.org/10.1007/978-3-031-36574-4",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-031-36574-4_8",
        "title": "CSCD: A Cyber Security Community Detection Scheme on Online Social Networks",
        "authors": "Yutong Zeng, Honghao Yu, Tiejun Wu, Yong Chen, Xing Lan, Cheng Huang",
        "abstract": "This special issue collates a selection of representative research articles that were primarily presented at the 9th International Conference on Network and System Security. This annual conference brings together researchers and practitioners from both academia and industry who are working on security and privacy in computer systems and social networks, in order to promote an exchange of ideas, discuss future collaborations, and develop new research directions. Online social networks have pervaded all aspects of our daily lives. With their unparalleled popularity, online social networks have evolved from platforms for social communication and news dissemination, to indispensable tools for professional networking, social recommendations, marketing, and online content distribution. Because of their scale, complexity, and heterogeneity, many technical and social challenges in online social networks must be addressed. It has been widely recognized that security and privacy are the critical issues in online social networks. This special issue presents many examples of how researchers, scholars, vendors, and practitioners are collaborating to address security and privacy research challenges. The scope of this special issue is broad and is representative of the multi-disciplinary nature of privacy and security. In addition to submissions that deal with malicious attacks, information control and detection, privacy protection, network data analytics for security and privacy, trust and reputation in social networks, this issue also includes articles that address practical challenges with privacy-preserving data publishing and efficient data encryption schemes. Protecting the security and privacy of user data in the context of social networks is a central topic of this issue. Xiaofen Wang et al. [3] propose a new privacy-preserving data search and sharing protocol for social networks. The protocol leverages an ID-based multi-user searchable encryption scheme to achieve data search pattern privacy-preserving, anonymity, and request unlinkability. Majed Alrubian et al. [4] describe a novel approach for finding credible sources among Twitter social network users to detect and prevent various malicious activities. They combine analysis of the user’s reputation on a given topic, as well as a measure of the user’s sentiment to identify topically relevant and credible sources of information. Shuhong Chen et al. [9] propose a new multi-dimensional fuzzy trust evaluation method for mobile social networks. They construct implicit social behavioral graphs based on dynamic complex community structures to infer trust relations between users. Zechao Liu et al. [6] propose a new offline and online attribute-based encryption scheme with verifiable outsourced decryption. Using the proposed scheme, the majority of the computational workload in decryption can be outsourced to third parties. Chunyong Yin et al. [8] propose an improved anonymity model for big data security based on clustering algorithm. The model integrates K-anonymity with L-diversity and addresses the problem of imbalanced sensitive attribute distribution. The security and privacy issues under emerging scenarios, such as mobile and cloud computing, Internet of Things, etc., are interesting topics of this issue. Shasi Pokharel et al. [1] describe a new attacking method for codec identification and decoding of captured communications from 15 popular Android VoIP apps. Using this method, the authors can recover the original voice conversations from intercepted calls. Bowei Yang et al. [2] propose a Quality of Service-aware indiscriminate volume storage cloud scheme over dynamic networks. The scheme employs a data redundancy policy based on indiscriminate recovery volumes and Quality of Service-aware data replacement strategy. Keke Gai et al. [7] present a secure cyber incident analytics framework using Monte Carlo Simulations for financial cyber-security insurance in cloud computing. Jiageng Chen et al. [5] propose a novel variable message encryption scheme for constrained devices in Internet of Things. The authors present two different block cipher compression functions to satisfy efficiency and upper security bound, respectively.",
        "files": {
            "openAccessPdf": "https://onlinelibrary.wiley.com/doi/pdfdirect/10.1002/cpe.4093"
        },
        "title_zh": "CSCD:在线社交网络上的网络安全社区检测方案",
        "abstract_zh": "这期特刊整理了主要在第九届国际网络和系统安全会议上发表的有代表性的研究文章。这一年度会议汇集了来自学术界和工业界的研究人员和从业人员，他们致力于计算机系统和社交网络的安全和隐私，以促进思想交流，讨论未来的合作，并开发新的研究方向。在线社交网络已经渗透到我们日常生活的方方面面。凭借其无与伦比的受欢迎程度，在线社交网络已经从社交交流和新闻传播的平台发展成为专业网络、社交推荐、营销和在线内容分发不可或缺的工具。由于其规模、复杂性和异质性，在线社交网络中的许多技术和社会挑战必须得到解决。人们普遍认为，安全和隐私是在线社交网络的关键问题。这期特刊展示了许多研究人员、学者、供应商和从业者如何合作应对安全和隐私研究挑战的例子。这个特刊的范围很广，代表了隐私和安全的多学科性质。除了处理恶意攻击、信息控制和检测、隐私保护、针对安全性和隐私的网络数据分析、社交网络中的信任和声誉的提交之外，本期还包括解决隐私保护数据发布和高效数据加密方案的实际挑战的文章。在社交网络环境中保护用户数据的安全和隐私是这个问题的中心话题。小粉·王等人[3]提出了一种新的隐私保护的社交网络数据搜索和共享协议。该协议利用基于身份的多用户可搜索加密方案来实现数据搜索模式的隐私保护、匿名性和请求不可链接性。马耶德·阿尔卢比安等人[4]描述了一种在Twitter社交网络用户中寻找可信来源的新方法，以检测和防止各种恶意活动。它们结合了对用户在给定主题上的声誉的分析，以及对用户情绪的测量，以识别与主题相关的可信信息来源。陈叔红等人[9]提出了一种新的移动社交网络多维模糊信任评估方法。他们基于动态复杂社区结构构建隐式社会行为图来推断用户之间的信任关系。刘泽朝等人[6]提出了一种新的离线和在线基于属性的加密方案，具有可验证的外包解密。使用所提出的方案，解密中的大部分计算工作量可以外包给第三方。尹春勇等[8]提出了一种基于聚类算法的大数据安全匿名改进模型。该模型融合了K-匿名和L-多样性，解决了敏感属性分布不均衡的问题。新兴场景下的安全和隐私问题，如移动和云计算、物联网等。，都是本期的有趣话题。Shasi Pokharel等人[1]描述了一种新的攻击方法，用于编解码器识别和解码从15个流行的Android VoIP应用程序捕获的通信。使用这种方法，作者可以从截获的呼叫中恢复原始语音对话。杨等人[2]提出了一种基于动态网络的服务质量感知的无差别卷存储云方案。该方案采用基于无差别恢复卷和服务质量感知数据替换策略的数据冗余策略。唐珂·盖等人[7]提出了一个安全的网络事件分析框架，在云计算中使用蒙特卡罗模拟进行金融网络安全保险。陈嘉庚等人[5]提出了一种新的物联网受限设备可变消息加密方案。作者提出了两种不同的分组密码压缩函数，分别满足效率和安全上限。",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/icdf2c/icdf2c2022.html",
        "conf_title": "13th ICDF2C 2022:\nBoston, MA, USA",
        "conf_url": "https://doi.org/10.1007/978-3-031-36574-4",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-031-36574-4_15",
        "title": "On the Application of Active Learning to Handle Data Evolution in Android Malware Detection",
        "authors": "Alejandro Guerra-Manzanares, Hayretdin Bahsi",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "主动学习在Android恶意软件检测中处理数据演化的应用",
        "abstract_zh": "",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/icdf2c/icdf2c2022.html",
        "conf_title": "13th ICDF2C 2022:\nBoston, MA, USA",
        "conf_url": "https://doi.org/10.1007/978-3-031-36574-4",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-031-36574-4_27",
        "title": "Android Mobile Terminal Security Assessment Based on Analytical Hierarchy Process (AHP)",
        "authors": "Zhiyuan Hu, Linghang Shi, Huijun Chen, Jinghui Lu",
        "abstract": "Mobile terminals especially smartphones are changing people's work and life style. For example, mobile payments are experiencing rapid growth as consumers use mobile terminals as part of lifestyles. However, security is a big challenge for mobile application services. In order to reduce security risks, mobile terminal security assessment should be conducted before providing application services. An approach of comprehensive security assessment is proposed in this paper by defining security metrics with the corresponding scores and determining the relative weights of security metrics based on the analytical hierarchy process (AHP). Overall security assessment of Android-based mobile terminals is implemented for mobile payment services with payment fraud detection accuracy of 89%, which shows that the proposed approach of security assessment is reasonable.",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "基于层次分析法的Android移动终端安全评估",
        "abstract_zh": "移动终端尤其是智能手机正在改变人们的工作和生活方式。例如，随着消费者将移动终端作为生活方式的一部分，移动支付正在快速增长。然而，安全性是移动应用服务的一大挑战。为了降低安全风险，在提供应用服务之前，需要对移动终端进行安全评估。提出了一种基于层次分析法(AHP)的综合安全评估方法，该方法通过定义安全指标及其分值，确定安全指标的相对权重。对基于Android平台的移动终端进行了全面的安全评估，对移动支付业务的欺诈检测准确率达到了89%，表明该安全评估方法是合理的。",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/icdf2c/icdf2c2022.html",
        "conf_title": "13th ICDF2C 2022:\nBoston, MA, USA",
        "conf_url": "https://doi.org/10.1007/978-3-031-36574-4",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-031-17140-6_34",
        "title": "BLEWhisperer: Exploiting BLE Advertisements for Data Exfiltration",
        "authors": "Ankit Gangwal, Shubham Singh, Riccardo Spolaor, Abhijeet Srivastava",
        "abstract": ". Bluetooth technology has enabled short-range wireless communication for billions of devices. Bluetooth Low-Energy (BLE) variant aims at improving power consumption on battery-constrained devices. BLE-enabled devices broadcast information (e.g., as beacons) to nearby devices via advertisements. Unfortunately, such functionality can become a double-edged sword at the hands of attackers. In this paper, we primarily show how an attacker can exploit BLE advertisements to exﬁltrate information from BLE-enable devices. In particular, our attack establishes a communication medium between two devices without requiring any prior authentication or pairing. We de-velop a proof-of-concept attack framework on the Android ecosystem and assess its performance via a thorough set of experiments. Our results indicate that such an exﬁltration attack is indeed possible though with a low data rate. Nevertheless, we also demonstrate potential use cases and enhancements to our attack that can further its severeness. Finally, we discuss possible countermeasures to prevent such an attack.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "。蓝牙技术已经为数十亿台设备实现了短距离无线通信。蓝牙低能耗(BLE)版本旨在改善电池受限设备的功耗。启用BLE的设备通过广告向附近的设备广播信息(例如，作为信标)。不幸的是，这样的功能对于攻击者来说是一把双刃剑。在本文中，我们主要展示了攻击者如何利用BLE广告从支持BLE的设备中窃取信息。特别地，我们的攻击在两个设备之间建立了通信媒介，而不需要任何预先的认证或配对。我们在Android生态系统上开发了一个概念验证攻击框架，并通过一组完整的实验评估了它的性能。我们的结果表明，虽然数据速率较低，但这种溢出攻击确实是可能的。尽管如此，我们也展示了潜在的用例以及对我们的攻击的增强，可以进一步提高它的严重性。最后，我们讨论防止这种攻击的可能对策。",
        "title_zh": "Blewhisperer：利用BLE广告进行数据剥落",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/esorics/esorics2022-1.html",
        "conf_title": "27th ESORICS 2022: Copenhagen, Denmark - Part I",
        "conf_url": "https://doi.org/10.1007/978-3-031-17140-6",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-031-17146-8_12",
        "title": "A Tale of Four Gates - Privilege Escalation and Permission Bypasses on Android Through App Components",
        "authors": "Abdulla Aldoseri, David F. Oswald, Robert Chiper",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "一个四个大门的故事 - 特权升级和允许通过应用程序组件上的Android绕过",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/esorics/esorics2022-2.html",
        "conf_title": "27th ESORICS 2022: Copenhagen, Denmark - Part II",
        "conf_url": "https://doi.org/10.1007/978-3-031-17146-8",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-031-17143-7_34",
        "title": "Reach Me if You Can: On Native Vulnerability Reachability in Android Apps",
        "authors": "Luca Borzacchiello, Emilio Coppa, Davide Maiorca, Andrea Columbu, Camil Demetrescu, Giorgio Giacinto",
        "abstract": "",
        "files": {
            "openAccessPdf": "https://iris.unica.it/bitstream/11584/346573/3/droidreach-preprint-iris.pdf"
        },
        "abstract_zh": "",
        "title_zh": "如果可以的话，请与我联系：关于Android应用中的本地脆弱性达到",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/esorics/esorics2022-3.html",
        "conf_title": "27th ESORICS 2022: Copenhagen, Denmark - Part III",
        "conf_url": "https://doi.org/10.1007/978-3-031-17143-7",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-030-29959-0_30",
        "title": "Finding Flaws from Password Authentication Code in Android Apps",
        "authors": "Siqi Ma, Elisa Bertino, Surya Nepal, Juanru Li, Diethelm Ostry, Robert H. Deng, Sanjay Jha",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "在Android应用中查找密码身份验证代码的缺陷",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/esorics/esorics2019-1.html",
        "conf_title": "24th ESORICS 2019: Luxembourg",
        "conf_url": "https://doi.org/10.1007/978-3-030-29959-0",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-45744-4_19",
        "title": "Intentio Ex Machina: Android Intent Access Control via an Extensible Application Hook",
        "authors": "Carter Yagemann, Wenliang Du",
        "abstract": "",
        "files": {
            "openAccessPdf": "https://surface.syr.edu/cgi/viewcontent.cgi?article=1495&context=etd"
        },
        "abstract_zh": "",
        "title_zh": "Intentio Ex Machina：Android意图通过可扩展的应用程序挂钩",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/esorics/esorics2016-1.html",
        "conf_title": "21st ESORICS 2016: Heraklion, Greece",
        "conf_url": "https://doi.org/10.1007/978-3-319-45744-4",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-45744-4_20",
        "title": "Hey, You, Get Off of My Image: Detecting Data Residue in Android Images",
        "authors": "Xiao Zhang, Yousra Aafer, Kailiang Ying, Wenliang Du",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "嘿，您，摆脱我的图像：在Android图像中检测数据残留",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/esorics/esorics2016-1.html",
        "conf_title": "21st ESORICS 2016: Heraklion, Greece",
        "conf_url": "https://doi.org/10.1007/978-3-319-45744-4",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-45744-4_21",
        "title": "NaClDroid: Native Code Isolation for Android Applications",
        "authors": "Elias Athanasopoulos, Vasileios P. Kemerlis, Georgios Portokalidis, Angelos D. Keromytis",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "Nacldroid：Android应用程序的本机代码隔离",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/esorics/esorics2016-1.html",
        "conf_title": "21st ESORICS 2016: Heraklion, Greece",
        "conf_url": "https://doi.org/10.1007/978-3-319-45744-4",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-45744-4_23",
        "title": "Stay in Your Cage! A Sound Sandbox for Third-Party Libraries on Android",
        "authors": "Fabo Wang, Yuqing Zhang, Kai Wang, Peng Liu, Wenjie Wang",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "留在你的笼子里！ Android上的第三方库的声音沙箱",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/esorics/esorics2016-1.html",
        "conf_title": "21st ESORICS 2016: Heraklion, Greece",
        "conf_url": "https://doi.org/10.1007/978-3-319-45744-4",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-45744-4_24",
        "title": "Android Permission Recommendation Using Transitive Bayesian Inference Model",
        "authors": "Bahman Rashidi, Carol J. Fung, Anh Nguyen, Tam Vu",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "使用及时贝叶斯推理模型的Android许可建议",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/esorics/esorics2016-1.html",
        "conf_title": "21st ESORICS 2016: Heraklion, Greece",
        "conf_url": "https://doi.org/10.1007/978-3-319-45744-4",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-45741-3_27",
        "title": "Breaking into the KeyStore: A Practical Forgery Attack Against Android KeyStore",
        "authors": "Mohamed Sabt, Jacques Traoré",
        "abstract": "",
        "files": {
            "openAccessPdf": "https://hal.archives-ouvertes.fr/hal-01432695/file/2016_esorics_breaking_into_the_keystore.pdf"
        },
        "abstract_zh": "",
        "title_zh": "闯入密钥库：对Android Keystore的实践伪造攻击",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/esorics/esorics2016-2.html",
        "conf_title": "21st ESORICS 2016: Heraklion, Greece",
        "conf_url": "https://doi.org/10.1007/978-3-319-45741-3",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-24177-7_15",
        "title": "DexHunter: Toward Extracting Hidden Code from Packed Android Applications",
        "authors": "Yueqian Zhang, Xiapu Luo, Haoyang Yin",
        "abstract": "",
        "files": {
            "openAccessPdf": "https://link.springer.com/content/pdf/10.1007/978-3-319-24177-7_15.pdf"
        },
        "abstract_zh": "",
        "title_zh": "dexhunter：从包装的Android应用程序中提取隐藏的代码",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/esorics/esorics2015-2.html",
        "conf_title": "20th ESORICS 2015: Vienna, Austria",
        "conf_url": "https://doi.org/10.1007/978-3-319-24177-7",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-24177-7_26",
        "title": "Checking Interaction-Based Declassification Policies for Android Using Symbolic Execution",
        "authors": "Kristopher K. Micinski, Jonathan Fetter-Degges, Jinseong Jeon, Jeffrey S. Foster, Michael R. Clarkson",
        "abstract": "",
        "files": {
            "openAccessPdf": "https://link.springer.com/content/pdf/10.1007/978-3-319-24177-7_26.pdf"
        },
        "abstract_zh": "",
        "title_zh": "使用符号执行来检查基于交互的解密策略",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/esorics/esorics2015-2.html",
        "conf_title": "20th ESORICS 2015: Vienna, Austria",
        "conf_url": "https://doi.org/10.1007/978-3-319-24177-7",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-24177-7_29",
        "title": "Web-to-Application Injection Attacks on Android: Characterization and Detection",
        "authors": "Behnaz Hassanshahi, Yaoqi Jia, Roland H. C. Yap, Prateek Saxena, Zhenkai Liang",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "Web对Android的注射攻击：表征和检测",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/esorics/esorics2015-2.html",
        "conf_title": "20th ESORICS 2015: Vienna, Austria",
        "conf_url": "https://doi.org/10.1007/978-3-319-24177-7",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-66402-6_17",
        "title": "Mirage: Toward a Stealthier and Modular Malware Analysis Sandbox for Android",
        "authors": "Lorenzo Bordoni, Mauro Conti, Riccardo Spolaor",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "海市rage楼：迈向安德罗伊的隐形和模块化恶意软件分析沙箱",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/esorics/esorics2017-1.html",
        "conf_title": "22nd ESORICS 2017: Oslo, Norway",
        "conf_url": "https://doi.org/10.1007/978-3-319-66402-6",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://ceur-ws.org/Vol-1977/paper2.pdf",
        "title": "Comparing Capability of Static Analysis Tools to Detect Security Weaknesses in Mobile Applications",
        "authors": "Tosin Daniel Oyetoyan, Marcos Lordello Chaim",
        "abstract": "Smartphones are prevalent today and store sensitive and private data. Malicious applications are constant threats to user data on smartphones as they could sniff or manipulate them by exploiting software weaknesses in legitimate mobile applications. Static analysis tools can be used to reduce these risks during development. However, it is important to know the capability of these tools in order to make informed decisions and avoid false-sense of security. In this preliminary study we investigate the detection capability of mainstream vs. Android-specific tools to guide decision-making during tools’ selection.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "智能手机如今非常普遍，存储着敏感和隐私数据。恶意应用程序是智能手机上用户数据的持续威胁，因为它们可以通过利用合法移动应用程序中的软件弱点来嗅探或操纵用户数据。静态分析工具可以用来减少开发过程中的这些风险。然而，了解这些工具的能力是很重要的，这样才能做出明智的决策，避免错误的安全感。在这项初步研究中，我们调查了主流工具与Android特定工具的检测能力，以指导工具选择过程中的决策。",
        "title_zh": "比较静态分析工具检测移动应用程序中安全弱点的能力",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/esorics/secse2017.html",
        "conf_title": "SecSE@ESORICS 2017: Oslo, Norway",
        "conf_url": "https://ceur-ws.org/Vol-1977",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-98989-1_2",
        "title": "Emulation-Instrumented Fuzz Testing of 4G/LTE Android Mobile Devices Guided by Reinforcement Learning",
        "authors": "Kaiming Fang, Guanhua Yan",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "通过强化学习指导的4G/LTE Android移动设备的仿真绒毛测试",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/esorics/esorics2018-2.html",
        "conf_title": "23rd ESORICS 2018: Barcelona, Spain",
        "conf_url": "https://doi.org/10.1007/978-3-319-98989-1",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-98989-1_4",
        "title": "Investigating Fingerprinters and Fingerprinting-Alike Behaviour of Android Applications",
        "authors": "Christof Ferreira Torres, Hugo Jonker",
        "abstract": "",
        "files": {
            "openAccessPdf": "https://orbilu.uni.lu/bitstream/10993/36368/1/fp-sherlock_esorics2018.pdf"
        },
        "abstract_zh": "",
        "title_zh": "调查Android应用的指纹和指纹类似行为",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/esorics/esorics2018-2.html",
        "conf_title": "23rd ESORICS 2018: Barcelona, Spain",
        "conf_url": "https://doi.org/10.1007/978-3-319-98989-1",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.jisa.2022.103311",
        "title": "Obfuscation detection in Android applications using deep learning",
        "authors": "Mauro Conti, P. Vinod, Alessio Vitella",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "使用深度学习的Android应用中的混淆检测",
        "abstract_zh": "",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/istr/istr70.html",
        "conf_title": "Journal of Information Security and Applications, Volume 70",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.jisa.2022.103152",
        "title": "Android Password Managers and Vault Applications: Data Storage Security Issues Identification",
        "authors": "Peter Sabev, Milen Petrov",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "Android密码管理器和保险库应用程序:数据存储安全问题识别",
        "abstract_zh": "",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/istr/istr67.html",
        "conf_title": "Journal of Information Security and Applications, Volume 67",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.jisa.2022.103159",
        "title": "You are what the permissions told me! Android malware detection based on hybrid tactics",
        "authors": "Huanran Wang, Weizhe Zhang, Hui He",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "你是权限告诉我的！基于混合策略的Android恶意软件检测",
        "abstract_zh": "",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/istr/istr66.html",
        "conf_title": "Journal of Information Security and Applications, Volume 66",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.jisa.2021.103097",
        "title": "Best current practices for OAuth/OIDC Native Apps: A study of their adoption in popular providers and top-ranked Android clients",
        "authors": "Amir Sharif, Roberto Carbone, Giada Sciarretta, Silvio Ranise",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "OAuth/OIDC本地应用的当前最佳实践:对其在流行提供商和顶级Android客户端中的采用的研究",
        "abstract_zh": "",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/istr/istr65.html",
        "conf_title": "Journal of Information Security and Applications, Volume 65",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.jisa.2019.102423",
        "title": "Visualizing the outcome of dynamic analysis of Android malware with VizMal",
        "authors": "Andrea De Lorenzo, Fabio Martinelli, Eric Medvet, Francesco Mercaldo, Antonella Santone",
        "abstract": "",
        "files": {
            "openAccessPdf": "https://arts.units.it/bitstream/11368/2953327/1/2019-JISA-VisualizingAndroidMalware.pdf"
        },
        "abstract_zh": "",
        "title_zh": "用VizMal可视化Android恶意软件的动态分析结果",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/istr/istr50.html",
        "conf_title": "Journal of Information Security and Applications, Volume 50",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.jisa.2020.102483",
        "title": "A TAN based hybrid model for android malware detection",
        "authors": "Roopak Surendran, Tony Thomas, Sabu Emmanuel",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "基于TAN的android恶意软件检测混合模型",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/istr/istr54.html",
        "conf_title": "Journal of Information Security and Applications, Volume 54",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.jisa.2020.102463",
        "title": "A large-scale study on the adoption of anti-debugging and anti-tampering protections in android apps",
        "authors": "Stefano Berlato, Mariano Ceccato",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "一项关于在android应用中采用防调试和防篡改保护的大规模研究",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/istr/istr52.html",
        "conf_title": "Journal of Information Security and Applications, Volume 52",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.jisa.2021.102929",
        "title": "Android mobile malware detection using fuzzy AHP",
        "authors": "Juliza Mohamad Arif, Mohd Faizal Ab Razak, Sharfah Ratibah Tuan Mat, Suryanti Awang, Nor Syahidatul Nadiah Ismail, Ahmad Firdaus",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "基于模糊层次分析法的Android手机恶意软件检测",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/istr/istr61.html",
        "conf_title": "Journal of Information Security and Applications, Volume 61",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.jisa.2021.102794",
        "title": "On machine learning effectiveness for malware detection in Android OS using static analysis data",
        "authors": "Vasileios Syrris, Dimitris Geneiatakis",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "基于静态分析数据的机器学习在Android系统恶意软件检测中的有效性研究",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/istr/istr59.html",
        "conf_title": "Journal of Information Security and Applications, Volume 59",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.jisa.2021.103011",
        "title": "Does the layout of the Android unlock pattern affect the security and usability of the password?",
        "authors": "Lei Zhang, Yajun Guo, Xiaowei Guo, Xiaowei Shao",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "Android解锁图案的布局是否影响密码的安全性和可用性？",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/istr/istr62.html",
        "conf_title": "Journal of Information Security and Applications, Volume 62",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.jisa.2020.102696",
        "title": "NATICUSdroid: A malware detection framework for Android using native and custom permissions",
        "authors": "Akshay Mathur, Laxmi Mounika Podila, Keyur Kulkarni, Quamar Niyaz, Ahmad Y. Javaid",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "NATICUSdroid:一个使用本地和自定义权限的Android恶意软件检测框架",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/istr/istr58.html",
        "conf_title": "Journal of Information Security and Applications, Volume 58",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.jisa.2020.102718",
        "title": "Multi-view deep learning for zero-day Android malware detection",
        "authors": "Stuart Millar, Niall McLaughlin, Jesús Martínez del Rincón, Paul Miller",
        "abstract": "",
        "files": {
            "openAccessPdf": "https://pureadmin.qub.ac.uk/ws/files/228719246/JISA_2020_558_Original_V0_submitted.pdf"
        },
        "abstract_zh": "",
        "title_zh": "零日Android恶意软件检测的多视图深度学习",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/istr/istr58.html",
        "conf_title": "Journal of Information Security and Applications, Volume 58",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.jisa.2020.102735",
        "title": "Android botnet detection using machine learning models based on a comprehensive static analysis approach",
        "authors": "Wadi' Hijawi, Ja'far Alqatawna, Ala' M. Al-Zoubi, Mohammad A. Hassonah, Hossam Faris",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "基于综合静态分析方法的机器学习模型检测Android僵尸网络",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/istr/istr58.html",
        "conf_title": "Journal of Information Security and Applications, Volume 58",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.jisa.2021.102751",
        "title": "Detection of malicious Android applications using Ontology-based intelligent model in mobile cloud environment",
        "authors": "O. S. Jannath Nisha, Somasundaram Mary Saira Bhanu",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "移动云环境下基于本体的智能模型检测恶意Android应用",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/istr/istr58.html",
        "conf_title": "Journal of Information Security and Applications, Volume 58",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.jisa.2021.102995",
        "title": "Permission-based Android malware analysis by using dimension reduction with PCA and LDA",
        "authors": "Durmus Özkan Sahin, Oguz Emre Kural, Sedat Akleylek, Erdal Kiliç",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "利用PCA和LDA降维进行基于权限的Android恶意软件分析",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/istr/istr63.html",
        "conf_title": "Journal of Information Security and Applications, Volume 63",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.jisa.2023.103486",
        "title": "AIM: An Android Interpretable Malware detector based on application class modeling",
        "authors": "Farnood Faghihi, Mohammad Zulkernine, Steven H. H. Ding",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "目的:基于应用类建模的Android可解释恶意软件检测器",
        "abstract_zh": "",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/istr/istr75.html",
        "conf_title": "Journal of Information Security and Applications, Volume 75",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.jisa.2023.103527",
        "title": "A detector for Android repackaged applications with layout-fingerprint",
        "authors": "Tengfei Tu, Hua Zhang, Yangye Hu, Dong Cui, Xilin Zhai",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "基于布局指纹的Android二次包装应用检测器",
        "abstract_zh": "",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/istr/istr76.html",
        "conf_title": "Journal of Information Security and Applications, Volume 76",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.jisa.2019.03.014",
        "title": "Dynamic privacy leakage analysis of Android third-party libraries",
        "authors": "Yongzhong He, Xuejun Yang, Binghui Hu, Wei Wang",
        "abstract": "Third-party libraries are widely used in Android apps. As third-party libraries share permissions with the host apps, they are easily over-privileged and leak users' privacy without notice. Combing static third-party library detection tool and dynamic Xposed framework, we propose a fine-grained and dynamic privacy leakage analysis tool to analyze the privacy leakage behaviors of third-party libraries in real time. This paper identifies three types of privacy leakage path inside apps. We evaluate 150 popular apps, collecting 1909 privacy information related call chains. We find the third-party libraries access to privacy information account for the largest proportion, and most of third-party libraries have direct network connections and the correspondent flows are inspected to validate the privacy leakage risk. The results show that the tool can achieve real-time, fine-grained and dynamic privacy behavior analysis of Android apps.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android应用中广泛使用第三方库。由于第三方库与主机应用程序共享权限，它们很容易被授予过度特权，并在没有通知的情况下泄露用户的隐私。结合静态第三方库检测工具和动态Xposed框架，提出一种细粒度的动态隐私泄露分析工具，实时分析第三方库的隐私泄露行为。本文指出了应用程序内部三种类型的隐私泄露路径。我们评估了150个流行的应用程序，收集了1909个与隐私信息相关的呼叫链。我们发现第三方图书馆获取隐私信息的比例最大，并且大多数第三方图书馆都有直接的网络连接，并对相应的流量进行检查以验证隐私泄露风险。结果表明，该工具能够实现对Android应用的实时、细粒度、动态隐私行为分析。",
        "title_zh": "Android第三方库的动态隐私泄露分析",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/istr/istr46.html",
        "conf_title": "Journal of Information Security and Applications, Volume 46",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.jisa.2016.10.003",
        "title": "The simpler, the better? Presenting the COPING Android permission-granting interface for better privacy-related decisions",
        "authors": "Paul Gerber, Melanie Volkamer, Karen Renaud",
        "abstract": "",
        "files": {
            "openAccessPdf": "http://eprints.gla.ac.uk/137741/7/137741.pdf"
        },
        "abstract_zh": "",
        "title_zh": "越简单越好？展示应对Android权限授予界面，以便做出更好的隐私相关决策",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/istr/istr34.html",
        "conf_title": "Journal of Information Security and Applications, Volume 34",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.jisa.2018.07.003",
        "title": "SWORD: Semantic aWare andrOid malwaRe Detector",
        "authors": "Shweta Bhandari, Rekha Panihar, Smita Naval, Vijay Laxmi, Akka Zemmari, Manoj Singh Gaur",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "SWORD:语义感知andrOid恶意软件检测器",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/istr/istr42.html",
        "conf_title": "Journal of Information Security and Applications, Volume 42",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.jisa.2018.02.002",
        "title": "Instance based security risk value estimation for Android applications",
        "authors": "Mahmood Deypir, Abbas Horri",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "基于实例的Android应用安全风险值评估",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/istr/istr40.html",
        "conf_title": "Journal of Information Security and Applications, Volume 40",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.jisa.2018.02.004",
        "title": "Studying users' adaptation to Android's run-time fine-grained access control system",
        "authors": "Panagiotis Andriotis, Gianluca Stringhini, Martina Angela Sasse",
        "abstract": "",
        "files": {
            "openAccessPdf": "https://discovery.ucl.ac.uk/10044936/1/JISApreprint.pdf"
        },
        "abstract_zh": "",
        "title_zh": "研究用户对Android运行时细粒度访问控制系统的适应性",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/istr/istr40.html",
        "conf_title": "Journal of Information Security and Applications, Volume 40",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.jisa.2014.10.011",
        "title": "AndroSimilar: Robust signature for detecting variants of Android malware",
        "authors": "Parvez Faruki, Vijay Laxmi, Ammar Bharmal, Manoj Singh Gaur, Vijay Ganmoor",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "Android相似:检测Android恶意软件变种的强大签名",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/istr/istr22.html",
        "conf_title": "Journal of Information Security and Applications, Volume 22",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-30505-9_28",
        "title": "An Empirical Study of Android Alarm Usage for Application Scheduling",
        "authors": "Mário Almeida, Muhammad Bilal, Jeremy Blackburn, Konstantina Papagiannaki",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "Android应用程序调度警报使用的实证研究",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/pam/pam2016.html",
        "conf_title": "17. PAM 2016: Heraklion, Greece",
        "conf_url": "https://doi.org/10.1007/978-3-319-30505-9",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-54328-4_8",
        "title": "Where Is the Weakest Link? A Study on Security Discrepancies Between Android Apps and Their Website Counterparts",
        "authors": "Arash Alavi, Alan Quach, Hang Zhang, Bryan Marsh, Farhan Ul Haq, Zhiyun Qian, Long Lu, Rajiv Gupta",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "最薄弱的环节在哪里？安卓应用与网站应用的安全差异研究",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/pam/pam2017.html",
        "conf_title": "18. PAM 2017: Sydney, NSW, Australia",
        "conf_url": "https://doi.org/10.1007/978-3-319-54328-4",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2020.2982635",
        "title": "Eight Years of Rider Measurement in the Android Malware Ecosystem",
        "authors": "Guillermo Suarez-Tangil, Gianluca Stringhini",
        "abstract": "Despite the growing threat posed by the Android malware, the research community is still lacking a comprehensive view of common behaviors and emerging trends in malware families active on the platform. Without such view, researchers incur the risk of developing systems that only detect outdated threats, missing the most recent ones. In this article, we conduct the largest measurement of Android malware behavior to date, analyzing over 1.2 million malware samples that belong to 1.28K families over a period of eight years (from 2010 to 2017). We aim at understanding how Android malware has evolved over time, focusing on repackaging malware. In this type of threat different innocuous apps are piggybacked with a malicious payload (rider), allowing inexpensive malware manufacturing. One of the main challenges posed when studying repackaged malware is slicing the app to split benign components apart from the malicious ones. To address this problem, we use differential analysis to isolate software components that are irrelevant to the campaign and study the behavior of malicious riders alone. Our analysis framework relies on collective repositories and recent advances on the systematization of intelligence extracted from multiple anti-virus vendors. We find that since its infancy in 2010, the Android malware ecosystem has changed significantly, both in the type of malicious activity performed by malware and in the level of obfuscation used to avoid detection. Finally, we discuss what our findings mean for Android malware detection research, highlighting areas that need further attention by the research community. In particular, we show that riders of malware families evolve over time. This evidences important experimental bias in research works levering on automated systems for family identification without considering variants.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "尽管Android恶意软件带来的威胁越来越大，但研究社区仍然缺乏对平台上活跃的恶意软件家族的常见行为和新兴趋势的全面了解。如果没有这样的观点，研究人员就会承担开发系统的风险，这些系统只能检测过时的威胁，而错过最新的威胁。在这篇文章中，我们对Android恶意软件行为进行了迄今为止最大规模的测量，分析了八年期间(从2010年到2017年)属于1.28K家族的超过120万个恶意软件样本。我们旨在了解Android恶意软件如何随着时间的推移而演变，重点是重新包装恶意软件。在这种类型的威胁中，不同的无害应用程序会附带一个恶意负载(rider)，从而允许廉价的恶意软件制造。在研究重新打包的恶意软件时，面临的一个主要挑战是对应用进行切片，将良性组件与恶意组件分开。为了解决这个问题，我们使用差异分析来隔离与活动无关的软件组件，并单独研究恶意骑手的行为。我们的分析框架依赖于集体存储库和从多个反病毒供应商那里提取的情报系统化的最新进展。我们发现，自2010年起步以来，Android恶意软件生态系统已经发生了显著变化，无论是恶意软件执行的恶意活动类型，还是用于避免检测的混淆级别。最后，我们讨论了我们的发现对Android恶意软件检测研究的意义，强调了研究社区需要进一步关注的领域。特别是，我们表明恶意软件家族的成员会随着时间的推移而演变。这证明了在不考虑变异的情况下利用自动化系统进行家族鉴定的研究工作中存在重要的实验偏差。",
        "title_zh": "Android恶意软件生态系统中的八年骑手测量",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc19.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 19",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2020.2979856",
        "title": "A Blockchain-Based Self-Tallying Voting Protocol in Decentralized IoT",
        "authors": "Yannan Li, Willy Susilo, Guomin Yang, Yong Yu, Dongxi Liu, Xiaojiang Du, Mohsen Guizani",
        "abstract": "The Internet of Things (IoT) is experiencing explosive growth and has gained extensive attention from academia and industry in recent years. However, most of the existing IoT infrastructures are centralized, which may cause the issues of unscalability and single-point-of-failure. Consequently, decentralized IoT has been proposed by taking advantage of the emerging technology called blockchain. Voting systems are widely adopted in IoT, for example a leader election in wireless sensor networks. Self-tallying voting systems are alternatives to unsuitable, traditional centralized voting systems in decentralized IoT. Unfortunately, self-tallying voting systems inherently suffer from fairness issues, such as adaptive and abortive issues caused by malicious voters. To address these issues, in this article, we introduce a framework of the self-tallying voting system in decentralized IoT based on blockchain. We propose a concrete construction and prove that the proposed system satisfies all the security requirements, including fairness, dispute-freeness, and maximal ballot secrecy. We simulate the algorithms on a laptop, an Android phone, and a Raspberry Pi to test the time consumption and evaluate the gas cost of each algorithm in a private blockchain as well. The implementation results demonstrate the practicability of our system.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "近年来，物联网正在经历爆炸式增长，并获得了学术界和工业界的广泛关注。然而，现有的物联网基础设施大多是集中式的，这可能会导致不可扩展性和单点故障的问题。因此，利用名为区块链的新兴技术，人们提出了分散式物联网。投票系统在物联网中被广泛采用，例如无线传感器网络中的领袖选举。在分散式物联网中，自动计票投票系统是不合适的传统集中式投票系统的替代方案。不幸的是，自计票系统固有地遭受公平性问题，例如由恶意投票者引起的适应性和流产问题。为了解决这些问题，本文介绍了一种基于区块链的分布式物联网自动计票系统框架。我们提出了一个具体的构造，并证明了所提出的系统满足所有的安全要求，包括公平性、无争议性和最大投票保密性。我们在笔记本电脑、Android手机和Raspberry Pi上模拟这些算法，以测试时间消耗，并在私人区块链中评估每个算法的汽油成本。实施结果证明了该系统的实用性。",
        "title_zh": "分散的物联网中基于区块链的自定义投票协议",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc19.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 19",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2020.2995542",
        "title": "JNI Global References Are Still Vulnerable: Attacks and Defenses",
        "authors": "Yi He, Yuan Zhou, Yajin Zhou, Qi Li, Kun Sun, Yacong Gu, Yong Jiang",
        "abstract": "System services and resources in Android are accessed through IPC-based mechanisms. Previous research has demonstrated that they are vulnerable to the denial-of-service attack (DoS attack). For instance, the JNI global reference (JGR), which is widely used by system services, can be exhausted to cause the system reboot (hence the name JGRE attack). Even though the Android team tries to fix the problem by enforcing security checks, we find that it is still possible to construct a JGR exhaustion DoS attack in the latest Android system. In this article, we propose a new JGR exhaustion DoS attack, which is effective in different Android versions, including the latest one (i.e., Android 10). Specifically, we developed JGREAnalyzer, a tool that can systematically detect JGR vulnerable services APIs via a call graph analysis and a forwarding reachability analysis. We applied this tool to different Android versions and found multiple vulnerabilities. In particular, among 148 system services in Android 10, 12 of them have 21 vulnerabilities. Among them, 9 can be successfully exploited without any permissions. We further analyze the root cause of the vulnerabilities and propose a new defense to mitigate the JGRE attack by restricting resource consumption via global reference counting.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android中的系统服务和资源是通过基于IPC的机制访问的。先前的研究表明，它们容易受到拒绝服务攻击(DoS攻击)。例如，系统服务广泛使用的JNI全局引用(JGR)可能会耗尽，导致系统重启(因此得名JGRE攻击)。尽管Android团队试图通过实施安全检查来解决这个问题，但我们发现在最新的Android系统中仍然有可能构建JGR耗尽DoS攻击。在这篇文章中，我们提出了一种新的JGR耗尽DoS攻击，这种攻击在不同的Android版本中都有效，包括最新的版本(即Android 10)。具体来说，我们开发了JGREAnalyzer工具，它可以通过调用图分析和转发可达性分析来系统地检测JGR易受攻击的服务API。我们将这个工具应用于不同的Android版本，发现了多个漏洞。特别是Android 10的148个系统服务中，有12个有21个漏洞。其中9个可以在没有任何权限的情况下成功利用。我们进一步分析了漏洞的根本原因，并提出了一种新的防御方法，通过全局引用计数限制资源消耗来缓解JGRE攻击。",
        "title_zh": "JNI全球参考仍然很脆弱：攻击和防御",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc19.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 19",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2020.3005088",
        "title": "SDAC: A Slow-Aging Solution for Android Malware Detection Using Semantic Distance Based API Clustering",
        "authors": "Jiayun Xu, Yingjiu Li, Robert H. Deng, Ke Xu",
        "abstract": "A novel slow-aging solution named SDAC is proposed to address the model aging problem in Android malware detection, which is due to the lack of adapting to the changes in Android specifications during malware detection. Different from periodic retraining of detection models in existing solutions, SDAC evolves effectively by evaluating new APIs’ contributions to malware detection according to existing API’s contributions. In SDAC, the contributions of APIs are evaluated by their contexts in the API call sequences extracted from Android apps. A neural network is applied on the sequences to assign APIs to vectors, among which the differences of API vectors are regarded as the semantic distances. SDAC then clusters all APIs based on their semantic distances to create a feature set in the training phase, and extends the feature set to include all new APIs in the detecting phase. Without being trained by any new set of real-labelled apps, SDAC can adapt to the changes in Android specifications by simply identifying new APIs appearing in the detection phase. In extensive experiments with datasets dated from 2011 to 2016, SDAC achieves a significantly higher accuracy and a significantly slower aging speed compared with MaMaDroid, a state-of-the-art Android malware detection solution which maintains resilience to API changes.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "针对Android恶意软件检测中模型老化问题，提出了一种新的慢老化解决方案——SDAC。与现有解决方案中定期重新训练检测模型不同，SDAC通过根据现有API的贡献评估新API对恶意软件检测的贡献来有效地进化。在SDAC，API的贡献是通过从Android应用中提取的API调用序列中的上下文来评估的。对序列应用神经网络以将API分配给向量，其中API向量的差异被视为语义距离。然后，SDAC根据语义距离对所有API进行聚类，以在训练阶段创建一个特征集，并在检测阶段扩展该特征集，以包括所有新的API。无需接受任何新的真实标签应用的训练，SDAC可以通过简单地识别检测阶段出现的新API来适应Android规范的变化。在2011年至2016年的数据集上进行的大量实验中，与MaMaDroid相比，SDAC实现了明显更高的准确性和明显更慢的老化速度，mamad roid是一种最先进的Android恶意软件检测解决方案，可以保持对API变化的弹性。",
        "title_zh": "SDAC：使用基于语义距离的API聚类的Android恶意软件检测的慢老化解决方案",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc19.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 19",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2020.3040784",
        "title": "WebCloud: Web-Based Cloud Storage for Secure Data Sharing Across Platforms",
        "authors": "Shuzhou Sun, Hui Ma, Zishuai Song, Rui Zhang",
        "abstract": "With more and more data moving to the cloud, privacy of user data have raised great concerns. Client-side encryption/decryption seems to be an attractive solution to protect data security, however, the existing solutions encountered three major challenges: low security due to encryption with low-entropy PIN, inconvenient data sharing with traditional encryption algorithms, and poor usability with dedicated software/plugins that require certain types of terminals. This work designs and implements WebCloud, a practical browser-side encryption solution, leveraging modern Web technologies. It solves all the above three problems while achieves several additional remarkable features: robust and immediate user revocation, fast data processing with offline encryption and outsourced decryption. Notably, our solution works on any device equipped with a Web user agent, including Web browsers, mobile and PC applications. We implement WebCloud based on ownCloud for basic file management utility, and utilize WebAssembly and Web Cryptography API for complex cryptographic operations integration. Finally, comprehensive experiments are conducted with many well-known browsers, Android and PC applications, which indicates that WebCloud is cross-platform and efficient. As an interesting by-product, the design of WebCloud naturally embodies a dedicated and practical ciphertext-policy attribute-based key encapsulation mechanism (CP-AB-KEM) scheme, which can be useful in other applications.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "随着越来越多的数据转移到云中，用户数据的隐私问题引起了极大的关注。客户端加密/解密似乎是保护数据安全的一种有吸引力的解决方案，然而，现有的解决方案遇到了三个主要挑战:由于使用低熵PIN加密而导致的低安全性，使用传统加密算法不方便的数据共享，以及使用需要特定类型终端的专用软件/插件的可用性差。本文设计并实现了WebCloud，这是一个实用的浏览器端加密解决方案，利用了现代Web技术。它解决了所有上述三个问题，同时实现了几个额外的显著特征:健壮和即时的用户撤销、具有离线加密和外包解密的快速数据处理。值得注意的是，我们的解决方案适用于任何配备了Web用户代理的设备，包括Web浏览器、移动和PC应用程序。我们基于ownCloud实现了WebCloud的基本文件管理工具，并利用WebAssembly和Web Cryptography API集成了复杂的加密操作。最后，使用多个知名浏览器、Android和PC应用进行综合实验，实验结果表明WebCloud具有跨平台性和高效性。作为一个有趣的副产品，WebCloud的设计自然体现了一个专用且实用的基于密文策略属性的密钥封装机制(CP-AB-KEM)方案，该方案可以在其他应用中使用。",
        "title_zh": "WebCloud：基于Web的云存储，用于跨平台的安全数据共享",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc19.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 19",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2021.3050188",
        "title": "Orchestration or Automation: Authentication Flaw Detection in Android Apps",
        "authors": "Siqi Ma, Juanru Li, Surya Nepal, Diethelm Ostry, David Lo, Sanjay K. Jha, Robert H. Deng, Elisa Bertino",
        "abstract": "Passwords are pervasively used to authenticate users’ identities in mobile apps. To secure passwords against attacks, protection is applied to the password authentication protocol (PAP). The implementation of the protection scheme becomes an important factor in protecting PAP against attacks. We focus on two basic protection in Android, i.e., SSL/TLS-based PAP and timestamp-based PAP. Previously, we proposed an automated tool, <sc>GLACIATE</sc>, to detect authentication flaws. We were curious whether orchestration (i.e., involving manual-effort) works better than automation. To answer this question, we propose an orchestrated approach, <sc>AuthExploit</sc> and compare its effectiveness <sc>GLACIATE</sc>. We study requirements for correct implementation of PAP and then apply <sc>GLACIATE</sc> to identify protection enhancements automatically. Through dependency analysis, <sc>GLACIATE</sc> matches the implementations against the abstracted flaws to recognise defective apps. To evaluate <sc>AuthExploit</sc>, we collected 1,200 Android apps from Google Play. We compared <sc>AuthExploit</sc> with the automation tool, <sc>GLACIATE</sc>, and two other orchestration tools, <inline-formula><tex-math notation=\"LaTeX\">${\\sf MalloDroid}$</tex-math><alternatives><mml:math><mml:mi mathvariant=\"sans-serif\">MalloDroid</mml:mi></mml:math><inline-graphic xlink:href=\"ma-ieq1-3050188.gif\"/></alternatives></inline-formula> and <inline-formula><tex-math notation=\"LaTeX\">${\\sf SMV-Hunter}$</tex-math><alternatives><mml:math><mml:mrow><mml:mi mathvariant=\"sans-serif\">SMV</mml:mi><mml:mo>-</mml:mo><mml:mi mathvariant=\"sans-serif\">Hunter</mml:mi></mml:mrow></mml:math><inline-graphic xlink:href=\"ma-ieq2-3050188.gif\"/></alternatives></inline-formula>. The results demonstrated that orchestration tools detect flaws more precisely although the F1 score of <sc>GLACIATE</sc> is higher than <sc>AuthExploit</sc>. Further analysis of the results reveals that highly popular apps and e-commerce apps are not more secure than other apps.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "在移动应用程序中，密码被广泛用于验证用户的身份。为了保护密码免受攻击，对密码验证协议(PAP)进行了保护。保护方案的实施成为保护PAP免受攻击的重要因素。我们重点研究Android中的两种基本保护，即基于SSL/TLS的PAP和基于时间戳的PAP。之前，我们提出了一个自动化工具“GLACIATE”来检测认证缺陷。我们很好奇编排(例如，涉及人工的工作)是否比自动化工作得更好。为了回答这个问题，我们提出了一种协调的方法，即AuthExploit，并比较了它的有效性。我们研究正确实施PAP的要求，然后应用GLACIATE来自动识别保护增强功能。通过依赖性分析，GLACIATE将实现与抽象的缺陷进行匹配，以识别有缺陷的应用程序。为了评估< sc>AuthExploit</sc >，我们从Google Play收集了1，200个Android应用。我们将< sc>AuthExploit</sc >与自动化工具< sc>GLACIATE</sc >以及另外两个编排工具< inline-formula > < tex-math notation = \" LaTeX \" > $ { \\ SF MalloDroid } $ </tex-math > < alternatives > < MML:math > < MML:mi math variant = \" sans-serif \" > MalloDroid </MML:mi > </MML:math > < inline-graphic xlink:href = \" ma-ie Q1-3050180进行了比较结果表明，尽管< sc>GLACIATE</sc >的F1分数高于< sc>AuthExploit</sc >，但编排工具可以更精确地检测缺陷。对结果的进一步分析显示，高度流行的应用程序和电子商务应用程序并不比其他应用程序更安全。",
        "title_zh": "管弦乐或自动化：Android应用中的身份验证缺陷检测",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc19.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 19",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2021.3075817",
        "title": "LibCapsule: Complete Confinement of Third-Party Libraries in Android Applications",
        "authors": "Jun Qiu, Xuewu Yang, Huamao Wu, Yajin Zhou, Jinku Li, Jianfeng Ma",
        "abstract": "Android application (or app) developers increasingly integrate third-party libraries to enrich the functionality of their apps. However, current permission model on Android cannot constrain the behaviors of in-app third-party libraries for allowing them to operate with the same permissions as their host app. This brings serious security and privacy concerns to users. In this article, we propose LibCapsule, a user-level solution to confine third-party libraries from potential permission abuses. Compared to previous systems, LibCapsule is able to provide complete confinement of third-party libraries in Android apps, including the static Java code, dynamically loaded code and native code of third-party libraries. We have developed a prototype of LibCapsule, and collected 204 popular third-party libraries as well as 2,021 apps to evaluate it. The evaluation results indicate that LibCapsule is capable of enforcing complete and fine-grained regulation on third-party libraries according to customized security policies with a low performance overhead. To engage the whole community, we will release the dataset of third-party libraries and apps in our evaluation.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android应用程序(或应用程序)开发者越来越多地集成第三方库，以丰富其应用程序的功能。然而，目前Android上的权限模型不能约束应用内第三方库的行为，以允许它们使用与其宿主应用相同的权限进行操作。这给用户带来了严重的安全和隐私问题。在本文中，我们提出了LibCapsule，这是一个用户级的解决方案，可以防止第三方库被滥用权限。与以前的系统相比，LibCapsule能够在Android应用程序中提供第三方库的完整限制，包括第三方库的静态Java代码、动态加载的代码和本机代码。我们已经开发了LibCapsule的原型，并收集了204个流行的第三方库以及2021个应用程序来评估它。评估结果表明，LibCapsule能够以较低的性能开销根据定制的安全策略对第三方库实施完整和细粒度的监管。为了让整个社区参与进来，我们将在评估中发布第三方库和应用的数据集。",
        "title_zh": "libcapsule：在Android应用程序中的第三方库完全限制",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc19.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 19",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2021.3091654",
        "title": "Secure Repackage-Proofing Framework for Android Apps Using Collatz Conjecture",
        "authors": "Haoyu Ma, Shijia Li, Debin Gao, Chunfu Jia",
        "abstract": "App repackaging has been raising serious concerns about the health of the Android ecosystem, and repackage-proofing is an important mitigation against threat of such attacks. However, existing app repackage-proofing schemes were only evaluated against trivial adversaries simulated using analyzers for other purposes (e.g., disclosing privacy leakage vulnerabilities), hence were shown “effective” mainly because their key programming features were not even supported by those toolkits. Furthermore, existing works have also neglected dynamic adversaries capable of manipulating victim apps at runtime, making them vulnerable against such stronger opponents. In this article, we propose a novel repackage-proofing framework, which deploys distributed detection and response sites into the subject app's native partition to cross-verify all its code files. The detection sites transmit obtained integrity metrics to response sites via secure communication channels built on the subject app's own control flows using a specialized obfuscation technique based on Collatz conjecture, turning the repackage-proofing process into complicated implicit flows that are intrinsically difficult to be resolved due to the conjecture's nonlinear dynamical behaviors. We evaluated our framework using sophisticated Android data-flow analyzers. Results showed that our prototype effectively impeded analyses aiming to trace the information flows of its cross-verification.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "应用程序重新打包已经引起了人们对Android生态系统健康状况的严重担忧，而重新打包防护是抵御此类攻击威胁的重要手段。然而，现有的应用程序防重新打包方案仅针对使用分析器模拟的用于其他目的(例如，披露隐私泄露漏洞)的微不足道的对手进行评估，因此被显示为“有效”，主要是因为它们的关键编程功能甚至不被那些工具包支持。此外，现有的工作还忽略了能够在运行时操纵受害者应用程序的动态对手，使他们在面对更强大的对手时变得脆弱。在本文中，我们提出了一种新颖的防重新打包框架，它将分布式检测和响应站点部署到主题应用程序的本机分区中，以交叉验证其所有代码文件。检测站点使用基于Collatz推测的专门混淆技术，通过建立在主题应用程序自己的控制流上的安全通信通道，将获得的完整性度量传输到响应站点，将重新打包验证过程转变为复杂的隐式流，由于推测的非线性动态行为，这些隐式流本质上难以解决。我们使用复杂的Android数据流分析器评估了我们的框架。结果表明，我们的原型有效地阻碍了旨在跟踪其交叉验证信息流的分析。",
        "title_zh": "使用Collatz猜想，为Android应用程序安全重新包装框架框架",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc19.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 19",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2021.3094824",
        "title": "Backdoor Attack on Machine Learning Based Android Malware Detectors",
        "authors": "Chaoran Li, Xiao Chen, Derui Wang, Sheng Wen, Muhammad Ejaz Ahmed, Seyit Camtepe, Yang Xiang",
        "abstract": "Machine learning (ML) has been widely used for malware detection on different operating systems, including Android. To keep up with malware's evolution, the detection models usually need to be retrained periodically (e.g., every month) based on the data collected in the wild. However, this leads to poisoning attacks, specifically backdoor attacks, which subvert the learning process and create evasion ‘tunnels’ for manipulated malware samples. To date, we have not found any prior research that explored this critical problem in Android malware detectors. Although there are already some similar works in the image classification field, most of those similar ideas cannot be borrowed to solve this problem, because the assumption that the attacker has full control of the training data collection or labelling process is not realistic in real-world malware detection scenarios. In this article, we are motivated to study the backdoor attack against Android malware detectors. The backdoor is created and injected into the model stealthily without access to the training data and activated when an app with the trigger is presented. We demonstrate the proposed attack on four typical malware detectors that have been widely discussed in academia. Our evaluation shows that the proposed backdoor attack achieves up to 99 percent evasion rate over 750 malware samples. Moreover, the above successful attack is realised by a small size of triggers (only four features) and a very low data poisoning rate (0.3 percent).",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "机器学习(ML)已被广泛用于不同操作系统上的恶意软件检测，包括Android。为了跟上恶意软件的发展，通常需要基于在野外收集的数据定期(例如，每月)重新训练检测模型。然而，这会导致中毒攻击，特别是后门攻击，它会破坏学习过程，并为被操纵的恶意软件样本创建规避“隧道”。到目前为止，我们还没有发现任何探索Android恶意软件检测器中这一关键问题的先前研究。尽管在图像分类领域已经有一些类似的工作，但那些类似的想法大多不能被借用来解决这个问题，因为攻击者完全控制训练数据收集或标记过程的假设在现实世界的恶意软件检测场景中是不现实的。在这篇文章中，我们研究了针对Android恶意软件检测器的后门攻击。后门是在不访问训练数据的情况下悄悄创建并注入到模型中的，并在出现带有触发器的应用程序时被激活。我们在学术界广泛讨论的四个典型的恶意软件检测器上演示了所提出的攻击。我们的评估表明，所提出的后门攻击在750个恶意软件样本上实现了高达99%的规避率。此外，上述成功的攻击是通过小规模的触发器(只有四个特征)和非常低的数据中毒率(0.3%)实现的。",
        "title_zh": "基于机器学习的Android恶意软件探测器的后门攻击",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc19.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 19",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2021.3100877",
        "title": "Active Warden Attack: On the (In)Effectiveness of Android App Repackage-Proofing",
        "authors": "Haoyu Ma, Shijia Li, Debin Gao, Daoyuan Wu, Qiaowen Jia, Chunfu Jia",
        "abstract": "App repackaging has raised serious concerns to the Android ecosystem with the repackage-proofing technology attracting attention in the Android research community. In this article, we first show that existing repackage-proofing schemes rely on a flawed security assumption, and then propose a new class of active warden attack that intercepts and falsifies the metrics used by repackage-proofing for detecting the integrity violations during repackaging. We develop a proof-of-concept toolkit to demonstrate that all the existing repackage-proofing schemes can be bypassed by our attack toolkit. On the positive side, our analysis further identifies a new integrity metric in the Android ART runtime that can robustly and efficiently indicate bytecode tampering caused by either repackaging or active warden attacks. By associating this new metric with two supplemental verification mechanisms, we construct a multi-party verification framework that significantly raises the bar of repackage-proofing and identify conditions under which the proposed framework could detect app repackaging without getting compromised by active warden attacks.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "应用程序重新打包已经引起了Android生态系统的严重关注，防重新打包技术引起了Android研究社区的关注。在本文中，我们首先指出现有的防重新打包方案依赖于一个有缺陷的安全假设，然后提出一种新的主动监管攻击，它拦截并伪造防重新打包所使用的度量，以检测重新打包期间的完整性破坏。我们开发了一个概念验证工具包来证明所有现有的防重新打包方案都可以被我们的攻击工具包绕过。从积极的一面来看，我们的分析进一步确定了Android ART运行时中的一个新的完整性度量，该度量可以稳健而有效地指示由重新打包或主动监管攻击引起的字节码篡改。通过将这一新指标与两个补充验证机制相关联，我们构建了一个多方验证框架，该框架显著提高了防重新打包的标准，并确定了所提出的框架可以检测应用程序重新打包而不会受到主动监管攻击的条件。",
        "title_zh": "主动看守攻击：对Android应用程序的（在）有效性",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc19.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 19",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2021.3108057",
        "title": "On The (In)Effectiveness of Static Logic Bomb Detection for Android Apps",
        "authors": "Jordan Samhi, Alexandre Bartel",
        "abstract": "Android is present in more than 85% of mobile devices, making it a prime target for malware. Malicious code is becoming increasingly sophisticated and relies on logic bombs to hide itself from dynamic analysis. In this article, we perform a large scale study of TSOpen, our open-source implementation of the state-of-the-art static logic bomb scanner TriggerScope, on more than 500k Android applications. Results indicate that the approach scales. Moreover, we investigate the discrepancies and show that the approach can reach a very low false-positive rate, 0.3%, but at a particular cost, e.g., removing 90% of sensitive methods. Therefore, it might not be realistic to rely on such an approach to automatically detect all logic bombs in large datasets. However, it could be used to speed up the location of malicious code, for instance, while reverse engineering applications. We also present TrigDB a database of 68 Android applications containing trigger-based behavior as a ground-truth to the research community.",
        "files": {
            "openAccessPdf": "https://ieeexplore.ieee.org/ielx7/8858/9945627/09524530.pdf"
        },
        "abstract_zh": "超过85%的移动设备安装了Android，这使其成为恶意软件的主要目标。恶意代码变得越来越复杂，并依靠逻辑炸弹来隐藏自己，使其免受动态分析。在本文中，我们在超过500，000个Android应用程序上对我们最先进的静态逻辑炸弹扫描器TriggerScope的开源实现TSOpen进行了大规模研究。结果表明这种方法是可行的。此外，我们调查了差异，并表明该方法可以达到非常低的假阳性率，0.3%，但有一个特定的成本，例如，删除90%的敏感方法。因此，依靠这种方法来自动检测大型数据集中的所有逻辑炸弹可能是不现实的。然而，它可以用来加速定位恶意代码，例如，当逆向工程应用程序。我们还将TrigDB(一个包含68个Android应用程序的数据库，包含基于触发器的行为)作为研究社区的基础事实。",
        "title_zh": "关于Android应用的静态逻辑炸弹检测的（IN）有效性",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc19.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 19",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2021.3128073",
        "title": "Privacy-Preserving Proof-of-Location With Security Against Geo-Tampering",
        "authors": "Mamunur Akand, Reihaneh Safavi-Naini, Marc Kneppers, Matthieu Giraud, Pascal Lafourcade",
        "abstract": "A Proof-of-Location (POL) system is used to issue a proof-of-location token (<inline-formula><tex-math notation=\"LaTeX\">$pol$</tex-math><alternatives><mml:math><mml:mrow><mml:mi>p</mml:mi><mml:mi>o</mml:mi><mml:mi>l</mml:mi></mml:mrow></mml:math><inline-graphic xlink:href=\"akand-ieq1-3128073.gif\"/></alternatives></inline-formula>) to a user who has been present at a location <inline-formula><tex-math notation=\"LaTeX\">$\\ell oc$</tex-math><alternatives><mml:math><mml:mrow><mml:mi>ℓ</mml:mi><mml:mi>o</mml:mi><mml:mi>c</mml:mi></mml:mrow></mml:math><inline-graphic xlink:href=\"akand-ieq2-3128073.gif\"/></alternatives></inline-formula>, such that it can be later presented to a verifier to assure the presence of the user at <inline-formula><tex-math notation=\"LaTeX\">$\\ell oc$</tex-math><alternatives><mml:math><mml:mrow><mml:mi>ℓ</mml:mi><mml:mi>o</mml:mi><mml:mi>c</mml:mi></mml:mrow></mml:math><inline-graphic xlink:href=\"akand-ieq3-3128073.gif\"/></alternatives></inline-formula>. Basic POL security requirements are <italic>unforgeability</italic> of <inline-formula><tex-math notation=\"LaTeX\">$pol$</tex-math><alternatives><mml:math><mml:mrow><mml:mi>p</mml:mi><mml:mi>o</mml:mi><mml:mi>l</mml:mi></mml:mrow></mml:math><inline-graphic xlink:href=\"akand-ieq4-3128073.gif\"/></alternatives></inline-formula>, and its <italic>non-transferability</italic> (a <inline-formula><tex-math notation=\"LaTeX\">$pol$</tex-math><alternatives><mml:math><mml:mrow><mml:mi>p</mml:mi><mml:mi>o</mml:mi><mml:mi>l</mml:mi></mml:mrow></mml:math><inline-graphic xlink:href=\"akand-ieq5-3128073.gif\"/></alternatives></inline-formula> issued to user <inline-formula><tex-math notation=\"LaTeX\">$u_1$</tex-math><alternatives><mml:math><mml:msub><mml:mi>u</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:math><inline-graphic xlink:href=\"akand-ieq6-3128073.gif\"/></alternatives></inline-formula> cannot be used by <inline-formula><tex-math notation=\"LaTeX\">$u_2$</tex-math><alternatives><mml:math><mml:msub><mml:mi>u</mml:mi><mml:mn>2</mml:mn></mml:msub></mml:math><inline-graphic xlink:href=\"akand-ieq7-3128073.gif\"/></alternatives></inline-formula>). An additional important property of POL systems is <italic>user privacy</italic> against the issuers and verifiers. We make two contributions. First, we formalize the POL security and privacy properties, and construct the first system providing provable security and privacy against the issuer and the verifier, both. Second, we introduce a <italic>geo-tampering attack</italic> that completely breaks POL system security, by simply changing the location of a <inline-formula><tex-math notation=\"LaTeX\">$pol$</tex-math><alternatives><mml:math><mml:mrow><mml:mi>p</mml:mi><mml:mi>o</mml:mi><mml:mi>l</mml:mi></mml:mrow></mml:math><inline-graphic xlink:href=\"akand-ieq8-3128073.gif\"/></alternatives></inline-formula> issuing node. The attack applies to portable infrastructure nodes that are not continually monitored. We propose an algorithm that is used by a <inline-formula><tex-math notation=\"LaTeX\">$pol$</tex-math><alternatives><mml:math><mml:mrow><mml:mi>p</mml:mi><mml:mi>o</mml:mi><mml:mi>l</mml:mi></mml:mrow></mml:math><inline-graphic xlink:href=\"akand-ieq9-3128073.gif\"/></alternatives></inline-formula> issuer to provide a location integrity “proof”, that will be embedded in a <inline-formula><tex-math notation=\"LaTeX\">$pol$</tex-math><alternatives><mml:math><mml:mrow><mml:mi>p</mml:mi><mml:mi>o</mml:mi><mml:mi>l</mml:mi></mml:mrow></mml:math><inline-graphic xlink:href=\"akand-ieq10-3128073.gif\"/></alternatives></inline-formula> to protect against this attack. The proof relies on a novel application of euclidean Distance Matrices. We implemented our POL on an off-the-shelf Android smartphone to show the practicality of the proposed algorithms.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "位置证明(POL)系统用于发布位置证明令牌(< inline-formula > < tex-math notation = \" latex \" > $ pol $ </tex-math > < alternatives > < MML:math > < MML:mrow > < MML:mi > p </MML:mi > < MML:mi > o </MML:mi > < MML:mi > l </MML:mi > </MML:mrow > </MML:math > < inline-graphic xlink:m基本的POL安全要求是< inline-formula > < tex-math notation = \" LaTeX \" > $ POL $ </tex-math > < alternatives > < MML:math > < MML:mrow > < MML:mi > p </MML:mi > < MML:mi > o </MML:mi > < MML:mi > l </MML:mi > </MML:mrow > </MML:math > < inline-graphic xlink:href = \" akandPOL系统的另一个重要属性是针对发行者和验证者的< italic >用户隐私</italic>。我们做出两项贡献。首先，我们形式化了POL的安全和隐私属性，并构造了第一个针对发布者和验证者提供可证明的安全和隐私的系统。其次，我们引入了一种< italic >地理篡改攻击</italic >，它通过简单地更改< inline-formula > < tex-math notation = \" LaTeX \" > $ POL $ </tex-math > < alternatives > < MML:math > < MML:mrow > < MML:mi > p </MML:mi > < MML:mi > o </MML:mi > < MML:mi > l </MML:mi > </MML:mrow > </MML:math该攻击适用于未被持续监控的便携式基础设施节点。我们提出一种算法，它由< inline-formula > < tex-math notation = \" LaTeX \" > $ pol $ </tex-math > < alternatives > < MML:math > < MML:mrow > < MML:mi > < MML:mi > o </MML:mi > < MML:mi > l </MML:mi > </MML:mi > </MML:mrow > </MML:math > < inline-graphic xlink:href = \" akand-ieq 9-310这个证明依赖于欧几里德距离矩阵的一个新的应用。我们在现成的Android智能手机上实现了我们的POL，以显示所提出算法的实用性。",
        "title_zh": "保留隐私证明与侵略地理的安全证明",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc20.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 20",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2022.3144697",
        "title": "Slowing Down the Aging of Learning-Based Malware Detectors With API Knowledge",
        "authors": "Xiaohan Zhang, Mi Zhang, Yuan Zhang, Ming Zhong, Xin Zhang, Yinzhi Cao, Min Yang",
        "abstract": "Learning-based malware detectors are widely used in practice to safeguard real-world computers. One major challenge is known as model aging, where the effectiveness of these models drops drastically as malware variants keep evolving. To tackle model aging, most existing works choose to label new samples to retrain the aged models. However, such data-perspective methods often require excessive costs in labeling and retraining. In this article, we observe that during evolution, malware samples often preserve similar malicious semantics while switching to new implementations with semantically equivalent APIs. Such observation enables us to look into the problem from a different perspective: feature space. More specifically, if the models can capture the intrinsic semantics of malware variants from feature space, it will help slow down the aging of learning-based detectors. Based on this insight, we design APIGraph to automatically extract API knowledge from API documentation and incorporate these knowledge into the training of malware detection models. We use APIGraph to enhance 5 state-of-the-art malware detectors, covering both Android and Windows platforms and various learning algorithms. Experiments on large-scale, evolutionary datasets with nearly 340K samples show that APIGraph can help slow down the aging of these models by 5.9% to 19.6%, as well as reduce labeling efforts from 33.07% to 96.30% on top of data-perspective methods.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "基于学习的恶意软件检测器在实践中被广泛用于保护真实世界的计算机。一个主要的挑战被称为模型老化，随着恶意软件变种的不断发展，这些模型的有效性急剧下降。为了解决模型老化问题，大多数现有的工作选择标记新的样本来重新训练老化的模型。然而，这种数据透视方法通常需要额外的标记和再培训成本。在本文中，我们观察到，在进化过程中，恶意软件样本通常保留相似的恶意语义，同时切换到具有语义等效API的新实现。这种观察使我们能够从一个不同的角度来看问题:特征空间。更具体地说，如果模型可以从特征空间捕捉恶意软件变体的内在语义，这将有助于减缓基于学习的检测器的老化。基于这种认识，我们设计了APIGraph来从API文档中自动提取API知识，并将这些知识合并到恶意软件检测模型的训练中。我们使用APIGraph来增强5种最先进的恶意软件检测器，涵盖Android和Windows平台以及各种学习算法。在具有近340，000个样本的大规模进化数据集上的实验表明，APIGraph可以帮助将这些模型的老化速度降低5.9%至19.6%，并将数据透视方法上的标记工作量从33.07%减少到96.30%。",
        "title_zh": "使用API知识降低基于学习的恶意软件探测器的老化",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc20.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 20",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2022.3146020",
        "title": "You Can't Always Get What You Want: Towards User-Controlled Privacy on Android",
        "authors": "Davide Caputo, Francesco Pagano, Giovanni Bottino, Luca Verderame, Alessio Merlo",
        "abstract": "Mobile applications (hereafter, apps) collect a plethora of information regarding the user behavior and his device through third-party analytics libraries. However, the collection and usage of such data raised several privacy concerns, mainly because the end-user - i.e., the actual owner of the data - is out of the loop in this collection process. Also, the existing privacy-enhanced solutions that emerged in the last years follow an ”all or nothing” approach, leaving the user the sole option to accept or completely deny access to privacy-related data. This work has the two-fold objective of assessing the privacy impact of mobile analytics libraries and proposing a data anonymization methodology that offers a trade-off between the utility and privacy of the collected data and enables complete control over the sharing process. To achieve that, we present an empirical privacy assessment on the analytics libraries used in the 4500 most-used Android apps of the Google Play Store in late 2020. Then, we propose an empowered anonymization methodology, based on MobHide (Caputo et al., 2020), that gives the end-user complete control over the collection and anonymization process. Finally, we empirically demonstrate the applicability and effectiveness of our solution thanks to HideDroid, a fully-fledged anonymization app for the Android ecosystem.",
        "files": {
            "openAccessPdf": "https://ieeexplore.ieee.org/ielx7/8858/10068314/09694493.pdf"
        },
        "abstract_zh": "移动应用程序(以下简称应用程序)通过第三方分析库收集大量关于用户行为及其设备的信息。然而，此类数据的收集和使用引发了一些隐私问题，主要是因为最终用户(即数据的实际所有者)不在收集过程中。此外，过去几年出现的现有隐私增强解决方案遵循“全有或全无”的方法，让用户拥有接受或完全拒绝访问隐私相关数据的唯一选项。这项工作有两个目标:评估移动分析库的隐私影响，并提出一种数据匿名化方法，在收集的数据的实用性和隐私性之间进行权衡，并实现对共享过程的完全控制。为了实现这一目标，我们对2020年末谷歌Play商店4500个最常用的Android应用中使用的分析库进行了经验隐私评估。然后，我们基于MobHide (Caputo等人，2020年)提出了一种授权的匿名化方法，使最终用户能够完全控制收集和匿名化过程。最后，我们通过经验证明了我们的解决方案的适用性和有效性，这要归功于HideDroid，这是一款成熟的Android生态系统匿名应用程序。",
        "title_zh": "您不能总是得到想要的东西：朝着Android上的用户控制隐私",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc20.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 20",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2022.3155693",
        "title": "μDep: Mutation-Based Dependency Generation for Precise Taint Analysis on Android Native Code",
        "authors": "Cong Sun, Yuwan Ma, Dongrui Zeng, Gang Tan, Siqi Ma, Yafei Wu",
        "abstract": "The existence of native code in Android apps plays an important role in triggering inconspicuous propagation of secrets and circumventing malware detection. However, the state-of-the-art information-flow analysis tools for Android apps all have limited capabilities of analyzing native code. Due to the complexity of binary-level static analysis, most static analyzers choose to build conservative models for a selected portion of native code. Though the recent inter-language analysis improves the capability of tracking information flow in native code, it is still far from attaining similar effectiveness of the state-of-the-art information-flow analyzers that focus on non-native Java methods. To overcome the above constraints, we propose a new analysis framework, <inline-formula><tex-math notation=\"LaTeX\">$\\mu$</tex-math><alternatives><mml:math><mml:mi>μ</mml:mi></mml:math><inline-graphic xlink:href=\"sun-ieq2-3155693.gif\"/></alternatives></inline-formula>Dep, to detect sensitive information flows of the Android apps containing native code. In this framework, we combine a control-flow based static binary analysis with a mutation-based dynamic analysis to model the tainting behaviors of native code in the apps. Based on the result of the analyses, <inline-formula><tex-math notation=\"LaTeX\">$\\mu$</tex-math><alternatives><mml:math><mml:mi>μ</mml:mi></mml:math><inline-graphic xlink:href=\"sun-ieq3-3155693.gif\"/></alternatives></inline-formula>Dep conducts a stub generation for the related native functions to facilitate the state-of-the-art analyzer DroidSafe with fine-grained tainting behavior summaries of native code. The experimental results show that our framework is competitive on the accuracy, and effective in analyzing the information flows in real-world apps and malware compared with the state-of-the-art inter-language static analysis.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android应用中本机代码的存在在触发秘密的不明显传播和规避恶意软件检测方面发挥了重要作用。然而，用于Android应用程序的最先进的信息流分析工具都具有有限的分析本机代码的能力。由于二进制级静态分析的复杂性，大多数静态分析器选择为本地代码的选定部分构建保守模型。尽管最近的跨语言分析提高了跟踪本机代码中信息流的能力，但它仍然远远达不到关注非本机Java方法的最新信息流分析器的类似效果。为了克服上述限制，我们提出了一个新的分析框架，< inline-formula > < tex-math notation = \" LaTeX \" > $ \\ mu $ </tex-math > < alternatives > < MML:math > < MML:mi >μ</MML:mi > </MML:math > < inline-graphic xlink:href = \" sun-ieq 2-3155693 . gif \"/> </alternatives > </inline-formula > Dep，以检测包含本机代码的Android应用程序的敏感信息流。在这个框架中，我们将基于控制流的静态二进制分析与基于变异的动态分析相结合，对应用中的本地代码的污染行为进行建模。根据分析的结果，< inline-formula > < tex-math notation = \" LaTeX \" > $ \\ mu $ </tex-math > < alternatives > < MML:math > < MML:mi >μ</MML:mi > </MML:math > < inline-graphic xlink:href = \" sun-ieq 3-3155693 . gif \"/> </alternatives > </inline-formula > Dep为相关的本机函数生成存根，以方便最先进的分析器DroidSafe实验结果表明，与最先进的跨语言静态分析相比，我们的框架在准确性上具有竞争力，并且可以有效地分析真实世界应用和恶意软件中的信息流。",
        "title_zh": "μDEP：基于突变的依赖性生成，用于对Android天然代码的精确污染分析",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc20.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 20",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2022.3160872",
        "title": "A Systematic Study of Android Non-SDK (Hidden) Service API Security",
        "authors": "Yi He, Yacong Gu, Purui Su, Kun Sun, Yajin Zhou, Zhi Wang, Qi Li",
        "abstract": "Android allows apps to communicate with its system services via system service helpers so that these apps can use various functions provided by the system services. Meanwhile, the system services rely on their service helpers to enforce security checks for protection. Unfortunately, the security checks in the service helpers may be bypassed via directly exploiting the non-SDK (hidden) APIs, degrading the stability and posing severe security threats such as privilege escalation, automatic function execution without users’ interactions, crashes, and DoS attacks. Google has proposed various approaches to address this problem, e.g., case-by-case fixing the bugs or even proposing a blacklist to block all the non-SDK APIs. However, the developers can still figure out new ways of exploiting these hidden APIs to evade the non-SDKs restrictions. In this article, we systematically study the vulnerabilities due to the hidden API exploitation and analyze the effectiveness of Google’s countermeasures. We aim to answer if there are still vulnerable hidden APIs that can be exploited in newest Android 12. We develop a static analysis tool called <inline-formula><tex-math notation=\"LaTeX\">${{\\sf ServiceAudit}}$</tex-math><alternatives><mml:math><mml:mi mathvariant=\"sans-serif\">ServiceAudit</mml:mi></mml:math><inline-graphic xlink:href=\"li-ieq1-3160872.gif\"/></alternatives></inline-formula> to automatically mine the inconsistent security enforcement between service helper classes and the hidden service APIs. We apply <inline-formula><tex-math notation=\"LaTeX\">${{\\sf ServiceAudit}}$</tex-math><alternatives><mml:math><mml:mi mathvariant=\"sans-serif\">ServiceAudit</mml:mi></mml:math><inline-graphic xlink:href=\"li-ieq2-3160872.gif\"/></alternatives></inline-formula> to Android 6<inline-formula><tex-math notation=\"LaTeX\">$\\sim$</tex-math><alternatives><mml:math><mml:mo>∼</mml:mo></mml:math><inline-graphic xlink:href=\"li-ieq3-3160872.gif\"/></alternatives></inline-formula>12. Our tool discovers 112 vulnerabilities in Android 6 with a higher precision than existing approaches. Moreover, in Android 11 and 12, we identify more than 25 hidden APIs with inconsistent protections; however, only one of the vulnerable APIs can lead to severe security problem in Android 11, and none of them work on Android 12.",
        "files": {
            "openAccessPdf": "http://arxiv.org/pdf/2203.09374"
        },
        "abstract_zh": "Android允许应用程序通过系统服务助手与其系统服务进行通信，以便这些应用程序可以使用系统服务提供的各种功能。同时，系统服务依靠它们的服务助手来执行安全检查以获得保护。不幸的是，服务助手中的安全检查可能会通过直接利用非SDK(隐藏的)API而被绕过，从而降低稳定性并造成严重的安全威胁，例如权限提升、无需用户交互的自动功能执行、崩溃和DoS攻击。谷歌提出了各种方法来解决这个问题，例如，逐案修复漏洞，甚至提出一个黑名单来阻止所有非SDK APIs。然而，开发人员仍然可以找到利用这些隐藏的API来规避非SDK限制的新方法。在本文中，我们系统地研究了由于隐藏的API利用而导致的漏洞，并分析了Google对策的有效性。我们的目标是回答最新的Android 12中是否仍然存在易受攻击的隐藏API。我们开发了一个名为< inline-formula > < tex-math notation = \" LaTeX \" > $ { { \\ SF service audit } } $ </tex-math > < alternatives > < MML:math > < MML:mi math variant = \" sans-serif \" > service audit </MML:mi > </MML:math > < inline-graphic xlink:href = \" Li-ie Q1-3160872 . gif \"/> </alternatives > </inline-formula >的静态分析工具来自动挖掘服务之间不一致的安全实施我们将< inline-formula > < tex-math notation = \" LaTeX \" > $ { { \\ SF service audit } } $ </tex-math > < alternatives > < MML:math > < MML:mi math variant = \" sans-serif \" > service audit </MML:mi > </MML:math > < inline-graphic xlink:href = \" Li-ieq 2-3160872 . gif \"/> </alternatives > </inline-formula >应用于Android 6 < inline-formula > < tex-math notation = \" .我们的工具发现了Android 6中的112个漏洞，精确度高于现有方法。而且在Android 11和12中，我们识别出超过25个隐藏的API，保护不一致；然而，在Android 11中，只有一个易受攻击的API会导致严重的安全问题，并且它们都不能在Android 12上工作。",
        "title_zh": "对Android非SDK（隐藏）服务API安全的系统研究",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc20.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 20",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2022.3168285",
        "title": "MsDroid: Identifying Malicious Snippets for Android Malware Detection",
        "authors": "Yiling He, Yiping Li, Lei Wu, Ziqi Yang, Kui Ren, Zhan Qin",
        "abstract": "Machine learning has shown promise for improving the accuracy of Android malware detection in the literature. However, it is challenging to (1) stay robust towards real-world scenarios and (2) provide interpretable explanations for experts to analyse. In this article, we propose MsDroid, an Android malware detection system that makes decisions by identifying malicious snippets with interpretable explanations. We mimic a common practice of security analysts, i.e., filtering APIs before looking through each method, to focus on local snippets around sensitive APIs instead of the whole program. Each snippet is represented with a graph encoding both code attributes and domain knowledge and then classified by Graph Neural Network (GNN). The local perspective helps the GNN classifier to concentrate on code highly correlated with malicious behaviors, and the information contained in graphs benefit in better understanding of the behaviors. Hence, MsDroid is more robust and interpretable in nature. To identify malicious snippets, we present a semi-supervised learning approach that only requires app labeling. The key insight is that malicious snippets only exist in malwares and appear at least once in a malware. To make malicious snippets less opaque, we design an explanation mechanism to show the importance of control flows and to retrieve similarly implemented snippets from known malwares. A comprehensive comparison with 5 baseline methods is conducted on a dataset of more than 81K apps in 3 real-world scenarios, including zero-day, evolution, and obfuscation. The experimental results show that MsDroid is more robust than state-of-the-art systems in all cases, with 5.37% to 49.52% advantage in F1-score. Besides, we demonstrate that the provided explanations are effective and illustrate how the explanations facilitate malware analysis.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "在文献中，机器学习已经显示出提高Android恶意软件检测准确性的前景。然而，很难做到(1)对现实世界的情况保持稳健,( 2)为专家分析提供可解释的解释。在本文中，我们提出了MsDroid，这是一个Android恶意软件检测系统，它通过识别带有可解释解释的恶意代码片段来做出决策。我们模仿安全分析师的一种常见做法，即在检查每个方法之前过滤API，以关注敏感API周围的局部片段，而不是整个程序。每个代码片段都用一个编码代码属性和领域知识的图来表示，然后通过图神经网络(GNN)进行分类。局部视角有助于GNN分类器专注于与恶意行为高度相关的代码，图中包含的信息有助于更好地理解行为。因此，MsDroid在本质上更加健壮和可解释。为了识别恶意代码片段，我们提出了一种半监督学习方法，只需要应用程序标记。关键的见解是，恶意代码片段只存在于恶意软件中，并且在恶意软件中至少出现一次。为了减少恶意代码片段的不透明性，我们设计了一种解释机制来显示控制流的重要性，并从已知的恶意软件中检索类似实现的代码片段。在超过81K个应用程序的数据集上，在3个真实场景(包括零日、进化和混淆)中与5种基准方法进行了全面比较。实验结果表明，在所有情况下，MsDroid都比最先进的系统更具鲁棒性，在F1-score中具有5.37%到49.52%的优势。此外，我们证明了所提供的解释是有效的，并说明了解释如何促进恶意软件分析。",
        "title_zh": "MSDROID：识别用于Android恶意软件检测的恶意片段",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc20.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 20",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2022.3178181",
        "title": "How Does Visualisation Help App Practitioners Analyse Android Apps?",
        "authors": "Lihong Tang, Tingmin Wu, Xiao Chen, Sheng Wen, Li Li, Xin Xia, Marthie Grobler, Yang Xiang",
        "abstract": "Behaviour analysis is essential for the security verification of suspicious Android applications, but analysts are usually faced with a huge obstacle when conducting the app behaviour analysis. They are expected to have comprehensive knowledge of different IT fields and a strong awareness of cyber threats. However, training a new security analyst typically requires a significant amount of time and can be extremely costly. Although there are tools available to assist analysts in studying Android behaviour and security, the completion of this task still heavily relies on the experience of the analysts. To address this problem, we recognise visualisation as a promising method and conduct a series of controlled experiments to demonstrate its effectiveness in the context of Android app behaviour and security analysis. We accordingly develop a visualisation tool based on apps’ call graphs (CG) (named VisualDroid) and conduct an experiment and a follow-up interview. Compared to existing solutions, the results suggest that the CG-based visualisation solution (VisualDroid) can lower the barriers to Android behaviour and security analysis. The user study reveals that the platform includes CG-based visualisation components leads to a statistically significant improvement in Android behaviour analysis and security awareness. More specifically, it improves APK Analyzer, JD-GUI, JD-GUI+FlowDroid by 71.4%, 35.7%, and 39.2% in terms of the effectiveness of behaviour analysis. Participants who use VisualDroid also show improvements in the aspect of security awareness with an increase of 155% against APK Analyzer, 96% against JD-GUI, and 59.3% JD-GUI+FlowDroid.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "行为分析对于可疑Android应用的安全验证至关重要，但分析师在进行应用行为分析时通常会面临巨大的障碍。他们应该对不同的IT领域有全面的了解，并对网络威胁有强烈的意识。但是，培训一名新的安全分析师通常需要大量的时间，而且成本极高。虽然有工具可以帮助分析师研究Android的行为和安全性，但这项任务的完成仍然严重依赖于分析师的经验。为了解决这个问题，我们认识到可视化是一种有前途的方法，并进行了一系列受控实验，以证明其在Android应用行为和安全分析方面的有效性。因此，我们开发了一个基于应用程序调用图(CG)的可视化工具(名为VisualDroid)，并进行了一次实验和后续采访。与现有解决方案相比，结果表明基于CG的可视化解决方案(VisualDroid)可以降低Android行为和安全分析的障碍。用户研究表明，该平台包括基于CG的可视化组件，在Android行为分析和安全意识方面带来了统计上的显著改善。更具体地说，在行为分析的有效性方面，它将APK分析器、JD-GUI、JD-GUI+FlowDroid分别提高了71.4%、35.7%和39.2%。使用VisualDroid的参与者在安全意识方面也有所提高，与APK分析器相比提高了155%，与JD-GUI相比提高了96%，与JD-GUI+FlowDroid相比提高了59.3%。",
        "title_zh": "可视化如何帮助应用程序实践者分析Android应用程序？",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc20.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 20",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2022.3217259",
        "title": "FIDO Gets Verified: A Formal Analysis of the Universal Authentication Framework Protocol",
        "authors": "Haonan Feng, Jingjing Guan, Hui Li, Xuesong Pan, Ziming Zhao",
        "abstract": "The FIDO protocol suite aims at allowing users to log in to remote services with a local and trusted authenticator. With FIDO, relying services do not need to store user-chosen secrets or their hashes, which eliminates a major attack surface for e-business. Given its increasing popularity, it is imperative to formally analyze whether the security promises of FIDO hold. In this paper, we present a comprehensive and formal verification of the FIDO UAF protocol by formalizing its security assumptions and goals and modeling the protocol under different scenarios in ProVerif. Our analysis identifies the minimal security assumptions required for each of the security goals of FIDO UAF to hold. We confirm previously manually discovered vulnerabilities in an automated way and disclose several new attacks. Guided by the formal verification results, we also discovered two practical attacks on two popular Android FIDO apps, which we responsibly disclosed to the vendors. In addition, we offer several concrete recommendations to fix the identified problems and weaknesses in the protocol.",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "FIDO得到验证:通用认证框架协议的形式化分析",
        "abstract_zh": "FIDO协议套件旨在允许用户使用本地可信认证器登录远程服务。使用FIDO，依赖服务不需要存储用户选择的秘密或它们的散列，这消除了电子商务的主要攻击面。鉴于FIDO越来越受欢迎，有必要正式分析它的安全承诺是否成立。在本文中，我们通过形式化描述FIDO UAF协议的安全假设和目标，并在ProVerif中对不同场景下的协议进行建模，对该协议进行了全面的形式化验证。我们的分析确定了FIDO UAF每个安全目标所需的最低安全假设。我们以自动方式确认以前手动发现的漏洞，并披露了几个新的攻击。在正式验证结果的指导下，我们还发现了对两个流行的Android FIDO应用程序的两次实际攻击，我们负责任地向供应商披露了这些攻击。此外，我们提供了几个具体的建议，以解决协议中已确定的问题和弱点。",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc20.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 20",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2017.2745575",
        "title": "Detection of Repackaged Android Malware with Code-Heterogeneity Features",
        "authors": "Ke Tian, Danfeng Yao, Barbara G. Ryder, Gang Tan, Guojun Peng",
        "abstract": "During repackaging, malware writers statically inject malcode and modify the control flow to ensure its execution. Repackaged malware is difficult to detect by existing classification techniques, partly because of their behavioral similarities to benign apps. By exploring the app's internal different behaviors, we propose a new Android repackaged malware detection technique based on code heterogeneity analysis. Our solution strategically partitions the code structure of an app into multiple dependence-based regions (subsets of the code). Each region is independently classified on its behavioral features. We point out the security challenges and design choices for partitioning code structures at the class and method level graphs, and present a solution based on multiple dependence relations. We have performed experimental evaluation with over 7,542 Android apps. For repackaged malware, our partition-based detection reduces false negatives (i.e., missed detection) by 30-fold, when compared to the non-partition-based approach. Overall, our approach achieves a false negative rate of 0.35 percent and a false positive rate of 2.97 percent.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "在重新打包期间，恶意软件编写者静态注入恶意代码并修改控制流以确保其执行。重新打包的恶意软件很难被现有的分类技术检测到，部分原因是它们的行为与良性应用程序相似。通过探索应用程序内部的不同行为，我们提出了一种新的基于代码异构性分析的Android重新打包恶意软件检测技术。我们的解决方案战略性地将应用程序的代码结构划分为多个基于依赖的区域(代码子集)。每个区域根据其行为特征独立分类。我们指出了在类和方法级图中划分代码结构的安全挑战和设计选择，并提出了一个基于多重依赖关系的解决方案。我们对超过7，542个Android应用进行了实验评估。对于重新打包的恶意软件，与不基于分区的方法相比，我们基于分区的检测将假阴性(即漏检)减少了30倍。总的来说，我们的方法实现了0.35%的假阴性率和2.97%的假阳性率。",
        "title_zh": "检测具有代码 - 异质性功能的重新包装的Android恶意软件",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc17.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 17",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2017.2740169",
        "title": "TaintMan: An ART-Compatible Dynamic Taint Analysis Framework on Unmodified and Non-Rooted Android Devices",
        "authors": "Wei You, Bin Liang, Wenchang Shi, Peng Wang, Xiangyu Zhang",
        "abstract": "Dynamic taint analysis (DTA), as a mainstream information flow tracking technique, has been widely used in mobile security. On the Android platform, the existing DTA approaches are typically implemented by instrumenting the Dalvik virtual machine (DVM) interpreter or the Android emulator with taint enforcement code. The most prominent problem of the interpreter-based approaches is that they cannot work in the new Android RunTime (ART) environment introduced since the 5.0 release. For the emulator-based approaches, the most prominent problem is that they cannot be deployed on real devices. In addition, almost all the existing Android DTA approaches only concern the explicit information flow caused by data dependence, while completely ignore the impact of implicit information flow caused by control dependence. These problems limit their adoption in the latest Android system and make them ineffective in detecting the state-of-the-art malware whose privacy-breaching behaviors are inactivated in the analyzed environment (e.g., the emulator) or conducted via implicit information flow. In this paper, we present TaintMan, an ART-compatible DTA framework that can be deployed on unmodified and non-rooted Android devices. In TaintMan, the taint enforcement code is statically instrumented into both the target application and the system class libraries to track data flow and common control flow. A specially designed execution environment reconstruction technique, named reference hijacking, is proposed to force the target application to reference the instrumented system class libraries. By enforcing on-demand instrumentation and on-demand tracking, the performance overhead is significantly reduced. We have developed TaintMan and deployed it on two popular stock smartphones (HTC One S equipped with Android-4.0 and Motorola MOTO G equipped with Android-5.0). The evaluation with malware samples and real-world applications shows that TaintMan can effectively detect privacy leakage behaviors with an acceptable performance overhead.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "动态污点分析(DTA)作为主流的信息流跟踪技术，在移动安全领域得到了广泛的应用。在Android平台上，现有的DTA方法通常是通过在Dalvik虚拟机(DVM)解释器或Android仿真器上植入污点强制代码来实现的。基于解释器的方法最突出的问题是，它们不能在自5.0版本以来引入的新Android运行时(ART)环境中工作。对于基于仿真器的方法，最突出的问题是它们不能部署在真实的设备上。此外，几乎所有现有的Android DTA方法都只关注由数据依赖引起的显式信息流，而完全忽略了由控件依赖引起的隐式信息流的影响。这些问题限制了它们在最新Android系统中的采用，并使它们在检测最先进的恶意软件方面无效，这些恶意软件的侵犯隐私行为在所分析的环境(例如，仿真器)中是未激活的，或者是通过隐式信息流进行的。在本文中，我们介绍了TaintMan，这是一个ART兼容的DTA框架，可以部署在未经修改和非根的Android设备上。在TaintMan中，污点强制代码被静态地插入到目标应用程序和系统类库中，以跟踪数据流和公共控制流。提出了一种专门设计的执行环境重构技术，称为引用劫持，以强制目标应用程序引用插装系统类库。通过实施按需插装和按需跟踪，性能开销显著降低。我们开发了TaintMan，并将其部署在两款流行的股票智能手机上(搭载Android-4.0的HTC One S和搭载Android-5.0的摩托罗拉MOTO G)。对恶意软件样本和真实应用的评估表明，TaintMan可以有效地检测隐私泄露行为，并且性能开销可以接受。",
        "title_zh": "Taintman：与未修饰和未根系的Android设备上的艺术兼容的动态污点分析框架",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc17.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 17",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2017.2739145",
        "title": "EC2: Ensemble Clustering and Classification for Predicting Android Malware Families",
        "authors": "Tanmoy Chakraborty, Fabio Pierazzi, V. S. Subrahmanian",
        "abstract": "As the most widely used mobile platform, Android is also the biggest target for mobile malware. Given the increasing number of Android malware variants, detecting <italic>malware families</italic> is crucial so that security analysts can identify situations where signatures of a known malware family can be adapted as opposed to manually inspecting behavior of all samples. We present <monospace>EC2</monospace> (<bold>E</bold>nsemble <bold>C</bold>lustering and <bold>C</bold>lassification), a novel algorithm for discovering Android malware families of <italic>varying sizes</italic>—ranging from very large to very small families (even if previously unseen). We present a performance comparison of several traditional classification and clustering algorithms for Android malware family identification on DREBIN, the largest public Android malware dataset with labeled families. We use the output of both supervised classifiers and unsupervised clustering to design <monospace>EC2</monospace>. Experimental results on both the DREBIN and the more recent Koodous malware datasets show that <monospace>EC2</monospace> accurately detects both small and large families, outperforming several comparative baselines. Furthermore, we show how to automatically characterize and explain unique behaviors of specific malware families, such as <monospace>FakeInstaller</monospace>, <monospace>MobileTx</monospace>, <monospace>Geinimi</monospace>. In short, <monospace>EC2</monospace> presents an early warning system for emerging new malware families, as well as a robust predictor of the family (when it is not new) to which a new malware sample belongs, and the design of novel strategies for data-driven understanding of malware behaviors.",
        "files": {
            "openAccessPdf": "https://kclpure.kcl.ac.uk/portal/files/126663100/tdsc17.pdf"
        },
        "abstract_zh": "Android作为使用最广泛的移动平台，也是移动恶意软件的最大目标。鉴于Android恶意软件变体的数量不断增加，检测< italic >恶意软件家族</italic >至关重要，这样安全分析师就可以识别已知恶意软件家族的签名可以被修改的情况，而不是手动检查所有样本的行为。我们提出了< monospace > EC2 </monospace >(< bold > E </bold > nsemble < bold>C</bold >聚类和< bold > C </bold >分类)，这是一种用于发现< italic >不同大小</italic >的Android恶意软件家族的新算法，从非常大的家族到非常小的家族(即使以前没有发现过)。我们在最大的公开Android恶意软件数据集DREBIN上比较了几种传统的分类和聚类算法在Android恶意软件家族识别中的性能。我们使用监督分类器和非监督聚类的输出来设计EC2。在DREBIN和最近的Koodous恶意软件数据集上的实验结果表明，< monospace>EC2</monospace >准确地检测到了小家族和大家族，优于几个比较基准。此外，我们还展示了如何自动描述和解释特定恶意软件家族的独特行为，例如< monospace > fake installer </monospace > 、< monospace>MobileTx</monospace > 、< monospace>Geinimi</monospace >。简而言之，< monospace>EC2</monospace >提供了一个针对新出现的恶意软件家族的早期预警系统，以及一个对新恶意软件样本所属家族(当它不是新的时)的强大预测器，并设计了一种新颖的策略，用于对恶意软件行为进行数据驱动的理解。",
        "title_zh": "EC2：用于预测Android恶意软件系列的合奏聚类和分类",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc17.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 17",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2017.2768536",
        "title": "senDroid: Auditing Sensor Access in Android System-Wide",
        "authors": "Weili Han, Chang Cao, Hao Chen, Dong Li, Zheran Fang, Wenyuan Xu, X. Sean Wang",
        "abstract": "Sensors are widely used in modern mobile devices (e.g., smartphones, watches) and may gather abundant information from environments as well as about users, e.g., photos, sounds and locations. The rich set of sensor data enables various applications (e.g., health monitoring) and personalized apps as well. However, the powerful sensing abilities provide opportunities for attackers to steal both personal sensitive data and commercial secrets like never before. Unfortunately, the current design of smart devices only provides a coarse access control on sensors and does not have the capability to audit sensing. We argue that knowing how often the sensors are accessed and how much sensor data are collected is the first-line defense against sensor data breach. Such an ability is yet to be designed. In this paper, we propose a framework that allows users to acquire sensor data usages. In particular, we leverage a hook-based track method to track sensor accesses. Thus, with no need to change the source codes of the Android system and applications, we can intercept sensing operations to graphic sensors, audio sensors, location sensors, and standard sensors, and audit them from four aspects: flow audit, frequency audit, duration audit and invoker audit. Then, we implement a prototype, referred to as senDroid, which visually shows the quantitative usages of these sensors in real time at a performance overhead of [0.04–8.05] percent. senDroid allows Android users to audit the applications even when they bypass the Android framework via JNI invocations or when the malicious codes are dynamically loaded from the server side. Our empirical study on 1,489 popular apps in three well-known Android app markets shows that 26.32 percent apps access sensors when the apps are launched, and 11.01 percent apps access sensors while the apps run in the background. Furthermore, we analyze the relevance between sensor usage patterns and third-party libraries, and reverse-engineering on suspicious third-party libraries shows that 77.27 percent apps access sensors via third-party libraries. Our results call attentions to address the users’ privacy concerns caused by sensor access.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "传感器被广泛用于现代移动设备(例如，智能手机、手表)中，并且可以从环境以及关于用户收集丰富的信息，例如，照片、声音和位置。丰富的传感器数据集支持各种应用(如健康监测)和个性化应用。然而，强大的感知能力为攻击者窃取个人敏感数据和商业秘密提供了前所未有的机会。不幸的是，智能设备的当前设计仅提供对传感器的粗略访问控制，并且不具有审计感测的能力。我们认为，了解传感器被访问的频率以及收集了多少传感器数据是防止传感器数据泄露的第一道防线。这种能力还有待设计。在本文中，我们提出了一个允许用户获取传感器数据使用的框架。特别是，我们利用基于钩子的跟踪方法来跟踪传感器访问。因此，无需更改Android系统和应用程序的源代码，我们可以拦截对图形传感器、音频传感器、位置传感器和标准传感器的感知操作，并从四个方面进行审计:流量审计、频率审计、持续时间审计和调用者审计。然后，我们实现了一个原型，称为senDroid，它以[0.04–8.05]%的性能开销实时直观地显示了这些传感器的定量使用情况。senDroid允许Android用户审计应用程序，即使他们通过JNI调用绕过Android框架，或者从服务器端动态加载恶意代码。我们对三个知名安卓应用市场的1，489个热门应用进行的实证研究显示，26.32%的应用在启动时访问传感器，11.01%的应用在后台运行时访问传感器。此外，我们分析了传感器使用模式和第三方库之间的相关性，对可疑第三方库的反向工程显示，77.27%的应用程序通过第三方库访问传感器。我们的研究结果引起了人们对传感器访问引起的用户隐私问题的关注。",
        "title_zh": "sendroid：在整个系统范围内访问审计传感器",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc17.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 17",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2018.2814999",
        "title": "AdCapsule: Practical Confinement of Advertisements in Android Applications",
        "authors": "Xiaonan Zhu, Jinku Li, Yajin Zhou, Jianfeng Ma",
        "abstract": "Nowadays, app developers tend to integrate advertisement libraries (or ad libraries) into their apps to get revenue from ad networks. However, researches have shown that both ad libraries and ad contents could raise serious security and privacy concerns. In this paper, we propose <monospace>AdCapsule</monospace>, a user-level solution to practically confine advertisements, including ad libraries and ad contents. Our solution does not need to change the Android framework, nor requires the root privilege, thus can be readily deployed. Specifically, we propose the <monospace>permission sandbox</monospace>, which isolates the permissions used by ad libraries from the host app, and the <monospace>file sandbox</monospace>, which separates the file operations of advertisements. The ad library and ad content cannot read or write any file outside this sandbox. We have implemented a prototype of <monospace>AdCapsule</monospace>. Our evaluation results indicate that <monospace>AdCapsule</monospace> can successfully enforce security policies to block attempts of accessing private information or manipulating files of the host app, and the performance overhead introduced by <monospace>AdCapsule</monospace> is low.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "现在，应用程序开发者倾向于将广告库(或广告库)集成到他们的应用程序中，以从广告网络中获得收入。然而，研究表明，广告库和广告内容都会引起严重的安全和隐私问题。在本文中，我们提出了< monospace>AdCapsule</monospace >，这是一个用户级的解决方案，用于实际限制广告，包括广告库和广告内容。我们的解决方案不需要改变Android框架，也不需要root权限，因此可以随时部署。具体来说，我们提出了< monospace >权限沙箱</monospace >，它将广告库使用的权限与主机应用程序隔离，以及< monospace >文件沙箱</monospace >，它将广告的文件操作分离。ad库和ad内容无法读取或写入此沙盒之外的任何文件。我们已经实现了一个AdCapsule的原型。我们的评估结果表明，< monospace>AdCapsule</monospace >可以成功实施安全策略来阻止访问私人信息或操纵主机应用程序文件的尝试，并且< monospace>AdCapsule</monospace >带来的性能开销很低。",
        "title_zh": "Adcapsule：在Android应用中的广告的实际限制",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc17.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 17",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2018.2844814",
        "title": "Efficient Fine-Grained Data Sharing Mechanism for Electronic Medical Record Systems with Mobile Devices",
        "authors": "Hui Ma, Rui Zhang, Guomin Yang, Zishuai Song, Kai He, Yuting Xiao",
        "abstract": "Sharing digital medical records on public cloud storage via mobile devices facilitates patients (doctors) to get (offer) medical treatment of high quality and efficiency. However, challenges such as data privacy protection, flexible data sharing, efficient authority delegation, computation efficiency optimization, are remaining toward achieving practical fine-grained access control in the Electronic Medical Record (EMR) system. In this work, we propose an innovative access control model and a fine-grained data sharing mechanism for EMR, which simultaneously achieves the above-mentioned features and is suitable for resource-constrained mobile devices. In the model, complex computation is outsourced to public cloud servers, leaving almost no complex computation for the private key generator (PKG), sender and receiver. Additionally, the communication cost of the PKG and users is optimized. Moreover, we develop an extensible library called <inline-formula><tex-math notation=\"LaTeX\">$\\mathsf {libabe}$</tex-math><alternatives><mml:math><mml:mi mathvariant=\"sans-serif\">libabe</mml:mi></mml:math><inline-graphic xlink:href=\"ma-ieq1-2844814.gif\"/></alternatives></inline-formula> that is compatible with Android devices, and the access control mechanism is actually deployed on realistic environment, including public cloud servers, a laptop and an inexpensive mobile phone with constrained resources. The experimental results indicate that the mechanism is efficient, practical and economical.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "通过移动设备共享公共云存储上的数字病历有助于患者(医生)获得(提供)高质量和高效率的医疗服务。然而，在电子病历(EMR)系统中实现实用的细粒度访问控制仍面临诸多挑战，如数据隐私保护、灵活的数据共享、高效的授权、计算效率优化等。在这篇论文中，我们提出了一个创新的电子病历访问控制模型和细粒度的数据共享机制，同时实现了上述功能，并适用于资源受限的移动设备。在该模型中，复杂的计算被外包给公共云服务器，几乎没有复杂的计算留给私钥生成器(PKG)、发送方和接收方。此外，优化了PKG和用户的通信成本。此外，我们开发了一个名为< inline-formula > < tex-math notation = \" LaTeX \" > $ \\ mathsf { libabe } $ </tex-math > < alternatives > < MML:math variant = \" sans-serif \" > libabe </MML:mi > </MML:math > < inline-graphic xlink:href = \" ma-ie Q1-2844814 . gif \"/> </alternatives > </inline-formula >的可扩展库，它与Android设备兼容，并且实验结果表明，该机制高效、实用、经济。",
        "title_zh": "具有移动设备的电子病历系统的有效细粒度数据共享机制",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc17.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 17",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2018.2845851",
        "title": "Understanding JavaScript Vulnerabilities in Large Real-World Android Applications",
        "authors": "Wei Song, Qingqing Huang, Jeff Huang",
        "abstract": "JavaScript-related vulnerabilities are becoming a major security threat to hybrid mobile applications. In this article, we present a systematic study to understand how JavaScript is used in real-world Android apps and how it may lead to security vulnerabilities. We begin by conducting an empirical study on the top-100 most popular Android apps to investigate JavaScript usage and its related security vulnerabilities. Our study identifies four categories of JavaScript usage and finds that three of these categories, if inappropriately used, can respectively lead to three types of vulnerabilities. We also design and implement an automatic tool named <inline-formula><tex-math notation=\"LaTeX\">$\\sf{ JSDroid}$</tex-math><alternatives><mml:math><mml:mi mathvariant=\"sans-serif\">JSDroid</mml:mi></mml:math><inline-graphic xlink:href=\"song-ieq1-2845851.gif\"/></alternatives></inline-formula> to detect JavaScript-related vulnerabilities. We have applied <inline-formula><tex-math notation=\"LaTeX\">$\\sf{ JSDroid}$</tex-math><alternatives><mml:math><mml:mi mathvariant=\"sans-serif\">JSDroid</mml:mi></mml:math><inline-graphic xlink:href=\"song-ieq2-2845851.gif\"/></alternatives></inline-formula> to 1,000 large real-world Android apps and found that over 70 percent of these apps have potential JavaScript-related vulnerabilities and 20 percent of them can be successfully exploited. Moreover, based on the vulnerabilities identified by <inline-formula><tex-math notation=\"LaTeX\">$\\sf{ JSDroid}$</tex-math><alternatives><mml:math><mml:mi mathvariant=\"sans-serif\">JSDroid</mml:mi></mml:math><inline-graphic xlink:href=\"song-ieq3-2845851.gif\"/></alternatives></inline-formula>, we have successfully launched real attacks on 30 real-world apps.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "JavaScript相关的漏洞正成为混合移动应用的主要安全威胁。在本文中，我们展示了一项系统研究，以了解JavaScript如何在现实世界的Android应用程序中使用，以及它如何可能导致安全漏洞。我们首先对前100个最流行的Android应用进行实证研究，调查JavaScript的使用及其相关的安全漏洞。我们的研究确定了JavaScript使用的四个类别，并发现其中三个类别如果使用不当，会分别导致三种类型的漏洞。我们还设计并实现了一个名为< inline-formula > < tex-math notation = \" LaTeX \" > $ \\ SF { JSDroid } $ </tex-math > < alternatives > < MML:math > < MML:mi math variant = \" sans-serif \" > JSDroid </MML:mi > </MML:math > < inline-graphic xlink:href = \" song-ie Q1-2845851 . gif \"/> </alternatives > </inline-formula >的自动工具来检测与JavaScript相关的内容我们已经将< inline-formula > < tex-math notation = \" LaTeX \" > $ \\ SF { JSDroid } $ </tex-math > < alternatives > < MML:math > < MML:mi math variant = \" sans-serif \" > JSDroid </MML:mi > </MML:math > < inline-graphic xlink:href = \" song-ieq 2-2845851 . gif \"/> </alternatives > </inline-formula >应用于1000个大型现实世界的Android应用程序，并发现此外，根据< inline-formula > < tex-math notation = \" LaTeX \" > $ \\ SF { JSDroid } $ </tex-math > < alternatives > < MML:math > < MML:mi math variant = \" sans-serif \" > JSDroid </MML:mi > </MML:math > < inline-graphic xlink:href = \" song-ieq 3-2845851 . gif \"/> </alternatives > </inline-formula >识别出的漏洞，我们已经成功地对30个",
        "title_zh": "了解大型现实世界Android应用中的JavaScript漏洞",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc17.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 17",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2018.2871682",
        "title": "Semantics-Aware Privacy Risk Assessment Using Self-Learning Weight Assignment for Mobile Apps",
        "authors": "Jing Chen, Chiheng Wang, Kun He, Ziming Zhao, Min Chen, Ruiying Du, Gail-Joon Ahn",
        "abstract": "Most of the existing mobile application (app) vetting mechanisms only estimate risks at a coarse-grained level by analyzing app syntax but not semantics. We propose a semantics-aware privacy risk assessment framework (SPRisk), which considers the sensitivity discrepancy of privacy-related factors at semantic level. Our framework can provide qualitative (i.e., risk level) and quantitative (i.e., risk score) assessment results, both of which help users make decisions to install an app or not. Furthermore, to find the reasonable weight distribution of each factor automatically, we exploit a self-learning weight assignment method, which is based on fuzzy clustering and knowledge dependency theory. We implement a prototype system and evaluate the effectiveness of SPRisk with 192,445 normal apps and 7,111 malicious apps. A measurement study further reveals some interesting findings, such as the privacy risk distribution of Google Play Store, the diversity of official and unofficial marketplaces, which provide insights into understanding the seriousness of privacy threat in the Android ecosystem.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "大多数现有的移动应用程序(app)审查机制仅通过分析app语法而不是语义来在粗粒度级别上估计风险。我们提出了一个语义感知的隐私风险评估框架(SPRisk ),该框架在语义层面上考虑了隐私相关因素的敏感性差异。我们的框架可以提供定性(即风险级别)和定量(即风险分数)的评估结果，这两种结果都有助于用户做出安装或不安装应用程序的决定。此外，为了自动找到各因素的合理权重分配，我们开发了一种基于模糊聚类和知识依赖理论的自学习权重分配方法。我们实现了一个原型系统，并用192，445个正常应用和7，111个恶意应用评估了SPRisk的有效性。一项测量研究进一步揭示了一些有趣的发现，如谷歌Play商店的隐私风险分布，官方和非官方市场的多样性，这为理解Android生态系统中隐私威胁的严重性提供了见解。",
        "title_zh": "语义意识的隐私风险评估使用移动应用程序的自学习权重分配",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc18.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 18",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2018.2889486",
        "title": "An Empirical Analysis of Hazardous Uses of Android Shared Storage",
        "authors": "Shaoyong Du, Pengxiong Zhu, Jingyu Hua, Zhiyun Qian, Zhao Zhang, Xiaoyu Chen, Sheng Zhong",
        "abstract": "Android shared storage is shared with all the applications (apps for short) and the user. It is common to see that a large amount of apps store different kinds of files on it. It is well known that apps granted the read or write permissions can freely access any files in the shared storage. As a consequence, the shared storage has been demonstrated to expose sensitive information and jeopardize users’ privacy. In this paper, we systematically study a simple but overlooked threat related to the shared storage—the lack of input validation (e.g., integrity verifications) when consuming files on the shared storage. We argue that the untrusted input from the shared storage is a much ubiquitous problem. By undertaking an empirically study through a static analysis tool we develop, we find over 30 percent of the 13,746 analyzed popular apps on the market suffer from such problem. By investigating the types of files consumed, we find shockingly a large fraction of apps store and consume sensitive files, which allows us to construct end-to-end attacks. Considering the ubiquity of this class of vulnerabilities, we finally define better access control policies for external storage to eliminate them for most apps.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android共享存储由所有应用程序(简称应用程序)和用户共享。常见的是大量的应用程序在上面存储不同种类的文件。众所周知，被授予读或写权限的应用程序可以自由访问共享存储中的任何文件。因此，共享存储已被证明会暴露敏感信息并危及用户隐私。在本文中，我们系统地研究了与共享存储相关的一个简单但被忽视的威胁——在共享存储上使用文件时缺乏输入验证(例如，完整性验证)。我们认为来自共享存储的不可信输入是一个非常普遍的问题。通过我们开发的静态分析工具进行实证研究，我们发现市场上13，746个受分析的流行应用程序中有超过30%存在此类问题。通过调查消费的文件类型，我们惊人地发现很大一部分应用程序存储和消费敏感文件，这使我们能够构建端到端攻击。考虑到这类漏洞的普遍性，我们最终为外部存储定义了更好的访问控制策略，以消除大多数应用程序的漏洞。",
        "title_zh": "对Android共享存储的危险用途的经验分析",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc18.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 18",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2019.2914202",
        "title": "Looking Back! Using Early Versions of Android Apps as Attack Vectors",
        "authors": "Yue Zhang, Jian Weng, Jia-Si Weng, Lin Hou, Anjia Yang, Ming Li, Yang Xiang, Robert H. Deng",
        "abstract": "Android platform is gaining explosive popularity. This leads developers to invest resources to maintain the upward trajectory of the demand. Unfortunately, as the profit potential grows higher, the chances of these Apps getting attacked also get higher. Therefore, developers improved the security of their Apps, which limits attackers ability to compromise upgraded versions of the Apps. However, developers cannot enhance the security of earlier versions that have been released on the Play Store. The earlier versions of the App can be subject to reverse engineering and other attacks. In this paper, we find that attackers can use these earlier versions as attack vectors, which threatens well protected upgraded versions. We show how to attack the upgraded versions of some popular Apps, including Facebook, Sina Weibo and Qihoo360-Cloud-Driven by analyzing the vulnerabilities existing in their earlier versions. We design and implement a tool named DroidSkynet to analyze and find out vulnerable apps from the Play Store. Among 1,500 mainstream Apps collected from the real world, our DroidSkynet indicates the success rate of attacking an App using an earlier version is 34 percent. We also explore possible mitigation solutions to achieve a balance between utility and security of the App update process.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android平台正在获得爆炸性的流行。这导致开发者投入资源来维持需求的上升轨迹。不幸的是，随着潜在利润越来越高，这些应用受到攻击的几率也越来越高。因此，开发人员提高了他们应用程序的安全性，这限制了攻击者破坏应用程序升级版本的能力。然而，开发者无法增强Play Store上已发布的早期版本的安全性。该应用程序的早期版本可能会受到逆向工程和其他攻击。在本文中，我们发现攻击者可以使用这些早期版本作为攻击载体，这威胁到保护良好的升级版本。我们展示了如何通过分析早期版本中存在的漏洞来攻击一些流行应用程序的升级版本，包括脸书、新浪微博和奇虎360云驱动。我们设计并实现了一个名为DroidSkynet的工具来分析并找出Play Store中易受攻击的应用。在从现实世界收集的1500个主流应用中，我们的DroidSkynet表明，使用早期版本攻击应用的成功率为34%。我们还探索了可能的缓解解决方案，以实现应用程序更新过程的实用性和安全性之间的平衡。",
        "title_zh": "回头看！ 使用Android应用的早期版本作为攻击向量",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc18.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 18",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2019.2909902",
        "title": "$\\sf {DBank}$DBank: Predictive Behavioral Analysis of Recent Android Banking Trojans",
        "authors": "Chongyang Bai, Qian Han, Ghita Mezzour, Fabio Pierazzi, V. S. Subrahmanian",
        "abstract": "Using a novel dataset of Android banking trojans (ABTs), other Android malware, and goodware, we develop the DBank system to predict whether a given Android APK is a banking trojan or not. We introduce the novel concept of a Triadic Suspicion Graph (TSG for short) which contains three kinds of nodes: goodware, banking trojans, and API packages. We develop a novel feature space based on two classes of scores derived from TSGs: suspicion scores (SUS) and suspicion ranks (SR)-the latter yields a family of features that generalize PageRank. While TSG features (based on SUS/SR scores) provide very high predictive accuracy on their own in predicting recent (2016-2017) ABTs, we show that the combination of TSG features with previously studied lightweight static and dynamic features in the literature yields the highest accuracy in distinguishing ABTs from goodware, while preserving the same accuracy of prior feature combinations in distinguishing ABTs from other Android malware. In particular, DBank's overall accuracy in predicting whether an APK is a banking trojan or not is up to 99.9% AUC with 0.3% false positive rate. Moreover, we have already reported two unlabeled APKs from VirusTotal (which DBank has detected as ABTs) to the Google Android Security Team-in one case, we discovered it before any of the 63 anti-virus products on VirusTotal did, and in the other case, we beat 62 of 63 anti-viruses on VirusTotal. This suggests that DBank is capable of making new discoveries in the wild before other established vendors. We also show that our novel TSG features have some interesting defensive properties as they are robust to knowledge of the training set by an adversary: even if the adversary uses 90% of our training set and uses the exact TSG features that we use, it is difficult for him to infer DBank's predictions on APKs. We additionally identify the features that best separate and characterize ABTs from goodware as well as from other Android malware. Finally, we develop a detailed data-driven analysis of five major recent ABT families: FakeToken, Svpeng, Asacub, BankBot, and Marcher, and identify the features that best separate them from goodware and other malware.",
        "files": {
            "openAccessPdf": "https://kclpure.kcl.ac.uk/portal/files/115985565/DBank_Predictive_Behavioral_Analysis_BAI_Published_Online_9_April_2019_GREEN_AAM.pdf"
        },
        "abstract_zh": "使用一个新的Android银行特洛伊木马(ABTs)、其他Android恶意软件和goodware数据集，我们开发了DBank系统来预测给定的Android APK是否是银行特洛伊木马。我们引入了三元怀疑图(简称TSG)的新概念，它包含三种类型的节点:goodware、banking trojans和API包。我们开发了一个新的特征空间，它基于从TSGs得到的两类分数:怀疑分数(SUS)和怀疑等级(SR)，后者产生了一个概括PageRank的特征族。虽然TSG特征(基于SUS/SR分数)本身在预测最近(2016-2017年)的abt时提供了非常高的预测准确性，但我们表明，TSG特征与文献中先前研究的轻量级静态和动态特征的组合在区分abt与goodware时产生了最高的准确性，同时在区分abt与其他Android恶意软件时保持了先前特征组合的相同准确性。特别地，DBank在预测APK是否为银行特洛伊木马时的总体准确率高达99.9% AUC，误报率为0.3%。此外，我们已经向谷歌Android安全团队报告了来自VirusTotal的两个未标记的DBank已将其检测为abt)——在一个案例中，我们在VirusTotal上的63个反病毒产品之前发现了它，在另一个案例中，我们击败了VirusTotal上63个反病毒产品中的62个。这表明DBank有能力在其他成熟的供应商之前在野外做出新的发现。我们还表明，我们的新TSG特征具有一些有趣的防御特性，因为它们对对手的训练集的知识是鲁棒的:即使对手使用我们训练集的90%并使用我们使用的确切TSG特征，他也很难推断出DBank对APKs的预测。此外，我们还确定了最能区分和表征abt与goodware以及其他Android恶意软件的特征。最后，我们对最近的五个主要ABT家族进行了详细的数据驱动分析:FakeToken、Svpeng、Asacub、BankBot和Marcher，并确定了最能将它们与goodware和其他恶意软件区分开来的特征。",
        "title_zh": "$ \\ sf {dbank} $ dbank：最近的Android银行木马的预测行为分析",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc18.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 18",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2019.2919693",
        "title": "Trace-Length Independent Runtime Monitoring of Quantitative Policies",
        "authors": "Xiaoning Du, Alwen Tiu, Kun Cheng, Yang Liu",
        "abstract": "Metric linear-time logic (MTL) has been widely used to specify runtime policies. Traditionally this use of MTL is to capture the qualitative aspects of the monitored systems, but recent developments in its extensions with aggregate operators allow some quantitative policies to be specified. Our interest in MTL-based policy languages is driven by applications in runtime malware or intrusion detection in platforms like Android and autonomous vehicles, which requires the monitoring algorithm to be independent of the length of the system event traces so that its performance does not degrade as the traces grow. We propose a policy language based on a past-time variant of MTL, extended with an aggregate operator called the metric temporal counting quantifier to specify a policy based on the number of times some sub-policies are satisfied in the specified past time interval. We show that a broad class of policies, but not all policies, specified with our language can be monitored in a trace-length independent way, and provide a concrete algorithm to do so. We implement and test our algorithm in both an existing Android monitoring framework and an autonomous vehicle simulation platform, and show that our approach can effectively specify and monitor quantitative policies drawn from real-world studies.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "度量线性时间逻辑(MTL)已被广泛用于指定运行时策略。传统上，MTL的这种使用是为了捕获被监控系统的定性方面，但是最近在它的扩展中使用聚集运算符的发展允许指定一些定量策略。我们对基于MTL的策略语言的兴趣是由Android和自动驾驶汽车等平台中的运行时恶意软件或入侵检测应用程序驱动的，这要求监控算法独立于系统事件跟踪的长度，以便其性能不会随着跟踪的增长而下降。我们提出了一种基于MTL的过去时间变量的策略语言，用一个称为度量时态计数量词的聚合运算符进行了扩展，以基于在指定的过去时间间隔内某些子策略被满足的次数来指定策略。我们证明了用我们的语言指定的一大类策略，但不是所有的策略，可以以一种跟踪长度独立的方式被监控，并提供了一个具体的算法来做到这一点。我们在现有的Android监控框架和自动驾驶汽车仿真平台上实现和测试了我们的算法，并表明我们的方法可以有效地指定和监控来自真实世界研究的量化政策。",
        "title_zh": "定量策略的痕量长度独立运行时监视",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc18.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 18",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2019.2936848",
        "title": "Vulnerable Service Invocation and Countermeasures",
        "authors": "Huan Chang, Lingguang Lei, Kun Sun, Yuewu Wang, Jiwu Jing, Yi He, Pingjian Wang",
        "abstract": "Before Android 5.0, the services in Android applications can be invoked either explicitly or implicitly. However, since the implicit service invocations may suffer service hijacking attacks and thus lead to sensitive data leakage, they have been forbidden since Android 5.0. Thereafter the Android system will simply throw an exception and crash the applications that still invokes services implicitly, so that it was expected that application developers will be forced to convert the implicit service invocations to explicit ones. In this paper, we develop a static analysis framework called ISA to analyze the effectiveness of forbidden policy on removing the vulnerable service invocations. We collect two datasets containing common 1390 apps downloaded 1 to 3 months before the forbidden policy is enforced and 30 months after the forbidden policy is enforced, respectively. Our preliminary analysis indicates a 82.58% reduction in the number of vulnerable service invocations due to the enforcement of forbidden policy. However, upon further investigation, we discover that the forbidden policy fails to resolve service hijacking attacks. We find that 36 popular applications are still vulnerable to service hijacking attacks, which can lead to the leakage of sensitive information such as user login credential. Finally, we analyze the reasons of the residue vulnerable invocations and then propose two countermeasures.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "在Android 5.0之前，Android应用中的服务可以被显式或隐式调用。然而，由于隐式服务调用可能遭受服务劫持攻击，从而导致敏感数据泄漏，因此自Android 5.0以来，它们已被禁止。此后，Android系统将简单地抛出一个异常，并使仍然隐式调用服务的应用程序崩溃，因此可以预料，应用程序开发人员将被迫将隐式服务调用转换为显式服务调用。在本文中，我们开发了一个静态分析框架ISA来分析禁止策略在移除易受攻击的服务调用方面的有效性。我们收集了两个数据集，分别包含禁止政策实施前1至3个月和禁止政策实施后30个月下载的常见1390应用。我们的初步分析表明，由于禁止策略的实施，易受攻击的服务调用数量减少了82.58%。然而，经过进一步的研究，我们发现禁止策略不能解决服务劫持攻击。我们发现，36个流行的应用程序仍然容易受到服务劫持攻击，这可能导致用户登录凭证等敏感信息的泄漏。最后，我们分析了剩余易受攻击调用的原因，并提出了两种对策。",
        "title_zh": "脆弱的服务调用和对策",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc18.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 18",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2019.2937925",
        "title": "DPC: A Dynamic Permission Control Mechanism for Android Third-Party Libraries",
        "authors": "Fu-Hau Hsu, Nien-Chi Liu, Yanling Hwang, Che-Hao Liu, Chuan-Sheng Wang, Chang-Yi Chen",
        "abstract": "Today's smartphone app stores are full of apps with diverse features. Many developers use third-party libraries to reduce the development time and cost, but developers often ignore the security problems of third-party libraries. A major security problem introduced by third-party libraries is that a third-party library has the same permissions as the apps, called host-apps hereafter, that use it. According to previous research, having the same permissions as its host apps, a third-party library could have unauthorized access to user data, which poses a serious threat to app users. Therefore, how to prevent third-party libraries from abusing permissions has become an important issue. To solve this problem, this paper proposes a Dynamic Permission Control mechanism, called Dynamic Permission Controller or DPC hereafter, for app developers to prohibit third-party libraries from abusing host apps’ dangerous permissions. DPC modifies the permission control mechanism of Android framework to make apps have a more flexible permission management mechanism when they are running. DPC provides new APIs which allows an app to dynamically disable a granted dangerous permission before invoking an API of a third-party library and restore the dangerous permission after completing the API. Hence, DPC protects user's privacy by blocking unauthorized access from third-party libraries. Meanwhile, without the requirement that an app developer needs to know the detail of third-party libraries, the app still can use APIs of third-party libraries safely. Experimental results show that DPC works with many popular apps downloaded from Google Play well and DPC prohibits a third-party library from having the same dangerous permissions that its host apps have. Hence, unlike previous solutions, DPC does not have compatibility problems. The overhead introduced by DPC on an emulator and Nexus 7 are 1.8 and 0.3 percent respectively.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "今天的智能手机应用商店充满了功能多样的应用。很多开发者使用第三方库来减少开发时间和成本，但是开发者往往忽略了第三方库的安全问题。第三方库引入的一个主要安全问题是，第三方库与使用它的应用程序(以下称为主机应用程序)具有相同的权限。根据之前的研究，拥有与其主机应用程序相同的权限，第三方库可以未经授权访问用户数据，这对应用程序用户构成了严重威胁。因此，如何防止第三方库滥用权限成为一个重要的问题。为了解决这个问题，本文提出了一种动态权限控制机制，称为动态权限控制器(Dynamic Permission Controller，DPC ),用于应用开发者禁止第三方库滥用主机应用的危险权限。DPC修改了Android框架的权限控制机制，使app在运行时有更灵活的权限管理机制。DPC提供了新的API，允许应用程序在调用第三方库的API之前动态禁用授予的危险权限，并在完成API后恢复危险权限。因此，DPC通过阻止来自第三方库的未授权访问来保护用户的隐私。同时，不需要应用开发者了解第三方库的细节，应用仍然可以安全地使用第三方库的API。实验结果表明，DPC与许多从Google Play下载的流行应用程序配合良好，并且DPC禁止第三方库拥有与其主机应用程序相同的危险权限。因此，与以前的解决方案不同，DPC没有兼容性问题。DPC在模拟器和Nexus 7上引入的开销分别为1.8%和0.3%。",
        "title_zh": "DPC：Android第三方库的动态权限控制机制",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc18.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 18",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2019.2956035",
        "title": "GUI-Squatting Attack: Automated Generation of Android Phishing Apps",
        "authors": "Sen Chen, Lingling Fan, Chunyang Chen, Minhui Xue, Yang Liu, Lihua Xu",
        "abstract": "Mobile phishing attacks, such as mimic mobile browser pages, masquerade as legitimate applications by leveraging repackaging or clone techniques, have caused varied yet significant security concerns. Consequently, detection techniques have been receiving increasing attention. However, many such detection methods are not well tested and may therefore still be vulnerable to new types of phishing attacks. In this article, we propose a new attacking technique, named GUI-Squatting attack, which can generate phishing apps (phapps) automatically and effectively on the Android platform. Our method adopts image processing and deep learning algorithms, to enable powerful and large-scale attacks. We observe that a successful phishing attack requires two conditions, page confusion and logic deception during attacks synthesis. We directly optimize these two conditions to create a practical attack. Our experimental results reveal that existing phishing defenses are less effective against such emergent attacks and may, therefore, stimulate more efficient detection techniques. To further demonstrate that our generated phapps can not only bypass existing detection techniques, but also deceive real users, we conduct a human study and successfully steal users’ login information. The human study also shows that different response messages (e.g., “Crash” and “Server failed”) after pressing the login button mislead users to regard our phapps as functionality problems instead of security threats. Extensive experiments reveal that such newly proposed attacks still remain mostly undetected, and are worth further exploration.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "移动网络钓鱼攻击，如模仿移动浏览器页面，通过利用重新打包或克隆技术伪装成合法的应用程序，已经引起了各种各样的重大安全问题。因此，检测技术受到越来越多的关注。然而，许多这样的检测方法没有经过很好的测试，因此仍然容易受到新型的网络钓鱼攻击。在本文中，我们提出了一种新的攻击技术GUI占位攻击，它可以在Android平台上自动有效地生成钓鱼应用。我们的方法采用图像处理和深度学习算法，以实现强大和大规模的攻击。我们观察到，成功的网络钓鱼攻击需要两个条件，页面混乱和攻击合成过程中的逻辑欺骗。我们直接优化这两个条件，创造一个实际的攻击。我们的实验结果表明，现有的网络钓鱼防御措施对这种突发攻击的有效性较低，因此可能会刺激更有效的检测技术。为了进一步证明我们生成的phapps不仅可以绕过现有的检测技术，还可以欺骗真实用户，我们进行了人体研究，并成功窃取了用户的登录信息。人体研究还表明，在按下登录按钮后，不同的响应消息(例如，“崩溃”和“服务器故障”)会误导用户将我们的phapps视为功能问题，而不是安全威胁。大量实验表明，这种新提出的攻击仍然大部分未被检测到，值得进一步探索。",
        "title_zh": "GUI平方攻击：自动生成Android网络钓鱼应用程序",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc18.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 18",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2019.2957787",
        "title": "Resilient User-Side Android Application Repackaging and Tampering Detection Using Cryptographically Obfuscated Logic Bombs",
        "authors": "Qiang Zeng, Lannan Luo, Zhiyun Qian, Xiaojiang Du, Zhoujun Li, Chin-Tser Huang, Csilla Farkas",
        "abstract": "Application repackaging is a severe threat to Android users and the market. Not only does it infringe on intellectual property, but it is also one of the most common ways of propagating mobile malware. Existing countermeasures mostly detect repackaging based on app similarity measurement, which tends to be imprecise when obfuscations are applied to repackaged apps. Moreover, they rely on a central party, typically the hosting app store, to perform the detection, but many app stores fail to commit proper effort to piracy detection. We consider building the application repackaging detection capability into apps, such that user devices are made use to detect repackaging in a decentralized fashion. The main challenge is how to protect the detection code from being manipulated by attacks. We propose a creative use of logic bombs, which are otherwise regularly used in malware. The trigger conditions of bombs are constructed to exploit the differences between the attacker and users, such that a bomb that lies dormant on the attacker side will be activated on the user side. The detection code, which is part of the bomb payload, is executed only if the bomb is activated. We introduce cryptographically obfuscated logic bomb to enhance the bomb: (1) the detection code is woven into the neighboring original app code, (2) the mixed code gets encrypted using a key, and (3) the key is deleted from the app and can only be derived when the bomb is activated. Thus, attacks that try to modify or delete the detection code will corrupt the app itself, and searching the key in the application will be in vain. Moreover, we propose a bomb spraying technique that allows many bombs to be injected into an app, multiplying the needed adversary effort for bypassing the detection. In addition to repackaging detection, we present application tampering detection to fight attacks that insert malicious code into repackaged apps. We have implemented a prototype, named BombDroid, that builds repackaging and tampering detection into apps through bytecode instrumentation. The evaluation and the security analysis show that the technique is effective, efficient, and resilient to various bomb analysis techniques including fuzzing, symbolic execution, multi-path exploration, and program slicing. Ethical issues due to the use of logic bombs are also discussed.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "应用程序重新打包对Android用户和市场是一个严重的威胁。它不仅侵犯了知识产权，也是移动恶意软件最常见的传播方式之一。现有对策大多基于应用相似性度量来检测重新打包，当混淆应用于重新打包的应用时，这往往是不精确的。此外，它们依赖于一个中心方(通常是托管应用商店)来执行检测，但许多应用商店未能做出适当的努力来检测盗版。我们考虑在应用程序中构建应用程序重新打包检测功能，以便用户设备以分散的方式检测重新打包。主要的挑战是如何保护检测代码不被攻击所操纵。我们建议创造性地使用逻辑炸弹，否则经常被用于恶意软件。炸弹的触发条件被构造成利用攻击者和用户之间的差异，使得在攻击者侧处于休眠状态的炸弹将在用户侧被激活。检测代码是炸弹有效载荷的一部分，只有在炸弹被激活时才会执行。我们引入加密混淆逻辑炸弹来增强炸弹:(1)将检测代码编织到相邻的原始app代码中，(2)使用密钥对混合代码进行加密，以及(3)从app中删除密钥，并且仅当激活炸弹时才能导出密钥。因此，试图修改或删除检测代码的攻击将破坏应用程序本身，在应用程序中搜索密钥将是徒劳的。此外，我们提出了一种炸弹喷射技术，允许许多炸弹被注入到一个应用程序中，从而增加了对手绕过检测所需的努力。除了重新打包检测之外，我们还提出了应用程序篡改检测，以对抗将恶意代码插入重新打包应用程序的攻击。我们已经实现了一个名为BombDroid的原型，它通过字节码工具将重新打包和篡改检测构建到应用程序中。评估和安全性分析表明，该技术是有效的、高效的，并且对包括模糊化、符号执行、多路径探索和程序切片在内的各种炸弹分析技术具有弹性。伦理问题由于逻辑炸弹的使用也进行了讨论。",
        "title_zh": "使用密码混淆的逻辑炸弹的弹性用户端Android应用程序重新包装和篡改检测",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc18.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 18",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2019.2962403",
        "title": "A Smart Framework for Fine-Grained Microphone Acoustic Permission Management",
        "authors": "Weili Han, Chang Cao, Zhe Zhou, Shize Chen, Lingqi Huang, X. Sean Wang",
        "abstract": "Microphones attracted a lot of attentions from attackers due to the sensitivity of voice data: attackers may control devices through abusing their microphones, fingerprint devices by measuring their microphones, or directly monitor the microphone readings to steal users’ private data. Nevertheless, OS developers failed to address the severe consequences. While the current security mechanism only offers a coarse-grained access control over the usage of microphones: recording all sound or shutting off, it is necessary to redesign the microphone security mechanism to enforce fine-grained restrictions over the usage of microphones. In this article, we propose a fine-grained microphone access control scheme on Android platform, referred to as FMC (Finer Microphone Controller). In our scheme, microphone acoustic permissions are granted with three finer policies: treble policy, timbre policy and exclusion policy, with which most of the attacks mentioned above can be defended against. In addition, to ease user’s policy management, we employ a smart policy recommendation method, avoiding additional manual policy approvals. The results in our experiments show that a negligible 1.06 percent performance overhead is incurred during policy enforcement. Besides, the policy recommendation system in FMC promises an accuracy of 82.82 percent averagely. We believe that our work is a practical defense scheme against attacks exploiting microphone acoustic permissions and should be employed by OS developers.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "由于语音数据的敏感性，麦克风吸引了大量攻击者的注意:攻击者可能通过滥用麦克风来控制设备，通过测量麦克风来识别设备，或者直接监控麦克风读数来窃取用户的隐私数据。然而，操作系统开发商未能解决严重的后果。虽然当前的安全机制仅提供对麦克风使用的粗粒度访问控制:记录所有声音或关闭，但有必要重新设计麦克风安全机制，以对麦克风的使用实施细粒度限制。在本文中，我们提出了一种基于Android平台的细粒度麦克风访问控制方案，简称为FMC (Finer Microphone Controller)。在我们的方案中，麦克风声学许可通过三个更好的策略来授予:高音策略、音色策略和排除策略，利用这些策略可以防御上述大多数攻击。此外，为了简化用户的策略管理，我们采用了智能策略建议方法，避免了额外的手动策略批准。我们的实验结果表明，在策略执行期间，性能开销只有1.06%，可以忽略不计。此外，FMC中的政策推荐系统的平均准确率为82.82%。我们相信我们的工作是一个实用的防御方案，可以抵御利用麦克风声音权限的攻击，应该被操作系统开发人员所采用。",
        "title_zh": "用于细粒度麦克风声学许可管理的智能框架",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc18.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 18",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2017.2700270",
        "title": "Yes, Machine Learning Can Be More Secure! A Case Study on Android Malware Detection",
        "authors": "Ambra Demontis, Marco Melis, Battista Biggio, Davide Maiorca, Daniel Arp, Konrad Rieck, Igino Corona, Giorgio Giacinto, Fabio Roli",
        "abstract": "To cope with the increasing variability and sophistication of modern attacks, machine learning has been widely adopted as a statistically-sound tool for malware detection. However, its security against well-crafted attacks has not only been recently questioned, but it has been shown that machine learning exhibits inherent vulnerabilities that can be exploited to evade detection at test time. In other words, machine learning itself can be the weakest link in a security system. In this paper, we rely upon a previously-proposed attack framework to categorize potential attack scenarios against learning-based malware detection tools, by modeling attackers with different skills and capabilities. We then define and implement a set of corresponding evasion attacks to thoroughly assess the security of Drebin, an Android malware detector. The main contribution of this work is the proposal of a simple and scalable secure-learning paradigm that mitigates the impact of evasion attacks, while only slightly worsening the detection rate in the absence of attack. We finally argue that our secure-learning approach can also be readily applied to other malware detection tasks.",
        "files": {
            "openAccessPdf": "https://iris.unica.it/bitstream/11584/234522/1/07917369.pdf"
        },
        "abstract_zh": "为了应对现代攻击日益增加的可变性和复杂性，机器学习已被广泛用作恶意软件检测的统计可靠工具。然而，它对精心制作的攻击的安全性不仅最近受到质疑，而且已经表明，机器学习表现出内在的漏洞，可以被利用来逃避测试时的检测。换句话说，机器学习本身可能是安全系统中最薄弱的环节。在本文中，我们依靠之前提出的攻击框架，通过对具有不同技能和能力的攻击者进行建模，对基于学习的恶意软件检测工具的潜在攻击场景进行分类。然后，我们定义并实现了一组相应的规避攻击，以彻底评估Android恶意软件检测器Drebin的安全性。这项工作的主要贡献是提出了一个简单和可扩展的安全学习范式，它减轻了逃避攻击的影响，同时在没有攻击的情况下仅略微恶化了检测率。我们最后认为，我们的安全学习方法也可以很容易地应用于其他恶意软件检测任务。",
        "title_zh": "是的，机器学习可以更安全！ 关于Android恶意软件检测的案例研究",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc16.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 16",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2016.2536605",
        "title": "MADAM: Effective and Efficient Behavior-based Android Malware Detection and Prevention",
        "authors": "Andrea Saracino, Daniele Sgandurra, Gianluca Dini, Fabio Martinelli",
        "abstract": "Android users are constantly threatened by an increasing number of malicious applications (apps), generically called malware. Malware constitutes a serious threat to user privacy, money, device and file integrity. In this paper we note that, by studying their actions, we can classify malware into a small number of behavioral classes, each of which performs a limited set of misbehaviors that characterize them. These misbehaviors can be defined by monitoring features belonging to different Android levels. In this paper we present MADAM, a novel host-based malware detection system for Android devices which simultaneously analyzes and correlates features at four levels: kernel, application, user and package, to detect and stop malicious behaviors. MADAM has been specifically designed to take into account those behaviors that are characteristics of almost every real malware which can be found in the wild. MADAM detects and effectively blocks more than 96 percent of malicious apps, which come from three large datasets with about 2,800 apps, by exploiting the cooperation of two parallel classifiers and a behavioral signature-based detector. Extensive experiments, which also includes the analysis of a testbed of 9,804 genuine apps, have been conducted to show the low false alarm rate, the negligible performance overhead and limited battery consumption.",
        "files": {
            "openAccessPdf": "https://arpi.unipi.it/bitstream/11568/789315/7/2018-IEEE-TDSC-Madam-OA.pdf"
        },
        "abstract_zh": "Android用户不断受到越来越多的恶意应用程序(应用程序)的威胁，这些应用程序统称为恶意软件。恶意软件对用户隐私、金钱、设备和文件完整性构成严重威胁。在本文中，我们注意到，通过研究他们的行为，我们可以将恶意软件分为少量的行为类别，每个类别都执行一组有限的不当行为。这些不当行为可以通过监控属于不同Android级别的功能来定义。在本文中，我们提出了MADAM，一种新的基于主机的Android设备恶意软件检测系统，它同时分析和关联四个级别的特征:内核、应用程序、用户和软件包，以检测和阻止恶意行为。MADAM经过专门设计，考虑到了几乎所有真正的恶意软件的行为特征。MADAM通过利用两个并行分类器和一个基于行为特征的检测器的合作，检测并有效阻止超过96%的恶意应用，这些恶意应用来自三个包含约2，800个应用的大型数据集。进行了广泛的实验，其中包括对9，804个正版应用的测试床的分析，以显示低误报率、可忽略的性能开销和有限的电池消耗。",
        "title_zh": "女士：有效，有效的基于行为的Android恶意软件检测和预防",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc15.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 15",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2016.2539942",
        "title": "A Shoulder Surfing Resistant Graphical Authentication System",
        "authors": "Hung-Min Sun, Shiuan-Tung Chen, Jyh-Haw Yeh, Chia-Yun Cheng",
        "abstract": "Authentication based on passwords is used largely in applications for computer security and privacy. However, human actions such as choosing bad passwords and inputting passwords in an insecure way are regarded as “the weakest link” in the authentication chain. Rather than arbitrary alphanumeric strings, users tend to choose passwords either short or meaningful for easy memorization. With web applications and mobile apps piling up, people can access these applications anytime and anywhere with various devices. This evolution brings great convenience but also increases the probability of exposing passwords to shoulder surfing attacks. Attackers can observe directly or use external recording devices to collect users’ credentials. To overcome this problem, we proposed a novel authentication system PassMatrix, based on graphical passwords to resist shoulder surfing attacks. With a one-time valid login indicator and circulative horizontal and vertical bars covering the entire scope of pass-images, PassMatrix offers no hint for attackers to figure out or narrow down the password even they conduct multiple camera-based attacks. We also implemented a PassMatrix prototype on Android and carried out real user experiments to evaluate its memorability and usability. From the experimental result, the proposed system achieves better resistance to shoulder surfing attacks while maintaining usability.",
        "files": {
            "openAccessPdf": "https://scholarworks.boisestate.edu/cgi/viewcontent.cgi?article=1176&context=cs_facpubs"
        },
        "abstract_zh": "基于密码的认证主要用于计算机安全和隐私的应用中。然而，诸如选择不良密码和以不安全的方式输入密码等人为行为被视为认证链中的“最薄弱环节”。为了便于记忆，用户倾向于选择短的或有意义的密码，而不是任意的字母数字串。随着web应用程序和移动应用程序的堆积，人们可以随时随地通过各种设备访问这些应用程序。这种发展带来了极大的便利，但也增加了暴露密码的可能性。攻击者可以直接观察或使用外部记录设备来收集用户的凭据。为了克服这个问题，我们提出了一种新的认证系统PassMatrix，基于图形密码来抵抗肩窥攻击。PassMatrix具有一次性有效登录指示器和覆盖整个pass-image范围的可循环水平和垂直条，即使攻击者进行多次基于摄像头的攻击，也不会提示他们找出或缩小密码范围。我们还在Android上实现了一个PassMatrix原型，并进行了真实用户实验来评估它的可记忆性和可用性。实验结果表明，该系统在保持可用性的同时，具有更好的抗肩窥攻击能力。",
        "title_zh": "抗肩膀冲浪的图形身份验证系统",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc15.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 15",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2016.2580509",
        "title": "End-to-End Detection of Caller ID Spoofing Attacks",
        "authors": "Hossen A. Mustafa, Wenyuan Xu, Ahmad-Reza Sadeghi, Steffen Schulz",
        "abstract": "Caller ID (caller identification) is a service provided by telephone operators where the phone number and/or the name of the caller is transmitted to inform the callee who is calling. Today, most people trust the caller ID information and some banks even use Caller ID to authenticate customers. However, with the proliferation of smartphones and VoIP, it is easy to spoof caller ID information by installing a particular application on the smartphone or by using service providers that offer Caller ID spoofing. As the phone network is fragmented between countries and companies and upgrades of old hardware is costly, no mechanism is available today to let end-users easily detect Caller ID spoofing attacks. In this article, we propose a new approach of using end-to-end caller ID verification schemes that leverage features of the existing phone network infrastructure (CallerDec ). We design an SMS-based and a timing-based version of CallerDec that works with existing combinations of landlines, cellular and VoIP networks and can be deployed at the liberty of the users. We implemented both CallerDec schemes as an App for Android-based phones and validated their effectiveness in detecting spoofing attacks in various scenarios.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "呼叫者ID(呼叫者标识)是由电话运营商提供的服务，其中发送呼叫者的电话号码和/或姓名来通知正在呼叫的被呼叫者。今天，大多数人相信来电显示信息，一些银行甚至使用来电显示来验证客户。然而，随着智能手机和VoIP的普及，通过在智能手机上安装特定的应用程序或使用提供来电显示欺骗的服务提供商，很容易欺骗来电显示信息。由于电话网络在国家和公司之间是分散的，并且旧硬件的升级是昂贵的，所以今天没有机制可以让最终用户容易地检测呼叫者ID欺骗攻击。在本文中，我们提出了一种利用现有电话网络基础设施(CallerDec)功能的端到端呼叫者ID验证方案的新方法。我们设计了基于SMS和基于时间的CallerDec版本，可与现有的座机、蜂窝和VoIP网络结合使用，并可由用户自由部署。我们将这两种CallerDec方案实现为基于Android的手机应用程序，并验证了它们在各种场景中检测欺骗攻击的有效性。",
        "title_zh": "端到端检测呼叫者ID欺骗攻击",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc15.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 15",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2016.2596286",
        "title": "A Provably-Secure Cross-Domain Handshake Scheme with Symptoms-Matching for Mobile Healthcare Social Network",
        "authors": "Debiao He, Neeraj Kumar, Huaqun Wang, Lina Wang, Kim-Kwang Raymond Choo, Alexey V. Vinel",
        "abstract": "With rapid developments of sensor, wireless and mobile communication technologies, Mobile Healthcare Social Networks (MHSNs) have emerged as a popular means of communication in healthcare services. Within MHSNs, patients can use their mobile devices to securely share their experiences, broaden their understanding of the illness or symptoms, form a supportive network, and transmit information (e.g., state of health and new symptoms) between users and other stake holders (e.g., medical center). Despite the benefits afforded by MHSNs, there are underlying security and privacy issues (e.g., due to the transmission of messages via a wireless channel). The handshake scheme is an important cryptographic mechanism, which can provide secure communication in MHSNs (e.g., anonymity and mutual authentication between users, such as patients). In this paper, we present a new framework for the handshake scheme in MHSNs, which is based on hierarchical identity-based cryptography. We then construct an efficient Cross-Domain HandShake (CDHS) scheme that allows symptoms-matching within MHSNs. For example, using the proposed CDHS scheme, two patients registered with different healthcare centers can achieve mutual authentication and generate a session key for future secure communications. We then prove the security of the scheme, and a comparative summary demonstrates that the proposed CDHS scheme requires fewer computation and lower communication costs. We also implement the proposed CDHS scheme and three related schemes in a proof of concept Android app to demonstrate utility of the scheme. Findings from the evaluations demonstrate that the proposed CDHS scheme achieves a reduction of 18.14 and 5.41 percent in computation cost and communication cost, in comparison to three other related handshake schemes.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "随着传感器、无线和移动通信技术的快速发展，移动医疗社交网络已经成为医疗服务中一种流行的通信方式。在MHSNs中，患者可以使用他们的移动设备安全地分享他们的经历，扩大他们对疾病或症状的了解，形成支持网络，并在用户和其他利益相关者(如医疗中心)之间传递信息(如健康状况和新症状)。尽管MHSNs提供了好处，但是存在潜在的安全和隐私问题(例如，由于通过无线信道传输消息)。握手方案是一种重要的加密机制，它可以在MHSNs中提供安全通信(例如，匿名和用户(如患者)之间的相互认证)。在本文中，我们提出了一个新的基于分层身份加密的握手方案框架。然后，我们构建了一个有效的跨域握手(CDHS)方案，允许症状在MHSNs内匹配。例如，使用所提出的CDHS方案，在不同医疗保健中心注册的两个患者可以实现相互认证，并为将来的安全通信生成会话密钥。然后我们证明了该方案的安全性，并通过比较总结表明，所提出的CDHS方案需要更少的计算量和更低的通信开销。我们还在一个概念验证Android应用程序中实现了所提出的CDHS方案和三个相关方案，以展示该方案的实用性。评估结果表明，与其他三种相关的握手方案相比，所提出的CDHS方案在计算成本和通信成本方面分别减少了18.14%和5.41%。",
        "title_zh": "一个可证明的跨域握手方案，具有移动医疗社交网络症状匹配的症状",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc15.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 15",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2016.2622261",
        "title": "PrivateZone: Providing a Private Execution Environment Using ARM TrustZone",
        "authors": "Jin Soo Jang, Changho Choi, Jae-Hyuk Lee, Nohyun Kwak, Seongman Lee, Yeseul Choi, Brent ByungHoon Kang",
        "abstract": "ARM TrustZone is widely used to provide a Trusted Execution Environment (TEE) for mobile devices. However, the use of TrustZone is limited because TrustZone resources are only available for some pre-authorized applications. In other words, only alliances of the TrustZone OS vendors and device manufacturers can use TrustZone to secure their services. To help overcome this problem, we designed the PrivateZone framework to enable individual developers to utilize TrustZone resources. Using PrivateZone, developers can run Security Critical Logics (SCL) in a Private Execution Environment (PrEE). The advantage of PrivateZone is its leveraging of TrustZone resources without undermining the security of existing services in the TEE. To guarantee this, PrivateZone creates a PrEE using a memory region that is isolated from both the Rich Execution Environment (REE) and TEE. In this paper, we describe the design and implementation of PrivateZone. The prototype of PrivateZone was implemented on an Arndale board with a Cortex-A15 dual-core processor. We built PrivateZone by exploring both security and virtualization extensions of the ARM architecture. To illustrate the usage and the efficacy of PrivateZone, we developed an Android application based on PrivateZone framework, and evaluated the performance overhead imposed on the OS in the REE and SCLs in the PrEE.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "ARM TrustZone被广泛用于为移动设备提供可信执行环境(TEE)。但是，TrustZone的使用受到限制，因为TrustZone资源仅可用于一些预授权的应用程序。换句话说，只有TrustZone操作系统供应商和设备制造商的联盟才能使用TrustZone来保护他们的服务。为了帮助克服这个问题，我们设计了PrivateZone框架，使个人开发人员能够利用TrustZone资源。使用PrivateZone，开发人员可以在私有执行环境(PrEE)中运行安全关键逻辑(SCL)。PrivateZone的优势在于它利用TrustZone资源，而不会破坏TEE中现有服务的安全性。为了保证这一点，PrivateZone使用与富执行环境(rEE)和tee隔离的内存区域创建了一个PrEE。本文描述了PrivateZone的设计和实现。PrivateZone的原型是在配有Cortex-A15双核处理器的Arndale板上实现的。我们通过探索ARM架构的安全性和虚拟化扩展来构建PrivateZone。为了说明PrivateZone的用法和功效，我们开发了一个基于PrivateZone框架的Android应用程序，并评估了REE中的操作系统和PrEE中的SCL的性能开销。",
        "title_zh": "私人区域：使用ARM Trustzone提供私人执行环境",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc15.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 15",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2016.2609930",
        "title": "Towards Privacy-Preserving and Practical Image-Centric Social Discovery",
        "authors": "Xingliang Yuan, Xinyu Wang, Cong Wang, Anna Cinzia Squicciarini, Kui Ren",
        "abstract": "Images are becoming one of the key enablers of user connectivity in social media applications. Many of them are directly exploring image content to suggest new friends with similar interests. To handle the explosive volumes of images, one common trend is to leverage the public cloud as their robust service backend. Despite the convenience, exposing content-rich images to the cloud inevitably raises acute privacy concerns. In this paper, we propose a privacy-preserving architecture for image-centric social discovery services, designed to function over encrypted images. We first adopt the effective Bag-of-Words model to extract the “visual content” of users’ images into respective image profile vectors. We then model the core problem as similarity retrieval of encrypted high-dimensional vectors. To achieve scalable services over millions of encrypted images, we design a secure and efficient index structure, which enables practical and accurate social discovery from the cloud, without revealing any image profile or image content. For completeness, we further enrich our service with secure updates, facilitating user's image update. Our implementation is deployed at an Android phone and Amazon Cloud, and extensive experiments are conducted on a large Flickr image dataset which demonstrates the desired quality of services.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "图片正在成为社交媒体应用中用户连接的关键因素之一。他们中的许多人直接探索图像内容以建议具有相似兴趣的新朋友。为了处理爆炸式增长的图像量，一个常见的趋势是利用公共云作为其强大的服务后端。尽管很方便，但将内容丰富的图像暴露在云中不可避免地会引发严重的隐私问题。在本文中，我们提出了一个隐私保护架构，用于以图像为中心的社会发现服务，旨在对加密图像起作用。我们首先采用有效的词袋模型将用户图像的“视觉内容”提取到相应的图像轮廓向量中。然后，我们将核心问题建模为加密高维向量的相似性检索。为了在数百万张加密图像上实现可扩展的服务，我们设计了一种安全高效的索引结构，它能够从云中实现实用而准确的社交发现，而不会泄露任何图像配置文件或图像内容。为了完整性，我们进一步丰富了我们的安全更新服务，方便用户的图像更新。我们的实现部署在Android手机和亚马逊云上，并在一个大型Flickr图像数据集上进行了广泛的实验，展示了所需的服务质量。",
        "title_zh": "致力于保护隐私和实用的以图像为中心的社会发现",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc15.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 15",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2014.2320731",
        "title": "Context-Based Access Control Systems for Mobile Devices",
        "authors": "Bilal Shebaro, Oyindamola Oluwatimi, Elisa Bertino",
        "abstract": "Mobile Android applications often have access to sensitive data and resources on the user device. Misuse of this data by malicious applications may result in privacy breaches and sensitive data leakage. An example would be a malicious application surreptitiously recording a confidential business conversation. The problem arises from the fact that Android users do not have control over the application capabilities once the applications have been granted the requested privileges upon installation. In many cases, however, whether an application may get a privilege depends on the specific user context and thus we need a context-based access control mechanism by which privileges can be dynamically granted or revoked to applications based on the specific context of the user. In this paper we propose such an access control mechanism. Our implementation of context differentiates between closely located sub-areas within the same location. We have modified the Android operating system so that context-based access control restrictions can be specified and enforced. We have performed several experiments to assess the efficiency of our access control mechanism and the accuracy of context detection.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "移动Android应用程序通常可以访问用户设备上的敏感数据和资源。恶意应用程序滥用这些数据可能会导致隐私泄露和敏感数据泄漏。一个例子是一个恶意的应用程序偷偷记录一个机密的商业对话。这个问题源于这样一个事实，即一旦应用程序在安装时被授予所请求的特权，Android用户就不能控制应用程序的能力。然而，在许多情况下，应用程序是否可以获得特权取决于特定的用户上下文，因此我们需要一种基于上下文的访问控制机制，通过这种机制，可以根据用户的特定上下文动态地授予或撤销应用程序特权。本文提出了这样一种访问控制机制。我们的上下文实现在同一位置内的紧密定位的子区域之间进行区分。我们修改了Android操作系统，以便可以指定和执行基于上下文的访问控制限制。我们进行了几个实验来评估我们的访问控制机制的效率和上下文检测的准确性。",
        "title_zh": "基于上下文的移动设备访问控制系统",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc12.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 12",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2013.2297709",
        "title": "Continuous and Transparent User Identity Verification for Secure Internet Services",
        "authors": "Andrea Ceccarelli, Leonardo Montecchi, Francesco Brancati, Paolo Lollini, Angelo Marguglio, Andrea Bondavalli",
        "abstract": "Session management in distributed Internet services is traditionally based on username and password, explicit logouts and mechanisms of user session expiration using classic timeouts. Emerging biometric solutions allow substituting username and password with biometric data during session establishment, but in such an approach still a single verification is deemed sufficient, and the identity of a user is considered immutable during the entire session. Additionally, the length of the session timeout may impact on the usability of the service and consequent client satisfaction. This paper explores promising alternatives offered by applying biometrics in the management of sessions. A secure protocol is defined for perpetual authentication through continuous user verification. The protocol determines adaptive timeouts based on the quality, frequency and type of biometric data transparently acquired from the user. The functional behavior of the protocol is illustrated through Matlab simulations, while model-based quantitative analysis is carried out to assess the ability of the protocol to contrast security attacks exercised by different kinds of attackers. Finally, the current prototype for PCs and Android smartphones is discussed.",
        "files": {
            "openAccessPdf": "https://flore.unifi.it/bitstream/2158/876966/5/Ceccarelli2015-TDSC.pdf"
        },
        "abstract_zh": "传统上，分布式互联网服务中的会话管理基于用户名和密码、显式注销以及使用传统超时的用户会话到期机制。新兴的生物测定解决方案允许在会话建立期间用生物测定数据替换用户名和密码，但是在这种方法中，单次验证仍然被认为是足够的，并且用户的身份被认为在整个会话期间是不可改变的。此外，会话超时的长度可能会影响服务的可用性以及随之而来的客户端满意度。本文探讨了生物识别技术在会话管理中的应用前景。安全协议被定义为通过连续的用户验证进行永久认证。该协议基于从用户透明获取的生物特征数据的质量、频率和类型来确定自适应超时。通过Matlab仿真说明了该协议的功能行为，同时进行了基于模型的定量分析，以评估该协议对抗不同类型攻击者实施的安全攻击的能力。最后，讨论了当前用于PC和Android智能手机的原型。",
        "title_zh": "安全互联网服务的连续且透明的用户身份验证",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc12.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 12",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2015.2399313",
        "title": "A Hotness Filter of Files for Reliable Non-Volatile Memory Systems",
        "authors": "Chin-Hsien Wu, Po-Han Wu, Kuo-Long Chen, Wen-Yen Chang, Kun-Cheng Lai",
        "abstract": "Flash memory has been widely utilized in embedded systems and consumer electronics, because of its low-power consumption, high-performance access, non-volatility, and shock resistance. A flash-memory device is different from a typical hard-disk device and requires a sophisticated management method to improve the reliable endurance and provide the efficient storage management. To improve the reliable endurance and provide the efficient storage management, the previous works have demonstrated that the identification of the frequently used data and the least recently used data is a key point. In this paper, we will propose a hotness filter of files to calculate how the files are accessed (i.e., reads and writes) intensively. The proposed filter is designed specifically to distinguish between hot and cold files by considering the characteristics of non-volatile memory systems and Android systems. In the experiments, we have implemented the hotness filter in a real Android system (e.g., Asus Nexus 7) and demonstrated that the proposed filter can correctly identify hot and cold files without significant overhead.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "闪存因其低功耗、高性能访问、非易失性和抗冲击等优点，已广泛应用于嵌入式系统和消费电子产品中。闪存设备不同于典型的硬盘设备，需要复杂的管理方法来提高可靠性和提供有效的存储管理。为了提高可靠的耐久性和提供有效的存储管理，先前的工作已经证明识别频繁使用的数据和最近最少使用的数据是一个关键点。在本文中，我们将提出一个文件热度过滤器来计算文件的访问(即读写)强度。所提出的过滤器是专门设计来通过考虑非易失性存储器系统和Android系统的特征来区分热和冷文件的。在实验中，我们在真实的Android系统(例如，华硕Nexus 7)中实现了热度过滤器，并证明了所提出的过滤器可以正确地识别热和冷文件，而没有显著的开销。",
        "title_zh": "可靠的非易失性存储系统的文件热过滤器",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc12.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 12",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2014.2355839",
        "title": "A Probabilistic Discriminative Model for Android Malware Detection with Decompiled Source Code",
        "authors": "Lei Cen, Christopher S. Gates, Luo Si, Ninghui Li",
        "abstract": "Mobile devices are an important part of our everyday lives, and the Android platform has become a market leader. In recent years a number of approaches for Android malware detection have been proposed, using permissions, source code analysis, or dynamic analysis. In this paper, we propose to use a probabilistic discriminative model based on regularized logistic regression for Android malware detection. Through extensive experimental evaluation, we demonstrate that it can generate probabilistic outputs with highly accurate classification results. In particular, we propose to use Android API calls as features extracted from decompiled source code, and analyze and explore issues in feature granularity, feature representation, feature selection, and regularization. We show that the probabilistic discriminative model also works well with permissions, and substantially outperforms the state-of-the-art methods for Android malware detection with application permissions. Furthermore, the discriminative learning model achieves the best detection results by combining both decompiled source code and application permissions. To the best of our knowledge, this is the first research that proposes probabilistic discriminative model for Android malware detection with a thorough study of desired representation of decompiled source code and is the first research work for Android malware detection task that combines both analysis of decompiled source code and application permissions.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "移动设备是我们日常生活的重要组成部分，Android平台已经成为市场领导者。近年来，已经提出了许多用于Android恶意软件检测的方法，使用权限、源代码分析或动态分析。在本文中，我们提出使用基于正则化逻辑回归的概率判别模型来检测Android恶意软件。通过大量的实验评估，我们证明了它可以生成具有高精度分类结果的概率输出。特别地，我们建议使用Android API调用作为从反编译源代码中提取的特征，并分析和探索特征粒度、特征表示、特征选择和正则化方面的问题。我们表明，概率判别模型也可以很好地与权限一起工作，并大大优于应用程序权限的Android恶意软件检测的最新方法。此外，判别学习模型通过结合反编译的源代码和应用程序权限来实现最佳检测结果。据我们所知，这是第一个通过彻底研究反编译源代码的期望表示来提出Android恶意软件检测的概率判别模型的研究，也是第一个结合反编译源代码和应用程序权限分析的Android恶意软件检测任务的研究工作。",
        "title_zh": "源代码，用于Android恶意软件检测的概率歧视模型",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc12.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 12",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2014.2366457",
        "title": "Towards Automated Risk Assessment and Mitigation of Mobile Applications",
        "authors": "Yiming Jing, Gail-Joon Ahn, Ziming Zhao, Hongxin Hu",
        "abstract": "Mobile operating systems, such as Apple's iOS and Google's Android, have supported a ballooning market of feature-rich mobile applications. However, helping users understand and mitigate security risks of mobile applications is still an ongoing challenge. While recent work has developed various techniques to reveal suspicious behaviors of mobile applications, there exists little work to answer the following question: are those behaviors necessarily inappropriate? In this paper, we seek an approach to cope with such a challenge and present a continuous and automated risk assessment framework called RiskMon that uses machine-learned ranking to assess risks incurred by users' mobile applications, especially Android applications. RiskMon combines users' coarse expectations and runtime behaviors of trusted applications to generate a risk assessment baseline that captures appropriate behaviors of applications. With the baseline, RiskMon assigns a risk score on every access attempt on sensitive information and ranks applications by their cumulative risk scores. Furthermore, we demonstrate how RiskMon supports risk mitigation with automated permission revocation. We also discuss a proof-of-concept implementation of RiskMon as an extension of the Android mobile platform and provide both system evaluation and usability study of our methodology.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "苹果的iOS和谷歌的Android等移动操作系统支持了功能丰富的移动应用市场的不断膨胀。然而，帮助用户理解和减轻移动应用的安全风险仍然是一个持续的挑战。虽然最近的工作已经开发了各种技术来揭示移动应用程序的可疑行为，但几乎没有工作来回答以下问题:这些行为一定是不适当的吗？在本文中，我们寻求一种方法来应对这样的挑战，并提出一种称为RiskMon的连续自动化风险评估框架，该框架使用机器学习排名来评估用户的移动应用程序(尤其是Android应用程序)引发的风险。RiskMon将用户的粗略期望和可信应用程序的运行时行为结合起来，以生成一个风险评估基线，该基线捕获应用程序的适当行为。有了基准，RiskMon会对敏感信息的每次访问尝试分配一个风险分值，并根据应用程序的累积风险分值对其进行排名。此外，我们展示了RiskMon如何通过自动化的权限撤销来支持风险缓解。我们还讨论了作为Android移动平台扩展的RiskMon的概念验证实现，并提供了我们方法的系统评估和可用性研究。",
        "title_zh": "进行自动化风险评估和缓解移动应用程序",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc12.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 12",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2015.2443795",
        "title": "My Privacy My Decision: Control of Photo Sharing on Online Social Networks",
        "authors": "Kaihe Xu, Yuanxiong Guo, Linke Guo, Yuguang Fang, Xiaolin Li",
        "abstract": "Photo sharing is an attractive feature which popularizes online social networks (OSNs). Unfortunately, it may leak users’ privacy if they are allowed to post, comment, and tag a photo freely. In this paper, we attempt to address this issue and study the scenario when a user shares a photo containing individuals other than himself/herself (termed co-photo for short). To prevent possible privacy leakage of a photo, we design a mechanism to enable each individual in a photo be aware of the posting activity and participate in the decision making on the photo posting. For this purpose, we need an efficient facial recognition (FR) system that can recognize everyone in the photo. However, more demanding privacy setting may limit the number of the photos publicly available to train the FR system. To deal with this dilemma, our mechanism attempts to utilize users’ private photos to design a personalized FR system specifically trained to differentiate possible photo co-owners without leaking their privacy. We also develop a distributed consensus-based method to reduce the computational complexity and protect the private training set. We show that our system is superior to other possible approaches in terms of recognition ratio and efficiency. Our mechanism is implemented as a proof of concept Android application on Facebook’s platform.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "照片分享是一个吸引人的功能，它普及了在线社交网络。不幸的是，如果允许用户自由发布、评论和标记照片，可能会泄露用户的隐私。在本文中，我们试图解决这个问题，并研究当用户共享包含除他/她自己以外的个人的照片时的场景(简称为共同照片)。为了防止照片可能的隐私泄露，我们设计了一种机制，使照片中的每个人都知道发布活动，并参与照片发布的决策。为此，我们需要一个高效的面部识别(FR)系统，可以识别照片中的每个人。然而，更苛刻的隐私设置可能会限制可公开用于训练FR系统的照片的数量。为了处理这种困境，我们的机制试图利用用户的私人照片来设计一个个性化的FR系统，该系统经过专门训练以区分可能的照片共同所有者，而不会泄露他们的隐私。我们还开发了一个分布式的基于共识的方法，以减少计算复杂度和保护私人训练集。我们表明，我们的系统在识别率和效率方面优于其他可能的方法。我们的机制在脸书的平台上被实现为一个概念验证的Android应用程序。",
        "title_zh": "我的隐私我的决定：在线社交网络上的照片共享",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc14.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 14",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TDSC.2015.2479613",
        "title": "A Secure, Usable, and Transparent Middleware for Permission Managers on Android",
        "authors": "Daibin Wang, Haixia Yao, Yingjiu Li, Hai Jin, Deqing Zou, Robert H. Deng",
        "abstract": "Android’s permission system offers an all-or-nothing choice when installing an app. To make it more flexible and fine-grained, users may choose a popular app tool, called permission manager, to selectively grant or revoke an app’s permissions at runtime. A fundamental requirement for such permission manager is that the granted or revoked permissions should be enforced faithfully. However, we discover that none of existing permission managers meet this requirement due to permission leaks, in which an unprivileged app can exercise certain permissions which are revoked or not-granted through communicating with a privileged app.To address this problem, we propose a secure, usable, and transparent OS-level middleware for any permission manager to defend against the permission leaks. The middleware is provably secure in a sense that it can effectively block all possible permission leaks.The middleware is designed to have a minimal impact on the usability of running apps. In addition, the middleware is transparent to users and app developers and it requires minor modifications on permission managers and Android OS. Finally, our evaluation shows that the middleware incurs relatively low performance overhead and power consumption.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android的权限系统在安装应用程序时提供了全有或全无的选择。为了更加灵活和细粒度，用户可以选择一个流行的应用程序工具，称为权限管理器，在运行时选择性地授予或撤销应用程序的权限。对这种权限管理器的一个基本要求是，应该忠实地执行授予或撤销的权限。然而，我们发现，由于权限泄漏，现有的权限管理器都不满足这一要求，在权限泄漏中，非特权应用程序可以通过与特权应用程序通信来行使某些被撤销或未授予的权限。为了解决这个问题，我们提出了一个安全、可用、透明的操作系统级中间件，用于任何权限管理器来防御权限泄漏。该中间件在某种意义上是可证明安全的，它可以有效地阻止所有可能的权限泄漏。中间件被设计成对正在运行的应用程序的可用性有最小的影响。此外，中间件对用户和应用程序开发人员是透明的，它只需要对权限管理器和Android操作系统进行微小的修改。最后，我们的评估表明，该中间件的性能开销和功耗相对较低。",
        "title_zh": "Android上的许可经理的安全，可用和透明的中间件",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tdsc/tdsc14.html",
        "conf_title": "IEEE Transactions on Dependable and Secure Computing, Volume 14",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1186/s42400-022-00119-8",
        "title": "On building machine learning pipelines for Android malware detection: a procedural survey of practices, challenges and opportunities",
        "authors": "Masoud Mehrabi Koushki, Ibrahim Y. Abualhaol, Anandharaju Durai Raju, Yang Zhou, Ronnie Salvador Giagone, Shengqiang Huang",
        "abstract": "",
        "files": {
            "openAccessPdf": "https://cybersecurity.springeropen.com/counter/pdf/10.1186/s42400-022-00119-8"
        },
        "title_zh": "为Android恶意软件检测构建机器学习管道:实践、挑战和机遇的程序性调查",
        "abstract_zh": "",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/cybersec/cybersec5.html",
        "conf_title": "Cybersecurity, Volume 5",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1186/s42400-023-00139-y",
        "title": "Android malware category detection using a novel feature vector-based machine learning model",
        "authors": "Hashida Haidros Rahima Manzil, S. Manohar Naik",
        "abstract": "",
        "files": {
            "openAccessPdf": "https://cybersecurity.springeropen.com/counter/pdf/10.1186/s42400-023-00139-y"
        },
        "title_zh": "基于新特征向量的机器学习模型的Android恶意软件类别检测",
        "abstract_zh": "",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/cybersec/cybersec6.html",
        "conf_title": "Cybersecurity, Volume 6",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1186/s42400-023-00151-2",
        "title": "AppChainer: investigating the chainability among payloads in android applications",
        "authors": "Xiaobo Xiang, Yue Jiang, Qingli Guo, Xiu Zhang, Xiaorui Gong, Baoxu Liu",
        "abstract": "",
        "files": {
            "openAccessPdf": "https://cybersecurity.springeropen.com/counter/pdf/10.1186/s42400-023-00151-2"
        },
        "title_zh": "AppChainer:调查android应用程序中有效负载之间的链接能力",
        "abstract_zh": "",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/cybersec/cybersec6.html",
        "conf_title": "Cybersecurity, Volume 6",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1186/s42400-018-0006-7",
        "title": "DroidEcho: an in-depth dissection of malicious behaviors in Android applications",
        "authors": "Guozhu Meng, Ruitao Feng, Guangdong Bai, Kai Chen, Yang Liu",
        "abstract": "",
        "files": {
            "openAccessPdf": "https://cybersecurity.springeropen.com/track/pdf/10.1186/s42400-018-0006-7.pdf"
        },
        "abstract_zh": "",
        "title_zh": "Droidecho：在Android应用中对恶意行为的深入解剖",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/cybersec/cybersec1.html",
        "conf_title": "Cybersecurity, Volume 1",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1155/2020/6726147",
        "title": "Combat Mobile Evasive Malware via Skip-Gram-Based Malware Detection",
        "authors": "Alper Egitmen, Irfan Bulut, R. Can Aygun, Ayse Bilge Gunduz, Omer Seyrekbasan, Ali Gökhan Yavuz",
        "abstract": "Android malware detection is an important research topic in the security area. There are a variety of existing malware detection models based on static and dynamic malware analysis. However, most of these models are not very successful when it comes to evasive malware detection. In this study, we aimed to create a malware detection model based on a natural language model called skip-gram to detect evasive malware with the highest accuracy rate possible. In order to train and test our proposed model, we used an up-to-date malware dataset called Argus Android Malware Dataset (AMD) since the AMD contains various evasive malware families and detailed information about them. Meanwhile, for the benign samples, we used Comodo Android Benign Dataset. Our proposed model starts with extracting skip-gram-based features from instruction sequences of Android applications. Then it applies several machine learning algorithms to classify samples as benign or malware. We tested our proposed model with two different scenarios. In the first scenario, the random forest-based classifier performed with 95.64% detection accuracy on the entire dataset and 95% detection accuracy against evasive only samples. In the second scenario, we created a test dataset that contained zero-day malware samples only. For the training set, we did not use any sample that belongs to the malware families in the test set. The random forest-based model performed with 37.36% accuracy rate against zero-day malware. In addition, we compared our proposed model’s malware detection performance against several commercial antimalware applications using VirusTotal API. Our model outperformed 7 out of 10 antimalware applications and tied with one of them on the same test scenario.",
        "files": {
            "openAccessPdf": "https://downloads.hindawi.com/journals/scn/2020/6726147.pdf"
        },
        "abstract_zh": "Android恶意软件检测是安全领域的一个重要研究课题。基于静态和动态恶意软件分析，存在各种现有的恶意软件检测模型。然而，当涉及到规避恶意软件检测时，这些模型中的大多数都不太成功。在这项研究中，我们旨在创建一个基于自然语言模型的恶意软件检测模型，称为skip-gram，以尽可能高的准确率检测规避的恶意软件。为了训练和测试我们提出的模型，我们使用了最新的恶意软件数据集，称为Argus Android恶意软件数据集(AMD)，因为AMD包含各种逃避的恶意软件家族和关于它们的详细信息。同时，对于良性样本，我们使用了Comodo Android良性数据集。我们提出的模型首先从Android应用程序的指令序列中提取基于跳格的特征。然后，它应用几种机器学习算法将样本分类为良性或恶意软件。我们用两个不同的场景测试了我们提出的模型。在第一种情况下，随机的基于森林的分类器对整个数据集执行了95.64%的检测准确度，对仅回避的样本执行了95%的检测准确度。在第二个场景中，我们创建了一个仅包含零日恶意软件样本的测试数据集。对于训练集，我们没有使用任何属于测试集中恶意软件家族的样本。基于随机森林的模型对零日恶意软件的准确率为37.36%。此外，我们使用VirusTotal API将我们提出的模型的恶意软件检测性能与几个商业反恶意软件应用程序进行了比较。我们的模型超过了10个反恶意软件应用程序中的7个，并在相同的测试场景中与其中一个打成平手。",
        "title_zh": "通过基于Skip-Gram的恶意软件检测来打击移动规避型恶意软件",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn2020.html",
        "conf_title": "Security and Communication Networks, Volume 2020",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1155/2020/8630748",
        "title": "On-Device Detection of Repackaged Android Malware via Traffic Clustering",
        "authors": "Gaofeng He, Bingfeng Xu, Lu Zhang, Haiting Zhu",
        "abstract": "Malware has become a significant problem on the Android platform. To defend against Android malware, researchers have proposed several on-device detection methods. Typically, these on-device detection methods are composed of two steps: (i) extracting the apps’ behavior features from the mobile devices and (ii) sending the extracted features to remote servers (such as a cloud platform) for analysis. By monitoring the behaviors of the apps that are running on mobile devices, available methods can detect suspicious applications (simply, apps) accurately. However, mobile devices are typically resource limited. The feature extraction and massive data transmission might consume substantial power and CPU resources; thus, the performance of mobile devices will be degraded. To address this issue, we propose a novel method for detecting Android malware by clustering apps’ traffic at the edge computing nodes. First, a new integrated architecture of the cloud, edge, and mobile devices for Android malware detection is presented. Then, for repackaged Android malware, the network traffic content and statistics are extracted at the edge as detection features. Finally, in the cloud, similarities between apps are calculated, and the similarity values are automatically clustered to separate the original apps and the malware. The experimental results demonstrate that the proposed method can detect repackaged Android malware with high precision and with a minimal impact on the performance of mobile devices.",
        "files": {
            "openAccessPdf": "https://downloads.hindawi.com/journals/scn/2020/8630748.pdf"
        },
        "abstract_zh": "恶意软件已经成为Android平台上的一个重大问题。为了防御Android恶意软件，研究人员提出了几种设备上的检测方法。通常，这些设备上的检测方法由两个步骤组成:(I)从移动设备中提取应用的行为特征，以及(ii)将提取的特征发送到远程服务器(如云平台)进行分析。通过监控运行在移动设备上的应用程序的行为，可用的方法可以准确地检测可疑的应用程序(简称为应用程序)。然而，移动设备通常是资源有限的。特征提取和大量数据传输可能消耗大量功率和CPU资源；因此，移动设备的性能将会下降。为了解决这个问题，我们提出了一种新的方法，通过在边缘计算节点聚集应用程序的流量来检测Android恶意软件。首先，提出了一种新的用于Android恶意软件检测的云、边缘和移动设备的集成架构。然后，对于重新打包的Android恶意软件，在边缘提取网络流量内容和统计数据作为检测特征。最后，在云中，计算应用程序之间的相似性，并自动对相似性值进行聚类，以分离原始应用程序和恶意软件。实验结果表明，该方法能够在对移动设备性能影响最小的情况下，高精度地检测出重新打包的Android恶意软件。",
        "title_zh": "通过流量聚类在设备上检测重新打包的Android恶意软件",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn2020.html",
        "conf_title": "Security and Communication Networks, Volume 2020",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1155/2020/8863617",
        "title": "Android Malware Detection Based on a Hybrid Deep Learning Model",
        "authors": "Tianliang Lu, Yanhui Du, Li Ouyang, Qiuyu Chen, Xirui Wang",
        "abstract": "In recent years, the number of malware on the Android platform has been increasing, and with the widespread use of code obfuscation technology, the accuracy of antivirus software and traditional detection algorithms is low. Current state-of-the-art research shows that researchers started applying deep learning methods for malware detection. We proposed an Android malware detection algorithm based on a hybrid deep learning model which combines deep belief network (DBN) and gate recurrent unit (GRU). First of all, analyze the Android malware; in addition to extracting static features, dynamic behavioral features with strong antiobfuscation ability are also extracted. Then, build a hybrid deep learning model for Android malware detection. Because the static features are relatively independent, the DBN is used to process the static features. Because the dynamic features have temporal correlation, the GRU is used to process the dynamic feature sequence. Finally, the training results of DBN and GRU are input into the BP neural network, and the final classification results are output. Experimental results show that, compared with the traditional machine learning algorithms, the Android malware detection model based on hybrid deep learning algorithms has a higher detection accuracy, and it also has a better detection effect on obfuscated malware.",
        "files": {
            "openAccessPdf": "https://downloads.hindawi.com/journals/scn/2020/8863617.pdf"
        },
        "abstract_zh": "近年来，Android平台上的恶意软件数量不断增加，而随着代码混淆技术的广泛使用，杀毒软件和传统检测算法的准确率较低。当前最先进的研究表明，研究人员开始应用深度学习方法进行恶意软件检测。提出了一种基于混合深度学习模型的Android恶意软件检测算法，该模型结合了深度信念网络(DBN)和门递归单元(GRU)。首先分析一下安卓恶意软件；除了提取静态特征，还提取了抗抖动能力强的动态行为特征。然后，构建Android恶意软件检测的混合深度学习模型。因为静态特征是相对独立的，所以使用DBN来处理静态特征。由于动态特征具有时间相关性，因此采用GRU对动态特征序列进行处理。最后，将DBN和GRU的训练结果输入BP神经网络，输出最终的分类结果。实验结果表明，与传统的机器学习算法相比，基于混合深度学习算法的Android恶意软件检测模型具有更高的检测准确率，对混淆恶意软件也有更好的检测效果。",
        "title_zh": "基于混合深度学习模型的Android恶意软件检测",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn2020.html",
        "conf_title": "Security and Communication Networks, Volume 2020",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1155/2020/8861639",
        "title": "cHybriDroid: A Machine Learning-Based Hybrid Technique for Securing the Edge Computing",
        "authors": "Afifa Maryam, Usman Ahmed, Muhammad Aleem, Jerry Chun-Wei Lin, Muhammad Arshad Islam, Muhammad Azhar Iqbal",
        "abstract": "Smart phones are an integral component of the mobile edge computing (MEC) framework. Securing the data stored on mobile devices is very crucial for ensuring the smooth operations of cloud services. A growing number of malicious Android applications demand an in-depth investigation to dissect their malicious intent to design effective malware detection techniques. The contemporary state-of-the-art model suggests that hybrid features based on machine learning (ML) techniques could play a significant role in android malware detection. The selection of application’s features plays a very crucial role to capture the appropriate behavioural patterns of malware instances for a useful classification of mobile applications. In this study, we propose a novel hybrid approach to detect android malware, wherein static features in conjunction with dynamic features of smart phone applications are employed. We collect these hybrid features using permissions, intents, and run-time features (such as information leakage, cryptography’s exploitation, and network manipulations) to analyse the effectiveness of the employed techniques for malware detection. We conduct experiments using over 5,000 real-world applications. The outcomes of the study reveal that the proposed set of features has successfully detected malware threats with 97% F-measure results.",
        "files": {
            "openAccessPdf": "https://downloads.hindawi.com/journals/scn/2020/8861639.pdf"
        },
        "abstract_zh": "智能手机是移动边缘计算(MEC)框架不可或缺的组成部分。保护存储在移动设备上的数据对于确保云服务的顺利运行至关重要。越来越多的恶意Android应用程序需要进行深入的调查，以剖析其恶意意图，从而设计有效的恶意软件检测技术。当代最先进的模型表明，基于机器学习(ML)技术的混合特征可以在android恶意软件检测中发挥重要作用。应用程序特征的选择对于捕获恶意软件实例的适当行为模式以对移动应用程序进行有用的分类起着非常关键的作用。在这项研究中，我们提出了一种新的混合方法来检测android恶意软件，其中静态特征与智能手机应用程序的动态特征相结合。我们使用权限、意图和运行时特征(如信息泄漏、密码利用和网络操纵)收集这些混合特征，以分析恶意软件检测所用技术的有效性。我们使用超过5000个真实世界的应用程序进行实验。研究结果显示，所提出的特征集已经成功地检测到恶意软件威胁，F-measure结果为97%。",
        "title_zh": "cHybriDroid:一种基于机器学习的保护边缘计算的混合技术",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn2020.html",
        "conf_title": "Security and Communication Networks, Volume 2020",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1155/2020/8841233",
        "title": "An Android Malware Detection Model Based on DT-SVM",
        "authors": "Min Yang, Xingshu Chen, Yonggang Luo, Hang Zhang",
        "abstract": "In order to improve the accuracy and efficiency of Android malware detection, an Android malware detection model based on decision tree (DT) with support vector machine (SVM) algorithm (DT-SVM) is proposed. Firstly, the original opcode, Dalvik opcode, is extracted by reversing Android software, and the eigenvector of the sample is generated by using the n-gram model. Then, a decision tree is generated via training the sample and updating decision nodes as SVM nodes from the bottom up according to the evaluation result of the test set in the decision path. The model effectively combines DT with SVM. Under the premise of maintaining a high-accuracy decision path, SVM is used to effectively reduce the overfitting problem in DT and thus improve the generalization ability, and maintain the superiority of SVM for the small sample training set. Finally, to test our approach, several simulation experiments are carried out, and the results demonstrate that the improved algorithm has better accuracy and higher speed as compared with other malware detection approaches.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "为了提高Android恶意软件检测的准确性和效率，提出了一种基于决策树和支持向量机SVM算法的Android恶意软件检测模型。首先通过逆向Android软件提取原始操作码Dalvik操作码，利用n-gram模型生成样本的特征向量。然后，根据决策路径中测试集的评估结果，自底向上训练样本并更新决策节点为SVM节点，生成决策树。该模型有效地结合了DT和SVM。在保持高精度决策路径的前提下，利用SVM有效减少DT中的过拟合问题从而提高泛化能力，并保持SVM对于小样本训练集的优越性。最后，为了测试我们的方法，进行了几个仿真实验，实验结果表明，与其他恶意软件检测方法相比，改进的算法具有更好的准确性和更快的速度。",
        "title_zh": "基于DT-SVM的Android恶意软件检测模型",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn2020.html",
        "conf_title": "Security and Communication Networks, Volume 2020",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1155/2021/8814844",
        "title": "Risk Measurement Method of Collusion Privilege Escalation Attacks for Android Apps Based on Feature Weight and Behavior Determination",
        "authors": "Hui Li, Limin Shen, Yuying Wang, Jiayin Feng, Honglei Tan, Zhiming Li",
        "abstract": "To solve the issue of measuring the risk of the application-layer collusion privilege escalation attacks in Android apps, this paper proposed a risk measurement method based on the feature weight and behavior determination. Analytic hierarchy process (AHP) is used to calculate the weight of feature in the feature set extracted from the app. App behavior and attack behavior are modeled by process algebra. The weak equivalent and nonequivalent are introduced to determine the behavior of apps, whereas the measurement function is constructed to calculate the app risk measurement value. In an experiment with three known apps, the measurement values are 0.629, 1, and 0.976. These results are consistent with reality, and the effectiveness and feasibility of the proposed method are verified. Through the benchmark and test set experiments, it can be seen that the measurement value of apps that has weak equivalent to attack behavior is distributed between 0.0468 and 1, and the measurement value distribution is reasonable, which verifies the accuracy and rationality of the method.",
        "files": {
            "openAccessPdf": "https://downloads.hindawi.com/journals/scn/2021/8814844.pdf"
        },
        "abstract_zh": "为解决Android应用中应用层共谋权限提升攻击的风险度量问题，提出了一种基于特征权重和行为判定的风险度量方法。层次分析法(AHP)用于计算从应用程序中提取的特征集中特征的权重。App行为和攻击行为用进程代数建模。引入弱等价和非等价来确定app的行为，构造度量函数来计算app风险度量值。在三个已知应用的实验中，测量值分别为0.629、1和0.976。这些结果与实际相符，验证了该方法的有效性和可行性。通过基准测试和测试集实验可以看出，具有弱等价攻击行为的app的度量值分布在0.0468和1之间，度量值分布合理，验证了该方法的准确性和合理性。",
        "title_zh": "基于特征权重和行为判定的Android应用共谋权限提升攻击风险度量方法",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn2021.html",
        "conf_title": "Security and Communication Networks, Volume 2021",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1155/2021/8847803",
        "title": "YAICD: Yet Another IMSI Catcher Detector in GSM",
        "authors": "Parimah Ziayi, Seyed Mostafa Farmanbar, Mohsen Rezvani",
        "abstract": "In GSM, the network is not authenticated which allows for man-in-the-middle (MITM) attacks. Attackers can track traffic and trace users of cellular networks by creating a rogue base transceiver station (BTS). Such a defect in addition to the need for backward compatibility of mobile networks makes all GSM, UMTS, and LTE networks susceptible to MITMs. These attacks are conducted using IMSI-Catchers (ICs). Most of the solutions proposed for detecting ICs in the literature are based on using specific mobile devices with root access. Also, they cannot identify ICs to which users are not connected. In this paper, we propose an approach called YAICD for detecting ICs in the GSM network. YAICD consists of a sensor that can be installed on Android mobile devices. It detects ICs by extracting 15 parameters from signals received from BTSs. We also established a lab-scale testbed to evaluate YAICD for various detection parameters and for comparing it against existing solutions in the literature. The experimental results show that YAICD not only successfully detects ICs using the parameters but also identifies ICs to which users are not yet connected to the network.",
        "files": {
            "openAccessPdf": "https://downloads.hindawi.com/journals/scn/2021/8847803.pdf"
        },
        "abstract_zh": "在GSM中，网络未经认证，这使得中间人(MITM)攻击成为可能。攻击者可以通过创建流氓基站收发信台(BTS)来跟踪流量并追踪蜂窝网络的用户。除了移动网络需要向后兼容之外，这种缺陷使得所有GSM、UMTS和LTE网络都容易受到MITMs的影响。这些攻击是使用IMSI捕捉器(ICs)进行的。文献中提出的大多数检测ic的解决方案都是基于使用具有root访问权限的特定移动设备。此外，它们无法识别用户未连接的IC。在这篇文章中，我们提出了一种称为YAICD的方法来检测GSM网络中的ICs。YAICD由一个可以安装在Android移动设备上的传感器组成。它通过从BTS接收的信号中提取15个参数来检测ICs。我们还建立了一个实验室规模的试验台，以评估YAICD的各种检测参数，并将其与文献中现有的解决方案进行比较。实验结果表明，YAICD不仅成功地利用参数检测出ICs，而且还识别出用户尚未连接到网络的ICs。",
        "title_zh": "YAICD:GSM中又一个IMSI捕手检测器",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn2021.html",
        "conf_title": "Security and Communication Networks, Volume 2021",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1155/2021/6653076",
        "title": "A Camouflage Text-Based Password Approach for Mobile Devices against Shoulder-Surfing Attack",
        "authors": "Suliman A. Alsuhibany",
        "abstract": "Authentication in mobile devices is inherently vulnerable to attacks and has the weakness of being susceptible to shoulder-surfing attack. Shoulder-surfing attack is a type of attack that uses direct observation techniques such as looking over someone’s shoulder to get information.)is paper aims to introduce a novel way of concealing the password within a contingent of randomly selected entries. In particular, the traditional password concept where what you input is what you get is redefined by proposing the camouflage characters approach. Based on this approach, three defensive techniques are introduced for mobile devices. By using an Android platform, the introduced techniques are implemented. Experimental studies are conducted in order to evaluate both security and usability perspectives. )e empirical results showed that the proposed approach is reasonably resistant against shoulder-surfing attacks and usable for participants. Moreover, it is possible to choose very short passwords, while insuring that the password remains hidden amongst a large number of key presses. Based on the achieved results, the proposed approach is recommended to be a new avenue in the field of security to produce very simple and yet very complicated passwords, to be observed by the attacker, at the same time.",
        "files": {
            "openAccessPdf": "https://downloads.hindawi.com/journals/scn/2021/6653076.pdf"
        },
        "abstract_zh": "移动设备中的认证固有地易受攻击，并且具有易受肩窥攻击的弱点。肩窥攻击是一种使用直接观察技术的攻击，例如越过某人的肩膀获取信息。)本文旨在介绍一种新颖的方法，将密码隐藏在随机选择的条目中。特别是，通过提出伪装字符方法，重新定义了传统的密码概念，即您输入的就是您得到的。基于这种方法，为移动设备引入了三种防御技术。通过使用Android平台，实现了所介绍的技术。进行实验研究是为了评估安全性和可用性。实验结果表明，所提出的方法能够合理地抵抗肩窥攻击，并且对参与者是可用的。此外，可以选择非常短的密码，同时确保密码隐藏在大量按键中。基于所取得的结果，所提出的方法被推荐为安全领域中的一种新方法，以产生非常简单但非常复杂的密码，同时被攻击者观察到。",
        "title_zh": "一种基于伪装文本的移动设备防肩窥密码方案",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn2021.html",
        "conf_title": "Security and Communication Networks, Volume 2021",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1155/2021/6695858",
        "title": "Calibrating Network Traffic with One-Dimensional Convolutional Neural Network with Autoencoder and Independent Recurrent Neural Network for Mobile Malware Detection",
        "authors": "Songjie Wei, Zedong Zhang, Shasha Li, Pengfei Jiang",
        "abstract": "In response to the surging challenge in the number and types of mobile malware targeting smart devices and their sophistication in malicious behavior camouflage, we propose to compose a traffic behavior modeling method based on one-dimensional convolutional neural network with autoencoder and independent recurrent neural network (1DCAE-IndRNN) for mobile malware detection. )e design solves the problem that most existing approaches for mobile malware traffic detection struggle with capturing the network traffic dynamics and the sequential characteristics of anomalies in the traffic. We reconstruct and apply the one-dimensional convolutional neural network to extract local features from multiple network flows. )e autoencoder is applied to digest the principal traffic features from the neural network and is integrated into the independent recurrent neural network construction to highlight the sequential relationship between the highly significant features. In addition, the Softmax function with the LReLU activation function is adjusted and embedded to the neurons of the independent recurrent neural network to effectively alleviate the problem of unstable training.We conduct a series of experiments to evaluate the effectiveness of the proposedmethod and its performance for the 1DCAE-IndRNN-integrated detection procedure. )e detection results of the public Android malware dataset CICAndMal2017 show that the proposed method achieves up to 98% detection accuracy and recall rates with clear advantages over other benchmark methods.",
        "files": {
            "openAccessPdf": "https://downloads.hindawi.com/journals/scn/2021/6695858.pdf"
        },
        "abstract_zh": "针对针对智能设备的移动恶意软件数量和类型的激增以及恶意行为伪装的复杂性，提出一种基于带自动编码器的一维卷积神经网络和独立递归神经网络(1DCAE-IndRNN)的流量行为建模方法用于移动恶意软件检测。)e设计解决了大多数现有的移动恶意软件流量检测方法难以捕捉网络流量动态和流量中异常的顺序特征的问题。我们重构并应用一维卷积神经网络从多个网络流中提取局部特征。)e autoencoder用于从神经网络中提取主要的流量特征，并集成到独立的递归神经网络结构中，以突出高度重要的特征之间的顺序关系。此外，将具有LReLU激活函数的Softmax函数调整并嵌入到独立递归神经网络的神经元中，有效缓解了训练不稳定的问题。我们进行了一系列的实验来评估所提出的方法的有效性及其在1DCAE-IndRNN集成检测过程中的性能。在公开的Android恶意软件数据集CICAndMal2017上的检测结果表明，该方法达到了98%的检测准确率和召回率，与其他基准方法相比具有明显的优势。",
        "title_zh": "用带自动编码器的一维卷积神经网络和独立递归神经网络校准网络流量用于移动恶意软件检测",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn2021.html",
        "conf_title": "Security and Communication Networks, Volume 2021",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1155/2021/5593178",
        "title": "A Mobile Malware Detection Method Based on Malicious Subgraphs Mining",
        "authors": "Yao Du, Mengtian Cui, Xiaochun Cheng",
        "abstract": "As mobile phone is widely used in social network communication, it attracts numerous malicious attacks, which seriously threaten users’ personal privacy and data security. To improve the resilience to attack technologies, structural information analysis has been widely applied in mobile malware detection. However, the rapid improvement of mobile applications has brought an impressive growth of their internal structure in scale and attack technologies. It makes the timely analysis of structural information and malicious feature generation a heavy burden. In this paper, we propose a new Android malware identification approach based on malicious subgraph mining to improve the detection performance of large-scale graph structure analysis. Firstly, function call graphs (FCGs), sensitive permissions, and application programming interfaces (APIs) are generated from the decompiled files of malware. Secondly, two kinds of malicious subgraphs are generated from malware’s decompiled files and put into the feature set. At last, test applications’ safety can be automatically identified and classified into malware families by matching their FCGs with malicious structural features. To evaluate our approach, a dataset of 11,520 malware and benign applications is established. Experimental results indicate that our approach has better performance than three previous works and Androguard.",
        "files": {
            "openAccessPdf": "https://downloads.hindawi.com/journals/scn/2021/5593178.pdf"
        },
        "abstract_zh": "随着手机在社交网络通信中的广泛应用，它吸引了众多的恶意攻击，严重威胁着用户的个人隐私和数据安全。为了提高对攻击技术的抵御能力，结构化信息分析被广泛应用于移动恶意软件检测中。然而，移动应用的快速发展带来了其内部结构在规模和攻击技术上的惊人增长。这使得及时分析结构信息和恶意特征生成成为沉重的负担。为了提高大规模图结构分析的检测性能，提出了一种基于恶意子图挖掘的Android恶意软件识别方法。首先，从恶意软件的反编译文件中生成函数调用图(fcg)、敏感权限和应用程序编程接口(API)。其次，从恶意软件的反编译文件中生成两类恶意子图，并放入特征集中。最后，通过将测试应用程序的fcg与恶意结构特征进行匹配，可以自动识别测试应用程序的安全性并将其归类到恶意程序家族中。为了评估我们的方法，建立了11，520个恶意软件和良性应用程序的数据集。实验结果表明，我们的方法比以前的三个工作和雌雄同体的方法有更好的性能。",
        "title_zh": "一种基于恶意子图挖掘的移动恶意软件检测方法",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn2021.html",
        "conf_title": "Security and Communication Networks, Volume 2021",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1155/2021/5531505",
        "title": "Generalized Proxy Oblivious Signature and Its Mobile Application",
        "authors": "Shin-Yan Chiou, Yi-Xuan He",
        "abstract": "Oblivious signature ensures users select from the specified candidates. However, users can choose only one candidate. This paper proposes a generalized oblivious signature scheme with proxy function. The scheme can be applied to many applications such as multichoice e-voting or e-lottery. Since there have been many applied research studies on e-voting, in this paper, we decided to apply this scheme to e-lottery, which is fair, secure, efficient, multiselect, and agent-based. In the lottery system, the server cannot cheat after a user makes a choice, and no one even the proxy can get any benefits. The signature scheme along with the lottery system is proved secure in the random oracle model. The lottery system is also implemented on Android smartphones. To the best of our knowledge, this is the first work done on a generalized proxy oblivious signature along with a fair and secure multiple-choice e-lottery system.",
        "files": {
            "openAccessPdf": "https://downloads.hindawi.com/journals/scn/2021/5531505.pdf"
        },
        "abstract_zh": "不经意签名确保用户从指定的候选者中进行选择。但是，用户只能选择一个候选人。提出了一种具有代理功能的广义不经意签名方案。该方案可应用于多选择电子投票或电子彩票等多种应用。由于已经有很多关于电子投票的应用研究，在本文中，我们决定将这个方案应用到电子彩票中，它是公平的、安全的、高效的、多重选择的、基于代理的。在彩票系统中，用户做出选择后，服务器不能作弊，任何人甚至代理都不能获得任何利益。签名方案和彩票系统在随机预言模型下被证明是安全的。Android智能手机上也实现了抽奖系统。据我们所知，这是首次对广义代理不经意签名以及公平安全的多项选择电子彩票系统进行研究。",
        "title_zh": "广义代理不经意签名及其移动应用",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn2021.html",
        "conf_title": "Security and Communication Networks, Volume 2021",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1155/2021/5518168",
        "title": "Anonymous Data Reporting Strategy with Dynamic Incentive Mechanism for Participatory Sensing",
        "authors": "Yang Li, Hongtao Song, Yunlong Zhao, Nianmin Yao, Nianbin Wang",
        "abstract": "Participatory sensing is often used in environmental or personal data monitoring, wherein a number of participants collect data using their mobile intelligent devices for earning the incentives. However, a lot of additional information is submitted along with the data, such as the participant’s location, IP and incentives. This multimodal information implicitly links to the participant’s identity and exposes the participant’s privacy. In order to solve the issue of these multimodal information associating with participants’ identities, this paper proposes a protocol to ensure anonymous data reporting while providing a dynamic incentive mechanism simultaneously. The proposed protocol first establishes a submission schedule by anonymously selecting a slot in a vector by each member where every member and system entities are oblivious of other members’ slots and then uses this schedule to submit the all members’ data in an encoded vector through bulk transfer and multiplayer dining cryptographers networks (DC-nets) . Hence, the link between the data and the member’s identity is broken. The incentive mechanism uses blind signature to anonymously mark the price and complete the micropayments transfer. Finally, the theoretical analysis of the protocol proves the anonymity, integrity, and efficiency of this protocol. We implemented and tested the protocol on Android phones. The experiment results show that the protocol is efficient for low latency tolerable applications, which is the cases with most participatory sensing applications, and they also show the advantage of our optimization over similar anonymous data reporting protocols.",
        "files": {
            "openAccessPdf": "https://downloads.hindawi.com/journals/scn/2021/5518168.pdf"
        },
        "abstract_zh": "参与式传感通常用于环境或个人数据监控，其中许多参与者使用他们的移动智能设备收集数据，以获得奖励。但是，许多附加信息会随数据一起提交，如参与者的位置、IP和激励措施。这种多模态信息隐含地链接到参与者的身份，并且暴露了参与者的隐私。为了解决这些多模态信息与参与者身份相关联的问题，提出了一种在提供动态激励机制的同时保证匿名数据报告的协议。该协议首先通过每个成员在向量中匿名选择一个时隙来建立一个提交时间表，其中每个成员和系统实体都不知道其他成员的时隙，然后使用该时间表通过批量传输和多人用餐密码器网络(DC网)在一个编码的向量中提交所有成员的数据。因此，数据和成员身份之间的联系被打破。激励机制采用盲签名匿名标价，完成微支付转账。最后，对协议进行了理论分析，证明了协议的匿名性、完整性和高效性。我们在Android手机上实现并测试了该协议。实验结果表明，该协议对于低延迟可容忍的应用是有效的，这是大多数参与式传感应用的情况，同时也表明了我们的优化优于类似的匿名数据报告协议。",
        "title_zh": "具有动态激励机制的参与式传感匿名数据报告策略",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn2021.html",
        "conf_title": "Security and Communication Networks, Volume 2021",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1155/2021/6642252",
        "title": "FB2Droid: A Novel Malware Family-Based Bagging Algorithm for Android Malware Detection",
        "authors": "Ke Shao, Qiang Xiong, Zhiming Cai",
        "abstract": "As the number of Android malware applications continues to grow at a high rate, detecting malware to protect the system security and user privacy is becoming increasingly urgent. Each malware application belongs to a specific family, and there is a gap in the number of malware families. .e accuracy of detection can be improved if malware family information is well utilized and certain strategies are adopted to balance the variability among samples. In addition, the performance of a base classifier is limited. If an ensemble classifier or an ensemble method can be adopted, the detection effect can be further improved. .erefore, this paper proposes a novel malware family-based bagging algorithm for Android malware detection, called FB2Droid, to perform malware detection. First, five features are extracted from the Android application package. .en, the relief feature selection algorithm is used for feature selection. Next, we designed two different sampling strategies based on different families of malware to alleviate the sample imbalance in the dataset. Combined with the two sampling strategies, the traditional bagging algorithm is improved to integrate the classifier. In the experiment, several classifiers were used to evaluate the proposed scheme. .e experimental results show that the proposed sampling strategy and the improved bagging algorithm can effectively improve the detection accuracy of these classifiers.",
        "files": {
            "openAccessPdf": "https://downloads.hindawi.com/journals/scn/2021/6642252.pdf"
        },
        "abstract_zh": "随着Android恶意软件应用数量的持续高速增长，检测恶意软件以保护系统安全和用户隐私变得越来越迫切。每个恶意软件应用程序属于一个特定的家族，恶意软件家族的数量存在差距。。如果恶意软件家族信息被很好地利用，并且采用某些策略来平衡样本之间的可变性，检测的准确性可以被提高。此外，基本分类器的性能是有限的。如果能够采用集成分类器或集成方法，则可以进一步提高检测效果。。为此，本文提出了一种新的基于恶意软件家族的Android恶意软件检测bagging算法FB2Droid。首先，从Android应用程序包中提取五个特征。。en，地貌特征选择算法用于特征选择。接下来，我们基于不同的恶意软件家族设计了两种不同的采样策略来缓解数据集中的样本不平衡。结合两种采样策略，对传统的bagging算法进行改进，集成分类器。在实验中，几个分类器被用来评估提出的方案。。实验结果表明，提出的采样策略和改进的bagging算法能有效提高这些分类器的检测精度。",
        "title_zh": "FB2Droid:一种新的基于恶意软件家族的Android恶意软件检测Bagging算法",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn2021.html",
        "conf_title": "Security and Communication Networks, Volume 2021",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1155/2021/9946022",
        "title": "GNFCVulFinder: NDEF Vulnerability Discovering for NFC-Enabled Smart Mobile Devices Based on Fuzzing",
        "authors": "Zhiqiang Wang, Yuheng Lin, Zihan Zhuo, Jieming Gu, Tao Yang",
        "abstract": "Near-field communication (NFC) is a set of communication protocols that enable two electronic devices. Its security and reliability are welcomed by mobile terminal manufactures, banks, telecom operators, and third-party payment platforms. Simultaneously, it has also drawn more and more attention from hackers and attackers, and NFC-enabled devices are facing increasing threats. To improve the security of the NFC technology, the paper studied the technology of discovering security vulnerabilities of NFC Data Exchange Format (NDEF), the most important data transmission protocol. In the paper, we proposed an algorithm, GTCT (General Test Case Construction and Test), based on fuzzing to construct test cases and test the NDEF protocol. GTCT adopts four strategies to construct test cases, manual, generation, mutation, and “reverse analysis,” which can detect logic vulnerabilities that fuzzing cannot find and improve the detection rate. Based on GTCT, we designed an NDEF vulnerability discovering framework and developed a tool named “GNFCVulFinder” (General NFC Vulnerability Finder). By testing 33 NFC system services and applications on Android andWindows Phones, we found eight vulnerabilities, including DoS vulnerabilities of NFC service, logic vulnerabilities about opening Bluetooth/Wi-Fi/torch, design flaws about the black screen, and DoS of NFC applications. Finally, we give some security suggestions for the developer to enhance the security of NFC.",
        "files": {
            "openAccessPdf": "https://downloads.hindawi.com/journals/scn/2021/9946022.pdf"
        },
        "abstract_zh": "近场通信(NFC)是允许两个电子设备的一组通信协议。其安全性和可靠性受到移动终端制造商、银行、电信运营商和第三方支付平台的欢迎。与此同时，它也吸引了越来越多的黑客和攻击者的注意，支持NFC的设备面临越来越多的威胁。为了提高NFC技术的安全性，研究了最重要的数据传输协议——NFC数据交换格式(NDEF)的安全漏洞发现技术。本文提出了一种基于模糊化的GTCT(General Test Case Construction and Test)算法来构造测试用例，并对NDEF协议进行测试。GTCT采用手动、生成、变异和“逆向分析”四种策略构造测试用例，能够检测fuzzing无法发现的逻辑漏洞，提高检测率。基于GTCT，我们设计了一个NDEF漏洞发现框架，并开发了一个名为GNFCVulFinder(通用NFC漏洞发现器)的工具。通过测试Android和Windows手机上的33个NFC系统服务和应用，我们发现了8个漏洞，包括NFC服务的DoS漏洞、关于打开蓝牙/Wi-Fi/torch的逻辑漏洞、关于黑屏的设计缺陷以及NFC应用的DoS。最后，我们为开发者提供了一些安全建议，以提高NFC的安全性。",
        "title_zh": "GNFCVulFinder:基于Fuzzing的NFC智能移动设备NDEF漏洞发现",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn2021.html",
        "conf_title": "Security and Communication Networks, Volume 2021",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1155/2021/6689486",
        "title": "Permission Sensitivity-Based Malicious Application Detection for Android",
        "authors": "Yubo Song, Yijin Geng, Junbo Wang, Shang Gao, Wei Shi",
        "abstract": "Since a growing number of malicious applications attempt to steal users’ private data by illegally invoking permissions, application stores have carried out many malware detection methods based on application permissions. However, most of them ignore specific permission combinations and application categories that affect the detection accuracy. The features they extracted are neither representative enough to distinguish benign and malicious applications. For these problems, an Android malware detection method based on permission sensitivity is proposed. First, for each kind of application categories, the permission features and permission combination features are extracted. The sensitive permission feature set corresponding to each category label is then obtained by the feature selection method based on permission sensitivity. In the following step, the permission call situation of the application to be detected is compared with the sensitive permission feature set, and the weight allocation method is used to quantify this information into numerical features. In the proposed method of malicious application detection, three machine-learning algorithms are selected to construct the classifier model and optimize the parameters. Compared with traditional methods, the proposed method consumed 60.94% less time while still achieving high accuracy of up to 92.17%.",
        "files": {
            "openAccessPdf": "https://downloads.hindawi.com/journals/scn/2021/6689486.pdf"
        },
        "abstract_zh": "由于越来越多的恶意应用试图通过非法调用权限来窃取用户的隐私数据，应用商店已经实施了许多基于应用权限的恶意软件检测方法。但是，它们大多忽略了影响检测准确性的特定权限组合和应用类别。他们提取的特征既不具有足够的代表性来区分良性和恶意应用程序。针对这些问题，提出了一种基于权限敏感度的Android恶意软件检测方法。首先，针对每种应用类别，提取权限特征和权限组合特征。然后，通过基于权限敏感度的特征选择方法，获得每个类别标签对应的敏感权限特征集。在接下来的步骤中，将待检测应用的权限调用情况与敏感权限特征集进行比较，并使用权重分配方法将这些信息量化为数字特征。在所提出的恶意应用程序检测方法中，选择了三种机器学习算法来构建分类器模型并优化参数。与传统方法相比，该方法在获得高达92.17%的准确率的同时，耗时减少了60.94%。",
        "title_zh": "基于权限敏感度的Android恶意应用检测",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn2021.html",
        "conf_title": "Security and Communication Networks, Volume 2021",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1155/2021/2481818",
        "title": "A Noninterference Model for Mobile OS Information Flow Control and Its Policy Verification",
        "authors": "Zhanhui Yuan, Wenfa Li, Zhi Yang, Lei Sun, Xuehui Du, Hongqi Zhang",
        "abstract": "Mobile operating systems such as Android are facing serious security risk. First, they have a large number of users and store a large number of users’ private data, which have become major targets of network attack; second, their openness leads to high security risks; third, their coarse-grained static permission control mechanism leads to a large number of privacy leaks. Recent decentralized information flow control (DIFC) operating systems such as Asbestos, HiStar, and Flume dynamically adjust the label of each process. Asbestos contains inherent covert channels due to this implicit label adjustment. The others close these covert channels through the use of explicit label change, but this impedes communication and increases performance overhead. We present an enhanced implicit label change model (EILCM) for mobile operating systems that can close the known covert channel in these models with implicit label change and supports dynamic constraints on tags for separation of duty. We also formally analyze the reasons why EILCM can close the known covert channels and prove that abstract EILCM systems have the security property of noninterference with declassification by virtue of the model checker tool FDR. We also prove that the problem of EILCM policy verification is NP-complete and propose a backtrack-based search algorithm to solve the problem. Experiments are presented to show that the algorithm is effective.",
        "files": {
            "openAccessPdf": "https://downloads.hindawi.com/journals/scn/2021/2481818.pdf"
        },
        "abstract_zh": "Android等移动操作系统面临着严重的安全风险。一是他们拥有大量用户，存储大量用户隐私数据，成为网络攻击的主要目标；二是它们的开放性导致安全风险高；第三，他们粗粒度的静态权限控制机制导致大量隐私泄露。最近的分散信息流控制(DIFC)操作系统，如石棉，HiStar和Flume动态调整每个进程的标签。由于这种隐含的标签调整，石棉包含固有的隐蔽通道。其他方法通过使用显式标签更改来关闭这些隐蔽通道，但这阻碍了通信并增加了性能开销。我们提出了一种用于移动操作系统的增强隐式标签改变模型(EILCM ),该模型可以通过隐式标签改变关闭模型中的已知隐蔽通道，并支持对标签的动态约束以实现职责分离。我们还形式化地分析了EILCM能够关闭已知隐蔽通道的原因，并借助模型检测工具FDR证明了抽象EILCM系统具有不干扰解密的安全特性。我们还证明了EILCM策略验证问题是NP完全的，并提出了一种基于回溯的搜索算法来解决该问题。实验表明该算法是有效的。",
        "title_zh": "移动操作系统信息流控制的无干扰模型及其策略验证",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn2021.html",
        "conf_title": "Security and Communication Networks, Volume 2021",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1155/2021/9964224",
        "title": "Learning-Based Detection for Malicious Android Application Using Code Vectorization",
        "authors": "Lin Liu, Wang Ren, Feng Xie, Shengwei Yi, Junkai Yi, Peng Jia",
        "abstract": "The malicious APK (Android Application Package) makers use some techniques such as code obfuscation and code encryption to avoid existing detection methods, which poses new challenges for accurate virus detection and makes it more and more difficult to detect the malicious code. A report indicates that a new malicious app for Android is created every 10 seconds. To combat this serious malware activity, a scalable malware detection approach is needed, which can effectively and efficiently identify the malware apps. Common static detection methods often rely on Hash matching and analysis of viruses, which cannot quickly detect new malicious Android applications and their variants. In this paper, a malicious Android application detection method is proposed, which is implemented by the deep network fusion model. The hybrid model only needs to use the sample training model to achieve high accuracy in the identification of the malicious applications, which is more suitable for the detection of the new malicious Android applications than the existing methods. This method extracts the static features in the core code of the Android application by decompiling APK files, then performs code vectorization processing, and uses the deep learning network for classification and discrimination. Our experiments with a data set containing 10,170 apps show that the decisions from the hybrid model can increase the malware detection rate significantly on a real device, which verifies the superiority of this method in the detection of malicious codes.",
        "files": {
            "openAccessPdf": "https://downloads.hindawi.com/journals/scn/2021/9964224.pdf"
        },
        "abstract_zh": "恶意APK (Android应用程序包)制造者使用代码混淆和代码加密等技术来规避现有的检测方法，这给准确的病毒检测带来了新的挑战，使得检测恶意代码变得越来越困难。一份报告表明，每10秒钟就有一个新的Android恶意应用程序产生。为了打击这种严重的恶意软件活动，需要一种可扩展的恶意软件检测方法，该方法可以有效且高效地识别恶意软件应用。常见的静态检测方法往往依赖于对病毒的哈希匹配和分析，无法快速检测出新的恶意Android应用及其变种。提出了一种恶意Android应用检测方法，并通过深度网络融合模型实现。该混合模型只需要使用样本训练模型就可以达到较高的恶意应用识别准确率，比现有方法更适合检测新的恶意Android应用。该方法通过反编译APK文件，提取Android应用核心代码中的静态特征，然后进行代码矢量化处理，利用深度学习网络进行分类判别。我们在包含10，170个应用的数据集上的实验表明，混合模型的决策可以显著提高真实设备上的恶意代码检测率，从而验证了该方法在恶意代码检测方面的优越性。",
        "title_zh": "基于学习的代码矢量化恶意Android应用检测",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn2021.html",
        "conf_title": "Security and Communication Networks, Volume 2021",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1155/2021/9928254",
        "title": "Internet of Things-Based Intelligent Smart Home Control System",
        "authors": "Olutosin Taiwo, Absalom E. Ezugwu",
        "abstract": "The smart home is now an established area of interest and research that contributes to comfort in modern homes. With the Internet being an essential part of broad communication in modern life, IoT has allowed homes to go beyond building to interactive abodes. In many spheres of human life, the IoT has grown exponentially, including monitoring ecological factors, controlling the home and its appliances, and storing data generated by devices in the house in the cloud. Smart home includes multiple components, technologies, and devices that generate valuable data for predicting home and environment activities. This work presents the design and development of a ubiquitous, cloud-based intelligent home automation system. The system controls, monitors, and oversees the security of a home and its environment via an Android mobile application. One module controls and monitors electrical appliances and environmental factors, while another module oversees the home’s security by detecting motion and capturing images. Our work uses a camera to capture images of objects triggered by their motion being detected. To avoid false alarms, we used the concept of machine learning to differentiate between images of regular home occupants and those of an intruder. The support vector machine algorithm is proposed in this study to classify the features of the image captured and determine if it is that of a regular home occupant or an intruder before sending an alarm to the user. The design of the mobile application allows a graphical display of the activities in the house. Our work proves that machine learning algorithms can improve home automation system functionality and enhance home security. The work’s prototype was implemented using an ESP8266 board, an ESP32-CAM board, a 5 V four-channel relay module, and sensors.",
        "files": {
            "openAccessPdf": "https://downloads.hindawi.com/journals/scn/2021/9928254.pdf"
        },
        "abstract_zh": "智能家居现在是一个公认的兴趣和研究领域，有助于现代家庭的舒适性。随着互联网成为现代生活中广泛通信的重要组成部分，物联网已经允许家庭超越建筑，成为交互式住所。在人类生活的许多领域，物联网呈指数级增长，包括监控生态因素，控制家庭及其电器，以及将家中设备生成的数据存储在云中。智能家居包括多种组件、技术和设备，可生成有价值的数据来预测家居和环境活动。这项工作提出了一个无处不在的，基于云的智能家庭自动化系统的设计和开发。该系统通过Android移动应用程序控制、监控和监督家庭及其环境的安全性。一个模块控制和监控电器和环境因素，而另一个模块通过检测运动和捕捉图像来监督家庭的安全。我们的工作使用相机来捕捉物体的图像，这些图像是由物体的运动被检测到而触发的。为了避免错误警报，我们使用机器学习的概念来区分普通住户和入侵者的图像。在这项研究中，提出了支持向量机算法来对捕获的图像特征进行分类，并在向用户发送警报之前确定它是普通住户还是入侵者。移动应用程序的设计允许以图形方式显示家中的活动。我们的工作证明了机器学习算法可以改善家庭自动化系统的功能并增强家庭安全性。这项工作的原型是使用ESP8266板、ESP32-CAM板、5 V四通道继电器模块和传感器实现的。",
        "title_zh": "基于物联网的智能家居控制系统",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn2021.html",
        "conf_title": "Security and Communication Networks, Volume 2021",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1155/2022/3111540",
        "title": "An Android Malicious Application Detection Method with Decision Mechanism in the Operating Environment of Blockchain",
        "authors": "Xingyu Li, Zongqu Zhao, Yongli Tang, Jing Zhang, Chengyi Wu, Ying Li",
        "abstract": "Recently, security policies and behaviour detection methods have been proposed to improve the security of blockchain by many researchers. However, these methods cannot discover the source of typical behaviours, such as the malicious applications in the blockchain environment. Android application is an important part of the blockchain operating environment, and machine learning-based Android malware application detection method is significant for blockchain user security. The way of constructing features in these methods determines the performance. The single-feature mechanism, training classifiers with one type of features, cannot detect the malicious applications effectively which exhibit the typical behaviours in various forms. The multifeatures fusion mechanism, constructing mixed features from multiple types of data sources, can cover more kinds of information. However, different types of data sources will interfere with each other in the mixed features constructed by this mechanism. That limits the performance of the model. In order to improve the detection performance of Android malicious applications in complex scenarios, we propose an Android malicious application detection method which includes parallel feature processing and decision mechanism. Our method uses RGB image visualization technology to construct three types of RGB image which are utilized to train different classifiers, respectively, and a decision mechanism is designed to fuse the outputs of subclassifiers through weight analysis. This approach simultaneously extracts different types of features, which preserve application information comprehensively. Different classifiers are trained by these features to guarantee independence of each feature and classifier. On this basis, a comprehensive analysis of many methods is performed on the Android malware dataset, and the results show that our method has better efficiency and adaptability than others.",
        "files": {
            "openAccessPdf": "https://downloads.hindawi.com/journals/scn/2022/3111540.pdf"
        },
        "abstract_zh": "最近，许多研究人员提出了安全策略和行为检测方法来提高区块链的安全性。然而，这些方法不能发现典型行为的来源，例如区块链环境中的恶意应用程序。Android应用是区块链操作环境的重要组成部分，基于机器学习的Android恶意应用检测方法对区块链用户安全具有重要意义。这些方法中构造特征的方式决定了性能。单一特征机制用一种类型的特征训练分类器，不能有效地检测出以各种形式表现出典型行为的恶意应用。多特征融合机制从多种类型的数据源构建混合特征，能够覆盖更多种类的信息。但是，在这种机制构建的混合特征中，不同类型的数据源会相互干扰。这限制了模型的性能。为了提高Android恶意应用在复杂场景下的检测性能，提出了一种包含并行特征处理和决策机制的Android恶意应用检测方法。该方法利用RGB图像可视化技术构建三种类型的RGB图像，分别用于训练不同的分类器，并设计了一种决策机制，通过权重分析融合子分类器的输出。这种方法同时提取不同类型的特征，从而全面保存应用信息。这些特征训练不同的分类器，以保证每个特征和分类器的独立性。在此基础上，对Android恶意软件数据集上的多种方法进行了综合分析，结果表明该方法比其他方法具有更好的效率和适应性。",
        "title_zh": "区块链运行环境下具有决策机制的Android恶意应用检测方法",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn2022.html",
        "conf_title": "Security and Communication Networks, Volume 2022",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1155/2019/2850932",
        "title": "Improved Malware Detection Model with Apriori Association Rule and Particle Swarm Optimization",
        "authors": "Olawale Surajudeen Adebayo, Normaziah Abdul Aziz",
        "abstract": "The incessant destruction and harmful tendency of malware on mobile devices has made malware detection an indispensable continuous field of research. Different matching/mismatching approaches have been adopted in the detection of malware which includes anomaly detection technique, misuse detection, or hybrid detection technique. In order to improve the detection rate of malicious application on the Android platform, a novel knowledge-based database discovery model that improves apriori association rule mining of a priori algorithm with Particle Swarm Optimization (PSO) is proposed. Particle swarm optimization (PSO) is used to optimize the random generation of candidate detectors and parameters associated with apriori algorithm (AA) for features selection. In this method, the candidate detectors generated by particle swarm optimization form rules using apriori association rule. These rule models are used together with extraction algorithm to classify and detect malicious android application. Using a number of rule detectors, the true positive rate of detecting malicious code is maximized, while the false positive rate of wrongful detection is minimized. The results of the experiments show that the proposed a priori association rule with Particle Swarm Optimization model has remarkable improvement over the existing contemporary detection models.",
        "files": {
            "openAccessPdf": "https://downloads.hindawi.com/journals/scn/2019/2850932.pdf"
        },
        "abstract_zh": "恶意软件在移动设备上的不断破坏和有害趋势使得恶意软件检测成为一个不可或缺的连续研究领域。在恶意软件的检测中采用了不同的匹配/不匹配方法，包括异常检测技术、误用检测或混合检测技术。为了提高Android平台上恶意应用程序的检测率，提出了一种基于知识的数据库发现模型，该模型利用粒子群优化算法改进了apriori关联规则挖掘算法。粒子群优化算法用于优化随机产生的候选检测器和与特征选择的apriori算法相关的参数。在该方法中，粒子群优化算法产生的候选检测器使用先验关联规则形成规则。这些规则模型与提取算法一起用于分类和检测恶意android应用程序。通过使用多个规则检测器，检测恶意代码的真实阳性率被最大化，而错误检测的假阳性率被最小化。实验结果表明，提出的粒子群优化先验关联规则模型比现有的检测模型有明显的改进。",
        "title_zh": "基于Apriori关联规则和粒子群优化的改进恶意软件检测模型",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn2019.html",
        "conf_title": "Security and Communication Networks, Volume 2019",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1155/2019/7193684",
        "title": "SSLDetecter: Detecting SSL Security Vulnerabilities of Android Applications Based on a Novel Automatic Traversal Method",
        "authors": "Junwei Tang, Jingjing Li, Ruixuan Li, Hongmu Han, Xiwu Gu, Zhiyong Xu",
        "abstract": "Android usually employs the Secure Socket Layer (SSL) protocol to protect the user’s privacy in network transmission. However, developers may misuse SSL-related APIs, which would lead attackers to steal user’s privacy through man-in-the-middle attacks. Existing methods based on static decompiling technology to detect SSL security vulnerabilities of Android applications cannot cope with the increasingly common packed applications. Meanwhile, dynamic analysis approaches have the disadvantages of excessive resource consumption and time-consuming. In this paper, we propose a dynamic method to solve this issue based on our novel automatic traversal model. At first, we propose several new traversal strategies to optimize the widget tree according to the user interface (UI) types and the interface state similarity. Furthermore, we develop a more granular traversal model by refining the traversal level from the Activity component to the Widget and implement a heuristic depth-first traversal algorithm in combination with our customized traversal strategy. In addition, the man-in-the-middle agent plug-in is extended to implement real-time attack test and return the attack results. Based on the above ideas, we have implemented SSLDetecter, an efficient automated detection system of Android application SSL security vulnerability. We apply it on multiple devices in parallel to detect 2456 popular applications in several mainstream application markets and find that 424 applications are suffering from SSL security vulnerabilities. Compared with the existing system SMV-HUNTER, the time efficiency of our system increases by 38% and the average detection rate increases by 6.39 percentage points, with many types of SSL vulnerabilities detected.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android通常采用安全套接字层(SSL)协议来保护用户在网络传输中的隐私。然而，开发人员可能会滥用SSL相关的API，这将导致攻击者通过中间人攻击窃取用户的隐私。现有的基于静态反编译技术检测Android应用SSL安全漏洞的方法无法应对日益普遍的打包应用。同时，动态分析方法存在资源消耗过大和耗时的缺点。在本文中，我们提出了一种基于新的自动遍历模型的动态方法来解决这个问题。首先，我们根据用户界面的类型和界面状态的相似性，提出了几种新的遍历策略来优化widget树。此外，我们通过细化从活动组件到小部件的遍历级别，开发了一个更细粒度的遍历模型，并结合我们定制的遍历策略实现了一个启发式深度优先遍历算法。此外，对中间人代理插件进行了扩展，实现了实时攻击测试并返回攻击结果。基于上述思想，我们实现了一个高效的Android应用SSL安全漏洞自动检测系统SSLDetecter。我们在多个设备上并行应用，检测几个主流应用市场的2456个热门应用，发现424个应用存在SSL安全漏洞。与现有系统SMV-HUNTER相比，该系统的时间效率提高了38%，平均检测率提高了6.39个百分点，检测出了多种类型的SSL漏洞。",
        "title_zh": "SSLDetecter:基于一种新的自动遍历方法检测Android应用程序的SSL安全漏洞",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn2019.html",
        "conf_title": "Security and Communication Networks, Volume 2019",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1002/sec.675",
        "title": "Malware detection by applying knowledge discovery processes to application metadata on the Android Market (Google Play)",
        "authors": "Peter Teufl, Michaela Ferk, Andreas Fitzek, Daniel M. Hein, Stefan Kraxberger, Clemens Orthacker",
        "abstract": "Recent smartphone platforms based on new operating systems, such as iOS, Android, or Windows Phone, have been a huge success in recent years and open up many new opportunities. Unfortunately, 2011 also showed us that the new technologies and the privacy-related data on smartphones are also increasingly interesting for attackers. Especially, the Android platform has been the favorite target for malware, mainly because of the openness of the platform, the ability to install applications from other sources than the Android Market, and the significant gains in market share. Although the processes of detecting and analyzing malware are well known from the PC world, where the arms race between attackers and defenders has continued for the past 15years, they cannot be directly applied to smartphone platforms because of differences in the hardware and software architectures. In this paper, we first give an overview of the current malware situation on smartphone platforms with a special focus on Android and explain relevant malware detection and analysis methods. It turns out that most of the current malware relies on the installation by the user, who represents the last line of defense in malware detection. With these conclusions, we then present a new malware detection method that focuses on the information that the user is able to see prior to the installation of an application-the metadata within the platform's software market. Depending on the platform, this includes the application's description, its permissions, the ratings, or information about the developer. To analyze these data, we use sophisticated knowledge discovery processes and lean statistical methods. By presenting a wide range of examples based on real application metadata extracted from the Android Market, we show the possibilities of the new method. With the possibilities, we argue that it should be an essential part of a complete malware analysis/detection chain that includes other well-known methods such as network traffic analysis, or static, or dynamic code inspection. Copyright © 2013 John Wiley & Sons, Ltd.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "最近基于新操作系统的智能手机平台，如iOS、Android或Windows Phone，近年来取得了巨大的成功，并开辟了许多新的机会。不幸的是，2011年也向我们表明，新技术和智能手机上的隐私相关数据也越来越引起攻击者的兴趣。特别是，Android平台一直是恶意软件最喜欢的目标，主要是因为该平台的开放性，能够安装来自Android市场以外的其他来源的应用程序，以及市场份额的显著增加。虽然检测和分析恶意软件的过程在过去15年中攻击者和防御者之间的军备竞赛持续不断的PC世界中众所周知，但由于硬件和软件架构的差异，它们不能直接应用于智能手机平台。在本文中，我们首先概述了当前智能手机平台上的恶意软件情况，特别关注Android，并解释了相关的恶意软件检测和分析方法。事实证明，当前大多数恶意软件依赖于用户的安装，用户是恶意软件检测的最后一道防线。根据这些结论，我们随后提出了一种新的恶意软件检测方法，该方法侧重于用户在安装应用程序之前能够看到的信息，即平台软件市场中的元数据。根据平台的不同，这包括应用程序的描述、权限、分级或关于开发人员的信息。为了分析这些数据，我们使用复杂的知识发现过程和精益统计方法。通过展示基于从Android Market中提取的真实应用程序元数据的大量示例，我们展示了新方法的可能性。对于这些可能性，我们认为它应该是完整的恶意软件分析/检测链的重要组成部分，包括其他众所周知的方法，如网络流量分析、静态或动态代码检查。版权所有2013约翰·威利父子有限公司",
        "title_zh": "通过对Android Market上的应用程序元数据应用知识发现流程来检测恶意软件(Google Play)",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn9.html",
        "conf_title": "Security and Communication Networks, Volume 9",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1002/sec.936",
        "title": "Server-based code obfuscation scheme for APK tamper detection",
        "authors": "Yuxue Piao, Jin-Hyuk Jung, Jeong Hyun Yi",
        "abstract": "It is easy to decompile Android applications or apps owing to the structural characteristics of the app building process, but this ease makes them quite vulnerable to forgery or modification attacks. In particular, users may suffer direct financial loss if this vulnerability is exploited in security-critical private and business applications, such as online banking. One of the solutions to these problems is a code obfuscation technique. In this regard, DexGuard, which is based on ProGuard, which is integrated into the Android software development kit build system, has recently been introduced. Although DexGuard protects Android applications more effectively, an attacker is still able to analyze the hex code of a Dalvix Executable file. To resolve this weakness, we begin by analyzing the DexGuard tool from both a static and dynamic point of view. Our analysis reveals that DexGuard has some weaknesses. In this paper, we propose an obfuscation technique based on a client/server model with one-time secret key delivery using short message service or network protocol. The main concept is to store the core execute class file through obfuscation on the server, so when a program needs to execute core routines, it must request these routines from the server. In this way, we can protect Android apps from reverse engineering. Copyright © 2014 John Wiley & Sons, Ltd.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "由于应用程序构建过程的结构特征，很容易反编译Android应用程序或应用程序，但这种容易性使它们很容易受到伪造或修改攻击。特别是，如果此漏洞被安全关键的私人和商业应用程序(如网上银行)利用，用户可能会遭受直接的经济损失。这些问题的解决方案之一是代码混淆技术。在这方面，最近推出了DexGuard，它基于ProGuard，集成到Android软件开发工具包构建系统中。尽管DexGuard可以更有效地保护Android应用程序，但攻击者仍然能够分析Dalvix可执行文件的十六进制代码。为了解决这个弱点，我们首先从静态和动态的角度分析DexGuard工具。我们的分析揭示了DexGuard有一些弱点。本文提出了一种基于客户/服务器模型的混淆技术，使用短消息服务或网络协议进行一次性密钥传递。主要概念是通过混淆在服务器上存储核心执行类文件，因此当程序需要执行核心例程时，它必须从服务器请求这些例程。通过这种方式，我们可以保护Android应用程序免受逆向工程。版权所有2014约翰·威利父子有限公司",
        "title_zh": "基于服务器的APK篡改检测代码混淆方案",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn9.html",
        "conf_title": "Security and Communication Networks, Volume 9",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1002/sec.1108",
        "title": "Mobile middleware platform for secure vessel traffic system in IoT service environment",
        "authors": "Namje Park, Hyo-Chan Bang",
        "abstract": "The Inter-VTS Data Exchange Format IVEF service is the draft standard designed for exchange of information on sea traffic between the vessel traffic systems and between the vessels. Standardization of this service is under way as a part of the next-generation navigation system, called e-Navigation. The International Association of Lighthouse Authorities suggests, on its recommendation V-145, the IVEF service model and the protocol for provisioning of this service. But the detailed configuration of this service must be designed by the users. IVEF service is aimed at establishing a common framework to ensure exchange of ship information between vessel traffic service VTS centers gained via automatic ship identification device, closed-circuit television, radar system and other devices. Robust exchange of marine traffic information between VTS centers through IVEF service will enable related authorities to identify location of domestic and international ships in the coastal waters real-time and predict expected sea route, thus ensure effective sea route control and pre-emptive response to potential disasters or accidents. This paper suggests, based on the basic service model and protocol provided in the recommendation V-145, the implementation of the Jeju-VTS middleware, which will facilitate exchange of information on sea traffic. This paper developed a system enabling IVEF service simulation under an Internet of Things environment made possible by improving IVEF software development kit, which is an open source. For this, a mobile phone loaded with Android platform and desk top PC has been used for emulation of a ship on voyage and VTS center. Copyright © 2014 John Wiley & Sons, Ltd.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "VTS间数据交换格式IVEF服务是为船舶交通系统之间和船舶之间的海上交通信息交换而设计的标准草案。这项服务的标准化正在进行中，作为被称为电子导航的下一代导航系统的一部分。国际灯塔管理局协会在其建议V-145中提出了IVEF服务模型和提供该服务的协议。但是该服务的详细配置必须由用户来设计。IVEF服务旨在建立一个通用框架，以确保船舶交通服务VTS中心之间交换通过船舶自动识别装置、闭路电视、雷达系统和其他装置获得的船舶信息。通过IVEF服务在VTS中心之间进行可靠的海上交通信息交换将使相关当局能够实时识别国内和国际船舶在沿海水域的位置，并预测预期的航线，从而确保有效的航线控制和对潜在灾害或事故的先发制人的响应。本文建议，基于建议V-145中提供的基本服务模型和协议，实现Jeju-VTS中间件，这将促进海上交通信息的交换。通过改进开源的IVEF软件开发包，开发了一个物联网环境下的IVEF服务仿真系统。为此，装载有Android平台的移动电话和台式PC已经被用于航行中的船舶和VTS中心的仿真。版权所有2014约翰·威利父子有限公司",
        "title_zh": "物联网服务环境下安全船舶交通系统移动中间件平台",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn9.html",
        "conf_title": "Security and Communication Networks, Volume 9",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1002/sec.908",
        "title": "An enhanced security framework for reliable Android operating system",
        "authors": "Jong Hyuk Park, Dohyung Kim, Ji Soo Park, Sangjin Lee",
        "abstract": "The number of applications loaded with malware is rapidly increasing in Android operating system OS. These malwares spread through the official Android market \"Play Store\", unofficial \"black market\", and private web pages. Once the malware activates, personal information can be extracted and some data can be deleted, causing tremendous damage to users. In order to provide reliability on Android OS, there is a need to analyze and address these malwares and recover the modified data. In this paper, we propose an enhanced security framework for a reliable Android OS. The framework provides means to prevent influx of malware by examining the Android OS and file system. In addition, it recovers data once deleted by security breaches. Copyright © 2013 John Wiley & Sons, Ltd.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "在Android操作系统中，加载恶意软件的应用程序数量正在迅速增加。这些恶意软件通过官方的Android市场“Play Store”、非官方的“黑市”和私人网页进行传播。一旦恶意软件激活，个人信息可以被提取，一些数据可以被删除，对用户造成巨大的损害。为了在Android操作系统上提供可靠性，需要分析和解决这些恶意软件，并恢复被修改的数据。在本文中，我们提出了一个可靠的Android操作系统的增强安全框架。该框架提供了通过检查Android操作系统和文件系统来防止恶意软件涌入的方法。此外，它还可以恢复被安全漏洞删除的数据。版权所有2013约翰·威利父子有限公司",
        "title_zh": "面向可靠Android操作系统的增强安全框架",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn9.html",
        "conf_title": "Security and Communication Networks, Volume 9",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1002/sec.1061",
        "title": "Introducing touchstroke: keystroke-based authentication system for smartphones",
        "authors": "Georgios Kambourakis, Dimitrios Damopoulos, Dimitrios Papamartzivanos, Emmanouil Pavlidakis",
        "abstract": "Keystroke dynamics is a well-investigated behavioural biometric based on the way and rhythm in which someone interacts with a keyboard or keypad when typing characters. This paper explores the potential of this modality but for touchscreen-equipped smartphones. The main research question posed is whether 'touchstroking' can be effective in building the biometric profile of a user, in terms of typing pattern, for future authentication. To reach this goal, we implemented a touchstroke system in the Android platform and executed different scenarios under disparate methodologies to estimate its effectiveness in authenticating the end-user. Apart from typical classification features used in legacy keystroke systems, we introduce two novel ones, namely, speed and distance. From the experiments, it can be argued that touchstroke dynamics can be quite competitive, at least when compared to similar results obtained from keystroke evaluation studies. As far as we are aware of, this is the first time this newly arisen behavioural trait is put into focus. Copyright © 2014 John Wiley & Sons, Ltd.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "击键动力学是一种经过充分研究的行为生物统计学，基于人们在键入字符时与键盘或小键盘交互的方式和节奏。本文探讨了这种形式的潜力，但对于配备触摸屏的智能手机。提出的主要研究问题是,“触摸敲击”是否可以有效地建立用户的生物统计特征，即打字模式，用于未来的身份验证。为了实现这一目标，我们在Android平台上实现了一个touchstroke系统，并在不同的方法下执行了不同的场景，以评估其在验证最终用户方面的有效性。除了传统击键系统中使用的典型分类特征之外，我们引入了两个新的分类特征，即速度和距离。从实验中可以看出，至少与从击键评估研究中获得的类似结果相比，触摸动态可以是相当有竞争力的。据我们所知，这是第一次这种新出现的行为特征受到关注。版权所有2014约翰·威利父子有限公司",
        "title_zh": "touchstroke简介:智能手机的按键认证系统",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn9.html",
        "conf_title": "Security and Communication Networks, Volume 9",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1002/sec.1413",
        "title": "An Android based new German eID solution for policy making processes",
        "authors": "Yacine Rebahi, Mateusz Khalil, Simon Hohberg, Pascal Lorenz",
        "abstract": "In the current paper, we propose a novel mobile-based architecture that enforces security and privacy protection in the context of mParticipation. This architecture enables the citizens to cast their opinions anonymously and without limitation in time and space. It also removes the burden of preceding registration before any voting process. As the new electronic identity (eID) Cards are replacing the conventional identity cards in most European countries, we also discussed, in this paper, how the new German eID cards can be utilized for mobile participation. The use of the eID cards offers better flexibility and stronger security. A prototype implementation of this architecture is also described in this document, and the related performance is discussed. Copyright © 2016 John Wiley & Sons, Ltd.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "在本文中，我们提出了一种新的基于移动设备的架构，在参与的环境中加强安全和隐私保护。这种架构使市民能够匿名发表意见，不受时间和空间的限制。它还消除了在任何投票程序之前预先登记的负担。由于新的电子身份(eID)卡正在取代大多数欧洲国家的传统身份卡，我们在本文中还讨论了如何利用新的德国eID卡进行移动参与。身份证的使用提供了更好的灵活性和更强的安全性。本文还描述了该体系结构的原型实现，并讨论了相关的性能。版权所有2016约翰威利父子有限公司。",
        "title_zh": "基于Android的德国eID新解决方案，适用于政策制定流程",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn9.html",
        "conf_title": "Security and Communication Networks, Volume 9",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1002/sec.1430",
        "title": "DroidScreening: a practical framework for real-world Android malware analysis",
        "authors": "Junfeng Yu, Qingfeng Huang, Chee Hoo Yian",
        "abstract": "Analyzing Android malware sample is a time-consuming and error-prone work. Automatic techniques to perform suspicious apps screening and threat level evaluation is highly desired by the antivirus industry. In this paper, we proposed a novel automated framework called DroidScreening to speed up the Android malware analysis process and to assist antivirus analyst in generating the heuristics pattern for scanner. DroidScreening employs lazy associative classification (LAC) algorithms to produce classification model by learning from malicious evidence features extracted by using static analysis on Android application package files. Moreover, we proposed a novel high-interaction execution environment that can interact with malicious Android code, so that the analysis samples are induced to start executing their true malicious behavior. Experimentation on malware datasets and using LAC with traditional learning approaches show that the LAC algorithms outperformed other classification algorithms. Finally, we analyzed the performance of DroidScreening and compare it with other similar research work. Copyright © 2016 John Wiley & Sons, Ltd.",
        "files": {
            "openAccessPdf": "https://onlinelibrary.wiley.com/doi/pdfdirect/10.1002/sec.1430"
        },
        "abstract_zh": "分析Android恶意软件样本是一项耗时且容易出错的工作。反病毒行业非常需要执行可疑应用程序筛选和威胁级别评估的自动技术。在本文中，我们提出了一个新的自动化框架，称为DroidScreening，以加速Android恶意软件分析过程，并协助反病毒分析师为扫描器生成启发式模式。DroidScreening采用惰性关联分类(LAC)算法，通过学习对Android应用程序包文件进行静态分析提取的恶意证据特征来产生分类模型。此外，我们提出了一种新的高交互执行环境，可以与恶意Android代码进行交互，从而诱导分析样本开始执行其真正的恶意行为。在恶意软件数据集上的实验和将LAC与传统学习方法一起使用的实验表明，LAC算法优于其他分类算法。最后，我们分析了DroidScreening的性能，并与其他类似的研究工作进行了比较。版权所有2016约翰威利父子有限公司。",
        "title_zh": "DroidScreening:现实世界Android恶意软件分析的实用框架",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn9.html",
        "conf_title": "Security and Communication Networks, Volume 9",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1002/sec.1448",
        "title": "TSSDroid: realization of an efficient and usable TSS API for the Android software stack",
        "authors": "Sohail Khan, Mohammad Nauman, Abu Talib Othman, Shahrulniza Musa, Toqeer Ali Syed",
        "abstract": "The advancement in smartphones capabilities has attracted malware writers to build more sophisticated attacks on these devices. Traditional software-based security mechanisms have failed to provide strong security against these attacks. Similar threats on the PC have been countered using the concepts of Trusted Computing-a highly flexible trust mechanism with strong security properties. However, smartphone platforms have yet to see any Trusted Computing applications-primarily because of the difficulty in adopting this relatively new paradigm of security. In this paper, we present the design of a high-level application programming interface API that allows Android-based smartphone application developers to adopt Trusted Computing and use it in their applications without having to learn the intricate details of how Trusted Computing works. The API abstracts away the complexity in using Trusted Computing constructs by offering easy-to-use interfaces for complex tasks. The API has enhanced the usability of Trusted Computing development by significantly reducing the number of lines and complexity of code required to perform these diverse tasks. This paper provides a reference implementation for the proposed API in order to show that the API is efficient in terms of performance overhead. Copyright © 2016 John Wiley & Sons, Ltd.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "智能手机功能的进步吸引了恶意软件作者在这些设备上构建更复杂的攻击。传统的基于软件的安全机制无法提供强大的安全性来抵御这些攻击。PC上的类似威胁已经通过可信计算的概念得到了反击，可信计算是一种高度灵活的信任机制，具有很强的安全性。然而，智能手机平台尚未看到任何可信计算应用程序——主要是因为难以采用这种相对较新的安全模式。在本文中，我们介绍了一种高级应用编程接口API的设计，它允许基于Android的智能手机应用程序开发人员采用可信计算并在他们的应用程序中使用它，而不必了解可信计算如何工作的复杂细节。API通过为复杂任务提供易于使用的接口，抽象出使用可信计算结构的复杂性。该API通过显著减少执行这些不同任务所需的代码行数和复杂性，增强了可信计算开发的可用性。本文为建议的API提供了一个参考实现，以表明该API在性能开销方面是高效的。版权所有2016约翰威利父子有限公司。",
        "title_zh": "TSSDroid:为Android软件栈实现高效可用的TSS API",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn9.html",
        "conf_title": "Security and Communication Networks, Volume 9",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1002/sec.1466",
        "title": "Taming transitive permission attack via bytecode rewriting on Android application",
        "authors": "Daibin Wang, Hai Jin, Deqing Zou, Peng Xu, Tianqing Zhu, Gang Chen",
        "abstract": "Google Android is popular for mobile devices in recent years. The openness and popularity of Android make it a primary target for malware. Even though Android's security mechanisms could defend most malware, its permission model is vulnerable to transitive permission attack, a type of privilege escalation attacks. Many approaches have been proposed to detect this attack by modifying the Android OS. However, the Android's fragmentation problem and requiring rooting Android device hinder those approaches large-scale adoption. In this paper, we present an instrumentation framework, called SEAPP, for Android applications or \"apps\" to detect the transitive permission attack on unmodified Android. SEAPP automatically rewrites an app without requiring its source codes and produces a security-harden app. At runtime, call-chains are built among these apps and detection process is executed before a privileged API is invoked. Our experimental results show that SEAPP could work on a large number of benign apps from the official Android market and malicious apps, with a repackaged success rate of over 99.8%. We also show that our framework effectively tracks call-chains among apps and detects known transitive permission attack with low overhead. Copyright © 2016 John Wiley & Sons, Ltd.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "谷歌Android近年来在移动设备上很受欢迎。Android的开放性和受欢迎程度使其成为恶意软件的主要目标。尽管Android的安全机制可以防御大多数恶意软件，但其权限模型容易受到传递权限攻击，这是一种权限提升攻击。已经提出了许多方法来通过修改Android操作系统来检测这种攻击。然而，Android的碎片化问题和需要根植Android设备阻碍了这些方法的大规模采用。在本文中，我们提出了一个工具框架，称为SEAPP，用于Android应用程序或“应用程序”来检测未经修改的Android上的传递性权限攻击。SEAPP自动重写应用程序，而不需要其源代码，并产生安全强化应用程序。在运行时，调用链建立在这些应用程序之间，检测过程在特权API被调用之前执行。我们的实验结果表明，SEAPP可以处理大量来自官方Android市场的良性应用和恶意应用，重新打包的成功率超过99.8%。我们还表明，我们的框架有效地跟踪应用程序之间的调用链，并以较低的开销检测已知的传递性权限攻击。版权所有2016约翰威利父子有限公司。",
        "title_zh": "Android应用中通过字节码重写抑制传递性权限攻击",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn9.html",
        "conf_title": "Security and Communication Networks, Volume 9",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1002/sec.1525",
        "title": "Automatic system for measuring security risk of Android application from third party app store",
        "authors": "Bogyu Jang, Jaeseung Lee, Manhee Lee",
        "abstract": "Third party app stores are being used by people to pick up cracked or free Android apps. Hackers make use of these stores to distribute malicious apps. So, the level of security risk of downloading and using apps from such stores will be helpful for people who want to use the store. We implement an automatic system that downloads and analyzes every app. Our preliminary result shows that around half of apps from two app stores interesting to us are already known malware. Copyright © 2016 John Wiley & Sons, Ltd.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "人们正利用第三方应用商店来获取破解的或免费的安卓应用。黑客利用这些商店分发恶意应用程序。因此，从这些商店下载和使用应用程序的安全风险水平将对想要使用商店的人有所帮助。我们实现了一个自动系统来下载和分析每一个应用程序。我们的初步结果显示，我们感兴趣的两家应用商店的应用程序中，大约有一半是已知的恶意软件。版权所有2016约翰威利父子有限公司。",
        "title_zh": "用于测量来自第三方应用商店的Android应用的安全风险的自动系统",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn9.html",
        "conf_title": "Security and Communication Networks, Volume 9",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1002/sec.1555",
        "title": "Generative versus discriminative classifiers for android anomaly-based detection system using system calls filtering and abstraction process",
        "authors": "Abdelfattah Amamra, Jean-Marc Robert, Andrien Abraham, Chamseddine Talhi",
        "abstract": "Anomaly-based detection techniques have been widely studied in recent years. Most of these efforts have focused to improve the accuracy of these techniques. The poor accuracy performance is caused by two factors: i the data used for the analysis is insufficient and/or unrepresentative of the application behavior, or ii inappropriate algorithms are used to model the behavior of the application. In this paper, we attempt to improve anomaly-based detection techniques by examining these two factors. First, we use system call filtering and abstraction process. This process refines the system call traces. The refined traces are compact and should be more representative of the application main behavior. Second, we use machine learning classifiers to characterize the benign behavior. Generally, there are two main categories of machine learning classifiers: generative classifiers and discriminative classifiers. In their initial training phases, the classifiers build models characterizing the benign behavior. Later on, these models are used to distinguish between different classes of data. They are simply defined by their parameters. The k-means classifier is considered as a representative of the generative classifier category, and the support vector machine classifier as a representative of the discriminative classifier category. The efficiency of these classifiers are reviewed and compared, as well as the impact of the filtering and abstraction process on their performances is evaluated. The experimental results show that the support vector machine model outperforms the k-means model, and the filtering and abstraction process has positive impacts on the performance of both models. Copyright © 2016 John Wiley & Sons, Ltd.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "近年来，基于异常的检测技术得到了广泛的研究。这些努力大多集中在提高这些技术的准确性上。不良的准确性性能是由两个因素引起的:I用于分析的数据不充分和/或不代表应用行为，或者ii使用不适当的算法来模拟应用的行为。在本文中，我们试图通过检查这两个因素来改进基于异常的检测技术。首先，我们使用系统调用过滤和抽象过程。这个过程细化了系统调用跟踪。细化的跟踪是紧凑的，应该更能代表应用程序的主要行为。其次，我们使用机器学习分类器来描述良性行为。一般来说，机器学习分类器主要有两类:生成分类器和判别分类器。在最初的训练阶段，分类器建立描述良性行为的模型。后来，这些模型被用来区分不同类别的数据。它们只是由它们的参数定义的。k-means分类器被认为是生成分类器类别的代表，而支持向量机分类器被认为是鉴别分类器类别的代表。回顾和比较了这些分类器的效率，并评估了过滤和提取过程对其性能的影响。实验结果表明，支持向量机模型的性能优于k-means模型，过滤和抽取过程对两种模型的性能都有积极的影响。版权所有2016约翰威利父子有限公司。",
        "title_zh": "使用系统调用过滤和抽象过程的基于android异常的检测系统的生成性与鉴别性分类器",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn9.html",
        "conf_title": "Security and Communication Networks, Volume 9",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1002/sec.1723",
        "title": "A collaborative approach on host and network level android malware detection",
        "authors": "Chanwoo Bae, Seungwon Shin",
        "abstract": "We suggest a collaborative approach for revealing malicious behaviors on Android smartphones by which monitoring four observable parts: (i) network usages (ii) network connections, (iii) APIs and (iv) permissions. Therefore, we have designed a detection system which consists of four engines: network behavior analysis engine, host domain reputation analysis engine, critical API call pattern analysis engine, and Android permissions use analysis engine. Each of them monitors its specific part from Android apps and independently detects malicious behavior and, given the information from four engines, the correlator determines a final decision. Finally, to show efficiency, we have evaluated our system with real world 1,621 apps. Copyright © 2017 John Wiley & Sons, Ltd.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "我们提出了一种协作方法来揭示Android智能手机上的恶意行为，通过监控四个可观察的部分:(I)网络使用，(ii)网络连接，(iii)API和(iv)权限。因此，我们设计了一个由四个引擎组成的检测系统:网络行为分析引擎、主机域信誉分析引擎、关键API调用模式分析引擎和Android权限使用分析引擎。它们中的每一个都从Android应用程序中监控其特定部分，并独立检测恶意行为，根据来自四个引擎的信息，相关器做出最终决定。最后，为了展示效率，我们用真实世界的1，621个应用程序评估了我们的系统。版权所有2017约翰威利父子有限公司。",
        "title_zh": "一种主机和网络级android恶意软件检测的协作方法",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn9.html",
        "conf_title": "Security and Communication Networks, Volume 9",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1002/sec.1727",
        "title": "Efficient Android-based storage encryption using multi-core CPUs",
        "authors": "Mohammad Ahmed Alomari, Khairulmizam Samsudin, Abdul Rahman Ramli, Shaiful J. Hashim",
        "abstract": "The huge proliferation of mobile and handheld devices, such as tablets and Smartphone devices, has come with different threats to the sensitive data and personally identifiable information stored inside these devices. The most efficient way to ensure data protection is through encryption; however, it comes with great impact on these small gadgets, which suffer from limited resources. Majority of recent mobile devices are equipped with increasingly powerful multi-core processors that researchers can leverage in order to enhance data protection while maintaining proper device performance. In this paper, we introduce a parallel implementation for data encryption inside the storage of Android-based mobile devices. This work implements a multi-core design of different encryption ciphers, making use of the commodity multi-core CPUs available currently in new smart gadget devices, in order to enhance the performance inside these resource-limited devices. Ciphers XTS-AES, XTS-Twofish, and XTS-RC6 are used during the experiments; however, the main focus is given to XTS-AES because it is developed specifically for storage encryption. Parallel encryption experiments are conducted on a mobile device, and performance comparisons are presented. The parallel XTS-AES has shown a maximum performance speedup of 1.71, with 86% efficiency, faster than the serial counterpart, with higher encryption throughput in the device up to 8290 and 11 380KB/s when using XTS-AES and XTS-RC6 ciphers, respectively. In addition, we performed comparison between mobile device and desktop machine using similar experimental setup. It shows that the performance of storage encryption in mobile devices still lags by more than 10 folds when compared with desktop environment. Copyright © 2017 John Wiley & Sons, Ltd.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "移动和手持设备(如平板电脑和智能手机设备)的大量涌现给存储在这些设备中的敏感数据和个人身份信息带来了不同的威胁。确保数据保护的最有效方式是通过加密；然而，它对这些资源有限的小设备产生了巨大的影响。大多数最新的移动设备都配备了越来越强大的多核处理器，研究人员可以利用这些处理器来增强数据保护，同时保持适当的设备性能。在本文中，我们介绍了一种基于Android的移动设备存储内部的数据加密并行实现。这项工作实现了不同加密算法的多核设计，利用了目前在新的智能小工具设备中可用的商用多核CPU，以增强这些资源有限的设备内部的性能。在实验中使用了XTS-AES、XTS-Twofish和XTS-RC6密码；然而，主要的焦点是XTS-AES，因为它是专门为存储加密开发的。在移动设备上进行并行加密实验，并进行性能比较。并行XTS-AES的最大性能加速比为1.71，效率为86%，比串行产品更快，在使用XTS-AES和XTS-RC6密码时，设备的加密吞吐量分别高达8290和11 380KB/s。此外，我们使用类似的实验设置对移动设备和桌面机进行了比较。它表明，与桌面环境相比，移动设备中的存储加密性能仍然滞后10倍以上。版权所有2017约翰威利父子有限公司。",
        "title_zh": "使用多核CPU实现高效的基于Android的存储加密",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn9.html",
        "conf_title": "Security and Communication Networks, Volume 9",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1002/sec.1746",
        "title": "Measuring the risk value of sensitive dataflow path in Android applications",
        "authors": "Pengbin Feng, Cong Sun, Jianfeng Ma",
        "abstract": "Nowadays, smartphones carry large amounts of user privacy and sensitive data. With the popularity of the Android operating system, the cases of sensitive date leakage in Android applications are on the rise and are causing a great loss to Android users. In order to mitigate this condition, static and dynamic taint analysis are applied to precisely detect sensitive data leakages. These approaches cannot distinguish sensitive data leakages in benign apps from the ones in malicious apps. Recently, the difference on sensitive data flows between benign apps and malicious apps has been found to be significant. In this paper, we further find that there exists great difference between benign and malicious apps on the frequencies of sensitive dataflow paths. This difference can be used to enforce a risk value over every sensitive dataflow path. This risk value can guide the identification of sensitive data leakages in malicious apps. We present RISKPATH, a tool that automatically calculates the risk values for sensitive dataflow paths in Android applications. Applying the result of RISKPATH to MUDFLOW framework, we increase the true positive rate of malware detection by 3.96–6.54% on different datasets with reasonable increase in time and memory consumption. Copyright © 2017 John Wiley & Sons, Ltd.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "如今，智能手机承载了大量的用户隐私和敏感数据。随着Android操作系统的普及，Android应用程序中的敏感数据泄露事件日益增多，给Android用户造成了巨大的损失。为了缓解这种情况，静态和动态污点分析被应用于精确检测敏感数据泄漏。这些方法无法区分良性应用程序和恶意应用程序中的敏感数据泄漏。最近，发现良性应用程序和恶意应用程序之间的敏感数据流差异很大。在本文中，我们进一步发现，良性和恶意应用在敏感数据流路径的出现频率上存在很大差异。这种差异可用于在每个敏感数据流路径上强制实施风险值。该风险值可以指导识别恶意应用中的敏感数据泄漏。我们介绍了RISKPATH，这是一个自动计算Android应用程序中敏感数据流路径的风险值的工具。将RISKPATH的结果应用于MUDFLOW框架，我们在不同数据集上将恶意软件检测的真实阳性率提高了3.96–6.54%，同时合理增加了时间和内存消耗。版权所有2017约翰威利父子有限公司。",
        "title_zh": "测量Android应用中敏感数据流路径的风险值",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn9.html",
        "conf_title": "Security and Communication Networks, Volume 9",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1002/sec.1750",
        "title": "CA-ARBAC: privacy preserving using context-aware role-based access control on Android permission system",
        "authors": "J. Abdella, Mustafa Özuysal, E. Tomur",
        "abstract": "Existing mobile platforms are based on manual way of granting and revoking permissions to applications. Once the user grants a given permission to an application, the application can use it without limit, unless the user manually revokes the permission. This has become the reason for many privacy problems because of the fact that a permission that is harmless at some occasion may be very dangerous at another condition. One of the promising solutions for this problem is context-aware access control at permission level that allows dynamic granting and denying of permissions based on some predefined context. However, dealing with policy configuration at permission level becomes very complex for the user as the number of policies to configure will become very large. For instance, if there are A applications, P permissions, and C contexts, the user may have to deal with A × P × C number of policy configurations. Therefore, we propose a context-aware role-based access control model that can provide dynamic permission granting and revoking while keeping the number of policies as small as possible. Although our model can be used for all mobile platforms, we use Android platform to demonstrate our system. In our model, Android applications are assigned roles where roles contain a set of permissions and contexts are associated with permissions. Permissions are activated and deactivated for the containing role based on the associated contexts. Our approach is unique in that our system associates contexts with permissions as opposed to existing similar works that associate contexts with roles. As a proof of concept, we have developed a prototype application called context-aware Android role-based access control. We have also performed various tests using our application, and the result shows that our model is working as desired. Copyright © 2017 John Wiley & Sons, Ltd.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "现有的移动平台是基于手动方式授予和撤销对应用程序的许可。一旦用户向应用程序授予给定的权限，应用程序就可以无限制地使用它，除非用户手动撤销该权限。这已经成为许多隐私问题的原因，因为在某些情况下无害的许可在另一种情况下可能是非常危险的。这个问题的一个有希望的解决方案是在权限级别的上下文感知访问控制，它允许基于一些预定义的上下文动态地授予和拒绝权限。但是，对于用户来说，在权限级别处理策略配置变得非常复杂，因为要配置的策略数量会变得非常大。例如，如果有应用程序、P权限和C上下文，用户可能必须处理× P × C数量的策略配置。因此，我们提出了一个上下文感知的基于角色的访问控制模型，它可以提供动态的权限授予和撤销，同时保持尽可能少的策略数量。虽然我们的模型可以用于所有的移动平台，但我们使用Android平台来演示我们的系统。在我们的模型中，Android应用程序被分配了角色，其中角色包含一组权限，上下文与权限相关联。基于相关联的上下文来激活和停用包含角色的权限。我们的方法是独特的，因为我们的系统将上下文与权限相关联，这与现有的将上下文与角色相关联的类似工作相反。作为概念验证，我们开发了一个原型应用程序，名为基于角色的上下文感知Android访问控制。我们还使用我们的应用程序执行了各种测试，结果表明我们的模型工作正常。版权所有2017约翰威利父子有限公司。",
        "title_zh": "CA-ARBAC:在Android权限系统中使用上下文感知的基于角色的访问控制保护隐私",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn9.html",
        "conf_title": "Security and Communication Networks, Volume 9",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1155/2018/5249190",
        "title": "LSTM-Based Hierarchical Denoising Network for Android Malware Detection",
        "authors": "Jinpei Yan, Yong Qi, Qifan Rao",
        "abstract": "Mobile security is an important issue on Android platform. Most malware detection methods based on machine learning models heavily rely on expert knowledge for manual feature engineering, which are still difficult to fully describe malwares. In this paper, we present LSTM-based hierarchical denoise network (HDN), a novel static Android malware detection method which uses LSTM to directly learn from the raw opcode sequences extracted from decompiled Android files. However, most opcode sequences are too long for LSTM to train due to the gradient vanishing problem. Hence, HDN uses a hierarchical structure, whose first-level LSTM parallelly computes on opcode subsequences (we called them method blocks) to learn the dense representations; then the second-level LSTM can learn and detect malware through method block sequences. Considering that malicious behavior only appears in partial sequence segments, HDN uses method block denoise module (MBDM) for data denoising by adaptive gradient scaling strategy based on loss cache. We evaluate and compare HDN with the latest mainstream researches on three datasets. The results show that HDN outperforms these Android malware detection methods,and it is able to capture longer sequence features and has better detection efficiency than -gram-based malware detection which is similar to our method.",
        "files": {
            "openAccessPdf": "http://downloads.hindawi.com/journals/scn/2018/5249190.pdf"
        },
        "abstract_zh": "移动安全是Android平台上的一个重要问题。大多数基于机器学习模型的恶意软件检测方法严重依赖人工特征工程的专家知识，仍然难以完全描述恶意软件。在本文中，我们提出了基于LSTM的分层去噪网络(HDN)，一种新的静态Android恶意软件检测方法，使用LSTM直接从反编译的Android文件中提取的原始操作码序列中学习。然而，由于梯度消失问题，大多数操作码序列对于LSTM来说太长而无法训练。因此，HDN使用分层结构，其第一级LSTM并行计算操作码子序列(我们称之为方法块)来学习密集表示；那么第二级LSTM可以通过方法块序列来学习和检测恶意软件。考虑到恶意行为只出现在部分序列片段中，HDN采用基于丢失缓存的自适应梯度缩放策略，使用方法块去噪模块(MBDM)进行数据去噪。我们在三个数据集上评估和比较了HDN和最新的主流研究。实验结果表明，HDN优于这些Android恶意软件检测方法，能够捕获更长的序列特征，检测效率优于与我们方法相似的基于gram的恶意软件检测方法。",
        "title_zh": "基于LSTM的分层去噪网络在Android恶意软件检测中的应用",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn2018.html",
        "conf_title": "Security and Communication Networks, Volume 2018",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1155/2018/2489214",
        "title": "Large-Scale Analysis of Remote Code Injection Attacks in Android Apps",
        "authors": "Hyunwoo Choi, Yongdae Kim",
        "abstract": "It is pretty well known that insecure code updating procedures for Android allow remote code injection attack. However, other than codes, there are many resources in Android that have to be updated, such as temporary files, images, databases, and configurations (XML and JSON). Security of update procedures for these resources is largely unknown. This paper investigates general conditions for remote code injection attacks on these resources. Using this, we design and implement a static detection tool that automatically identifies apps that meet these conditions. We apply the detection tool to a large dataset comprising 9,054 apps, from three different types of datasets: official market, third-party market, and preinstalled apps. As a result, 97 apps were found to be potentially vulnerable, with 53 confirmed as vulnerable to remote code injection attacks.",
        "files": {
            "openAccessPdf": "https://downloads.hindawi.com/journals/scn/2018/2489214.pdf"
        },
        "abstract_zh": "众所周知，Android的不安全代码更新程序允许远程代码注入攻击。然而，除了代码，Android中还有许多资源需要更新，如临时文件、图像、数据库和配置(XML和JSON)。这些资源的更新过程的安全性在很大程度上是未知的。本文研究了针对这些资源的远程代码注入攻击的一般条件。利用这一点，我们设计并实现了一个静态检测工具，可以自动识别满足这些条件的应用程序。我们将检测工具应用于由9，054个应用组成的大型数据集，这些应用来自三种不同类型的数据集:官方市场、第三方市场和预装应用。结果，发现97个应用程序存在潜在漏洞，其中53个被确认易受远程代码注入攻击。",
        "title_zh": "Android应用中远程代码注入攻击的大规模分析",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn2018.html",
        "conf_title": "Security and Communication Networks, Volume 2018",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1155/2018/2854728",
        "title": "AppFA: A Novel Approach to Detect Malicious Android Applications on the Network",
        "authors": "Gaofeng He, Bingfeng Xu, Haiting Zhu",
        "abstract": "We propose AppFA, an Application Flow Analysis approach, to detect malicious Android applications (simply apps) on the network. Unlike most of the existing work, AppFA does not need to install programs on mobile devices or modify mobile operating systems to extract detection features. Besides, it is able to handle encrypted network traffic. Specifically, we propose a constrained clustering algorithm to classify apps network traffic, and use Kernel Principal Component Analysis to build their network behavior profiles. After that, peer group analysis is explored to detect malicious apps by comparing apps’ network behavior profiles with the historical data and the profiles of their selected peer groups. These steps can be repeated every several minutes to meet the requirement of online detection. We have implemented AppFA and tested it with a public dataset. The experimental results show that AppFA can cluster apps network traffic efficiently and detect malicious Android apps with high accuracy and low false positive rate. We have also tested the performance of AppFA from the computational time standpoint.",
        "files": {
            "openAccessPdf": "http://downloads.hindawi.com/journals/scn/2018/2854728.pdf"
        },
        "abstract_zh": "我们提出了AppFA，一种应用流分析方法，用于检测网络上的恶意Android应用程序(简称为应用程序)。与现有的大多数工作不同，AppFA不需要在移动设备上安装程序或修改移动操作系统来提取检测特征。此外，它能够处理加密的网络流量。具体来说，我们提出了一种约束聚类算法来分类应用程序的网络流量，并使用核主成分分析来建立它们的网络行为特征。之后，对等组分析通过将应用程序的网络行为配置文件与历史数据及其所选对等组的配置文件进行比较来检测恶意应用程序。这些步骤可以每隔几分钟重复一次，以满足在线检测的要求。我们已经实现了AppFA，并用公共数据集进行了测试。实验结果表明，AppFA能够高效地对应用网络流量进行聚类，并以较高的准确率和较低的误报率检测出恶意Android应用。我们还从计算时间的角度测试了AppFA的性能。",
        "title_zh": "AppFA:一种检测网络上恶意Android应用的新方法",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn2018.html",
        "conf_title": "Security and Communication Networks, Volume 2018",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1155/2018/7064131",
        "title": "Demadroid: Object Reference Graph-Based Malware Detection in Android",
        "authors": "Huanran Wang, Hui He, Weizhe Zhang",
        "abstract": "Smartphone usage has been continuously increasing in recent years. In addition, Android devices are widely used in our daily life, becoming the most attractive target for hackers. Therefore, malware analysis of Android platform is in urgent demand. Static analysis and dynamic analysis methods are two classical approaches. However, they also have some drawbacks. Motivated by this, we present Demadroid, a framework to implement the detection of Android malware. We obtain the dynamic information to build Object Reference Graph and propose λ-VF2 algorithm for graph matching. Extensive experiments show that Demadroid can efficiently identify the malicious features of malware. Furthermore, the system can effectively resist obfuscated attacks and the variants of known malware to meet the demand for actual use.",
        "files": {
            "openAccessPdf": "http://downloads.hindawi.com/journals/scn/2018/7064131.pdf"
        },
        "abstract_zh": "近年来，智能手机的使用持续增加。此外，Android设备在我们的日常生活中被广泛使用，成为最吸引黑客的目标。因此，Android平台的恶意软件分析需求迫切。静态分析和动态分析是两种经典的方法。然而，它们也有一些缺点。受此启发，我们提出了Demadroid，一个实现Android恶意软件检测的框架。获取动态信息构建对象参考图，提出λ-VF2算法进行图匹配。大量实验表明，Demadroid能够有效识别恶意软件的恶意特征。此外，该系统可以有效抵御混淆攻击和已知恶意软件的变种，以满足实际使用的需求。",
        "title_zh": "dema droid:Android中基于对象引用图的恶意软件检测",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn2018.html",
        "conf_title": "Security and Communication Networks, Volume 2018",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1155/2018/5749481",
        "title": "Android Malware Characterization Using Metadata and Machine Learning Techniques",
        "authors": "Ignacio Martín, José Alberto Hernández, Alfonso Muñoz, Antonio Guzmán",
        "abstract": "Android malware has emerged as a consequence of the increasing popularity of smartphones and tablets. While most previous work focuses on inherent characteristics of Android apps to detect malware, this study analyses indirect features and metadata to identify patterns in malware applications. Our experiments show the following: (1) the permissions used by an application offer only moderate performance results; (2) other features publicly available at Android markets are more relevant in detecting malware, such as the application developer and certificate issuer; and (3) compact and efficient classifiers can be constructed for the early detection of malware applications prior to code inspection or sandboxing.",
        "files": {
            "openAccessPdf": "http://downloads.hindawi.com/journals/scn/2018/5749481.pdf"
        },
        "abstract_zh": "随着智能手机和平板电脑的日益普及，Android恶意软件应运而生。虽然以前的大多数工作都侧重于Android应用程序的内在特征来检测恶意软件，但这项研究分析了间接特征和元数据来识别恶意软件应用程序中的模式。我们的实验表明:(1)应用程序使用的权限仅提供中等的性能结果；(2)在Android markets公开可用的其他特征与检测恶意软件更相关，例如应用开发者和证书发行者；以及(3)可以构建紧凑且高效的分类器，用于在代码检查或沙箱化之前早期检测恶意软件应用。",
        "title_zh": "使用元数据和机器学习技术的Android恶意软件表征",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn2018.html",
        "conf_title": "Security and Communication Networks, Volume 2018",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1155/2018/6280768",
        "title": "Static and Dynamic Analysis of Android Malware and Goodware Written with Unity Framework",
        "authors": "Jaewoo Shim, Kyeonghwan Lim, Seong-je Cho, Sangchul Han, Minkyu Park",
        "abstract": "Unity is the most popular cross-platform development framework to develop games for multiple platforms such as Android, iOS, and Windows Mobile. While Unity developers can easily develop mobile apps for multiple platforms, adversaries can also easily build malicious apps based on the “write once, run anywhere” (WORA) feature. Even though malicious apps were discovered among Android apps written with Unity framework (Unity apps), little research has been done on analysing the malicious apps. We propose static and dynamic reverse engineering techniques for malicious Unity apps. We first inspect the executable file format of a Unity app and present an effective static analysis technique of the Unity app. Then, we also propose a systematic technique to analyse dynamically the Unity app. Using the proposed techniques, the malware analyst can statically and dynamically analyse Java code, native code in C or C ++, and the Mono runtime layer where the C# code is running.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Unity是最流行的跨平台开发框架，用于为Android、iOS和Windows Mobile等多个平台开发游戏。虽然Unity开发者可以轻松开发适用于多个平台的移动应用，但对手也可以轻松构建基于“一次编写，随处运行”(WORA)功能的恶意应用。尽管在用Unity framework编写的Android应用程序(Unity apps)中发现了恶意应用程序，但很少有人对恶意应用程序进行分析。我们提出了针对恶意Unity应用的静态和动态逆向工程技术。我们首先检查了Unity应用程序的可执行文件格式，并提出了一种有效的Unity应用程序静态分析技术。然后，我们还提出了一个动态分析Unity应用程序的系统技术。使用所提出的技术，恶意软件分析师可以静态和动态地分析Java代码、C或C ++中的本机代码以及运行C#代码的Mono运行时层。",
        "title_zh": "用Unity框架编写的Android恶意软件和恶意软件的静态和动态分析",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn2018.html",
        "conf_title": "Security and Communication Networks, Volume 2018",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1155/2018/7352030",
        "title": "Session Fingerprinting in Android via Web-to-App Intercommunication",
        "authors": "Efthimios Alepis, Constantinos Patsakis",
        "abstract": "The extensive adoption of mobile devices in our everyday lives, apart from facilitating us through their various enhanced capabilities, has also raised serious privacy concerns. While mobile devices are equipped with numerous sensors which offer context-awareness to their installed apps, they can also be exploited to reveal sensitive information when correlated with other data or sources. Companies have introduced a plethora of privacy invasive methods to harvest users’ personal data for profiling and monetizing purposes. Nonetheless, up till now, these methods were constrained by the environment they operate, e.g., browser versus mobile app, and since only a handful of businesses have actual access to both of these environments, the conceivable risks could be calculated and the involved enterprises could be somehow monitored and regulated. This work introduces some novel user deanonymization approaches for device and user fingerprinting in Android. Having Android AOSP as our baseline, we prove that web pages, by using several inherent mechanisms, can cooperate with installed mobile apps to identify which sessions operate in specific devices and consequently further expose users’ privacy.",
        "files": {
            "openAccessPdf": "http://downloads.hindawi.com/journals/scn/2018/7352030.pdf"
        },
        "abstract_zh": "移动设备在我们日常生活中的广泛采用，除了通过其各种增强的功能为我们提供便利之外，还引发了严重的隐私问题。虽然移动设备配备了许多传感器，可为其安装的应用程序提供上下文感知，但当与其他数据或来源相关联时，它们也可能被利用来泄露敏感信息。公司已经引入了大量侵犯隐私的方法来收集用户的个人数据，以达到建档和赚钱的目的。然而，到目前为止，这些方法受到它们运行的环境的限制，例如，浏览器与移动应用程序，并且由于只有少数企业能够实际访问这两种环境，因此可以计算可想象的风险，并且可以以某种方式监控和管理所涉及的企业。本文介绍了一些新颖的用户去匿名化方法，用于Android中的设备和用户指纹识别。以Android AOSP为基线，我们证明了网页通过使用几种内在机制，可以与安装的移动应用程序合作，以识别哪些会话在特定设备上运行，从而进一步暴露用户的隐私。",
        "title_zh": "Android中通过网络到应用互通的会话指纹识别",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn2018.html",
        "conf_title": "Security and Communication Networks, Volume 2018",
        "conf_url": "",
        "keywords": [
            "AOSP",
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1155/2018/8510256",
        "title": "Design and Analysis of Push Notification-Based Malware on Android",
        "authors": "Sangwon Hyun, Junsung Cho, Geumhwan Cho, Hyoungshick Kim",
        "abstract": "Establishing secret command and control (C&C) channels from attackers is important in malware design. This paper presents design and analysis of malware architecture exploiting push notification services as C&C channels. The key feature of the push notification-based malware design is remote triggering, which allows attackers to trigger and execute their malware by push notifications. The use of push notification services as covert channels makes it difficult to distinguish this type of malware from other normal applications also using the same services. We implemented a backdoor prototype on Android devices as a proof-of-concept of the push notification-based malware and evaluated its stealthiness and feasibility. Our malware implementation effectively evaded the existing malware analysis tools such as 55 antimalware scanners from VirusTotal and SandDroid. In addition, our backdoor implementation successfully cracked about 98% of all the tested unlock secrets (either PINs or unlock patterns) in 5 seconds with only a fraction (less than 0.01%) of the total power consumption of the device. Finally, we proposed several defense strategies to mitigate push notification-based malware by carefully analyzing its attack process. Our defense strategies include filtering subscription requests for push notifications from suspicious applications, providing centralized management and access control of registration tokens of applications, detecting malicious push messages by analyzing message contents and characteristic patterns demonstrated by malicious push messages, and detecting malware by analyzing the behaviors of applications after receiving push messages.",
        "files": {
            "openAccessPdf": "http://downloads.hindawi.com/journals/scn/2018/8510256.pdf"
        },
        "abstract_zh": "在恶意软件设计中，建立针对攻击者的秘密命令和控制(C&C)通道是非常重要的。本文介绍了恶意软件架构的设计和分析，利用推送通知服务作为C&C通道。基于推送通知的恶意软件设计的关键特征是远程触发，这允许攻击者通过推送通知来触发和执行他们的恶意软件。使用推送通知服务作为隐蔽通道使得很难将这种类型的恶意软件与也使用相同服务的其他正常应用程序区分开来。我们在Android设备上实现了一个后门原型，作为基于推送通知的恶意软件的概念验证，并评估了它的隐蔽性和可行性。我们的恶意软件实现有效地规避了现有的恶意软件分析工具，如来自VirusTotal和SandDroid的55个反恶意软件扫描器。此外，我们的后门实现在5秒内成功破解了所有测试的解锁秘密(pin或解锁模式)的大约98%，而设备的总功耗只有一小部分(不到0.01%)。最后，通过仔细分析基于推送通知的恶意软件的攻击过程，我们提出了几种防御策略来缓解这种恶意软件。我们的防御策略包括过滤来自可疑应用程序的推送通知订阅请求，提供应用程序注册令牌的集中管理和访问控制，通过分析恶意推送消息所展示的消息内容和特征模式来检测恶意推送消息，以及通过分析应用程序在接收推送消息后的行为来检测恶意软件。",
        "title_zh": "Android平台上基于推送通知的恶意软件的设计与分析",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn2018.html",
        "conf_title": "Security and Communication Networks, Volume 2018",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1155/2018/5313980",
        "title": "Cyberspace Security for Future Internet",
        "authors": "Dafang Zhang, Guojun Wang, Xin Wang, Zhengyu Li, Wenjia Li",
        "abstract": "Cyberspace is the most popular environment for information exchange whose security suffers from ever-increasing challenges with the rapid development of the Internet. This issue published 7 latest contributions on cyberspace security for future Internet. Due to the fast advance of mobile technologies and mobile applications, smartphones, especially Android devices, are widely used in our daily life, which are threatened greatly by attacks. Therefore, malware analysis on Android platform is in urgent demand. Regarding drawbacks of existing static and dynamic analysis approaches, a new framework is introduced here, which can better satisfy the demand for actual use. In addition to malware detection, privacy is another big concern. For example, mobile devices are always equipped with numerous sensors, which may reveal sensitive information when correlated with other data or sources. How to protect user privacy or identify privacy risks exposed by applications? Some novel user deanonymization approaches and user fingerprinting in Android are introduced. Besides, location-based services (LBSs) becomemore andmore popular in mobile Internet, such as map directions, restaurant recommendations, and taxi reservations. Regarding the privacy of personal location information, an efficient and privacypreserving multiuser query scheme is presented for cloudbased LBSs. Access control, on the other hand, also plays a very important role in cyberspace security. Regarding the absence of a flexible exceptional approval mechanism in attribute-based access control (ABAC), a feasible fuzzy-extended ABAC technique is presented, which improves the flexibility in urgent exceptional authorizations and thereby improves the resource usability and business timeliness. In the field of satellite communication, existing centralized authentication protocols forMEO/GEO satellite networks cannot accommodate LEO satellite networks with frequent user connection switching. Combining identity-based encryption and the block-chain technology, a fast and efficient access verification protocol is introduced. New architectures and new computing technologies bring in both opportunities and challenges in cyberspace security. In Small Object Networks with IPv6, the process of Duplicate Address Detection is subject to many attacks. In view of this, a new algorithm to optimize the security in IPv6-DAD is presented.With quantum computers, cyberspace security has become the most critical issue in the Internet in near future. So, characteristics of the quantum cryptography and how to use it in future Internet are analyzed.",
        "files": {
            "openAccessPdf": "https://downloads.hindawi.com/journals/scn/2018/5313980.pdf"
        },
        "abstract_zh": "网络空间是最受欢迎的信息交流环境，随着互联网的快速发展，其安全性面临着越来越大的挑战。本期刊登了7篇关于未来互联网网络空间安全的最新文章。由于移动技术和移动应用的快速发展，智能手机，尤其是Android设备在我们的日常生活中得到了广泛的应用，这些设备受到了攻击的极大威胁。因此，Android平台上的恶意软件分析需求迫切。针对现有静态和动态分析方法的不足，提出了一种新的框架，可以更好地满足实际应用的需求。除了恶意软件检测，隐私是另一个大问题。例如，移动设备总是配备有大量传感器，当与其他数据或来源相关联时，这些传感器可能会泄露敏感信息。如何保护用户隐私或识别应用暴露的隐私风险？介绍了Android中一些新颖的用户去匿名化方法和用户指纹技术。此外，基于位置的服务(lbs)在移动互联网中越来越受欢迎，如地图导航、餐馆推荐和出租车预订。针对个人位置信息的隐私性，提出了一种基于云的lbs的高效隐私保护多用户查询方案。另一方面，访问控制在网络空间安全中也起着非常重要的作用。针对基于属性的访问控制(ABAC)缺乏灵活的例外授权机制的问题，提出了一种可行的模糊扩展ABAC技术，提高了紧急例外授权的灵活性，从而提高了资源可用性和业务时效性。在卫星通信领域，现有的针对EO/GEO卫星网络的集中式认证协议无法适应用户连接频繁切换的LEO卫星网络。结合基于身份的加密和块链技术，提出了一种快速有效的访问验证协议。新架构和新计算技术给网络空间安全带来了机遇和挑战。在使用IPv6的小型对象网络中，重复地址检测过程会受到许多攻击。鉴于此，提出了一种优化IPv6安全性的新算法-DAD。随着量子计算机的出现，在不久的将来，网络空间安全已经成为互联网中最关键的问题。因此，分析了量子密码的特点以及如何在未来的互联网中使用量子密码。",
        "title_zh": "未来互联网的网络空间安全",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn2018.html",
        "conf_title": "Security and Communication Networks, Volume 2018",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1155/2018/9856537",
        "title": "A Security Sandbox Approach of Android Based on Hook Mechanism",
        "authors": "Xin Jiang, Mingzhe Liu, Kun Yang, Yanhua Liu, Ruili Wang",
        "abstract": "As the most widely applied mobile operating system for smartphones, Android is challenged by fast growing security problems, which are caused by malicious applications. Behaviors of malicious applications have become more and more inconspicuous, which largely increase the difficulties of security detection. This paper provides a new security sandbox approach of Android based on hook mechanism, to further enrich Android malware detection technologies. This new sandbox monitors the behaviors of target application by using a process hook-based dynamic tracking method during its running period. Compared to existing techniques, (1) this approach can create a virtual space where apk can be installed, run, and uninstalled, and it is isolated from the outside and (2) a risk assessment approach based on behavior analysis is given so that users can obtain an explicit risk prognosis for an application to improve their safety. Tests on malware and normal application samples verify this new security sandbox.",
        "files": {
            "openAccessPdf": "http://downloads.hindawi.com/journals/scn/2018/9856537.pdf"
        },
        "abstract_zh": "作为智能手机上应用最广泛的移动操作系统，Android受到了由恶意应用程序引起的快速增长的安全问题的挑战。恶意应用程序的行为变得越来越隐蔽，这大大增加了安全检测的难度。本文提出了一种新的基于钩子机制的Android安全沙箱方法，进一步丰富了Android恶意软件检测技术。这个新的沙箱通过使用基于进程钩子的动态跟踪方法来监控目标应用程序在运行期间的行为。与现有技术相比,( 1)该方法可以创建一个虚拟空间，apk可以在其中安装、运行和卸载，并且与外界隔离;( 2)给出了一种基于行为分析的风险评估方法，以便用户可以获得应用程序的明确风险预测，从而提高他们的安全性。对恶意软件和正常应用程序样本的测试验证了这一新的安全沙箱。",
        "title_zh": "一种基于钩子机制的Android安全沙盒方法",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn2018.html",
        "conf_title": "Security and Communication Networks, Volume 2018",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1155/2018/4672072",
        "title": "Analysis and Evaluation of SafeDroid v2.0, a Framework for Detecting Malicious Android Applications",
        "authors": "Marios Argyriou, Nicola Dragoni, Angelo Spognardi",
        "abstract": "Android smartphones have become a vital component of the daily routine of millions of people, running a plethora of applications available in the official and alternative marketplaces. Although there are many security mechanisms to scan and filter malicious applications, malware is still able to reach the devices of many end-users. In this paper, we introduce the SafeDroid v2.0 framework, that is a flexible, robust, and versatile open-source solution for statically analysing Android applications, based on machine learning techniques. The main goal of our work, besides the automated production of fully sufficient prediction and classification models in terms of maximum accuracy scores and minimum negative errors, is to offer an out-of-the-box framework that can be employed by the Android security researchers to efficiently experiment to find effective solutions: the SafeDroid v2.0 framework makes it possible to test many different combinations of machine learning classifiers, with a high degree of freedom and flexibility in the choice of features to consider, such as dataset balance and dataset selection. The framework also provides a server, for generating experiment reports, and an Android application, for the verification of the produced models in real-life scenarios. An extensive campaign of experiments is also presented to show how it is possible to efficiently find competitive solutions: the results of our experiments confirm that SafeDroid v2.0 can reach very good performances, even with highly unbalanced dataset inputs and always with a very limited overhead.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android智能手机已经成为数百万人日常生活的重要组成部分，运行着官方和替代市场上的大量应用程序。尽管有许多安全机制来扫描和过滤恶意应用程序，恶意软件仍然能够到达许多最终用户的设备。在本文中，我们介绍了SafeDroid v2.0框架，这是一个灵活、健壮和通用的开源解决方案，用于静态分析Android应用程序，基于机器学习技术。除了在最大准确度分数和最小负误差方面自动生成充分充分的预测和分类模型之外，我们工作的主要目标是提供一个现成的框架，可供Android安全研究人员用来有效地进行实验以找到有效的解决方案:SafeDroid v2.0框架使测试机器学习分类器的许多不同组合成为可能，在选择要考虑的功能方面具有高度的自由度和灵活性，如数据集平衡和数据集选择。该框架还提供了一个服务器，用于生成实验报告，以及一个Android应用程序，用于在真实场景中验证生成的模型。本文还介绍了一系列广泛的实验，以展示如何高效地找到有竞争力的解决方案:我们的实验结果证实，SafeDroid v2.0可以达到非常好的性能，即使是在高度不平衡的数据集输入下，并且总是以非常有限的开销。",
        "title_zh": "SafeDroid v2.0的分析与评估，一个检测恶意Android应用程序的框架",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn2018.html",
        "conf_title": "Security and Communication Networks, Volume 2018",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1155/2018/9846168",
        "title": "Portable Implementation of Postquantum Encryption Schemes and Key Exchange Protocols on JavaScript-Enabled Platforms",
        "authors": "Ye Yuan, Junting Xiao, Kazuhide Fukushima, Shinsaku Kiyomoto, Tsuyoshi Takagi",
        "abstract": "Quantum computers have the potential to solve some difficult mathematical problems efficiently and thus will inevitably exert a more significant impact on the traditional asymmetric cryptography. The National Institute of Standards and Technology (NIST) has opened a formal call for the submission of proposals of quantum-resistant public-key cryptographic algorithms to set the next-generation cryptography standards. Compared to powerful machines with ample amount of hardware resources such as racks of servers and IoT devices, including the massive number of microcontrollers, smart terminals, and sensor nodes with limited computing capacity, should also have some postquantum cryptography features for security and privacy. To ensure the correct execution of encryption algorithms on any platforms, the portability of implementation becomes more important. As distinguished from C/C++, JavaScript is a popular cross-platform language that can be used for the web applications and some hardware platforms directly, and it could be one of the solutions of portability. Therefore, we investigate and implement several recent lattice-based encryption schemes and public-key exchange protocols including Lizard, ring-Lizard, Kyber, Frodo, and NewHope in JavaScript, which are the active candidates of postquantum cryptography due to their applicabilities and efficiencies. We show and compare the performance of our JavaScript implementation on web browsers, embedded device Tessel2, Android phone, and several JavaScript-enabled platforms on PC and Mac. Our work shows that implementing lattice-based cryptography on JavaScript-enabled platforms is achievable and results in desirable portability.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "量子计算机具有高效解决一些数学难题的潜力，因此不可避免地会对传统的非对称密码产生更大的影响。美国国家标准与技术研究院(NIST)已经正式公开征集抗量子公钥密码算法提案，以制定下一代密码标准。相比于拥有大量硬件资源(如服务器机架和物联网设备)的强大机器，包括数量庞大的微控制器、智能终端和计算能力有限的传感器节点，还应该具有一些后量子密码特性来实现安全和隐私。为了确保加密算法在任何平台上的正确执行，实现的可移植性变得更加重要。与C/C++不同，JavaScript是一种流行的跨平台语言，可以直接用于web应用程序和一些硬件平台，是可移植性的解决方案之一。因此，我们研究并实现了几个最新的基于格的加密方案和公钥交换协议，包括Lizard、ring-Lizard、Kyber、Frodo和NewHope，由于它们的适用性和效率，它们是后量子密码术的活跃候选。我们展示并比较了我们的JavaScript实现在web浏览器、嵌入式设备Tessel2、Android手机以及PC和Mac上的几个支持JavaScript的平台上的性能。我们的工作表明，在支持JavaScript的平台上实现基于格的加密是可以实现的，并带来了理想的可移植性。",
        "title_zh": "JavaScript平台上后量子加密方案和密钥交换协议的可移植实现",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn2018.html",
        "conf_title": "Security and Communication Networks, Volume 2018",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1155/2018/3980371",
        "title": "User Presence Inference via Encrypted Traffic of Wireless Camera in Smart Homes",
        "authors": "Xiaoyu Ji, Yushi Cheng, Wenyuan Xu, Xinyan Zhou",
        "abstract": "Wireless cameras are widely deployed in smart homes for security guarding, baby monitoring, fall detection, and so on. Those security cameras, which are supposed to protect users, however, may in turn leak a user’s personal privacy. In this paper, we reveal that attackers are able to infer whether users are at home or not, that is, the user presence, by eavesdropping the traffic of wireless cameras from distance. We propose HomeSpy, a system that infers user presence by inspecting the intrinsic pattern of the wireless camera traffic. To infer the user presence, HomeSpy first eavesdrops the wireless traffic around the target house and detects the existence of wireless cameras with a Long Short-Term Memory (LSTM) network. Then, HomeSpy infers the user presence using the bitrate variation of the wireless camera traffic based on a cumulative sum control chart (CUSUM) algorithm. We implement HomeSpy on the Android platform and validate it on 20 cameras. The evaluation results show that HomeSpy can achieve a successful attack rate of 97.2%.",
        "files": {
            "openAccessPdf": "http://downloads.hindawi.com/journals/scn/2018/3980371.pdf"
        },
        "abstract_zh": "无线摄像头广泛部署在智能家居中，用于安全防范、婴儿监控、跌倒检测等。然而，那些本应保护用户的安全摄像头可能会反过来泄露用户的个人隐私。在本文中，我们揭示了攻击者能够通过从远处窃听无线摄像机的流量来推断用户是否在家，即用户的存在。我们提出了HomeSpy，这是一个通过检查无线摄像头流量的内在模式来推断用户存在的系统。为了推断用户的存在，HomeSpy首先窃听目标房屋周围的无线流量，并通过长短期记忆(LSTM)网络检测无线摄像头的存在。然后，HomeSpy基于累积和控制图(CUSUM)算法使用无线摄像机流量的比特率变化来推断用户存在。我们在Android平台上实现了HomeSpy，并在20台相机上进行验证。评测结果显示，HomeSpy可以达到97.2%的攻击成功率。",
        "title_zh": "智能家居中基于无线摄像头加密流量的用户在场推断",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn2018.html",
        "conf_title": "Security and Communication Networks, Volume 2018",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1155/2018/8087303",
        "title": "RoughDroid: Operative Scheme for Functional Android Malware Detection",
        "authors": "Khaled Riad, Lishan Ke",
        "abstract": "There are thousands of malicious applications that invade Google Play Store every day and seem to be legal applications. These malicious applications have the ability to link the malware referred to as Dresscode created for network hacking as well as scrolling information. Since Android smartphones are indispensable, there should be an efficient and also unusual protection. Therefore, Android smartphones usually continue to be safeguarded from novel malware. In this paper, we propose RoughDroid, a floppy analysis technique that can discover Android malware applications directly on the smartphone. RoughDroid is based on seven feature sets (FS1,FS2,…,FS7) from the XML manifest file of an Android application, plus three feature sets (FS8,FS9, and FS10) from the Dex file. Those feature sets pass through the Rough Set algorithm to elastically classify the Android application as either benign or malicious. The experimental results mainly consider 20 most common malware families, plus three new malware families (Grabos, TrojanDropper.Agent.BKY, and AsiaHitGroup) that invade Google Play Store at 2017. According to the experimental results, RoughDroid has 95.6% detection performance for the malware families at 1% false-positive rate. Finally, RoughDroid is a lightweight approach for straightly examining downloaded applications on the smartphone.",
        "files": {
            "openAccessPdf": "http://downloads.hindawi.com/journals/scn/2018/8087303.pdf"
        },
        "abstract_zh": "每天都有成千上万的恶意应用程序入侵谷歌Play商店，而这些应用程序看起来似乎是合法的。这些恶意应用程序能够链接为网络黑客创建的被称为Dresscode的恶意软件以及滚动信息。由于Android智能手机是不可或缺的，因此应该有一种高效且不同寻常的保护。因此，Android智能手机通常会继续防范新型恶意软件。在本文中，我们提出了RoughDroid，这是一种软盘分析技术，可以直接在智能手机上发现Android恶意软件应用程序。RoughDroid基于Android应用程序的XML清单文件中的七个特性集(FS1、FS2、…、FS7)，加上Dex文件中的三个特性集(FS8、FS9和FS10)。这些特征集通过粗糙集算法弹性地将Android应用程序分类为良性或恶意。实验结果主要考虑了20个最常见的恶意软件家族，加上三个新的恶意软件家族(Grabos，TrojanDropper。代理人BKY和亚洲组)在2017年入侵谷歌Play商店。实验结果表明，RoughDroid在1%的误报率下，对恶意软件家族的检测率达到95.6%。最后，RoughDroid是一种轻量级方法，用于直接检查智能手机上下载的应用程序。",
        "title_zh": "RoughDroid:功能性Android恶意软件检测的操作方案",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn2018.html",
        "conf_title": "Security and Communication Networks, Volume 2018",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1155/2018/2329891",
        "title": "An Improved Permission Management Scheme of Android Application Based on Machine Learning",
        "authors": "Shaozhang Niu, Ruqiang Huang, Wenbo Chen, Yiming Xue",
        "abstract": "The Android permission mechanism prevents malicious application from accessing the mobile multimedia data and invoking the sensitive API. However, there are still lots of deficiencies in the current permission management, which results in the permission mechanism being unable to protect users’ private data properly. In this paper, a dynamic management scheme of Android permission based on machine learning is proposed to solve the problem of the existing permission mechanism. In order to accomplish the dynamic management, the proposed scheme maintains a dynamic permission management database which records the state of permissions for each application. Only the permission which is granted state in the database can be used in this application. In the whole process, the scheme first classifies the application by means of machine learning, then retrieves the corresponding permission information from databases, and issues the dangerous permission warning to users. Finally, the scheme updates the dynamic management database according to the users’ decisions. Through this scheme, users can prevent malicious behaviour of accessing private data and invoking sensitive API in time. The solution increases the flexibility of permission management and improves the security and reliability of multimedia data in Android devices.",
        "files": {
            "openAccessPdf": "https://downloads.hindawi.com/journals/scn/2018/2329891.pdf"
        },
        "abstract_zh": "Android权限机制防止恶意应用程序访问移动多媒体数据和调用敏感的API。然而，目前的权限管理还存在很多不足，导致权限机制不能很好地保护用户的隐私数据。针对现有权限机制存在的问题，提出了一种基于机器学习的Android权限动态管理方案。为了实现动态管理，该方案维护一个动态权限管理数据库，记录每个应用程序的权限状态。只有在数据库中被授予状态的权限才能在此应用程序中使用。在整个过程中，该方案首先通过机器学习对应用程序进行分类，然后从数据库中检索相应的权限信息，并向用户发出危险权限警告。最后，该方案根据用户的决策更新动态管理数据库。通过该方案，用户可以及时阻止访问隐私数据和调用敏感API的恶意行为。该方案增加了权限管理的灵活性，提高了Android设备中多媒体数据的安全性和可靠性。",
        "title_zh": "一种基于机器学习的Android应用权限管理改进方案",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn2018.html",
        "conf_title": "Security and Communication Networks, Volume 2018",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1002/sec.986",
        "title": "Realization of a user-centric, privacy preserving permission framework for Android",
        "authors": "Mohammad Nauman, Sohail Khan, Abu Talib Othman, Shahrulniza Musa",
        "abstract": "Android has been steadily gaining market share, and the number of available applications is increasing at a healthy pace. Because of the myriad of third-party applications, privacy concerns are starting to surface in the community. Application developers usually request access to more system resources than are strictly required for their apps. However, the stock Android permission model does not allow users to selectively grant permissions. This is a well-known issue, but existing solutions to this problem are either too abstract or require detailed changes to the core model-making it difficult for both developers and users to accept them. In this paper, we present a fine-grained, user-centric permission model for Android that allows users to selectively grant permissions to applications that they install. Our model allows specification of permissions based on application and system attributes as well as simple yes or no policies. The model is kept as simple as possible, and its open source implementation is highly usable for the average end user. It requires minimal backward compatible changes to the core permission model and is shown to be highly efficient in terms of performance overhead. We present our model and point interested readers to our freely available changeset to help them use, evaluate, and improve our permission model. Copyright © 2014 John Wiley & Sons, Ltd.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android一直在稳步扩大市场份额，可用应用的数量也在以健康的速度增长。由于无数的第三方应用程序，隐私问题开始在社区中出现。应用程序开发人员通常要求访问比他们的应用程序严格要求的更多的系统资源。但是，股票Android权限模型不允许用户选择性地授予权限。这是一个众所周知的问题，但是这个问题的现有解决方案要么过于抽象，要么需要对核心模型进行详细的更改——这使得开发人员和用户都难以接受。在本文中，我们提出了一个细粒度的、以用户为中心的Android权限模型，允许用户有选择地向他们安装的应用程序授予权限。我们的模型允许根据应用程序和系统属性以及简单的是或否策略来指定权限。该模型尽可能简单，其开源实现对于普通最终用户来说非常有用。它只需要对核心权限模型进行最少的向后兼容的更改，并且在性能开销方面非常高效。我们展示了我们的模型，并将感兴趣的读者指向我们免费提供的变更集，以帮助他们使用、评估和改进我们的权限模型。版权所有2014约翰·威利父子有限公司",
        "title_zh": "面向Android的以用户为中心的隐私保护权限框架的实现",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn8.html",
        "conf_title": "Security and Communication Networks, Volume 8",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1002/sec.992",
        "title": "A privacy-preserving location tracking system for smartphones based on cloud storage",
        "authors": "Kao Zhao, Hai Jin, Deqing Zou, Weiqi Dai, Yang Xiang",
        "abstract": "With the widespread use of smartphones, the loss of a device is a critical problem, which results both in disrupting daily communications and losing valuable property. As a result, tracking systems have been developed to track mobile devices. Previous tracking systems focus on recovering the device's locations after it goes missing, with security methods implemented on the clients. However, users' locations are stored in untrusted third-party services, which may be attacked or eavesdropped. In this paper, we propose a system, named Android Cloud Tracker, to provide a privacy-preserving tracking client and safe storing of user's locations. We use cloud storage controlled by users themselves as storage facilities, and they do not need to worry about any untrusted third party. We implement Android Cloud Tracker prototype on Android phones, and the evaluation shows that it is both practical and lightweight: it generates a small amount of data flow and its distributed architecture provides strong guarantees of location privacy while preserving the ability to efficiently track missing devices. Copyright © 2014 John Wiley & Sons, Ltd.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "随着智能手机的广泛使用，设备丢失是一个非常严重的问题，它不仅会中断日常通信，还会造成宝贵财产的损失。因此，已经开发了跟踪系统来跟踪移动设备。以前的跟踪系统侧重于在设备丢失后恢复设备的位置，并在客户端实施安全措施。然而，用户的位置存储在不可信的第三方服务中，可能会受到攻击或窃听。在本文中，我们提出了一个名为Android Cloud Tracker的系统来提供隐私保护的跟踪客户端和用户位置的安全存储。我们使用用户自己控制的云存储作为存储设施，他们不需要担心任何不可信的第三方。我们在Android手机上实现了Android Cloud Tracker原型，评估表明它既实用又轻量:它生成少量数据流，其分布式架构为位置隐私提供了强有力的保证，同时保留了高效跟踪丢失设备的能力。版权所有2014约翰·威利父子有限公司",
        "title_zh": "基于云存储的隐私保护智能手机位置跟踪系统",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn8.html",
        "conf_title": "Security and Communication Networks, Volume 8",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1002/sec.1073",
        "title": "Enhancing malware detection for Android systems using a system call filtering and abstraction process",
        "authors": "Abdelfattah Amamra, Jean-Marc Robert, Chamseddine Talhi",
        "abstract": "Improving anomaly-based malware detection techniques has been widely studied in recent years. Most of these efforts have focused on the dataset available for analysis and/or the algorithms used to distinguish between normal or abnormal behavior. These factors have major impacts on the accuracy performance of the detection techniques as well as on their time and space complexities. In this paper, we revisit a classical anomaly-based malware detection approach (i.e., database of normal behavior) analyzing Android system calls with two conflicting objectives: reducing the time and space complexities of the selected approach without decreasing its accuracy performance. To achieve this goal, we introduce a filtering and abstraction process, which (i) removes irrelevant system calls to describe the main behavior of an Android application and (ii) unifies system calls having the same functionality but different names. This process is used to build a database describing a canonical normal behavior model of Android applications. This model is based on the 200 most popular free Android applications available in the Android market. It represents the last line of defense of an in-depth protection strategy for smartphone systems. The results of our experimentations show that our filtering and abstraction process has positive impacts on the performance and the accuracy of the selected malware detection approach. Copyright © 2014 John Wiley & Sons, Ltd.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "近年来，基于异常的恶意软件检测技术得到了广泛的研究。这些努力大多集中在可用于分析的数据集和/或用于区分正常或异常行为的算法上。这些因素对检测技术的精度性能以及它们的时间和空间复杂性有重大影响。在本文中，我们重新审视了一种经典的基于异常的恶意软件检测方法(即，正常行为的数据库)，该方法分析Android系统调用，具有两个相互冲突的目标:在不降低其准确性性能的情况下，降低所选方法的时间和空间复杂性。为了实现这一目标，我们引入了过滤和抽象过程，该过程(I)移除不相关的系统调用来描述Android应用的主要行为，以及(ii)统一具有相同功能但不同名称的系统调用。该过程用于建立描述Android应用的规范正常行为模型的数据库。该模型基于Android市场上200个最受欢迎的免费Android应用程序。它代表了智能手机系统深度保护策略的最后一道防线。我们的实验结果表明，我们的过滤和抽象过程对所选恶意软件检测方法的性能和准确性有积极的影响。版权所有2014约翰·威利父子有限公司",
        "title_zh": "使用系统调用过滤和抽象过程增强Android系统的恶意软件检测",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn8.html",
        "conf_title": "Security and Communication Networks, Volume 8",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1002/sec.1075",
        "title": "Duth: a user-friendly dual-factor authentication for Android smartphone devices",
        "authors": "Hui Zhu, Xiaodong Lin, Yun Zhang, Rongxing Lu",
        "abstract": "With the pervasiveness of smartphones and the richness of mobile apps, many people are storing increasingly sensitive data on them, in greater quantities. In order to protect this sensitive information from misuse due to loss, or other accidental reasons, strong smartphone authentication has become imperative and has received considerable attention in recent years. However, when we directly implement traditional authentication schemes in smartphone devices, the balance between security and user-friendliness of authentication becomes challenging, mainly because of the input-in-motion environments. In this paper, without adding extra hardware devices, we present a user-friendly, dual-factor authentication scheme called Duth, for Android smartphone devices. Specifically, the proposed Duth scheme is characterized by utilizing the spatial and time features of the user-writing process as two factors of authentication; a user can be authenticated only if these two features are fulfilled. We implement Duth in Java as a library, which we make publicly available. With extensive discussions on parameter selection, we choose proper parameters and implement Duth on a smartphone with Android 2.3 for experiments, and the experiment results demonstrate that Duth can indeed achieve efficient and effective dual-factor authentication. Copyright © 2014 John Wiley & Sons, Ltd.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "随着智能手机的普及和移动应用程序的丰富，许多人正在智能手机上存储越来越多的敏感数据。为了保护这些敏感信息不会因丢失或其他意外原因而被滥用，强智能手机身份认证变得势在必行，近年来受到了广泛关注。然而，当我们在智能手机设备中直接实现传统的身份验证方案时，身份验证的安全性和用户友好性之间的平衡变得具有挑战性，这主要是因为运动输入环境。本文在不增加额外硬件设备的情况下，提出了一种面向Android智能手机设备的用户友好的双因素认证方案Duth。具体而言，所提出的Duth方案的特征在于利用用户书写过程的空间和时间特征作为认证的两个因素；只有满足这两个特征，用户才能被认证。我们在Java中将Duth实现为一个库，并将其公开。通过对参数选择的广泛讨论，我们选择了合适的参数，并在Android 2.3智能手机上实现了Duth进行实验，实验结果表明Duth确实能够实现高效的双因素认证。版权所有2014约翰·威利父子有限公司",
        "title_zh": "Duth:一种面向Android智能手机设备的用户友好型双因素认证",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn8.html",
        "conf_title": "Security and Communication Networks, Volume 8",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1002/sec.1155",
        "title": "An effective behavior-based Android malware detection system",
        "authors": "Shihong Zou, Jing Zhang, Xiaodong Lin",
        "abstract": "With the rapid growth of Android applications and malware, it has become a challenge to distinguish malware from a huge number of applications. The use of behavioral analytics is one of the most promising approaches because of its accuracy and resilience to malware variants. In this paper, we propose a behavior-based malware detection system. Firstly, it uses Android APIs and libc Bionic libc function calls along with their arguments to describe sensitive application behaviors. Secondly, it conducts behavior analysis and malware detection using machine learning techniques, including Support Vector Machine, Naive Bayes, and Decision Tree. The experiments are conducted with 1136 real-world samples that are composed of various types of malware and benign applications. The evaluation results show that our system can effectively detect Android malware. In addition, we compare our system with the other behavior-based malware detection system, and the comparison results show the advantage of our system on malware detection. Copyright © 2014 John Wiley & Sons, Ltd.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "随着Android应用程序和恶意软件的快速增长，从大量应用程序中区分恶意软件已成为一项挑战。行为分析的使用是最有前途的方法之一，因为它的准确性和对恶意软件变种的弹性。本文提出了一种基于行为的恶意软件检测系统。首先，它使用Android APIs和libc仿生libc函数调用及其参数来描述敏感的应用程序行为。其次，它使用机器学习技术进行行为分析和恶意软件检测，包括支持向量机、朴素贝叶斯和决策树。实验使用1136个真实世界的样本进行，这些样本由各种类型的恶意软件和良性应用程序组成。评测结果表明，该系统能够有效检测Android恶意软件。此外，我们将我们的系统与其他基于行为的恶意软件检测系统进行了比较，比较结果显示了我们的系统在恶意软件检测方面的优势。版权所有2014约翰·威利父子有限公司",
        "title_zh": "一种有效的基于行为的Android恶意软件检测系统",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn8.html",
        "conf_title": "Security and Communication Networks, Volume 8",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1002/sec.1170",
        "title": "Detect repackaged Android application based on HTTP traffic similarity",
        "authors": "Xueping Wu, Dafang Zhang, Xin Su, Wenwei Li",
        "abstract": "In recent years, more and more malicious authors aim to Android platform because of the rapid growth number of Android Google, Menlo Park, California, USA applications or apps. They embedded malicious code into Android apps to execute their special malicious behaviors, such as sending text messages to premium numbers, stealing privacy information, or even converting the infected phones into bots. We called the app, which has been embedded with malicious code, as embedded repackaged app. This phenomena leads a big security risk to the Android users and how to detect them becomes an urgent problem. Previous research efforts focus on extracting the app's characteristics for comparison from its static program code, which neither can handle the code obfuscation technologies, nor can analyze the app's dynamic behaviors feature. To address these limitations, we propose an approach based on extracting the app's characteristics from the HTTP traffic, which is generated by the app. Moreover, we have implemented a multi-thread comparison algorithm based on the balanced Vantage Point Tree VPT, which can remarkably reduce the experiment time. In this experiment, we successfully detected 266 embedded repackaged apps from 7619 Android apps downloaded from six popular Android markets, and the distribution rate of each market ranges from 2.57% to 6.07%. Then based on the analyzing of the HTTP traffic generated by these embedded codes, we found that majority of them are advertisement traffic and malicious traffic. Copyright © 2015 John Wiley & Sons, Ltd.",
        "files": {
            "openAccessPdf": "https://onlinelibrary.wiley.com/doi/pdfdirect/10.1002/sec.1170"
        },
        "abstract_zh": "近年来，由于Android Google、Menlo Park、California、USA应用程序或应用程序数量的快速增长，越来越多的恶意作者瞄准了Android平台。他们在Android应用程序中嵌入恶意代码，以执行他们特殊的恶意行为，例如向高级号码发送短信，窃取隐私信息，甚至将受感染的手机转换为机器人。我们把这种已经被植入恶意代码的app称为嵌入式重新包装app。这种现象给Android用户带来了很大的安全隐患，如何对其进行检测成为一个亟待解决的问题。以往的研究工作侧重于从静态程序代码中提取应用程序的特征进行比较，既不能处理代码混淆技术，也不能分析应用程序的动态行为特征。为了解决这些限制，我们提出了一种基于从应用生成的HTTP流量中提取应用特征的方法。此外，我们还实现了一个基于平衡视点树VPT的多线程比较算法，该算法可以显著减少实验时间。在本次实验中，我们从六大热门安卓市场下载的7619款安卓应用中成功检测出266款嵌入式重新打包的应用，每个市场的分发率从2.57%到6.07%不等。然后基于对这些嵌入代码产生的HTTP流量的分析，我们发现其中大部分是广告流量和恶意流量。版权所有2015约翰威利父子有限公司。",
        "title_zh": "基于HTTP流量相似性检测重新打包的Android应用",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn8.html",
        "conf_title": "Security and Communication Networks, Volume 8",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1002/sec.1179",
        "title": "PaddyFrog: systematically detecting confused deputy vulnerability in Android applications",
        "authors": "Jianliang Wu, Tingting Cui, Tao Ban, Shanqing Guo, Lizhen Cui",
        "abstract": "An enormous number of applications have been developed for Android in recent years, making it one of the most popular mobile operating systems. However, it is obvious that more vulnerabilities would appear along with the booming amounts of applications. Poorly designed applications may contain security vulnerabilities that can dramatically undermine users' security and privacy. In this paper, we studied a kind of recently reported application vulnerability named confused deputy - a specific type of privilege escalation vulnerability, which can result in unauthorized operations, and so on. We proposed a novel system with code-level static analysis to analyze the applications and automatically detect possible confused deputy vulnerabilities. To tackle analysis challenges imposed by Android's component-based programming paradigm, we employed special control flow graph construction techniques to build call relations among components and function call graph within components. We developed a prototype of this system named PaddyFrog and evaluated with 7190 real world Android applications from two of the most popular markets in China. We found 1240 applications with confused deputy vulnerability and proved to be exploitable. The median execution time of this system on an application is 14.4s, which is fast enough to be used in volumes of applications testing scenarios. Copyright © 2015 John Wiley & Sons, Ltd.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "近年来，Android上开发了大量的应用程序，使其成为最受欢迎的移动操作系统之一。然而，随着应用数量的激增，显然会出现更多的漏洞。设计不良的应用程序可能包含安全漏洞，这些漏洞会极大地破坏用户的安全和隐私。本文研究了最近报道的一种应用程序漏洞——混淆代理——一种特殊类型的特权提升漏洞，它可以导致未经授权的操作等。我们提出了一个新颖的系统，通过代码级静态分析来分析应用程序，并自动检测可能的混淆代理漏洞。为了应对Android基于组件的编程范式带来的分析挑战，我们采用了特殊的控制流图构建技术来构建组件之间的调用关系和组件内部的函数调用图。我们开发了一个名为PaddyFrog的系统原型，并使用来自中国两个最受欢迎的市场的7190个真实世界的Android应用程序进行了评估。我们发现了1240个具有混淆代理漏洞的应用程序，并证明是可利用的。该系统在一个应用程序上的平均执行时间为14.4秒，这足以在大量应用程序测试场景中使用。版权所有2015约翰威利父子有限公司。",
        "title_zh": "PaddyFrog:系统检测Android应用程序中的混淆代理漏洞",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn8.html",
        "conf_title": "Security and Communication Networks, Volume 8",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1002/sec.1205",
        "title": "Guess who is listening in to the board meeting: on the use of mobile device applications as roving spy bugs",
        "authors": "Zahid Anwar, Waqas Ahmad Khan",
        "abstract": "Covert listening devices-a combination of a miniature radio transmitter and a microphone-have been used as key espionage instruments as early as the mid-20th century. More recently, hackers have started exploiting inherent weaknesses in current mobile platforms allowing them to remotely convert a victim's smartphone device into a roving spy bug without his knowledge. The goal of this paper is to illustrate with the aid of an Android mobile platform application that permissions gained in a legitimate way can be used to evade the integrity and privacy of the mobile device and install malware that remains completely hidden. When the attacker makes a call to the victim's phone, he is able to listen in to the victim's surroundings transforming the mobile phone into a sophisticated covert listening device. This communication-level attack goes undetected by current detection mechanisms. An anomaly-based detection feature set is another contribution of this paper to mitigate the proposed attack. As more and more mobile devices are being rapidly integrated into enterprises with the increase in bring-your-own-device model in many organizations, without a rigorous security screening policy, this weakness tends to facilitate corporate espionage by presumably allowing as many spy bugs in the board meeting as there are attendees with mobiles. This work provides a demonstration of a dangerous espionage attack targeting smartphones whereby an attacker can, with the aid of an Android mobile platform application, make a call to the victim's phone and listen in to the victim's surroundings transforming the mobile phone into a sophisticated covert listening device. It also proposes and evaluates a defense technique to detect and mitigate the attack where existing security mechanisms fall short. Copyright © 2015 John Wiley & Sons, Ltd.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "早在20世纪中叶，由微型无线电发射机和麦克风组合而成的秘密监听设备就被用作重要的间谍工具。最近，黑客开始利用当前移动平台的固有弱点，允许他们在受害者不知情的情况下，远程将受害者的智能手机设备转换为流动的间谍软件。本文的目标是借助Android移动平台应用程序来说明，以合法方式获得的权限可用于规避移动设备的完整性和隐私，并安装完全隐藏的恶意软件。当攻击者拨打受害者的电话时，他能够监听受害者的周围环境，将移动电话转变为复杂的秘密监听设备。当前的检测机制无法检测到这种通信级别的攻击。基于异常的检测特征集是本文的另一个贡献。随着许多组织中自带设备模式的增加，越来越多的移动设备被快速集成到企业中，而没有严格的安全筛选政策，这一弱点可能会允许董事会会议中有多少人有手机，从而为企业间谍活动提供便利。这项工作演示了一种针对智能手机的危险间谍攻击，攻击者可以在Android移动平台应用程序的帮助下，拨打受害者的电话，并监听受害者的周围环境，将手机转变为复杂的秘密监听设备。它还提出并评估了一种防御技术，以检测和缓解现有安全机制不足的攻击。版权所有2015约翰威利父子有限公司。",
        "title_zh": "猜猜谁在听董事会议:关于移动设备应用程序被用作流动间谍的问题",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn8.html",
        "conf_title": "Security and Communication Networks, Volume 8",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1002/sec.1248",
        "title": "A static Android malicious code detection method based on multi-source fusion",
        "authors": "Yao Du, Xiaoqing Wang, Junfeng Wang",
        "abstract": "The rapid development of mobile malwares makes the traditional signature-based and single-feature based malware detection methods a challenging task. The surge of new malwares with more complex structures and dynamic characteristics leads to efficient fusion of multi-source malicious information more difficult in detection. In this paper, we propose a new multi-source based method to detect Android malwares by emphasizing on the traditional static features, control flow graph, and repacking characteristics. Each category of features is treated as an independent information source in feature extracting rules building and classification. Then, the Dempster-Shafer algorithm is used to fuse these information sources. This method can improve accuracy of malware detection without adding too many instability characteristics that are extracted from disassembled codes, and have better performance in the resistance to code obfuscation technologies. To verify our method, different categories of apps are collected to build the dataset in our experiment. Based on the dataset, our method can achieve 97% detection accuracy and 1.9% false positive rate. Copyright © 2015John Wiley & Sons, Ltd.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "移动恶意软件的快速发展使得传统的基于特征和基于单一特征的恶意软件检测方法面临挑战。具有更复杂结构和动态特征的新型恶意软件的涌现，导致多源恶意信息的有效融合更加难以检测。本文通过强调传统的静态特征、控制流图和重新打包特征，提出了一种新的基于多源的Android恶意软件检测方法。在特征提取规则的建立和分类中，每一类特征被视为一个独立的信息源。然后，使用Dempster-Shafer算法对这些信息源进行融合。该方法能够在不增加过多从反汇编代码中提取的不稳定特征的情况下，提高恶意软件检测的准确率，并且在抵抗代码混淆技术方面具有更好的性能。为了验证我们的方法，我们在实验中收集了不同类别的应用程序来构建数据集。基于数据集，我们的方法可以达到97%的检测准确率和1.9%的误报率。版权所有2015约翰·威利父子有限公司",
        "title_zh": "一种基于多源融合的静态Android恶意代码检测方法",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn8.html",
        "conf_title": "Security and Communication Networks, Volume 8",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1002/sec.1340",
        "title": "Smart malware detection on Android",
        "authors": "Laura Gheorghe, Bogdan Marin, Gary Gibson, Lucian Mogosanu, Razvan Deaconescu, Valentin-Gabriel Voiculescu, Mihai Carabas",
        "abstract": "Nowadays, because of its increased popularity, Android is target to a growing number of attacks and malicious applications, with the purpose of stealing private information and consuming credit by subscribing to premium services. Most of the current commercial antivirus solutions use static signatures for malware detection, which may fail to detect different variants of the same malware and zero-day attacks. In this paper, we present a behavior-based, dynamic analysis security solution, called Android Malware Detection System, for detecting both well-known and zero-day malware. The proposed solution uses a machine learning classifier in order to differentiate between the behaviors of legitimate and malicious applications. In addition, it uses the application statistics for determining its reputation. The final decision is based on a combination of the classifier's result and the application reputation. The solution includes a unique and extensive set of data collectors, which gather application-specific data that describe the behavior of the monitored application. We evaluated our solution on a set of legitimate and malicious applications and obtained a high accuracy of 0.985. Our system is able to detect zero-day malware samples that are not detected by current commercial solutions. Our solution outperforms other similar solutions running on mobile devices. Copyright © 2015 John Wiley & Sons, Ltd.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "如今，由于越来越受欢迎，Android成为越来越多攻击和恶意应用程序的目标，其目的是窃取私人信息并通过订阅高级服务来消耗信用。当前大多数商业反病毒解决方案使用静态签名来检测恶意软件，这可能无法检测同一恶意软件的不同变体和零日攻击。在本文中，我们提出了一种基于行为的动态分析安全解决方案，称为Android恶意软件检测系统，用于检测知名和零日恶意软件。所提出的解决方案使用机器学习分类器来区分合法和恶意应用程序的行为。此外，它使用应用程序统计信息来确定其信誉。最终的决定是基于分类器的结果和应用程序信誉的组合。该解决方案包括一组独特而广泛的数据收集器，用于收集描述受监控应用程序行为的特定于应用程序的数据。我们在一组合法和恶意应用程序上评估了我们的解决方案，获得了0.985的高准确率。我们的系统能够检测当前商业解决方案无法检测到的零日恶意软件样本。我们的解决方案优于运行在移动设备上的其他类似解决方案。版权所有2015约翰威利父子有限公司。",
        "title_zh": "Android上的智能恶意软件检测",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn8.html",
        "conf_title": "Security and Communication Networks, Volume 8",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1002/sec.1341",
        "title": "AndroGenerator: An automated and configurable android app network traffic generation system",
        "authors": "Xin Su, Dafang Zhang, Wenjia Li, Xiaofei Wang",
        "abstract": "With the rapid growth in the popularity of Android smartphones, a large number of Android applications or apps have emerged in both official and alternative Android markets. It is important for network operators and security analysts to understand the network traffic generated by new Android apps for the purposes of network management, app traffic analysis, and malware detection. However, it is time-consuming and tedious to manually install and run Android apps to generate network traffic. Moreover, existing synthetic network traffic generators are unable to generate network traffic that can accurately reflect the network behaviors of Android apps. In this paper, we propose and implement AndroGenerator, an automated Android network traffic generation system, to generate various types of network traffic that can be produced by Android apps. Our system reproduces the network traffic based on the traffic characteristics extracted from traffic traces captured by running a large number of Android applications from several popular Android markets, such as Google Play. The system first generates network traffic through automated execution of Android applications. Then, the system is also able to extract network characteristics from the captured traffic traces and store the extracted results into a database for benchmarking purposes. Finally, AndroGenerator reproduces Android app traffic based via simulating network characteristics of captured traffic traces. In the experiments, we evaluate our system with real-world mobile traffic, and the experiment results show that AndroGenerator can reproduce Android app network traffic accurately. Copyright © 2015 John Wiley & Sons, Ltd.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "随着Android智能手机普及率的快速增长，无论是官方还是替代Android市场，都涌现出了大量的Android应用或app。出于网络管理、应用流量分析和恶意软件检测的目的，网络运营商和安全分析师了解新Android应用产生的网络流量非常重要。但是，手动安装运行Android应用产生网络流量既费时又繁琐。此外，现有的合成网络流量生成器无法生成能够准确反映Android应用的网络行为的网络流量。在本文中，我们提出并实现了一个自动化的Android网络流量生成系统，用来生成Android应用程序可以生成的各种类型的网络流量。我们的系统根据从运行几个流行的Android市场的大量Android应用程序(如Google Play)捕获的流量跟踪中提取的流量特征来再现网络流量。该系统首先通过自动执行Android应用程序来产生网络流量。然后，系统还能够从捕获的流量轨迹中提取网络特征，并将提取的结果存储到数据库中，用于基准测试目的。最后，通过模拟捕获的流量轨迹的网络特征，生成基于Android应用的流量。在实验中，我们使用真实世界的移动流量对我们的系统进行了评估，实验结果表明，该系统能够准确地再现Android应用程序的网络流量。版权所有2015约翰威利父子有限公司。",
        "title_zh": "一个自动化的可配置的android应用程序网络流量生成系统",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn8.html",
        "conf_title": "Security and Communication Networks, Volume 8",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1155/2017/4975302",
        "title": "Dynamic Rule Encryption for Mobile Payment",
        "authors": "Emir Husni",
        "abstract": "The trend of financial transactions by using a mobile phone or mobile payment increases. By using the mobile payment service, users can save money on mobile phone (handset) and separate from the pulse. For protecting users, mobile payment service providers must complete the mobile payment service with the transaction security. One way to provide transaction security is to utilize a secure mobile payment application. This research provides a safety feature used for an Android-based mobile payment application. This security feature is making encryption rules dynamically named Dynamic Rule Encryption (DRE). DRE has the ability to protect data by means of encrypting data with dynamic rules, and DRE also has a token function for an authentication. DRE token raised with dynamic time-based rules. Here, the time is used as a reference with the order of the day in the year (day of the year). The processes of the DRE’s encryption, decryption, and the DRE’s functionality as the token are discussed in this paper. Here, the Hamming distance metric is employed for having maximum differences between plaintext and ciphertext.",
        "files": {
            "openAccessPdf": "http://downloads.hindawi.com/journals/scn/2017/4975302.pdf"
        },
        "abstract_zh": "通过使用移动电话或移动支付进行金融交易的趋势增加了。通过使用移动支付服务，用户可以在移动电话(手机)上省钱，并与脉搏分离。为了保护用户，移动支付服务提供商必须在保证交易安全的情况下完成移动支付服务。提供交易安全的一种方式是利用安全的移动支付应用。这项研究为基于Android的移动支付应用提供了一个安全特性。这个安全特性使得加密规则被动态地命名为动态规则加密(DRE)。DRE有能力通过使用动态规则加密数据来保护数据，DRE也有令牌功能来进行身份验证。使用基于时间的动态规则引发的DRE令牌。这里，时间被用作一年中一天的顺序(一年中的某一天)的参考。本文讨论了DRE的加密、解密过程，以及DRE作为令牌的功能。这里，使用汉明距离度量来获得明文和密文之间的最大差异。",
        "title_zh": "移动支付的动态规则加密",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn2017.html",
        "conf_title": "Security and Communication Networks, Volume 2017",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1155/2017/3284080",
        "title": "Computing Adaptive Feature Weights with PSO to Improve Android Malware Detection",
        "authors": "Yanping Xu, Chunhua Wu, Kangfeng Zheng, Xu Wang, Xinxin Niu, Tianliang Lu",
        "abstract": "Android malware detection is a complex and crucial issue. In this paper, we propose a malware detection model using a support vector machine (SVM) method based on feature weights that are computed by information gain (IG) and particle swarm optimization (PSO) algorithms. The IG weights are evaluated based on the relevance between features and class labels, and the PSO weights are adaptively calculated to result in the best fitness (the performance of the SVM classification model). Moreover, to overcome the defects of basic PSO, we propose a new adaptive inertia weight method called fitness-based and chaotic adaptive inertia weight-PSO (FCAIW-PSO) that improves on basic PSO and is based on the fitness and a chaotic term. The goal is to assign suitable weights to the features to ensure the best Android malware detection performance. The results of experiments indicate that the IG weights and PSO weights both improve the performance of SVM and that the performance of the PSO weights is better than that of the IG weights.",
        "files": {
            "openAccessPdf": "http://downloads.hindawi.com/journals/scn/2017/3284080.pdf"
        },
        "abstract_zh": "Android恶意软件检测是一个复杂而关键的问题。本文提出了一种基于支持向量机(SVM)的恶意软件检测模型，该模型基于信息增益(IG)和粒子群优化(PSO)算法计算的特征权重。基于特征和类别标签之间的相关性来评估IG权重，并且自适应地计算PSO权重以产生最佳适应度(SVM分类模型的性能)。此外，为了克服基本粒子群算法的缺陷，我们提出了一种新的基于适应度和混沌的自适应惯性权重粒子群算法(FCAIW-PSO)。目标是为特征分配合适的权重，以确保最佳的Android恶意软件检测性能。实验结果表明，免疫组化加权和粒子群优化加权都提高了SVM的性能，粒子群优化加权的性能优于免疫组化加权。",
        "title_zh": "用粒子群算法计算自适应特征权重提高Android恶意软件检测",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn2017.html",
        "conf_title": "Security and Communication Networks, Volume 2017",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1155/2017/6451260",
        "title": "Mlifdect: Android Malware Detection Based on Parallel Machine Learning and Information Fusion",
        "authors": "Xin Wang, Dafang Zhang, Xin Su, Wenjia Li",
        "abstract": "In recent years, Android malware has continued to grow at an alarming rate. More recent malicious apps’ employing highly sophisticated detection avoidance techniques makes the traditional machine learning based malware detection methods far less effective. More specifically, they cannot cope with various types of Android malware and have limitation in detection by utilizing a single classification algorithm. To address this limitation, we propose a novel approach in this paper that leverages parallel machine learning and information fusion techniques for better Android malware detection, which is named Mlifdect. To implement this approach, we first extract eight types of features from static analysis on Android apps and build two kinds of feature sets after feature selection. Then, a parallel machine learning detection model is developed for speeding up the process of classification. Finally, we investigate the probability analysis based and Dempster-Shafer theory based information fusion approaches which can effectively obtain the detection results. To validate our method, other state-of-the-art detection works are selected for comparison with real-world Android apps. The experimental results demonstrate that Mlifdect is capable of achieving higher detection accuracy as well as a remarkable run-time efficiency compared to the existing malware detection solutions.",
        "files": {
            "openAccessPdf": "http://downloads.hindawi.com/journals/scn/2017/6451260.pdf"
        },
        "abstract_zh": "近年来，Android恶意软件持续以惊人的速度增长。最近更多的恶意应用程序采用高度复杂的检测规避技术，使得传统的基于机器学习的恶意软件检测方法远不如以前有效。更具体地说，它们无法应对各种类型的Android恶意软件，并且在利用单一分类算法进行检测时存在局限性。为了解决这一限制，我们在本文中提出了一种新的方法，该方法利用并行机器学习和信息融合技术来更好地检测Android恶意软件，称为Mlifdect。为了实现这种方法，我们首先从Android应用程序的静态分析中提取八种类型的特征，并在特征选择后建立两种类型的特征集。然后，开发了一个并行机器学习检测模型来加速分类过程。最后，研究了基于概率分析和基于证据理论的信息融合方法，可以有效地获得检测结果。为了验证我们的方法，选择了其他最先进的检测作品与真实世界的Android应用进行比较。实验结果表明，与现有的恶意软件检测解决方案相比，Mlifdect能够获得更高的检测精度和显著的运行效率。",
        "title_zh": "Mlifdect:基于并行机器学习和信息融合的Android恶意软件检测",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn2017.html",
        "conf_title": "Security and Communication Networks, Volume 2017",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1155/2017/4956386",
        "title": "The Concept Drift Problem in Android Malware Detection and Its Solution",
        "authors": "Donghui Hu, Zhongjin Ma, Xiaotian Zhang, Peipei Li, Dengpan Ye, Baohong Ling",
        "abstract": "Currently, the Android platform is the most popular mobile platform in the world and holds a dominant share in the mobile device market. With the popularization of the Android platform, large numbers of Android malware programs have begun to emerge on the Internet, and the sophistication of these programs is developing rapidly. While many studies have already investigated Android malware detection through machine learning and have achieved good results, most of these are based on static data sources and fail to consider the concept drift problem resulting from the rapid growth in the number of Android malware programs and normal Android applications, as well as rapid technological advancement in the Android environment. To address this problem, this work proposes a solution based on an ensemble classifier. This ensemble classifier is based on a streaming data-based Naive Bayes classifier. Android malware has identifiable feature utilization tendencies. On this basis, feature selection algorithm is introduced into the ensemble classifier, and a sliding window is maintained inside the ensemble classifier. Based on the performance of the subclassifiers inside the sliding window, the ensemble classifier makes dynamic adjustments to address the concept drift problem in Android malware detection. The experimental results from the proposed method demonstrate that it can effectively address the concept drift problem in Android malware detection in a streaming data environment.",
        "files": {
            "openAccessPdf": "http://downloads.hindawi.com/journals/scn/2017/4956386.pdf"
        },
        "abstract_zh": "目前，Android平台是世界上最受欢迎的移动平台，在移动设备市场占据主导地位。随着Android平台的普及，大量的Android恶意程序开始在互联网上涌现，并且这些程序的复杂度正在快速发展。虽然许多研究已经通过机器学习研究了Android恶意软件检测，并取得了良好的结果，但这些研究大多基于静态数据源，没有考虑Android恶意软件程序和正常Android应用程序数量的快速增长以及Android环境中快速的技术进步所导致的概念漂移问题。为了解决这个问题，本文提出了一种基于集成分类器的解决方案。该集成分类器基于基于流数据的朴素贝叶斯分类器。Android恶意软件具有可识别的功能利用倾向。在此基础上，将特征选择算法引入集成分类器，并在集成分类器内部维护一个滑动窗口。基于滑动窗口内子类化器的性能，集成分类器进行动态调整，以解决Android恶意软件检测中的概念漂移问题。实验结果表明，该方法能有效解决流媒体环境下Android恶意软件检测中的概念漂移问题。",
        "title_zh": "Android恶意软件检测中的概念漂移问题及其解决方案",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn2017.html",
        "conf_title": "Security and Communication Networks, Volume 2017",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1155/2017/4121765",
        "title": "Android Rooting: An Arms Race between Evasion and Detection",
        "authors": "Long Nguyen-Vu, Ngoc-Tu Chau, Seongeun Kang, Souhwan Jung",
        "abstract": "We present an arms race between rooting detection and rooting evasion. We investigate different methods to detect rooted device at both Java and native level and evaluate the counterattack from major hooking tools. To this end, an extensive study of Android rooting has been conducted, which includes the techniques to root the device and make it invisible to the detection of mobile antimalware product. We then analyze the evasion loopholes and in turn enhance our rooting detection tool. We also apply evasion techniques on rooted device and compare our work with 92 popular root checking applications and 18 banking and finance applications. Results show that most of them do not suffice and can be evaded through API hooking or static file renaming. Furthermore, over 28000 Android applications have been analyzed and evaluated in order to diagnose the characteristics of rooting in recent years. Our study shows that rooting has become more and more prevalent as an inevitable trend, and it raises big security concerns regarding detection and evasion. As a proof of concept, we have published our rooting detection application to Google Play Store to demonstrate the work presented in this paper.",
        "files": {
            "openAccessPdf": "http://downloads.hindawi.com/journals/scn/2017/4121765.pdf"
        },
        "abstract_zh": "我们提出了生根检测和生根回避之间的军备竞赛。我们研究了在Java和本机级别检测根设备的不同方法，并评估了主要挂钩工具的反击。为此，对Android rooting进行了广泛的研究，其中包括对设备进行root的技术，并使其对移动反恶意软件产品的检测不可见。然后，我们分析规避漏洞，进而增强我们的寻根检测工具。我们还在根设备上应用规避技术，并将我们的工作与92个流行的根检查应用程序和18个银行和金融应用程序进行比较。结果表明，其中大多数是不够的，可以通过API挂钩或静态文件重命名来规避。此外，对超过28000个Android应用程序进行了分析和评估，以诊断近年来扎根的特征。我们的研究表明，寻根作为一种不可避免的趋势变得越来越普遍，它提出了关于检测和规避的重大安全问题。作为概念验证，我们已经向谷歌Play商店发布了我们的寻根检测应用程序，以演示本文中介绍的工作。",
        "title_zh": "Android生根:规避和检测之间的军备竞赛",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/scn/scn2017.html",
        "conf_title": "Security and Communication Networks, Volume 2017",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.4018/IJISP.2021010109",
        "title": "Utilizing Sentence Embedding for Dangerous Permissions Detection in Android Apps' Privacy Policies",
        "authors": "Rawan Baalous, Ronald Poet",
        "abstract": "Privacy policies analysis relies on understanding sentences meaning in order to identify sentences of interest to privacy related applications. In this paper, the authors investigate the strengths and limitations of sentence embeddings to detect dangerous permissions in Android apps privacy policies. Sent2Vec sentence embedding model was utilized and trained on 130,000 Android apps privacy policies. The terminology extracted by the sentence embedding model was then compared with the gold standard on a dataset of 564 privacy policies. This work seeks to provide answers to researchers and developers interested in extracting privacy related information from privacy policies using sentence embedding models. In addition, it may help regulators interested in deploying sentence embedding models to check for privacy policies' compliance with the government regulations and to identify points of inconsistencies or violations.",
        "files": {
            "openAccessPdf": "http://eprints.gla.ac.uk/235947/2/235947.pdf"
        },
        "abstract_zh": "隐私策略分析依赖于理解句子的含义，以便识别隐私相关应用程序感兴趣的句子。在本文中，作者研究了句子嵌入检测Android应用隐私策略中危险权限的优势和局限性。Sent2Vec句子嵌入模型在130，000个Android应用隐私策略上被利用和训练。然后将句子嵌入模型提取的术语与564个隐私政策数据集上的黄金标准进行比较。这项工作旨在为对使用句子嵌入模型从隐私策略中提取隐私相关信息感兴趣的研究人员和开发人员提供答案。此外，它可以帮助对部署句子嵌入模型感兴趣的监管者检查隐私政策是否符合政府法规，并识别不一致或违反的点。",
        "title_zh": "Android应用隐私策略中利用句子嵌入进行危险权限检测",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/ijisp/ijisp15.html",
        "conf_title": "International Journal of Information Security and Privacy, Volume 15",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.4018/IJISP.2020100104",
        "title": "DecaDroid Classification and Characterization of Malicious Behaviour in Android Applications",
        "authors": "Charu Gupta, Rakesh Kumar Singh, Simran Kaur Bhatia, Amar Kumar Mohapatra",
        "abstract": "Widespread﻿use﻿of﻿Android-based﻿applications﻿on﻿the﻿smartphones﻿has﻿resulted﻿in﻿significant﻿growth﻿ of﻿security﻿attack﻿incidents.﻿Malware-based﻿attacks﻿are﻿the﻿most﻿common﻿attacks﻿on﻿Android-based﻿ smartphones.﻿To﻿forestall﻿malware﻿from﻿attacking﻿the﻿users,﻿a﻿much﻿better﻿understanding﻿of﻿Android﻿ malware﻿and﻿its﻿behaviour﻿is﻿required.﻿In﻿this﻿article,﻿an﻿approach﻿to﻿classify﻿and﻿characterise﻿the﻿ malicious﻿behaviour﻿of﻿Android﻿applications﻿using﻿static﻿features,﻿data﻿flow﻿analysis,﻿and﻿machine﻿ learning﻿techniques﻿has﻿been﻿proposed.﻿Static﻿features﻿like﻿hardware﻿components,﻿permissions,﻿Android﻿ components﻿and﻿inter-component﻿communication﻿along﻿with﻿unique﻿source-sink﻿pairs﻿obtained﻿from﻿ data﻿flow﻿analysis﻿have﻿been﻿used﻿to﻿extract﻿the﻿features﻿of﻿the﻿Android﻿applications.﻿Based﻿on﻿the﻿ features﻿extracted,﻿the﻿malicious﻿behaviour﻿of﻿the﻿applications﻿has﻿been﻿classified﻿to﻿their﻿respective﻿ malware﻿family.﻿The﻿proposed﻿approach﻿has﻿given﻿95.19%﻿accuracy﻿rate﻿and﻿F1﻿measure﻿of﻿92.19302﻿ with﻿the﻿largest﻿number﻿of﻿malware﻿families﻿classified﻿as﻿compared﻿to﻿previous﻿work. KeywoRD Android Malware, Data Flow Analysis, Data Leakage, Gradient Boosting Tree, Malware Families, Smartphones, Source-Sink Pair, Static Analysis",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "基于Android的应用在智能手机上的广泛使用导致了安全攻击事件的显著增长。基于恶意软件的攻击是对基于Android的智能手机最常见的攻击。为了防止恶意软件攻击用户，需要更好地了解Android恶意软件及其行为。在这篇文章中，提出了一种使用静态特征、数据流分析和机器学习技术对Android应用程序的恶意行为进行分类和表征的方法。静态特征，如硬件组件、许可、Android组件和组件间通信，以及从数据流分析获得的唯一源-宿对，已被用于提取Android应用的特征。基于提取的特征，应用程序的恶意行为已经被分类到它们各自的恶意软件家族。与以前的工作相比，所提出的方法给出了95.19%的准确率和92.19302的F1度量，并且分类了最大数量的恶意软件家族。关键词Android恶意软件，数据流分析，数据泄漏，梯度提升树，恶意软件家族，智能手机，源汇对，静态分析",
        "title_zh": "Android应用程序中恶意行为的分类和表征",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/ijisp/ijisp14.html",
        "conf_title": "International Journal of Information Security and Privacy, Volume 14",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.4018/IJISP.2017070102",
        "title": "Identification of Cryptographic Vulnerability and Malware Detection in Android",
        "authors": "Anjali Kumawat, Anil Kumar Sharma, Sunita Kumawat",
        "abstract": "Android based Smartphones are nowadays getting more popular. While using Smartphone, user is always concerned about security and malicious attacks, cryptographic vulnerability of the applications. With increase in the number of Android mobiles, Android malwares are also increasing very rapidly. So the authors have proposed the “Identification of cryptographic vulnerability and malware detection in Android” system. They have designed a user friendly android application, through which user and developer can easily test the application whether it is benign or vulnerable. The application will be tested firstly using static analysis and then the dynamic analysis will be carried out. The authors have implemented static and dynamic analysis of android application for vulnerable and malicious app detection. They have also created a web page. User can either use the application or the web page.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "基于Android的智能手机如今越来越受欢迎。用户在使用智能手机时，总是担心应用程序的安全性和恶意攻击、加密漏洞。随着Android手机数量的增加，Android恶意软件也在迅速增加。因此，作者提出了“Android密码漏洞识别和恶意软件检测”系统。他们设计了一个用户友好的android应用程序，通过它用户和开发者可以很容易地测试应用程序是良性的还是易受攻击的。首先使用静态分析测试应用程序，然后执行动态分析。作者实现了android应用程序的静态和动态分析，用于检测易受攻击和恶意的应用程序。他们还创建了一个网页。用户可以使用应用程序或网页。",
        "title_zh": "Android中加密漏洞的识别和恶意软件检测",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/ijisp/ijisp11.html",
        "conf_title": "International Journal of Information Security and Privacy, Volume 11",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.3233/JCS-200036",
        "title": "A permission-dependent type system for secure information flow analysis",
        "authors": "Zhiwu Xu, Hongxu Chen, Alwen Tiu, Yang Liu, Kunal Sareen",
        "abstract": "We introduce a novel type system for enforcing secure information flow in an imperative language. Our work is motivated by the problem of statically checking potential information leakage in Android applications. To this end, we design a lightweight type system featuring Android permission model, where the permissions are statically assigned to applications and are used to enforce access control in the applications. We take inspiration from a type system by Banerjee and Naumann to allow security types to be dependent on the permissions of the applications. A novel feature of our type system is a typing rule for conditional branching induced by permission testing, which introduces a merging operator on security types, allowing more precise security policies to be enforced. The soundness of our type system is proved with respect to non-interference. In addition, a type inference algorithm is presented for the underlying security type system, by reducing the inference problem to a constraint solving problem in the lattice of security types.",
        "files": {
            "openAccessPdf": "https://ieeexplore.ieee.org/ielx7/8428826/8429284/08429307.pdf"
        },
        "abstract_zh": "我们介绍了一种新型系统，用于在命令式语言中实施安全信息流。我们的工作是由静态检查Android应用程序中潜在的信息泄漏问题激发的。为此，我们设计了一个以Android权限模型为特色的轻量级系统，其中权限被静态地分配给应用程序，并用于在应用程序中实施访问控制。我们从Banerjee和Naumann的类型系统中获得灵感，允许安全类型依赖于应用程序的权限。我们的类型系统的一个新特性是一个由权限测试引起的条件分支的类型规则，它引入了一个安全类型的合并操作符，允许执行更精确的安全策略。我们的类型系统在无干扰方面是可靠的。此外，通过将推理问题归结为安全类型格中的约束求解问题，给出了底层安全类型系统的类型推理算法。",
        "title_zh": "用于安全信息流分析的权限相关型系统",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/jcs/jcs29.html",
        "conf_title": "Journal of Computer Security, Volume 29",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.3233/JCS-191325",
        "title": "Do not jail my app: Detecting the Android plugin environments by time lag contradiction",
        "authors": "Yifang Wu, Jianjun Huang, Bin Liang, Wenchang Shi",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "不要监禁我的应用程序:通过时滞矛盾检测Android插件环境",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/jcs/jcs28.html",
        "conf_title": "Journal of Computer Security, Volume 28",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.3233/JCS-150530",
        "title": "Measuring and estimating power consumption in Android to support energy-based intrusion detection",
        "authors": "Alessio Merlo, Mauro Migliardi, Paolo Fontanelli",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "测量和估计Android中的功耗以支持基于能量的入侵检测",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/jcs/jcs23.html",
        "conf_title": "Journal of Computer Security, Volume 23",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.3233/JCS-16866",
        "title": "A study on a feasible no-root approach on Android",
        "authors": "Yao Cheng, Yingjiu Li, Robert H. Deng, Lingyun Ying, Wei He",
        "abstract": "Root is the administrative privilege on Android, which is however inaccessible on stock Android devices. Due to the desire for privileged functionalities and the reluctance of rooting their devices, Android users seek for no-root approaches, which provide users with part of root privileges without rooting their devices. Existing no-root approaches require users to launch a separate service via Android Debug Bridge (ADB) on an Android device, which would perform user-desired tasks. However, it is unusual for a third-party Android application to work with a separate native service via sockets, and it requires the application developers to have extra knowledge such as Linux programming in application development. In this paper, we propose a feasible no-root approach based on new functionalities added on Android, which creates no separate service but an ADB loopback. To ensure such no-root approach is not misused in a proactive instead of reactive manner, we examine its dark side. We ﬁnd out that while this approach makes it easy for no-root applications to work, it may lead to a “ permission explosion ,” which enables any third-party application to attain shell permissions beyond its granted permissions. The permission explosion can further lead to exploits including privacy leakage, account takeover, application UID abuse, and user input inference. A practical experiment is carried out to evaluate the situation in the real world, which shows that many real-world applications from Google Play and four third-party application markets are indeed vulnerable to these exploits. To mitigate the dark side of the new no-root approach and make it more suitable for users to adopt, we identify the causes of the exploits, and propose a permission-based solution. We also provide suggestions to application developers and application markets on how to prevent these exploits.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Root是Android上的管理权限，但是在普通Android设备上无法访问。由于对特权功能的渴望和对其设备根化的不情愿，Android用户寻求无根方法，该方法向用户提供部分根特权而不根化其设备。现有的无根方法要求用户通过Android设备上的Android调试桥(ADB)启动单独的服务，该服务将执行用户期望的任务。然而，第三方Android应用程序通过套接字与单独的本地服务一起工作是不常见的，并且它需要应用程序开发人员具有额外的知识，例如应用程序开发中的Linux编程。在本文中，我们提出了一种可行的无根方法，它基于Android上添加的新功能，不创建单独的服务，而是创建一个ADB环回。为了确保这种无根方法不会以主动而非被动的方式被滥用，我们考察了它的阴暗面。我们发现，虽然这种方法使无根应用程序很容易工作，但它可能会导致“权限爆炸”，使任何第三方应用程序能够获得超出其授予权限的外壳权限。权限爆炸会进一步导致漏洞，包括隐私泄露、帐户盗用、应用程序UID滥用和用户输入推断。我们进行了一个实际的实验来评估现实世界中的情况，实验表明许多来自Google Play和四个第三方应用市场的现实世界应用确实容易受到这些攻击。为了减轻新的无根方法的负面影响，使其更适合用户采用，我们找出了漏洞利用的原因，并提出了基于权限的解决方案。我们还向应用程序开发人员和应用程序市场提供如何防止这些漏洞的建议。",
        "title_zh": "一种可行的Android无根方法研究",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/jcs/jcs25.html",
        "conf_title": "Journal of Computer Security, Volume 25",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.3233/JCS-160552",
        "title": "TripleMon: A multi-layer security framework for mediating inter-process communication on Android",
        "authors": "Yiming Jing, Gail-Joon Ahn, Hongxin Hu, Haehyun Cho, Ziming Zhao",
        "abstract": "As smartphones have become an indispensable part of daily life, mobile users are increasingly relying on them to process personal information with feature-rich applications. This situation requires robust security mechanisms for protecting sensitive applications and data on mobile devices. Android, as one the most popular smartphone operating systems, provides two core security mechanisms, application sandboxing and a permission system. However, recent studies show that these mech- anisms are vulnerable to be passed by a variety of attacks. In this paper, we argue for the need of designing and implementing more comprehensive security mechanisms for Android. We realize that mediating Inter-Process Communication (IPC) channels used by Android applications can mitigate prominent attacks effectively and efficiently. Based on this observation, we propose a practical multi-layer security framework called TRIPLEMON to support policy-based mediation on Android IPC. We also dis- cuss and evaluate a proof-of-concept prototype of TRIPLEMON along with the experimental results derived from real malware samples and synthetic attacks.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "随着智能手机成为日常生活中不可或缺的一部分，移动用户越来越依赖智能手机来使用功能丰富的应用程序处理个人信息。这种情况需要强大的安全机制来保护移动设备上的敏感应用程序和数据。Android作为最流行的智能手机操作系统之一，提供了两个核心安全机制，应用沙箱和权限系统。然而，最近的研究表明，这些机制很容易被各种攻击所利用。在本文中，我们认为有必要为Android设计和实现更全面的安全机制。我们认识到，调解Android应用程序使用的进程间通信(IPC)通道可以有效地缓解显著的攻击。基于这一观察，我们提出了一个名为TRIPLEMON的实用多层安全框架来支持Android IPC上基于策略的中介。我们还讨论和评估了TRIPLEMON的概念验证原型以及来自真实恶意软件样本和合成攻击的实验结果。",
        "title_zh": "TripleMon:一个用于协调Android上进程间通信的多层安全框架",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/jcs/jcs24.html",
        "conf_title": "Journal of Computer Security, Volume 24",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/CSF.2017.19",
        "title": "A Sound Flow-Sensitive Heap Abstraction for the Static Analysis of Android Applications",
        "authors": "Stefano Calzavara, Ilya Grishchenko, Adrien Koutsos, Matteo Maffei",
        "abstract": "The present paper proposes the first static analysis for Android applications which is both flow-sensitive on the heap abstraction and provably sound with respect to a rich formal model of the Android platform. We formulate the analysis as a set of Horn clauses defining a sound over-approximation of the semantics of the Android application to analyse, borrowing ideas from recency abstraction and extending them to our concurrent setting. Moreover, we implement the analysis in HornDroid, a state-of-the-art information flow analyser for Android applications. Our extension allows HornDroid to perform strong updates on heap-allocated data structures, thus significantly increasing its precision, without sacrificing its soundness guarantees. We test our implementation on DroidBench, a popular benchmark of Android applications developed by the research community, and we show that our changes to HornDroid lead to an improvement in the precision of the tool, while having only a moderate cost in terms of efficiency. Finally, we assess the scalability of our tool to the analysis of real applications.",
        "files": {
            "openAccessPdf": "http://arxiv.org/pdf/1705.10482"
        },
        "abstract_zh": "本文提出了第一个针对Android应用程序的静态分析，它在堆抽象上是流敏感的，并且相对于Android平台的丰富形式模型是可证明合理的。我们将分析公式化为一组Horn子句，这些子句定义了要分析的Android应用程序的语义的合理过度近似，从最近抽象中借用了一些想法，并将它们扩展到我们的并发设置中。此外，我们在HornDroid中实现了分析，horn droid是一个用于Android应用程序的最先进的信息流分析器。我们的扩展允许HornDroid对堆分配的数据结构执行强更新，从而显著提高其精度，而不牺牲其可靠性保证。我们在DroidBench上测试了我们的实现，droid bench是由研究社区开发的Android应用程序的流行基准，我们表明我们对HornDroid的更改导致了工具精度的提高，同时在效率方面只有适度的成本。最后，我们评估了我们的工具对实际应用分析的可扩展性。",
        "title_zh": "用于Android应用程序静态分析的可靠的流敏感堆抽象",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/csfw/csfw2017.html",
        "conf_title": "30th CSF 2017: Santa Barbara, CA, USA",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8048777/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/CSF.2018.00023",
        "title": "A Permission-Dependent Type System for Secure Information Flow Analysis",
        "authors": "Hongxu Chen, Alwen Tiu, Zhiwu Xu, Yang Liu",
        "abstract": "We introduce a novel type system for enforcing secure information flow in an imperative language. Our work is motivated by the problem of statically checking potential information leakage in Android applications. To this end, we design a lightweight type system featuring Android permission model, where the permissions are statically assigned to applications and are used to enforce access control in the applications. We take inspiration from a type system by Banerjee and Naumann to allow security types to be dependent on the permissions of the applications. A novel feature of our type system is a typing rule for conditional branching induced by permission testing, which introduces a merging operator on security types, allowing more precise security policies to be enforced. The soundness of our type system is proved with respect to non-interference. In addition, a type inference algorithm is presented for the underlying security type system, by reducing the inference problem to a constraint solving problem in the lattice of security types.",
        "files": {
            "openAccessPdf": "https://ieeexplore.ieee.org/ielx7/8428826/8429284/08429307.pdf"
        },
        "abstract_zh": "我们介绍了一种新型系统，用于在命令式语言中实施安全信息流。我们的工作是由静态检查Android应用程序中潜在的信息泄漏问题激发的。为此，我们设计了一个以Android权限模型为特色的轻量级系统，其中权限被静态地分配给应用程序，并用于在应用程序中实施访问控制。我们从Banerjee和Naumann的类型系统中获得灵感，允许安全类型依赖于应用程序的权限。我们的类型系统的一个新特性是一个由权限测试引起的条件分支的类型规则，它引入了一个安全类型的合并操作符，允许执行更精确的安全策略。我们的类型系统在无干扰方面是可靠的。此外，通过将推理问题归结为安全类型格中的约束求解问题，给出了底层安全类型系统的类型推理算法。",
        "title_zh": "用于安全信息流分析的权限相关型系统",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/csfw/csfw2018.html",
        "conf_title": "31st CSF 2018: Oxford, UK",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8428826/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/CSF.2015.29",
        "title": "Android Permissions Unleashed",
        "authors": "Alessandro Armando, Roberto Carbone, Gabriele Costa, Alessio Merlo",
        "abstract": "The Android Security Framework controls the executions of applications through permissions which are statically granted by the user during installation. However, the definition of security policies over permissions is not supported. Security policies must be therefore manually encoded into the application by the developer, which is a dangerous practice and may cause security breaches. We propose an improvement over the Android permission system that supports the specification and enforcement of fine-grained security policies. Enforcement is achieved by reducing policy decision problems to propositional satisfiability and leveraging a state-of-the-art SAT solver. Unlike alternative proposals, our approach does not require changes in the operating system and, therefore, it can be readily deployed in any commercial device.",
        "files": {
            "openAccessPdf": "https://iris.unige.it/bitstream/11567/840594/1/APU.pdf"
        },
        "abstract_zh": "Android安全框架通过用户在安装期间静态授予的权限来控制应用程序的执行。但是，不支持权限安全策略的定义。因此，安全策略必须由开发人员手动编码到应用程序中，这是一种危险的做法，可能会导致安全漏洞。我们提出了对Android权限系统的改进，支持细粒度安全策略的规范和实施。通过将政策决策问题简化为命题可满足性并利用最先进的SAT求解器来实现实施。与替代方案不同，我们的方法不需要改变操作系统，因此，它可以很容易地部署在任何商业设备中。",
        "title_zh": "释放安卓权限",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/csfw/csf2015.html",
        "conf_title": "28th CSF 2015: Verona, Italy",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7243288/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP46214.2022.9833764",
        "title": "FSAFlow: Lightweight and Fast Dynamic Path Tracking and Control for Privacy Protection on Android Using Hybrid Analysis with State-Reduction Strategy",
        "authors": "Zhi Yang, Zhanhui Yuan, Shuyuan Jin, Xingyuan Chen, Lei Sun, Xuehui Du, Wenfa Li, Hongqi Zhang",
        "abstract": "Despite the demonstrated effectiveness of dynamic taint analysis (DTA) in a variety of security applications, the poor performance achieved by available DTA prototypes prevents their widespread adoption in production systems, especially the Android system with limited computation and storage resources. To overcome DTA’s overhead bottlenecks, recent research efforts aim to decouple taint tracking logic from program execution. Continuing this line of research, this work proposes FSAFlow, a novel hybrid taint tracking and control system, to reduce DTA overhead significantly while ensuring sound Android privacy protection. FSAFlow further separates the path tracking logic from the corresponding taint tracking logic and the control of the information flow path is optimized. Specifically, a classic static analysis algorithm is first modified to search target paths and their key branch information. Then, the potential paths that violate the user’s predefined privacy protection policy are chosen and encoded with a Finite State Automaton (FSA). A small amount of FSA-based state management code is inserted into the corresponding position in the program. Finally, it monitors the program’s state of path execution and prevents information leakage during runtime. The efficiency and correctness of FSAFlow are proved by theoretical analysis. The experimental results show that FSAFlow incurs lower overhead than several representative DTA optimization approaches, 2.06% for popular applications, and 5.41% on CaffeineMark 3.0. FSAFlow has fewer false negatives in implicit flow tracking than the Android DTA platform, TaintDroid, and achieves higher precision than the static analysis tool, FlowDroid, by verifying the paths that never occur and tracking in the complete execution stage of the loop body at runtime.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "尽管动态污点分析(DTA)在各种安全应用中被证明是有效的，但是可用的DTA原型所实现的较差性能阻止了它们在生产系统中的广泛采用，尤其是在计算和存储资源有限的Android系统中。为了克服DTA的开销瓶颈，最近的研究致力于将污点跟踪逻辑从程序执行中分离出来。继续这条研究路线，这项工作提出了FSAFlow，一种新的混合污点跟踪和控制系统，以显著减少DTA开销，同时确保良好的Android隐私保护。FSAFlow进一步将路径跟踪逻辑从相应的污点跟踪逻辑中分离出来，并且优化了信息流路径的控制。具体而言，首先修改经典静态分析算法以搜索目标路径及其关键分支信息。然后，选择违反用户预定义的隐私保护策略的潜在路径，并用有限状态自动机(FSA)进行编码。少量基于FSA的状态管理代码被插入到程序中相应的位置。最后，它监视程序的路径执行状态，并防止运行时的信息泄漏。理论分析证明了FSAFlow的有效性和正确性。实验结果表明，与几种典型的DTA优化方法相比，FSAFlow的开销较低，在流行应用程序上为2.06%，在CaffeineMark 3.0上为5.41%。FSAFlow在隐式流跟踪方面的漏报比Android DTA平台TaintDroid更少，并且通过在运行时验证从未出现的路径并在循环体的完整执行阶段进行跟踪，实现了比静态分析工具FlowDroid更高的精度。",
        "title_zh": "FSAFlow:轻量级和快速的动态路径跟踪和控制，用于Android上的隐私保护，使用混合分析和状态缩减策略",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2022.html",
        "conf_title": "43rd SP 2022: San Francisco, CA, USA",
        "conf_url": "https://doi.org/10.1109/SP46214.2022",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP46214.2022.9833609",
        "title": "Domains Do Change Their Spots: Quantifying Potential Abuse of Residual Trust",
        "authors": "Johnny So, Najmeh Miramirkhani, Michael Ferdman, Nick Nikiforakis",
        "abstract": "When domains expire and are released to the public, adversaries can re-register them with the hope of exploiting residual trust from clients that are unaware of the change in ownership. Because domain name resolution is integral to the web, possible clients run the gamut from humans browsing the web to automated and periodic processes such as system updates. For an adversary, this trivially yields access to an attack vector that can affect a multitude of diverse systems and devices. We reason that some domains which experience residual trust and are valuable from a security perspective are not valuable from a dropcatching perspective and, as such, can be re-registered by an adversary without participating in fiercely competitive auctions for expired domains. In this paper, we present an investigation into this attack vector using a top-down, opportunistic approach, as opposed to bottom-up approaches used by prior work that target specific systems and infrastructure. Throughout a one-month re-registration period, we identify potentially valuable dropped domains using a threshold of passive DNS resolutions, re-register, and deploy them with basic honeypot services. We then analyze the traffic to these domains to find instances of residual trust that can be exploited. Our honeypot services recorded, over a four-month period, 650,737,621 requests from 5,540,379 unique IP addresses situated in 22,744 different autonomous systems to the 201 re-registered domains. Although a majority of these domains may not pose significant security risks, we are most concerned with and thus focus our discussion on unusual domains which receive orders of magnitude more traffic and types of traffic that are significantly different from the other domains. These include domains which previously functioned as a torrent tracker, an API for a computer lab usage statistics service used by many universities, an API that was a point of contact for a common Android haptics library, security company DNS sinkhole servers, an Internet radio and music station, command-and-control servers for malware and potentially unwanted programs, and an email tracker. Our findings demonstrate that expired domains pose a real threat to the security of the Internet ecosystem and that adversaries with modest budgets can compromise a wide range of systems and services by merely registering previously-popular domains that were left to expire.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "当域名到期并向公众发布时，对手可以重新注册它们，希望利用不知道所有权变化的客户的剩余信任。因为域名解析是web不可或缺的一部分，所以潜在的客户包括从浏览web的人到自动和定期的过程，如系统更新。对于对手来说，这很容易导致对攻击媒介的访问，从而影响大量不同的系统和设备。我们的理由是，一些经历剩余信任并从安全角度看有价值的域从dropcatching角度看没有价值，因此，可以被对手重新注册，而无需参与过期域的激烈竞争拍卖。在本文中，我们使用自上而下的机会主义方法对这种攻击媒介进行了调查，这与之前针对特定系统和基础设施的工作所使用的自下而上的方法相反。在为期一个月的重新注册期间，我们使用被动DNS解析阈值来识别潜在的有价值的丢弃域名，重新注册，并使用基本的蜜罐服务来部署它们。然后，我们分析这些域的流量，以找到可以利用的残余信任的实例。我们的蜜罐服务在四个月的时间里记录了650，737，621个请求，这些请求来自位于22，744个不同自治系统中的5，540，379个不同的IP地址，发往201个重新注册的域名。虽然这些域中的大多数可能不会造成重大的安全风险，但我们最关心的是异常域，因此我们的讨论集中在这些异常域上，这些异常域接收的流量比其他域多几个数量级，并且流量类型也与其他域有很大不同。这些包括以前用作torrent跟踪器的域、许多大学使用的计算机实验室使用统计服务的API、作为通用Android haptics库的联系点的API、安全公司DNS sinkhole服务器、互联网广播和音乐站、用于恶意软件和潜在有害程序的命令和控制服务器以及电子邮件跟踪器。我们的调查结果表明，过期域名对互联网生态系统的安全构成了真正的威胁，预算有限的对手只需注册即将过期的以前流行的域名，就可以危害广泛的系统和服务。",
        "title_zh": "领域确实会改变它们的位置:量化潜在的剩余信任滥用",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2022.html",
        "conf_title": "43rd SP 2022: San Francisco, CA, USA",
        "conf_url": "https://doi.org/10.1109/SP46214.2022",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP46214.2022.9833665",
        "title": "Analyzing Ground-Truth Data of Mobile Gambling Scams",
        "authors": "Geng Hong, Zhemin Yang, Sen Yang, Xiaojing Liao, Xiaolin Du, Min Yang, Haixin Duan",
        "abstract": "With the growth of mobile computing techniques, mobile gambling scams have seen a rampant increase in the recent past. In mobile gambling scams, miscreants deliver scamming messages via mobile instant messaging, host scam gambling platforms on mobile apps, and adopt mobile payment channels. To date, there is little quantitative knowledge about how this trending cybercrime operates, despite causing daily fraud losses estimated at more than ${\\$}$522,262 USD. This paper presents the first empirical study based on ground-truth data of mobile gambling scams, associated with 1,461 scam incident reports and 1,487 gambling scam apps, spanning from January 1, 2020 to December 31, 2020. The qualitative and quantitative analysis of this ground-truth data allows us to characterize the operational pipeline and full fraud kill chain of mobile gambling scams. In particular, we study the social engineering tricks used by scammers and reveal their effectiveness. Our work provides a systematic analysis of 1,068 confirmed Android and 419 iOS scam apps, including their development frameworks, declared permissions, compatibility, and backend network infrastructure. Perhaps surprisingly, our study unveils that public online app generators have been abused to develop gambling scam apps. Our analysis reveals several payment channels (ab)used by gambling scam app and uncovers a new type of money mule-based payment channel with the average daily gambling deposit of ${\\$}$400,000 USD. Our findings enable a better understanding of the mobile gambling scam ecosystem, and suggest potential avenues to disrupt these scam activities.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "随着移动计算技术的发展，移动赌博诈骗在最近几年有了迅猛的增长。在移动赌博诈骗中，不法分子通过移动即时通信发送诈骗短信，在移动app上托管诈骗赌博平台，并采用移动支付渠道。迄今为止，关于这种趋势性网络犯罪如何运作的量化知识很少，尽管其造成的每日欺诈损失估计超过522，262美元。本文首次基于移动赌博诈骗的真实数据进行了实证研究，涉及1，461个诈骗事件报告和1，487个赌博诈骗应用，时间跨度为2020年1月1日至2020年12月31日。通过对这些真实数据进行定性和定量分析，我们可以了解移动赌博诈骗的运营渠道和完整的诈骗扼杀链。特别是，我们研究骗子使用的社会工程技巧，并揭示其有效性。我们的工作提供了对1，068个确认的Android和419个iOS scam应用的系统分析，包括它们的开发框架、声明的权限、兼容性和后端网络基础设施。也许令人惊讶的是，我们的研究揭示了公共在线应用生成器被滥用于开发赌博诈骗应用。我们的分析揭示了赌博诈骗应用程序使用的几种支付渠道(ab ),并发现了一种基于骡子的新型支付渠道，平均每天的赌博存款为＄{ \\ ＄}＄400，000美元。我们的发现有助于更好地理解移动赌博诈骗生态系统，并提出了破坏这些诈骗活动的潜在途径。",
        "title_zh": "分析移动赌博诈骗的真实数据",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2022.html",
        "conf_title": "43rd SP 2022: San Francisco, CA, USA",
        "conf_url": "https://doi.org/10.1109/SP46214.2022",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP46214.2022.9833593",
        "title": "FuzzUSB: Hybrid Stateful Fuzzing of USB Gadget Stacks",
        "authors": "Kyungtae Kim, Taegyu Kim, Ertza Warraich, Byoungyoung Lee, Kevin R. B. Butler, Antonio Bianchi, Dave Jing Tian",
        "abstract": "Universal Serial Bus (USB) is the de facto protocol supported by peripherals and mobile devices, such as USB thumb drives and smart phones. For many devices, USB Type-C ports are the primary interface for charging, file transfer, audio, video, etc. Accordingly, attackers have exploited different vulnerabilities within USB stacks, compromising host machines via BadUSB attacks or jailbreaking iPhones from USB connections. While there exist fuzzing frameworks dedicated to USB vulnerability discovery, all of them focus on USB host stacks and ignore USB gadget stacks, which enable all the features within modern peripherals and smart devices. In this paper, we propose FuzzUSB, the first fuzzing framework for the USB gadget stack within commodity OS kernels, leveraging static analysis, symbolic execution, and stateful fuzzing. FuzzUSB combines static analysis and symbolic execution to extract internal state machines from USB gadget drivers, and uses them to achieve state-guided fuzzing through multi-channel inputs. We have implemented FuzzUSB upon the syzkaller kernel fuzzer and applied it to the most recent mainline Linux, Android, and FreeBSD kernels. As a result, we have found 34 previously unknown bugs within the Linux and Android kernels, and opened 8 CVEs. Furthermore, compared to the baseline, FuzzUSB has also demonstrated different improvements, including $ 3\\times$ higher code coverage, $ 50\\times$ improved bug-finding efficiency for Linux USB gadget stacks, $ 2\\times$ higher code coverage for FreeBSD USB gadget stacks, and reproducing known bugs that could not be detected by the baseline fuzzers. We believe FuzzUSB provides developers a powerful tool to thwart USB-related vulnerabilities within modern devices and complete the current USB fuzzing scope.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "通用串行总线(USB)是外围设备和移动设备(如USB拇指驱动器和智能手机)支持的事实上的协议。对于许多设备来说，USB Type-C端口是充电、文件传输、音频、视频等的主要接口。因此，攻击者利用了USB堆栈中的不同漏洞，通过BadUSB攻击或从USB连接中越狱iPhones来危害主机。虽然存在专用于USB漏洞发现的模糊框架，但它们都专注于USB主机堆栈，而忽略了USB小工具堆栈，这些小工具堆栈支持现代外设和智能设备中的所有功能。在本文中，我们提出了FuzzUSB，它是商用操作系统内核中第一个针对USB小工具堆栈的模糊化框架，利用了静态分析、符号执行和有状态模糊化。FuzzUSB结合静态分析和符号执行，从USB小工具驱动中提取内部状态机，并使用它们通过多路输入实现状态引导的fuzzing。我们在syzkaller内核fuzzer上实现了FuzzUSB，并将其应用于最新的主流Linux、Android和FreeBSD内核。结果，我们在Linux和Android内核中发现了34个以前未知的错误，并打开了8个CVE。此外，与基线相比，FuzzUSB还展示了不同的改进，包括代码覆盖率提高了3倍，Linux USB小工具堆栈的错误查找效率提高了50倍，FreeBSD USB小工具堆栈的代码覆盖率提高了2倍，并且重现了基线fuzzers无法检测到的已知错误。我们相信FuzzUSB为开发人员提供了一个强大的工具来阻止现代设备中与USB相关的漏洞，并完善当前的USB fuzzing范围。",
        "title_zh": "FuzzUSB:USB小工具堆栈的混合状态模糊化",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2022.html",
        "conf_title": "43rd SP 2022: San Francisco, CA, USA",
        "conf_url": "https://doi.org/10.1109/SP46214.2022",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP46214.2022.9833563",
        "title": "Exploit the Last Straw That Breaks Android Systems",
        "authors": "Lei Zhang, Keke Lian, Haoyu Xiao, Zhibo Zhang, Peng Liu, Yuan Zhang, Min Yang, Haixin Duan",
        "abstract": "The Android system services usually play a critical role in running multiple important tasks, and delivering seamless user experiences, e.g., conveniently storing user data. In this paper, we conduct the first systematic security study on the data storing process in Android system services, and consequently discover a novel class of design flaws (named Straw), which can lead to serious DoS (Denial-of-Service) attacks, e.g., permanently crashing the whole victim Android device.Then we propose a novel directed fuzzing based approach, called StrawFuzzer, to automatically vet all system services against the straw vulnerabilities. StrawFuzzer balances the tradeoff between path exploration and vulnerability exploitation. By applying StrawFuzzer on three Android systems with the latest security updates, we identified 35 unique straw vulnerabilities affecting 474 interfaces across 77 system services and successfully generated corresponding exploits, which can be used to conduct various permanent/temporary DoS attacks. We have reported our findings with suggestions for repairing the vulnerabilities to corresponding vendors. Up to now, Google has rated our vulnerability as high severity.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android系统服务通常在运行多个重要任务和交付无缝用户体验(例如，方便地存储用户数据)方面发挥着关键作用。本文首次对Android系统服务中的数据存储过程进行了系统的安全研究，发现了一类新的设计缺陷(名为Straw ),这类缺陷会导致严重的拒绝服务攻击，例如使整个受害Android设备永久崩溃。然后，我们提出了一种新的基于定向模糊化的方法，称为StrawFuzzer，用于自动检查所有系统服务是否存在straw漏洞。StrawFuzzer平衡了路径探索和漏洞利用之间的权衡。通过在三个具有最新安全更新的Android系统上应用StrawFuzzer，我们发现了影响77个系统服务的474个接口的35个独特的straw漏洞，并成功生成了相应的漏洞，这些漏洞可用于进行各种永久/临时的DoS攻击。我们已经向相应的供应商报告了我们的发现以及修复漏洞的建议。到目前为止，谷歌对我们的漏洞评级为高严重性。",
        "title_zh": "利用压垮安卓系统的最后一根稻草",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2022.html",
        "conf_title": "43rd SP 2022: San Francisco, CA, USA",
        "conf_url": "https://doi.org/10.1109/SP46214.2022",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP46214.2022.9833779",
        "title": "\"Desperate Times Call for Desperate Measures\": User Concerns with Mobile Loan Apps in Kenya",
        "authors": "Collins W. Munyendo, Yasemin Acar, Adam J. Aviv",
        "abstract": "The usage of mobile loan applications has proliferated in developing countries. This is due to the ease and speed in which they disburse small loans to users, compared to traditional financial institutions, such as banks, that only offer similar loans based on existing customer relationship or collateral. As mobile loan apps are a relatively new industry, these apps are mostly unregulated and therefore tend to charge extremely high interest rates. Further, they collect and sometimes misuse sensitive user data through the course of verifying customers and ensuring loan repayment, such as users’ contacts and SMS communications through the mobile device permission system. Yet, the reasons for usage as well as privacy concerns with these mobile loan apps in the developing world, and specifically in Kenya, remain largely unexplored. To investigate mobile loan apps, we conducted semi-structured interviews (n = 20) with loan app users in Kenya, and we find that most users generally have privacy concerns, particularly regarding access to their phones’ contacts. However, they often overlook these concerns as this outweighs their need to procure loans. At the same time, we find that users struggle to understand the use of permissions by these mobile loan apps (and mobile apps generally), confirming prior research on comprehension of Android permissions. Our results highlight privacy risks, concerns and behavior with the emerging mobile loan app marketplace in the developing world, and we offer recommendations that can help protect their users’ security and privacy, including the need for transparent communication by these apps on how they collect, use and secure their users’ data.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "移动贷款应用的使用在发展中国家激增。这是因为与传统金融机构(如银行)相比，它们向用户发放小额贷款更容易、更快，传统金融机构只根据现有客户关系或抵押品提供类似贷款。由于移动贷款应用是一个相对较新的行业，这些应用大多不受监管，因此往往收取极高的利率。此外，他们在验证客户和确保贷款偿还的过程中收集并有时滥用敏感的用户数据，如通过移动设备许可系统的用户联系人和SMS通信。然而，在发展中国家，特别是在肯尼亚，使用这些移动贷款应用程序的原因以及隐私问题在很大程度上仍未得到探索。为了调查移动贷款应用程序，我们对肯尼亚的贷款应用程序用户进行了半结构化采访(n = 20)，我们发现大多数用户普遍存在隐私问题，特别是关于访问他们手机的联系人。然而，他们经常忽视这些问题，因为这超过了他们获得贷款的需要。与此同时，我们发现用户很难理解这些移动贷款应用程序(以及一般的移动应用程序)对权限的使用，这证实了之前关于Android权限理解的研究。我们的结果强调了发展中国家新兴移动贷款应用市场的隐私风险、担忧和行为，我们提供了有助于保护用户安全和隐私的建议，包括这些应用程序需要就如何收集、使用和保护用户数据进行透明的沟通。",
        "title_zh": "“非常时期需要非常手段”:肯尼亚用户对移动贷款应用的担忧",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2022.html",
        "conf_title": "43rd SP 2022: San Francisco, CA, USA",
        "conf_url": "https://doi.org/10.1109/SP46214.2022",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP46214.2022.9833729",
        "title": "Hark: A Deep Learning System for Navigating Privacy Feedback at Scale",
        "authors": "Hamza Harkous, Sai Teja Peddinti, Rishabh Khandelwal, Animesh Srivastava, Nina Taft",
        "abstract": "Integrating user feedback is one of the pillars for building successful products. However, this feedback is generally collected in an unstructured free-text form, which is challenging to understand at scale. This is particularly demanding in the privacy domain due to the nuances associated with the concept and the limited existing solutions. In this work, we present Hark1, a system for discovering and summarizing privacy-related feedback at scale. Hark automates the entire process of summarizing privacy feedback, starting from unstructured text and resulting in a hierarchy of high-level privacy themes and fine-grained issues within each theme, along with representative reviews for each issue. At the core of Hark is a set of new deep learning models trained on different tasks, such as privacy feedback classification, privacy issues generation, and high-level theme creation. We illustrate Hark’s efficacy on a corpus of 626 M Google Play reviews. Out of this corpus, our privacy feedback classifier extracts $6 M$ privacy-related reviews (with an AUC-ROC of 0.92). With three annotation studies, we show that Hark’s generated issues are of high accuracy and coverage and that the theme titles are of high quality. We illustrate Hark’s capabilities by presenting high-level insights from $1.3 M$ Android apps.1an English verb meaning to “pay close attention”",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "整合用户反馈是构建成功产品的支柱之一。然而，这种反馈通常是以非结构化的自由文本形式收集的，很难大规模理解。由于与概念相关的细微差别和有限的现有解决方案，这在隐私领域中要求特别高。在这项工作中，我们提出了Hark1，一个用于大规模发现和总结隐私相关反馈的系统。Hark自动化了总结隐私反馈的整个过程，从非结构化文本开始，产生高级隐私主题和每个主题内的细粒度问题的层次结构，以及每个问题的代表性评论。Hark的核心是一套新的深度学习模型，这些模型针对不同的任务进行训练，如隐私反馈分类、隐私问题生成和高级主题创建。我们在6.26亿条Google Play评论的语料库上展示了Hark的功效。从这个语料库中，我们的隐私反馈分类器提取了600万美元的隐私相关评论(AUC-ROC为0.92)。通过三个标注研究，我们表明Hark生成的问题具有高准确性和覆盖率，主题标题具有高质量。我们从价值130万美元的Android apps . 1(一个英语动词，意为“密切关注”)展示了Hark的能力",
        "title_zh": "Hark:用于大规模导航隐私反馈的深度学习系统",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2022.html",
        "conf_title": "43rd SP 2022: San Francisco, CA, USA",
        "conf_url": "https://doi.org/10.1109/SP46214.2022",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SPW54247.2022.9833870",
        "title": "BLE-Doubt: Smartphone-Based Detection of Malicious Bluetooth Trackers",
        "authors": "Jimmy Briggs, Christine Geeng",
        "abstract": "Stalkers can hide Bluetooth Low-Energy (BLE) trackers, like the Apple AirTag and Tile Finder, in their targets’ clothing or vehicles to surveil their locations. Existing countermeasures to detect BLE-based stalking are promising but have several shortcomings: they only work against Apple products, they are slow to detect trackers, and there is no publicly available characterization of how well they work. We present an open-source, general method for detecting maliciously deployed BLE trackers. Our algorithm detects malicious devices in just a few minutes, whereas previous algorithms take hours or days. We show in a small but novel validation study that our algorithm performs with high precision and recall for most extant trackers, although AirTags pose additional challenges. Along with our algorithm and validation, we provide an open-source Android application capable of real-time detection of these devices. We also characterize the behavior of the AirTag and discuss the risk factors which make it particularly hard to detect. We conclude with a discussion for future work to make tracking devices safer for the public.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "跟踪者可以将蓝牙低能量(BLE)追踪器，如苹果AirTag和Tile Finder，藏在目标的衣服或车辆中，以监视他们的位置。现有的检测BLE跟踪的对策很有希望，但有几个缺点:它们只对苹果产品有效，它们检测追踪器很慢，而且没有公开的关于它们工作情况的描述。我们提出了一个开源的，通用的方法来检测恶意部署的BLE追踪器。我们的算法可以在几分钟内检测到恶意设备，而以前的算法需要几个小时或几天。我们在一个小型但新颖的验证研究中表明，我们的算法对大多数现存的跟踪器具有高精度和高召回率，尽管空中标签带来了额外的挑战。随着我们的算法和验证，我们提供了一个开源的Android应用程序，能够实时检测这些设备。我们还描述了空中标签的行为，并讨论了使其特别难以检测的风险因素。最后，我们讨论了使跟踪设备对公众更安全的未来工作。",
        "title_zh": "BLE-怀疑:基于智能手机的恶意蓝牙追踪器检测",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2022w.html",
        "conf_title": "43rd SP 2022: San Francisco, CA, USA - Workshops",
        "conf_url": "https://doi.org/10.1109/SPW54247.2022",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SPW54247.2022.9833867",
        "title": "Exploring Widevine for Fun and Profit",
        "authors": "Gwendal Patat, Mohamed Sabt, Pierre-Alain Fouque",
        "abstract": "—For years, Digital Right Management (DRM) sys- tems have been used as the go-to solution for media content protection against piracy. With the growing consumption of content using Over-the-Top platforms, such as Netﬂix or Prime Video, DRMs have been deployed on numerous devices considered as potential hostile environments. In this paper, we focus on the most widespread solution, the closed-source Widevine DRM. Installed on billions of devices, Widevine relies on crypto- graphic operations to protect content. Our work presents a study of Widevine internals on Android, mapping its distinct components and bringing out its different cryptographic keys involved in content decryption. We provide a structural view of Widevine as a protocol with its complete key ladder. Based on our insights, we develop WideXtractor, a tool based on Frida to trace Widevine function calls and intercept messages for inspection. Using this tool, we analyze Netﬂix usage of Widevine as a proof- of-concept, and raised privacy concerns on user-tracking. In addition, we leverage our knowledge to bypass the obfuscation of Android Widevine software-only version, namely L3, and recover its Root-of-Trust.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "—多年来，数字版权管理(DRM)系统一直被用作防止盗版的媒体内容保护的首选解决方案。随着使用过顶平台(如Net fix或Prime Video)的内容消费的增长，DRM已被部署在许多被视为潜在敌对环境的设备上。在本文中，我们重点关注最广泛的解决方案，即闭源Widevine DRM。Widevine安装在数十亿台设备上，依靠加密操作来保护内容。我们的工作展示了对Android上Widevine内部的研究，映射了它的不同组件，并展示了它在内容解密中涉及的不同密钥。我们提供了Widevine作为一个协议的结构视图及其完整的密钥阶梯。基于我们的见解，我们开发了WideXtractor，这是一个基于Frida的工具，用于跟踪Widevine函数调用并拦截消息以供检查。使用该工具，我们分析了Widevine的网络固定使用情况，作为概念验证，并提出了用户跟踪方面的隐私问题。此外，我们利用我们的知识绕过Android Widevine纯软件版本(即L3)的混淆，并恢复其信任根。",
        "title_zh": "探索Widevine的乐趣和利润",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2022w.html",
        "conf_title": "43rd SP 2022: San Francisco, CA, USA - Workshops",
        "conf_url": "https://doi.org/10.1109/SPW54247.2022",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP40000.2020.00033",
        "title": "SpecCFI: Mitigating Spectre Attacks using CFI Informed Speculation",
        "authors": "Esmaeil Mohammadian Koruyeh, Shirin Haji Amin Shirazi, Khaled N. Khasawneh, Chengyu Song, Nael B. Abu-Ghazaleh",
        "abstract": "Spectre attacks and their many subsequent variants are a new vulnerability class affecting modern CPUs. The attacks rely on the ability to misguide speculative execution, generally by exploiting the branch prediction structures, to execute a vulnerable code sequence speculatively. In this paper, we propose to use Control-Flow Integrity (CFI), a security technique used to stop control-flow hijacking attacks, on the committed path, to prevent speculative control-flow from being hijacked to launch the most dangerous variants of the Spectre attacks (Spectre-BTB and Spectre-RSB). Specifically, CFI attempts to constrain the possible targets of an indirect branch to a set of legal targets defined by a pre-calculated control-flow graph (CFG). As CFI is being adopted by commodity software (e.g., Windows and Android) and commodity hardware (e.g., Intel’s CET and ARM’s BTI), the CFI information becomes readily available through the hardware CFI extensions. With the CFI information, we apply CFI principles to also constrain illegal control-flow during speculative execution. Specifically, our proposed defense, SpecCFI, ensures that control flow instructions target legal destinations to constrain dangerous speculation on forward control-flow paths (indirect calls and branches). We augment this protection with a precise speculation-aware hardware stack to constrain speculation on backward control-flow edges (returns). We combine this solution with existing solutions against branch target predictor attacks (Spectre-PHT) to close all known non-vendor-specific Spectre vulnerabilities. We show that SpecCFI results in small overheads both in terms of performance and additional hardware complexity.",
        "files": {
            "openAccessPdf": "https://ieeexplore.ieee.org/ielx7/9144328/9152199/09152786.pdf"
        },
        "abstract_zh": "Spectre攻击及其许多后续变体是影响现代CPU的一种新的漏洞类别。攻击依赖于误导推测性执行的能力，通常通过利用分支预测结构来推测性地执行易受攻击的代码序列。在本文中，我们建议在提交路径上使用控制流完整性(CFI)，一种用于阻止控制流劫持攻击的安全技术，以防止投机性控制流被劫持来发起最危险的Spectre攻击变体(Spectre-BTB和Spectre-RSB)。具体来说，CFI试图将间接分支的可能目标约束到一组由预先计算的控制流图(CFG)定义的合法目标。随着CFI被商用软件(如Windows和Android)和商用硬件(如英特尔的CET和ARM的BTI)采用，CFI信息通过硬件CFI扩展变得容易获得。有了CFI信息，我们应用CFI原则来约束推测执行期间的非法控制流。具体来说，我们提出的防御SpecCFI确保控制流指令以合法的目的地为目标，以约束前向控制流路径(间接调用和分支)上的危险推测。我们用一个精确的推测感知硬件栈来增强这种保护，以限制对反向控制流边缘(返回)的推测。我们将该解决方案与现有的针对分支目标预测器攻击(Spectre-PHT)的解决方案相结合，以消除所有已知的非供应商特定Spectre漏洞。我们表明，SpecCFI在性能和额外硬件复杂性方面都会产生较小的开销。",
        "title_zh": "SpecCFI:使用CFI知情推测减轻Spectre攻击",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2020.html",
        "conf_title": "41st SP 2020: San Francisco, CA, USA",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/9144328/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP40000.2020.00069",
        "title": "The Many Kinds of Creepware Used for Interpersonal Attacks",
        "authors": "Kevin A. Roundy, Paula Barmaimon Mendelberg, Nicola Dell, Damon McCoy, Daniel Nissani, Thomas Ristenpart, Acar Tamersoy",
        "abstract": "Technology increasingly facilitates interpersonal attacks such as stalking, abuse, and other forms of harassment. While prior studies have examined the ecosystem of software designed for stalking, there exists an unstudied, larger landscape of apps—what we call creepware—used for interpersonal attacks. In this paper, we initiate a study of creepware using access to a dataset detailing the mobile apps installed on over 50 million Android devices. We develop a new algorithm, CreepRank, that uses the principle of guilt by association to help surface previously unknown examples of creepware, which we then characterize through a combination of quantitative and qualitative methods. We discovered apps used for harassment, impersonation, fraud, information theft, concealment, and even apps that purport to defend victims against such threats. As a result of our work, the Google Play Store has already removed hundreds of apps for policy violations. More broadly, our findings and techniques improve understanding of the creepware ecosystem, and will inform future efforts that aim to mitigate interpersonal attacks.",
        "files": {
            "openAccessPdf": "https://ieeexplore.ieee.org/ielx7/9144328/9152199/09152794.pdf"
        },
        "abstract_zh": "技术越来越方便人际攻击，如跟踪、虐待和其他形式的骚扰。虽然之前的研究已经检查了为跟踪而设计的软件生态系统，但存在一个未经研究的更大的应用景观——我们称之为creep ware——用于人际攻击。在本文中，我们通过访问一个数据集来启动对creepware的研究，该数据集详细列出了安装在超过5000万台Android设备上的移动应用程序。我们开发了一种新的算法Cree恶作剧，它使用关联内疚的原理来帮助发现以前未知的creepware示例，然后我们通过定量和定性方法的结合来描述这些示例。我们发现了用于骚扰、假冒、欺诈、信息窃取、隐藏的应用程序，甚至是声称保护受害者免受此类威胁的应用程序。由于我们的工作，谷歌Play商店已经删除了数百个违反政策的应用程序。更广泛地说，我们的发现和技术提高了对creepware生态系统的理解，并将为旨在减轻人际攻击的未来努力提供信息。",
        "title_zh": "许多种类的爬虫被用于人际攻击",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2020.html",
        "conf_title": "41st SP 2020: San Francisco, CA, USA",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/9144328/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP40000.2020.00077",
        "title": "Meddling Middlemen: Empirical Analysis of the Risks of Data-Saving Mobile Browsers",
        "authors": "Brian Kondracki, Assel Aliyeva, Manuel Egele, Jason Polakis, Nick Nikiforakis",
        "abstract": "Mobile browsers have become one of the main mediators of our online activities. However, as web pages continue to increase in size and streaming media on-the-go has become commonplace, mobile data plan constraints remain a significant concern for users. As a result, data-saving features can be a differentiating factor when selecting a mobile browser. In this paper, we present a comprehensive exploration of the security and privacy threat that data-saving functionality presents to users. We conduct the first analysis of Android’s data-saving browser (DSB) ecosystem across multiple dimensions, including the characteristics of the various browsers’ infrastructure, their application and protocol-level behavior, and their effect on users’ browsing experience. Our research unequivocally demonstrates that enabling data-saving functionality in major browsers results in significant degradation of the user’s security posture by introducing severe vulnerabilities that are not otherwise present in the browser during normal operation. In summary, our experiments show that enabling data savings exposes users to (i) proxy servers running outdated software, (ii) man-in-the-middle attacks due to problematic validation of TLS certificates, (iii) weakened TLS cipher suite selection, (iv) lack of support of security headers like HSTS, and (v) a higher likelihood of being labelled as bots. While the discovered issues can be addressed, we argue that data-saving functionality presents inherent risks in an increasingly-encrypted Web, and users should be alerted of the critical savings-vs-security trade-off that they implicitly accept every time they enable such functionality.",
        "files": {
            "openAccessPdf": "https://ieeexplore.ieee.org/ielx7/9144328/9152199/09152644.pdf"
        },
        "abstract_zh": "移动浏览器已经成为我们在线活动的主要媒介之一。然而，随着网页大小的持续增长和移动流媒体变得越来越普遍，移动数据计划的限制仍然是用户非常关心的问题。因此，在选择移动浏览器时，数据保存功能可能是一个差异化因素。在本文中，我们全面探讨了数据保存功能给用户带来的安全和隐私威胁。我们对Android的数据保存浏览器(DSB)生态系统进行了首次多维度分析，包括各种浏览器基础设施的特征、它们的应用和协议级行为，以及它们对用户浏览体验的影响。我们的研究明确表明，在主流浏览器中启用数据保存功能会引入严重的漏洞，导致用户的安全状况显著下降，而这些漏洞在浏览器正常运行时不会出现。总之，我们的实验表明，实现数据节省会使用户面临(I)运行过时软件的代理服务器，(ii)由于TLS证书验证有问题而导致的中间人攻击，(iii)弱化的TLS密码套件选择，(iv)缺乏对HSTS等安全标头的支持，以及(v)被标记为僵尸程序的可能性更高。虽然发现的问题可以得到解决，但我们认为，数据保存功能在日益加密的网络中存在固有的风险，应该提醒用户注意他们每次启用这种功能时隐含接受的节省与安全之间的重要权衡。",
        "title_zh": "多管闲事的中间人:数据保存手机浏览器风险的实证分析",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2020.html",
        "conf_title": "41st SP 2020: San Francisco, CA, USA",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/9144328/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP40000.2020.00013",
        "title": "An Analysis of Pre-installed Android Software",
        "authors": "Julien Gamba, Mohammed Rashed, Abbas Razaghpanah, Juan Tapiador, Narseo Vallina-Rodriguez",
        "abstract": "The open-source nature of the Android OS makes it possible for manufacturers to ship custom versions of the OS along with a set of pre-installed apps, often for product differentiation. Some device vendors have recently come under scrutiny for potentially invasive private data collection practices and other potentially harmful or unwanted behavior of the preinstalled apps on their devices. Yet, the landscape of preinstalled software in Android has largely remained unexplored, particularly in terms of the security and privacy implications of such customizations. In this paper, we present the first large- scale study of pre-installed software on Android devices from more than 200 vendors. Our work relies on a large dataset of real-world Android firmware acquired worldwide using crowd-sourcing methods. This allows us to answer questions related to the stakeholders involved in the supply chain, from device manufacturers and mobile network operators to third- party organizations like advertising and tracking services, and social network platforms. Our study allows us to also uncover relationships between these actors, which seem to revolve primarily around advertising and data-driven services. Overall, the supply chain around Android's open source model lacks transparency and has facilitated potentially harmful behaviors and backdoored access to sensitive data and services without user consent or awareness. We conclude the paper with recommendations to improve transparency, attribution, and accountability in the Android ecosystem.",
        "files": {
            "openAccessPdf": "https://ieeexplore.ieee.org/ielx7/9144328/9152199/09152633.pdf"
        },
        "abstract_zh": "Android操作系统的开源特性使得制造商有可能将定制版本的操作系统与一组预装的应用程序一起发布，这通常是为了产品差异化。一些设备供应商最近受到审查，因为他们的设备上预装的应用程序存在潜在的侵入性私人数据收集做法和其他潜在的有害或不必要的行为。然而，Android中预装软件的前景在很大程度上仍未被探索，特别是在这种定制的安全性和隐私性方面。在本文中，我们首次对200多家厂商的Android设备上的预装软件进行了大规模研究。我们的工作依赖于使用众包方法在全球范围内获得的真实世界Android固件的大型数据集。这使我们能够回答与供应链中的利益相关者相关的问题，从设备制造商和移动网络运营商到第三方组织，如广告和跟踪服务，以及社交网络平台。我们的研究还让我们发现了这些行为者之间的关系，这些行为者似乎主要围绕广告和数据驱动的服务。总体而言，围绕Android开源模式的供应链缺乏透明度，助长了潜在的有害行为，以及在未经用户同意或意识到的情况下对敏感数据和服务的后门访问。最后，我们提出了改善Android生态系统透明度、归属和问责制的建议。",
        "title_zh": "预装安卓软件分析",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2020.html",
        "conf_title": "41st SP 2020: San Francisco, CA, USA",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/9144328/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP40000.2020.00071",
        "title": "TextExerciser: Feedback-driven Text Input Exercising for Android Applications",
        "authors": "Yuyu He, Lei Zhang, Zhemin Yang, Yinzhi Cao, Keke Lian, Shuai Li, Wei Yang, Zhibo Zhang, Min Yang, Yuan Zhang, Haixin Duan",
        "abstract": "Dynamic analysis of Android apps is often used together with an exerciser to increase its code coverage. One big obstacle in designing such Android app exercisers comes from the existence of text-based inputs, which are often constrained by the nature of the input field, such as the length and character restrictions.In this paper, we propose TextExerciser, an iterative, feedback-driven text input exerciser, which generates text inputs for Android apps. Our key insight is that Android apps often provide feedback, called hints, for malformed inputs so that our system can utilize such hints to improve the input generation.We implemented a prototype of TextExerciser and evaluated it by comparing TextExerciser with state-of-the-art exercisers, such as The Monkey and DroidBot. Our evaluation shows that TextExerciser can achieve significantly higher code coverage and trigger more sensitive behaviors than these tools. We also combine TextExerciser with dynamic analysis tools and show they are able to detect more privacy leaks and vulnerabilities with TextExerciser than with existing exercisers. Particularly, existing tools, under the help of TextExerciser, find several new vulnerabilities, such as one user credential leak in a popular social app with more than 10,000,000 downloads.",
        "files": {
            "openAccessPdf": "https://ieeexplore.ieee.org/ielx7/9144328/9152199/09152712.pdf"
        },
        "abstract_zh": "Android应用程序的动态分析通常与锻炼者一起使用，以增加其代码覆盖率。设计这种Android应用程序锻炼器的一个大障碍来自基于文本的输入的存在，这种输入通常受到输入字段的性质的约束，例如长度和字符限制。在本文中，我们提出了TextExerciser，一个迭代的、反馈驱动的文本输入训练器，它为Android应用程序生成文本输入。我们的关键见解是，Android应用程序经常为畸形输入提供反馈，称为提示，以便我们的系统可以利用这些提示来改善输入生成。我们实现了一个TextExerciser原型，并通过将TextExerciser与最先进的训练器(如Monkey和DroidBot)进行比较来评估它。我们的评估表明，与这些工具相比，TextExerciser可以实现显著更高的代码覆盖率，并触发更敏感的行为。我们还将text exercise与动态分析工具相结合，并表明与现有的锻炼者相比，它们能够检测到更多的隐私泄露和漏洞。特别是，现有的工具在TextExerciser的帮助下，发现了几个新的漏洞，例如一个下载量超过10，000，000的流行社交应用程序中的一个用户凭据泄漏。",
        "title_zh": "Text exerciser:Android应用程序的反馈驱动文本输入练习",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2020.html",
        "conf_title": "41st SP 2020: San Francisco, CA, USA",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/9144328/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP40000.2020.00094",
        "title": "Ex-vivo dynamic analysis framework for Android device drivers",
        "authors": "Ivan Pustogarov, Qian Wu, David Lie",
        "abstract": "The ability to execute and analyze code makes many security tasks such as exploit development, reverse engineering, and vulnerability detection much easier. However, on embedded devices such as Android smartphones, executing code in-vivo, on the device, for analysis is limited by the need to acquire such devices, the speed of the device, and in some cases the need to flash custom code onto the devices. The other option is to execute the code ex-vivo, off the device, but this approach either requires porting or complex hardware emulation.In this paper, we take advantage of the observation that many execution paths in drivers are only superficially dependent on both the hardware and kernel on which the driver executes, to create an ex-vivo dynamic driver analysis framework for Android devices that requires neither porting nor emulation. We achieve this by developing a generic evasion framework that enables driver initialization by evading hardware and kernel dependencies instead of precisely emulating them, and then developing a novel Ex-vivo AnalySIs framEwoRk (EASIER) that enables off-device analysis with the initialized driver state. Compared to on-device analysis, our approach enables the use of userspace tools and scales with the number of available commodity CPU’s, not the number of smartphones.We demonstrate the usefulness of our framework by targeting privilege escalation vulnerabilities in system call handlers in platform device drivers. We find it can load 48/62 (77%) drivers from three different Android kernels: MSM, Xiaomi, and Huawei. We then confirm that it is able to reach and detect 21 known vulnerabilities. Finally, we have discovered 12 new bugs which we have reported and confirmed.",
        "files": {
            "openAccessPdf": "https://ieeexplore.ieee.org/ielx7/9144328/9152199/09152767.pdf"
        },
        "abstract_zh": "执行和分析代码的能力使得许多安全任务变得更加容易，例如漏洞开发、逆向工程和漏洞检测。然而，在诸如Android智能手机之类的嵌入式设备上，在设备上执行体内代码以进行分析受到获取这种设备的需求、设备的速度以及在某些情况下将定制代码闪存到设备上的需求的限制。另一种选择是在体外执行代码，但这种方法要么需要移植，要么需要复杂的硬件仿真。在本文中，我们利用观察到的驱动程序中的许多执行路径只是表面上依赖于驱动程序执行的硬件和内核，来创建一个用于Android设备的离体动态驱动程序分析框架，该框架既不需要移植也不需要仿真。我们通过开发一个通用回避框架来实现这一点，该框架通过回避硬件和内核依赖性而不是精确地模拟它们来实现驱动程序初始化，然后开发一个新的离体分析框架(更容易)，该框架通过初始化的驱动程序状态来实现设备外分析。与设备上分析相比，我们的方法支持使用用户空间工具，并随着可用商用CPU的数量而扩展，而不是智能手机的数量。我们通过定位平台设备驱动程序中系统调用处理程序的特权提升漏洞来证明我们的框架的有效性。我们发现它可以加载来自三种不同Android内核的48/62 (77%)驱动程序:MSM、小米和华为。然后，我们确认它能够到达并检测21个已知的漏洞。最后，我们发现了12个我们已经报告并确认的新错误。",
        "title_zh": "Android设备驱动的离体动态分析框架",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2020.html",
        "conf_title": "41st SP 2020: San Francisco, CA, USA",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/9144328/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP40000.2020.00075",
        "title": "Flaw Label: Exploiting IPv6 Flow Label",
        "authors": "Jonathan Berger, Amit Klein, Benny Pinkas",
        "abstract": "The IPv6 protocol was designed with security in mind. One of the changes that IPv6 has introduced over IPv4 is a new 20-bit flow label field in its protocol header.We show that remote servers can use the flow label field in order to assign a unique ID to each device when communicating with machines running Windows 10 (versions 1703 and higher), and Linux and Android (kernel versions 4.3 and higher). The servers are then able to associate the respective device IDs with subsequent transmissions sent from those machines. This identification is done by exploiting the flow label field generation logic and works across all browsers regardless of network changes. Furthermore, a variant of this attack also works passively, namely without actively triggering traffic from those machines.To design the attack we reverse-engineered and cryptanalyzed the Windows flow label generation code and inspected the Linux kernel flow label generation code. We provide a practical technique to partially extract the key used by each of these algorithms, and observe that this key can identify individual devices across networks, VPNs, browsers and privacy settings. We deployed a demo (for both Windows and Linux/Android) showing that key extraction and machine fingerprinting works in the wild, and tested it from networks around the world.",
        "files": {
            "openAccessPdf": "https://ieeexplore.ieee.org/ielx7/9144328/9152199/09152759.pdf"
        },
        "abstract_zh": "IPv6协议的设计考虑到了安全性。IPv6在IPv4上引入的变化之一是在其协议报头中新增了一个20位流标签字段。我们展示了远程服务器可以使用流标签字段，以便在与运行Windows 10(版本1703和更高版本)、Linux和Android(内核版本4.3和更高版本)的机器通信时，为每个设备分配唯一的ID。然后，服务器能够将相应的设备id与从这些机器发送的后续传输相关联。这种识别是通过利用流标签字段生成逻辑来完成的，并且不管网络如何变化，都可以跨所有浏览器工作。此外，这种攻击的变体也是被动工作的，即不主动触发来自这些机器的流量。为了设计攻击，我们对Windows流标签生成代码进行了逆向工程和密码分析，并检查了Linux内核流标签生成代码。我们提供了一种实用的技术来部分提取这些算法所使用的密钥，并观察到该密钥可以跨网络、VPN、浏览器和隐私设置来识别各个设备。我们部署了一个演示程序(针对Windows和Linux/Android ),展示了密钥提取和机器指纹识别在野外的工作情况，并在世界各地的网络中进行了测试。",
        "title_zh": "缺陷标签:利用IPv6流标签",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2020.html",
        "conf_title": "41st SP 2020: San Francisco, CA, USA",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/9144328/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP40000.2020.00073",
        "title": "Intriguing Properties of Adversarial ML Attacks in the Problem Space",
        "authors": "Fabio Pierazzi, Feargus Pendlebury, Jacopo Cortellazzi, Lorenzo Cavallaro",
        "abstract": "Recent research efforts on adversarial ML have investigated problem-space attacks, focusing on the generation of real evasive objects in domains where, unlike images, there is no clear inverse mapping to the feature space (e.g., software). However, the design, comparison, and real-world implications of problem-space attacks remain underexplored.This paper makes two major contributions. First, we propose a novel formalization for adversarial ML evasion attacks in the problem-space, which includes the definition of a comprehensive set of constraints on available transformations, preserved semantics, robustness to preprocessing, and plausibility. We shed light on the relationship between feature space and problem space, and we introduce the concept of side-effect features as the byproduct of the inverse feature-mapping problem. This enables us to define and prove necessary and sufficient conditions for the existence of problem-space attacks. We further demonstrate the expressive power of our formalization by using it to describe several attacks from related literature across different domains.Second, building on our formalization, we propose a novel problem-space attack on Android malware that overcomes past limitations. Experiments on a dataset with 170K Android apps from 2017 and 2018 show the practical feasibility of evading a state-of-the-art malware classifier along with its hardened version. Our results demonstrate that \"adversarial-malware as a service\" is a realistic threat, as we automatically generate thousands of realistic and inconspicuous adversarial applications at scale, where on average it takes only a few minutes to generate an adversarial app. Yet, out of the 1600+ papers on adversarial ML published in the past six years, roughly 40 focus on malware [15]—and many remain only in the feature space.Our formalization of problem-space attacks paves the way to more principled research in this domain. We responsibly release the code and dataset of our novel attack to other researchers, to encourage future work on defenses in the problem space.",
        "files": {
            "openAccessPdf": "https://ieeexplore.ieee.org/ielx7/9144328/9152199/09152781.pdf"
        },
        "abstract_zh": "最近关于对抗性ML的研究工作已经调查了问题空间攻击，集中于在与图像不同的、没有到特征空间的明确逆映射的域中生成真实的回避对象(例如，软件)。然而，问题空间攻击的设计、比较和现实世界的含义仍未得到充分探索。本文有两个主要贡献。首先，我们提出了一种新的问题空间中的对抗性ML规避攻击的形式化方法，它包括对可用转换、保留语义、预处理鲁棒性和似真性的一组综合约束的定义。我们阐明了特征空间和问题空间之间的关系，并引入了副作用特征的概念，作为逆特征映射问题的副产品。这使我们能够定义和证明问题空间攻击存在的必要和充分条件。我们进一步展示了我们的形式化的表达能力，使用它来描述来自不同领域的相关文献的几个攻击。其次，基于我们的形式化，我们提出了一种新的问题——对Android恶意软件的空间攻击，克服了过去的限制。在2017年和2018年的17万个Android应用程序的数据集上进行的实验显示了规避最先进的恶意软件分类器及其强化版本的实际可行性。我们的结果表明，“恶意软件作为一种服务”是一种现实的威胁，因为我们会自动生成成千上万的现实且不明显的大规模敌对应用程序，而生成一个敌对应用程序平均只需几分钟。然而，在过去六年中发表的1600多篇关于恶意软件的论文中，大约有40篇集中于恶意软件[15]——而且许多只停留在特征空间。我们对问题空间攻击的形式化为这个领域中更有原则的研究铺平了道路。我们负责任地向其他研究人员发布我们的新攻击的代码和数据集，以鼓励未来在问题领域的防御工作。",
        "title_zh": "问题空间中对抗性ML攻击的有趣性质",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2020.html",
        "conf_title": "41st SP 2020: San Francisco, CA, USA",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/9144328/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP40000.2020.00061",
        "title": "SoK: Understanding the Prevailing Security Vulnerabilities in TrustZone-assisted TEE Systems",
        "authors": "David Cerdeira, Nuno Santos, Pedro Fonseca, Sandro Pinto",
        "abstract": "Hundreds of millions of mobile devices worldwide rely on Trusted Execution Environments (TEEs) built with Arm TrustZone for the protection of security-critical applications (e.g., DRM) and operating system (OS) components (e.g., Android keystore). TEEs are often assumed to be highly secure; however, over the past years, TEEs have been successfully attacked multiple times, with highly damaging impact across various platforms. Unfortunately, these attacks have been possible by the presence of security flaws in TEE systems. In this paper, we aim to understand which types of vulnerabilities and limitations affect existing TrustZone-assisted TEE systems, what are the main challenges to build them correctly, and what contributions can be borrowed from the research community to overcome them. To this end, we present a security analysis of popular TrustZone-assisted TEE systems (targeting Cortex-A processors) developed by Qualcomm, Trustonic, Huawei, Nvidia, and Linaro. By studying publicly documented exploits and vulnerabilities as well as by reverse engineering the TEE firmware, we identified several critical vulnerabilities across existing systems which makes it legitimate to raise reasonable concerns about the security of commercial TEE implementations.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "全球数以亿计的移动设备依赖于使用Arm TrustZone构建的可信执行环境(TEEs)来保护安全关键型应用(例如DRM)和操作系统(OS)组件(例如Android keystore)。球座通常被认为是高度安全的；然而，在过去的几年里，球座多次被成功攻击，对各种平台造成了高度破坏性的影响。不幸的是，TEE系统中存在的安全缺陷使得这些攻击成为可能。在本文中，我们旨在了解哪些类型的漏洞和限制会影响现有的TrustZone辅助的TEE系统，正确构建它们的主要挑战是什么，以及可以从研究社区获得哪些贡献来克服它们。为此，我们对高通、Trustonic、华为、Nvidia和Linaro开发的受欢迎的TrustZone辅助TEE系统(针对Cortex-A处理器)进行了安全性分析。通过研究公开记录的利用和漏洞以及对TEE固件进行逆向工程，我们发现了现有系统中的几个关键漏洞，这使得我们有理由对商业TEE实施的安全性提出合理的担忧。",
        "title_zh": "SoK:了解TrustZone辅助的TEE系统中普遍存在的安全漏洞",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2020.html",
        "conf_title": "41st SP 2020: San Francisco, CA, USA",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/9144328/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SPW53761.2021.00013",
        "title": "AMon: A Monitoring Multidimensional Feature Application to Secure Android Environments",
        "authors": "José Antonio Gómez-Hernández, Pedro García-Teodoro, Juan Antonio Holgado Terriza, Gabriel Maciá-Fernández, José Camacho-Páez, M. Robles-Carrillo",
        "abstract": "This work introduces a novel Android monitoring app named AMon. It is aimed at collecting device related information from several sources: communications, /proc filesystem, applications and device usage. The information is dynamically gathered over time and its execution does not require to get special privileges or to be system root. In order to assess AMon capabilities, we have used it as the acquisition module of a subsequent security incident detection process. The results obtained show a good performance in terms of battery consumption, CPU and RAM usage, as well as overall system overhead. In order to contribute to the community, AMon is available at a public repository for free use and improvement.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "本文介绍了一款名为AMon的新颖Android监控应用。它旨在从几个来源收集设备相关信息:通信、/proc文件系统、应用程序和设备使用情况。信息是随着时间的推移动态收集的，其执行不需要获得特殊权限或成为系统根用户。为了评估AMon的能力，我们将其用作后续安全事件检测流程的采集模块。所获得的结果显示了在电池消耗、CPU和RAM使用以及整体系统开销方面的良好性能。为了对社区有所贡献，AMon可以在公共存储库中免费使用和改进。",
        "title_zh": "AMon:一个监控多维特性的应用程序，用于保护Android环境",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2021w.html",
        "conf_title": "42nd SP 2021: San Francisco, CA, USA - Workshops",
        "conf_url": "https://doi.org/10.1109/SPW53761.2021",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SPW53761.2021.00019",
        "title": "MMGuard: Automatically Protecting On-Device Deep Learning Models in Android Apps",
        "authors": "Jiayi Hua, Yuanchun Li, Haoyu Wang",
        "abstract": "On-device deep learning models have shown growing popularity in mobile apps, which allows offline model inference while preserving user privacy. However, on-device deep learning models also introduce security challenges, i.e., the trained models can be easily stolen or even be tampered by attackers. Recent studies suggested that most of the on-device models are lacking of sufficient protection, i.e., can be stolen by decompiling the apps directly. In this work, we present MMGUARD, an automated framework for building mutual authentication between Android apps and deep neural network models, which can thus protect on-device models from being easily attacked (piracy and tampering). Unlike existing model protect methods, our approach does not require model re-training or any prior knowledge of the training data. The key idea of MMGUARD is to verify the deep learning model in the app before inference, i.e., feeding owner- and apprelated information to it, which can greatly increase the effort of model hacking. We evaluate MMGUARD on 5 popular image classification DNNs and 43 real world Android apps from Google Play. Experiment results suggest that MMGUARD introduces negligible latency on models and can be automatically applied to real world apps.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "设备上的深度学习模型在移动应用程序中显示出越来越受欢迎，这允许离线模型推断，同时保护用户隐私。然而，设备上的深度学习模型也带来了安全挑战，即训练好的模型很容易被攻击者窃取甚至篡改。最近的研究表明，大多数设备上的模型缺乏足够的保护，即可以通过直接反编译应用程序来窃取。在这项工作中，我们提出了MMGUARD，这是一个用于在Android应用程序和深度神经网络模型之间建立相互认证的自动化框架，因此可以保护设备上的模型免受攻击(盗版和篡改)。与现有的模型保护方法不同，我们的方法不需要模型重新训练或训练数据的任何先验知识。MMGUARD的关键思想是在推理之前验证app中的深度学习模型，即向其馈送所有者和被赞赏者的信息，这可以大大增加模型黑客的努力。我们在5个流行的图像分类dnn和43个来自Google Play的真实世界Android应用上评估了MMGUARD。实验结果表明，MMGUARD在模型上引入的延迟可以忽略不计，并且可以自动应用于现实世界的应用程序。",
        "title_zh": "MMGuard:自动保护Android应用中的设备上深度学习模型",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2021w.html",
        "conf_title": "42nd SP 2021: San Francisco, CA, USA - Workshops",
        "conf_url": "https://doi.org/10.1109/SPW53761.2021",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SPW53761.2021.00052",
        "title": "Forensic Analysis of Fitbit Versa: Android vs iOS",
        "authors": "Joseph Williams, Áine MacDermott, Kellyann Stamp, Farkhund Iqbal",
        "abstract": "Fitbit Versa is the most popular of its predecessors and successors in the Fitbit faction. Increasingly data stored on these smart fitness devices, their linked applications and cloud datacenters are being used for criminal convictions. There is limited research for investigators on wearable devices and specifically exploring evidence identification and methods of extraction. In this paper we present our analysis of Fitbit Versa using Cellebrite UFED and MSAB XRY. We present a clear scope for investigation and data significance based on the findings from our experiments. The data recovery will include logical and physical extractions using devices running Android 9 and iOS 12, comparing between Cellebrite and XRY capabilities. This paper discusses databases and datatypes that can be recovered using different extraction and analysis techniques, providing a robust outlook of data availability. We also discuss the accuracy of recorded data compared to planned test instances, verifying the accuracy of individual data types. The verifiable accuracy of some datatypes could prove useful if such data was required during the evidentiary processes of a forensic investigation.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Fitbit Versa是Fitbit派系中其前辈和继任者中最受欢迎的。越来越多存储在这些智能健身设备、其关联应用程序和云数据中心的数据被用于刑事定罪。调查人员对可穿戴设备的研究有限，特别是探索证据识别和提取方法的研究有限。在本文中，我们使用Cellebrite UFED和MSAB XRY对Fitbit Versa进行了分析。我们提出了一个明确的调查范围和数据意义的基础上，从我们的实验发现。数据恢复将包括使用运行Android 9和iOS 12的设备进行逻辑和物理提取，比较Cellebrite和XRY的能力。本文讨论了可以使用不同的提取和分析技术恢复的数据库和数据类型，提供了一个可靠的数据可用性前景。我们还讨论了与计划的测试实例相比较的记录数据的准确性，验证了各个数据类型的准确性。如果在法医调查的取证过程中需要某些数据类型，则这些数据类型的可核实的准确性可能证明是有用的。",
        "title_zh": "Fitbit Versa的取证分析:Android vs iOS",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2021w.html",
        "conf_title": "42nd SP 2021: San Francisco, CA, USA - Workshops",
        "conf_url": "https://doi.org/10.1109/SPW53761.2021",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP40001.2021.00041",
        "title": "How Did That Get In My Phone? Unwanted App Distribution on Android Devices",
        "authors": "Platon Kotzias, Juan Caballero, Leyla Bilge",
        "abstract": "Android is the most popular operating system with billions of active devices. Unfortunately, its popularity and openness makes it attractive for unwanted apps, i.e., malware and potentially unwanted programs (PUP). In Android, app installations typically happen via the official and alternative markets, but also via other smaller and less understood alternative distribution vectors such as Web downloads, pay-per-install (PPI) services, backup restoration, bloatware, and IM tools. This work performs a thorough investigation on unwanted app distribution by quantifying and comparing distribution through different vectors. At the core of our measurements are reputation logs of a large security vendor, which include 7.9M apps observed in 12M devices between June and September 2019. As a first step, we measure that between 10% and 24% of users devices encounter at least one unwanted app, and compare the prevalence of malware and PUP. An analysis of the who-installs-who relationships between installers and child apps reveals that the Play market is the main app distribution vector, responsible for 87% of all installs and 67% of unwanted app installs, but it also has the best defenses against unwanted apps. Alternative markets distribute instead 5.7% of all apps, but over 10% of unwanted apps. Bloatware is also a significant unwanted app distribution vector with 6% of those installs. And, backup restoration is an unintentional distribution vector that may even allow unwanted apps to survive users’ phone replacement. We estimate unwanted app distribution via PPI to be smaller than on Windows. Finally, we observe that Web downloads are rare, but provide a riskier proposition even compared to alternative markets.",
        "files": {
            "openAccessPdf": "http://arxiv.org/pdf/2010.10088"
        },
        "abstract_zh": "Android是最受欢迎的操作系统，拥有数十亿活跃设备。不幸的是，它的流行性和开放性使得它对不想要的应用程序，即恶意软件和潜在不想要的程序(PUP)具有吸引力。在Android中，应用程序安装通常通过官方和替代市场进行，但也通过其他较小且不太为人所知的替代分发渠道进行，如网络下载、按安装付费(PPI)服务、备份恢复、膨胀软件和IM工具。这项工作通过量化和比较不同载体的分布，对不需要的应用程序分布进行了彻底的调查。我们测量的核心是一家大型安全供应商的信誉日志，其中包括2019年6月至9月期间在1200万台设备上观察到的790万个应用。作为第一步，我们测量了10%到24%的用户设备遇到至少一个不需要的应用程序，并比较了恶意软件和PUP的流行程度。对安装者和子应用程序之间的“谁安装谁”关系的分析显示，Play市场是主要的应用程序分发载体，占所有安装的87%和不需要的应用程序安装的67%，但它也对不需要的应用程序有最好的防御。替代市场分发了所有应用程序的5.7%，但超过10%的不需要的应用程序。膨胀软件也是一个重要的不需要的应用程序分发载体，占这些安装的6%。此外，备份恢复是一种无意的分发载体，甚至可能允许不需要的应用程序在用户更换手机后继续存在。我们估计，通过PPI分发不需要的应用程序要比在Windows上少。最后，我们观察到网络下载很少，但即使与替代市场相比，也存在更高的风险。",
        "title_zh": "那怎么会在我手机里？Android设备上不需要的应用分发",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2021.html",
        "conf_title": "42nd SP 2021: San Francisco, CA, USA",
        "conf_url": "https://doi.org/10.1109/SP40001.2021",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP40001.2021.00070",
        "title": "Android Custom Permissions Demystified: From Privilege Escalation to Design Shortcomings",
        "authors": "Rui Li, Wenrui Diao, Zhou Li, Jianqi Du, Shanqing Guo",
        "abstract": "Permission is the fundamental security mechanism for protecting user data and privacy on Android. Given its importance, security researchers have studied the design and usage of permissions from various aspects. However, most of the previous research focused on the security issues of system permissions. Overlooked by many researchers, an app can use custom permissions to share its resources and capabilities with other apps. However, the security implications of using custom permissions have not been fully understood.In this paper, we systematically evaluate the design and implementation of Android custom permissions. Notably, we built an automatic fuzzing tool, called CuPerFuzzer, to detect custom permissions related vulnerabilities existing in the Android OS. CuPerFuzzer treats the operations of the permission mechanism as a black-box and executes massive targeted test cases to trigger privilege escalation. In the experiments, CuPerFuzzer discovered 2,384 effective cases with 30 critical paths successfully. Through investigating these vulnerable cases and analyzing the source code of Android OS, we further identified a series of severe design shortcomings lying in the Android permission framework, including dangling custom permission, inconsistent permission-group mapping, custom permission elevating, and inconsistent permission definition. Exploiting any of these shortcomings, a malicious app can obtain dangeroussystem permissions without user consent and further access unauthorized platform resources. On top of these observations, we propose some general design guidelines to secure custom permissions. Our findings have been acknowledged by the Android security team and rated as High severity.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "权限是Android上保护用户数据和隐私的基本安全机制。鉴于权限的重要性，安全研究人员从各个方面研究了权限的设计和使用。但是，以前的研究大多集中在系统权限的安全问题上。许多研究人员忽略了一点，一个应用程序可以使用自定义权限与其他应用程序共享其资源和功能。但是，使用自定义权限的安全含义尚未被完全理解。本文系统地评价了Android自定义权限的设计和实现。值得注意的是，我们构建了一个名为CuPerFuzzer的自动模糊工具，用于检测Android操作系统中存在的与自定义权限相关的漏洞。CuPerFuzzer将权限机制的操作视为黑盒，并执行大量有针对性的测试用例来触发权限提升。在实验中，CuPerFuzzer成功地发现了2384个有效案例和30条关键路径。通过调查这些易受攻击的案例和分析Android操作系统的源代码，我们进一步发现了Android权限框架中存在的一系列严重的设计缺陷，包括悬空的自定义权限、不一致的权限组映射、自定义权限提升和不一致的权限定义。利用这些缺点，恶意应用程序可以在未经用户同意的情况下获得危险的系统权限，并进一步访问未经授权的平台资源。在这些观察的基础上，我们提出了一些保护自定义权限的通用设计准则。我们的发现得到了Android安全团队的认可，并被评为高严重性。",
        "title_zh": "Android自定义权限揭秘:从权限升级到设计缺陷",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2021.html",
        "conf_title": "42nd SP 2021: San Francisco, CA, USA",
        "conf_url": "https://doi.org/10.1109/SP40001.2021",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP40001.2021.00074",
        "title": "Trust, But Verify: A Longitudinal Analysis Of Android OEM Compliance and Customization",
        "authors": "Andrea Possemato, Simone Aonzo, Davide Balzarotti, Yanick Fratantonio",
        "abstract": "Nowadays, more than two billions of mobile devices run Android OS. At the core of this success are the open source nature of the Android Open Source Project and vendors’ ability to customize the code base and ship it on their own devices. While the possibility of customizations is beneficial to vendors, they can potentially lead to compatibility and security problems. To prevent these problems, Google developed a set of requirements that must be satisfied for a vendor to brand its devices as \"Android,\" and recently introduced Project Treble as an effort to partition vendor customizations. These requirements are encoded as part of a textual document (called Compatibility Definition Document, or CDD) and various automated tests. This paper performs the first longitudinal study on Android OEM customizations. We first built a dataset of 2,907 ROMs, spanning across 42 different vendors, and covering Android versions from 1.6 to 9.0 (years 2009–2020). We then developed an analysis framework and pipeline to extract each ROM’s customization layers and evaluate it across several metrics. For example, we analyze ROMs to determine whether they are compliant with respect to the various requirements and whether their customizations negatively affect the security posture of the overall device. In the process, we focus on various aspects, ranging from security hardening of binaries, SELinux policies, Android init scripts, and kernel security hardening techniques. Our results are worrisome. We found 579 over 2,907 (~20%) of the ROMs have at least one violation for the CDD related to their Android version — incredibly, 11 of them are branded by Google itself. Some of our findings suggest that vendors often go out of their way to bypass or \"comment out\" safety nets added by the Android security team. In other cases, we found ROMs that modify init scripts to launch at boot outdated versions (with known CVEs and public POCs) of programs as root and reachable from a remote attacker (e.g., tcpdump ). This paper shows that Google’s efforts are not enough, and we offer several recommendations on how to improve the compliance check pipelines.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "如今，超过20亿台移动设备运行Android操作系统。这一成功的核心是Android开源项目的开源性质，以及供应商定制代码库并将其发布到自己设备上的能力。虽然定制的可能性对供应商有利，但它们可能会导致兼容性和安全性问题。为了防止这些问题，谷歌制定了一系列要求，供应商必须满足这些要求才能将其设备品牌化为“Android”，最近推出了Project Treble，作为对供应商定制进行划分的一种努力。这些需求被编码为文本文档(称为兼容性定义文档，或CDD)和各种自动化测试的一部分。本文对Android OEM定制进行了首次纵向研究。我们首先建立了一个由2907个rom组成的数据集，横跨42个不同的供应商，涵盖了从1.6到9.0(2009年至2020年)的Android版本。然后，我们开发了一个分析框架和管道来提取每个ROM的定制层，并跨多个指标对其进行评估。例如，我们分析rom，以确定它们是否符合各种要求，以及它们的定制是否会对整个设备的安全状态产生负面影响。在这个过程中，我们关注各个方面，包括二进制文件的安全加固、SELinux策略、Android init脚本和内核安全加固技术。我们的结果令人担忧。我们发现2907个rom中有579个(约20%)至少有一个与他们的Android版本有关的CDD违规——令人难以置信的是，其中11个是谷歌自己的品牌。我们的一些发现表明，供应商经常故意绕过或“注释掉”Android安全团队添加的安全网。在其他情况下，我们发现修改init脚本的rom在引导时以root身份启动程序的过期版本(具有已知的CVE和公共POC ),并且远程攻击者(例如，tcpdump)可以访问这些程序。本文表明，谷歌的努力是不够的，我们就如何改善合规检查管道提出了几项建议。",
        "title_zh": "信任，但要验证:Android OEM合规性和定制化的纵向分析",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2021.html",
        "conf_title": "42nd SP 2021: San Francisco, CA, USA",
        "conf_url": "https://doi.org/10.1109/SP40001.2021",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP40001.2021.00066",
        "title": "Diane: Identifying Fuzzing Triggers in Apps to Generate Under-constrained Inputs for IoT Devices",
        "authors": "Nilo Redini, Andrea Continella, Dipanjan Das, Giulio De Pasquale, Noah Spahn, Aravind Machiry, Antonio Bianchi, Christopher Kruegel, Giovanni Vigna",
        "abstract": "Internet of Things (IoT) devices have rooted themselves in the everyday life of billions of people. Thus, researchers have applied automated bug finding techniques to improve their overall security. However, due to the difficulties in extracting and emulating custom firmware, black-box fuzzing is often the only viable analysis option. Unfortunately, this solution mostly produces invalid inputs, which are quickly discarded by the targeted IoT device and do not penetrate its code. Another proposed approach is to leverage the companion app (i.e., the mobile app typically used to control an IoT device) to generate well-structured fuzzing inputs. Unfortunately, the existing solutions produce fuzzing inputs that are constrained by app-side validation code, thus significantly limiting the range of discovered vulnerabilities.In this paper, we propose a novel approach that overcomes these limitations. Our key observation is that there exist functions inside the companion app that can be used to generate optimal (i.e., valid yet under-constrained) fuzzing inputs. Such functions, which we call fuzzing triggers, are executed before any data-transforming functions (e.g., network serialization), but after the input validation code. Consequently, they generate inputs that are not constrained by app-side sanitization code, and, at the same time, are not discarded by the analyzed IoT device due to their invalid format. We design and develop Diane, a tool that combines static and dynamic analysis to find fuzzing triggers in Android companion apps, and then uses them to fuzz IoT devices automatically. We use Diane to analyze 11 popular IoT devices, and identify 11 bugs, 9 of which are zero days. Our results also show that without using fuzzing triggers, it is not possible to generate bug-triggering inputs for many devices.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "物联网(IoT)设备已经扎根于数十亿人的日常生活中。因此，研究人员已经应用自动缺陷发现技术来提高他们的整体安全性。然而，由于提取和仿真定制固件的困难，黑盒模糊化通常是唯一可行的分析选项。不幸的是，这种解决方案大多会产生无效输入，这些输入很快会被目标物联网设备丢弃，并且不会穿透其代码。另一种提议的方法是利用配套应用程序(即通常用于控制物联网设备的移动应用程序)来生成结构良好的模糊输入。不幸的是，现有的解决方案会产生模糊的输入，这些输入受到应用程序端验证代码的限制，从而大大限制了发现漏洞的范围。在本文中，我们提出了一种新的方法来克服这些限制。我们的主要观察结果是，配套应用程序中存在可用于生成最佳(即有效但约束不足)模糊输入的函数。我们称之为模糊触发器的这种功能在任何数据转换功能(例如，网络串行化)之前执行，但在输入验证代码之后执行。因此，它们生成不受应用端净化代码约束的输入，同时，由于其无效格式，不会被分析的物联网设备丢弃。我们设计并开发了Diane，这是一种结合静态和动态分析的工具，可以在Android配套应用程序中找到模糊触发器，然后使用它们自动模糊物联网设备。我们使用Diane来分析11个流行的物联网设备，并确定11个bug，其中9个是零天。我们的结果还表明，如果不使用模糊触发器，就不可能为许多设备生成bug触发输入。",
        "title_zh": "Diane:识别应用程序中的模糊触发器，为物联网设备生成欠约束输入",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2021.html",
        "conf_title": "42nd SP 2021: San Francisco, CA, USA",
        "conf_url": "https://doi.org/10.1109/SP40001.2021",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP40001.2021.00040",
        "title": "ConDySTA: Context-Aware Dynamic Supplement to Static Taint Analysis",
        "authors": "Xueling Zhang, Xiaoyin Wang, Rocky Slavin, Jianwei Niu",
        "abstract": "Static taint analyses are widely-applied techniques to detect taint flows in software systems. Although they are theoretically conservative and de-signed to detect all possible taint flows, static taint analyses almost always exhibit false negatives due to a variety of implementation limitations. Dynamic programming language features, inaccessible code, and the usage of multiple programming languages in a software project are some of the major causes. To alleviate this problem, we developed a novel approach, DySTA, which uses dynamic taint analysis results as additional sources for static taint analysis. However, naïvely adding sources causes static analysis to lose context sensitivity and thus produce false positives. Thus, we developed a hybrid context matching algorithm and corresponding tool, ConDySTA, to preserve context sensitivity in DySTA. We applied REPRODROID [1], a comprehensive benchmarking framework for Android analysis tools, to evaluate ConDySTA. The results show that across 28 apps (1) ConDySTA was able to detect 12 out of 28 taint flows which were not detected by any of the six state-of-the-art static taint analyses considered in ReproDroid, and (2) ConDySTA reported no false positives, whereas nine were reported by DySTA alone. We further applied ConDySTA and FlowDroid to 100 top Android apps from Google Play, and ConDySTA was able to detect 39 additional taint flows (besides 281 taint flows found by FlowDroid) while preserving the context sensitivity of FlowDroid.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "静态污点分析是广泛应用于检测软件系统中污点流的技术。尽管它们在理论上是保守的，并且被设计为检测所有可能的污点流，但是由于各种实施限制，静态污点分析几乎总是表现出假阴性。动态编程语言特性、不可访问的代码以及在一个软件项目中使用多种编程语言是一些主要原因。为了缓解这个问题，我们开发了一种新的方法，DySTA，它使用动态污点分析结果作为静态污点分析的额外来源。然而，天真地添加源会导致静态分析失去上下文敏感性，从而产生假阳性。因此，我们开发了一个混合的上下文匹配算法和相应的工具，ConDySTA，以保持在DySTA的上下文敏感性。我们应用了一个全面的Android分析工具基准框架REPRODROID [1]来评估ConDySTA。结果显示，在28个应用中,( 1) ConDySTA能够检测28个污染流中的12个，这些污染流没有被ReproDroid中考虑的六个最先进的静态污染分析中的任何一个检测到,( 2) ConDySTA没有报告假阳性，而只有DySTA报告了九个。我们进一步将ConDySTA和FlowDroid应用于Google Play的100个顶级Android应用，ConDySTA能够检测到39个额外的污染流(除了FlowDroid发现的281个污染流)，同时保留了FlowDroid的上下文敏感性。",
        "title_zh": "ConDySTA:对静态污点分析的上下文感知动态补充",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2021.html",
        "conf_title": "42nd SP 2021: San Francisco, CA, USA",
        "conf_url": "https://doi.org/10.1109/SP40001.2021",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP40001.2021.00054",
        "title": "Cross Layer Attacks and How to Use Them (for DNS Cache Poisoning, Device Tracking and More)",
        "authors": "Amit Klein",
        "abstract": "We analyze the prandom pseudo random number generator (PRNG) in use in the Linux kernel (which is the kernel of the Linux operating system, as well as of Android) and demonstrate that this PRNG is weak. The prandom PRNG is in use by many \"consumers\" in the Linux kernel. We focused on three consumers at the network level – the UDP source port generation algorithm, the IPv6 flow label generation algorithm and the IPv4 ID generation algorithm. The flawed prandom PRNG is shared by all these consumers, which enables us to mount \"cross layer attacks\" against the Linux kernel. In these attacks, we infer the internal state of the prandom PRNG from one OSI layer, and use it to either predict the values of the PRNG employed by the other OSI layer, or to correlate it to an internal state of the PRNG inferred from the other protocol.Using this approach we can mount a very efficient DNS cache poisoning attack against Linux. We collect TCP/IPv6 flow label values, or UDP source ports, or TCP/IPv4 IP ID values, reconstruct the internal PRNG state, then predict an outbound DNS query UDP source port, which speeds up the attack by a factor of x3000 to x6000. This attack works remotely, but can also be mounted locally, across Linux users and across containers, and (depending on the stub resolver) can poison the cache with an arbitrary DNS record. Additionally, we can identify and track Linux and Android devices – we collect TCP/IPv6 flow label values and/or UDP source port values and/or TCP/IPv4 ID fields, reconstruct the PRNG internal state and correlate this new state to previously extracted PRNG states to identify the same device.",
        "files": {
            "openAccessPdf": "http://arxiv.org/pdf/2012.07432"
        },
        "abstract_zh": "我们分析了在Linux内核(这是Linux操作系统以及Android的内核)中使用的prandom伪随机数生成器(PRNG ),并且证明了该PRNG是脆弱的。许多Linux内核的“消费者”都在使用prandom PRNG。我们重点关注了网络层的三个消费者UDP源端口生成算法、IPv6流标签生成算法和IPv4 ID生成算法。有缺陷的prandom PRNG被所有这些消费者共享，这使我们能够对Linux内核发起“跨层攻击”。在这些攻击中，我们从一个OSI层推断prandom PRNG的内部状态，并使用它来预测另一个OSI层使用的PRNG的值，或者将其与从另一个协议推断的PRNG的内部状态相关联。使用这种方法，我们可以对Linux发起非常有效的DNS缓存中毒攻击。我们收集TCP/IPv6流标签值或UDP源端口或TCP/IPv4 IP ID值，重建内部PRNG状态，然后预测出站DNS查询UDP源端口，这将攻击速度提高了x3000到x6000倍。这种攻击远程进行，但也可以在本地安装，跨Linux用户和跨容器，并且(取决于存根解析器)可以用任意DNS记录毒害缓存。此外，我们可以识别和跟踪Linux和Android设备–我们收集TCP/IPv6流标签值和/或UDP源端口值和/或TCP/IPv4 ID字段，重建PRNG内部状态，并将此新状态与之前提取的PRNG状态相关联，以识别同一设备。",
        "title_zh": "跨层攻击以及如何使用它们(针对DNS缓存中毒、设备跟踪等)",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2021.html",
        "conf_title": "42nd SP 2021: San Francisco, CA, USA",
        "conf_url": "https://doi.org/10.1109/SP40001.2021",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP40001.2021.00102",
        "title": "Linking Bluetooth LE & Classic and Implications for Privacy-Preserving Bluetooth-Based Protocols",
        "authors": "Norbert Ludant, Tien Dang Vo-Huu, Sashank Narain, Guevara Noubir",
        "abstract": "Bluetooth Low Energy advertisements are increasingly used for proximity privacy-preserving protocols. We investigate information leakage from BLE advertisements. Our analysis, among other things, reveals that the design of today’s Bluetooth chips enables the linking of BLE advertisements to Bluetooth Classic (BTC) frames, and to a globally unique identifier (BDADDR). We demonstrate that the inference of the BDADDR from BLE advertisements is robust achieving over 90% reliability across apps, mobile devices, density of devices, and tens of meters away from the victims. We discuss the implications of current chipsets vulnerability on privacy-preserving protocols. The attack, for instance, reveals the BDADDR of devices of infected users of contact-tracing apps. We also discuss how the vulnerability can lead to de-anonymization of victims. Furthermore, current mobile devices do not allow selective disabling of BTC independently of BLE which renders simple countermeasures impractical. We developed several mitigations for the Android OS and the Bluetooth stack and demonstrate their efficacy.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "蓝牙低能量广告越来越多地用于邻近隐私保护协议。我们调查BLE广告的信息泄漏。我们的分析显示，当今蓝牙芯片的设计能够将BLE广告链接到蓝牙经典(BTC)框架和全球唯一标识符(BDADDR)。我们证明了来自BLE广告的BDADDR的推断是稳健的，在应用程序、移动设备、设备密度以及距离受害者几十米的地方实现了超过90%的可靠性。我们讨论了当前芯片组漏洞对隐私保护协议的影响。例如，这次攻击暴露了受感染的联系人追踪应用程序用户的设备地址。我们还讨论了该漏洞如何导致受害者去匿名化。此外，当前的移动设备不允许独立于BLE选择性地禁用BTC，这使得简单的对抗措施不切实际。我们为Android操作系统和蓝牙协议栈开发了几种缓解措施，并展示了它们的功效。",
        "title_zh": "链接蓝牙LE & Classic和基于隐私保护的蓝牙协议的含义",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2021.html",
        "conf_title": "42nd SP 2021: San Francisco, CA, USA",
        "conf_url": "https://doi.org/10.1109/SP40001.2021",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP40001.2021.00095",
        "title": "Trouble Over-The-Air: An Analysis of FOTA Apps in the Android Ecosystem",
        "authors": "Eduardo Blázquez, Sergio Pastrana, Álvaro Feal, Julien Gamba, Platon Kotzias, Narseo Vallina-Rodriguez, Juan Tapiador",
        "abstract": "Android firmware updates are typically managed by the so-called FOTA (Firmware Over-the-Air) apps. Such apps are highly privileged and play a critical role in maintaining devices secured and updated. The Android operating system offers standard mechanisms—available to Original Equipment Manufacturers (OEMs)—to implement their own FOTA apps but such vendor-specific implementations could be a source of security and privacy issues due to poor software engineering practices. This paper performs the first large-scale and systematic analysis of the FOTA ecosystem through a dataset of 2,013 FOTA apps detected with a tool designed for this purpose over 422,121 pre-installed apps. We classify the different stakeholders developing and deploying FOTA apps on the Android update ecosystem, showing that 43% of FOTA apps are developed by third parties. We report that some devices can have as many as 5 apps implementing FOTA capabilities. By means of static analysis of the code of FOTA apps, we show that some apps present behaviors that can be considered privacy intrusive, such as the collection of sensitive user data (e.g., geolocation linked to unique hardware identifiers), and a significant presence of third-party trackers. We also discover implementation issues leading to critical vulnerabilities, such as the use of public AOSP test keys both for signing FOTA apps and for update verification, thus allowing any update signed with the same key to be installed. Finally, we study telemetry data collected from real devices by a commercial security tool. We demonstrate that FOTA apps are responsible for the installation of non-system apps (e.g., entertainment apps and games), including malware and Potentially Unwanted Programs (PUP). Our findings suggest that FOTA development practices are misaligned with Google’s recommendations.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android固件更新通常由所谓的FOTA(固件空中下载)应用程序管理。此类应用程序具有高度特权，在保持设备安全和更新方面发挥着关键作用。Android操作系统提供了标准机制(可供原始设备制造商(OEM)使用)来实现自己的FOTA应用，但由于糟糕的软件工程实践，这种特定于供应商的实现可能会导致安全和隐私问题。本文对FOTA生态系统进行了第一次大规模的系统分析，通过一个由2，013个FOTA应用组成的数据集，使用一个专门设计的工具在422，121个预装应用上进行检测。我们对在Android update生态系统上开发和部署FOTA应用的不同利益相关者进行了分类，显示43%的FOTA应用是由第三方开发的。我们报告称，一些设备可以有多达5个应用程序实现FOTA功能。通过对FOTA应用程序代码的静态分析，我们发现一些应用程序存在可被视为侵犯隐私的行为，如收集敏感用户数据(例如，链接到唯一硬件标识符的地理位置)，以及大量存在第三方追踪器。我们还发现了导致严重漏洞的实施问题，例如使用公共AOSP测试密钥来签署FOTA应用程序和更新验证，从而允许安装使用相同密钥签署的任何更新。最后，我们研究商业安全工具从真实设备收集的遥测数据。我们证明FOTA应用程序负责安装非系统应用程序(例如，娱乐应用程序和游戏)，包括恶意软件和潜在有害程序(PUP)。我们的发现表明，FOTA的开发实践与谷歌的建议不一致。",
        "title_zh": "空中烦恼:安卓生态系统中的FOTA应用分析",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2021.html",
        "conf_title": "42nd SP 2021: San Francisco, CA, USA",
        "conf_url": "https://doi.org/10.1109/SP40001.2021",
        "keywords": [
            "AOSP",
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP40001.2021.00105",
        "title": "Happer: Unpacking Android Apps via a Hardware-Assisted Approach",
        "authors": "Lei Xue, Hao Zhou, Xiapu Luo, Yajin Zhou, Yang Shi, Guofei Gu, Fengwei Zhang, Man Ho Au",
        "abstract": "Malware authors are abusing packers (or runtime-based obfuscators) to protect malicious apps from being analyzed. Although many unpacking tools have been proposed, they can be easily impeded by the anti-analysis methods adopted by the packers, and they fail to effectively collect the hidden Dex data due to the evolving protection strategies of packers. Consequently, many packing behaviors are unknown to analysts and packed malware can circumvent the inspection. To fill the gap, in this paper, we propose a novel hardware-assisted approach that first monitors the packing behaviors and then selects the proper approach to unpack the packed apps. Moreover, we develop a prototype named Happerwith a domain-specific language named behavior description language (BDL) for the ease of extending Happerafter tackling several technical challenges. We conduct extensive experiments with 12 commercial Android packers and more than 24k Android apps to evaluate Happer. The results show that Happerobserved 27 packing behaviors, 17 of which have not been elaborated by previous studies. Based on the observed packing behaviors, Happeradopted proper approaches to collect all the hidden Dex data and assembled them to valid Dex files.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "恶意软件作者滥用打包程序(或基于运行时的混淆程序)来保护恶意应用程序不被分析。虽然已经提出了许多解包工具，但是它们很容易受到打包者采用的反分析方法的阻碍，并且由于打包者不断发展的保护策略，它们不能有效地收集隐藏的Dex数据。因此，许多打包行为不为分析师所知，打包的恶意软件可以绕过检查。为了填补这一空白，在本文中，我们提出了一种新的硬件辅助方法，该方法首先监控打包行为，然后选择合适的方法来解包打包的应用。此外，我们开发了一个名为happer的原型，在解决了几个技术难题后，我们用一种名为行为描述语言(BDL)的领域特定语言来扩展happer。我们对12个商业Android packers和超过24k个Android应用程序进行了广泛的实验，以评估Happer。结果表明，have观察到了27种包装行为，其中17种在以前的研究中没有详细说明。根据观察到的打包行为，happer采用适当的方法收集所有隐藏的Dex数据，并将它们组装成有效的Dex文件。",
        "title_zh": "Happer:通过硬件辅助的方法解包Android应用",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2021.html",
        "conf_title": "42nd SP 2021: San Francisco, CA, USA",
        "conf_url": "https://doi.org/10.1109/SP40001.2021",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP40001.2021.00037",
        "title": "The EMV Standard: Break, Fix, Verify",
        "authors": "David A. Basin, Ralf Sasse, Jorge Toro-Pozo",
        "abstract": "EMV is the international protocol standard for smartcard payment and is used in over 9 billion cards worldwide. Despite the standard’s advertised security, various issues have been previously uncovered, deriving from logical flaws that are hard to spot in EMV’s lengthy and complex specification, running over 2,000 pages.We formalize a comprehensive symbolic model of EMV in Tamarin, a state-of-the-art protocol verifier. Our model is the first that supports a fine-grained analysis of all relevant security guarantees that EMV is intended to offer. We use our model to automatically identify flaws that lead to two critical attacks: one that defrauds the cardholder and a second that defrauds the merchant. First, criminals can use a victim’s Visa contactless card to make payments for amounts that require cardholder verification, without knowledge of the card’s PIN. We built a proof-of-concept Android application and successfully demonstrated this attack on real-world payment terminals. Second, criminals can trick the terminal into accepting an unauthentic offline transaction, which the issuing bank should later decline, after the criminal has walked away with the goods. This attack is possible for implementations following the standard, although we did not test it on actual terminals for ethical reasons. Finally, we propose and verify improvements to the standard that prevent these attacks, as well as any other attacks that violate the considered security properties. The proposed improvements can be easily implemented in the terminals and do not affect the cards in circulation.",
        "files": {
            "openAccessPdf": "http://arxiv.org/pdf/2006.08249"
        },
        "abstract_zh": "EMV是智能卡支付的国际协议标准，在全球超过90亿张卡中使用。尽管该标准标榜安全性，但此前已经发现了各种问题，这些问题源自逻辑缺陷，在EMV长达2000多页的冗长复杂的规范中很难发现。我们在最新的协议验证器Tamarin中形式化了EMV的综合符号模型。我们的模型是第一个支持对EMV计划提供的所有相关安全保证进行细粒度分析的模型。我们使用我们的模型来自动识别导致两种关键攻击的缺陷:一种是欺骗持卡人，另一种是欺骗商家。首先，犯罪分子可以使用受害者的Visa非接触式卡来支付需要持卡人验证的金额，而不知道卡的PIN。我们构建了一个概念验证的Android应用程序，并在现实世界的支付终端上成功演示了这种攻击。第二，犯罪分子可以欺骗终端接受不真实的离线交易，在犯罪分子带走货物后，发行银行应该拒绝该交易。这种攻击对于遵循标准的实现是可能的，尽管出于道德原因我们没有在实际终端上测试它。最后，我们提出并验证了对标准的改进，以防止这些攻击，以及任何其他违反所考虑的安全属性的攻击。所提出的改进可以容易地在终端中实现，并且不会影响流通中的卡。",
        "title_zh": "EMV标准:打破、修正、验证",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2021.html",
        "conf_title": "42nd SP 2021: San Francisco, CA, USA",
        "conf_url": "https://doi.org/10.1109/SP40001.2021",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP40001.2021.00010",
        "title": "CRYLOGGER: Detecting Crypto Misuses Dynamically",
        "authors": "Luca Piccolboni, Giuseppe Di Guglielmo, Luca P. Carloni, Simha Sethumadhavan",
        "abstract": "Cryptographic (crypto) algorithms are the essential ingredients of all secure systems: crypto hash functions and encryption algorithms, for example, can guarantee properties such as integrity and confidentiality. Developers, however, can misuse the application programming interfaces (API) of such algorithms by using constant keys and weak passwords. This paper presents CRYLOGGER, the first open-source tool to detect crypto misuses dynamically. CRYLOGGER logs the parameters that are passed to the crypto APIs during the execution and checks their legitimacy offline by using a list of crypto rules. We compared CRYLOGGER with CryptoGuard, one of the most effective static tools to detect crypto misuses. We show that our tool complements the results of CryptoGuard, making the case for combining static and dynamic approaches. We analyzed 1780 popular Android apps downloaded from the Google Play Store to show that CRYLOGGER can detect crypto misuses on thousands of apps dynamically and automatically. We reverse-engineered 28 Android apps and confirmed the issues flagged by CRYLOGGER. We also disclosed the most critical vulnerabilities to app developers and collected their feedback.",
        "files": {
            "openAccessPdf": "http://arxiv.org/pdf/2007.01061"
        },
        "abstract_zh": "密码(加密)算法是所有安全系统的基本组成部分:例如，加密哈希函数和加密算法可以保证完整性和机密性等属性。然而，开发人员可以通过使用常量密钥和弱密码来滥用这种算法的应用程序编程接口(API)。本文介绍了CRYLOGGER，它是第一个动态检测密码滥用的开源工具。CRYLOGGER记录在执行期间传递给加密API的参数，并通过使用加密规则列表离线检查它们的合法性。我们将CRYLOGGER与CryptoGuard进行了比较，CryptoGuard是检测加密误用的最有效的静态工具之一。我们表明，我们的工具补充了CryptoGuard的结果，使静态和动态方法相结合的情况。我们分析了从谷歌Play商店下载的1780个流行的Android应用程序，以表明CRYLOGGER可以动态和自动地检测数千个应用程序中的加密滥用。我们对28个Android应用程序进行了逆向工程，并确认了CRYLOGGER标记的问题。我们还向应用程序开发人员披露了最关键的漏洞，并收集了他们的反馈。",
        "title_zh": "CRYLOGGER:动态检测加密误用",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2021.html",
        "conf_title": "42nd SP 2021: San Francisco, CA, USA",
        "conf_url": "https://doi.org/10.1109/SP40001.2021",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SPW.2019.00018",
        "title": "MaxNet: Neural Network Architecture for Continuous Detection of Malicious Activity",
        "authors": "Petr Gronát, Javier Alejandro Aldana-Iuit, Martin Bálek",
        "abstract": "This paper addresses the detection of malware activity in a running application on the Android system. The detection is based on dynamic analysis and is formulated as a weakly supervised problem. We design an RNN sequential architecture able to continuously detect malicious activity using the proposed max-loss objective. The experiments were performed on a large industrial dataset consisting of 361,265 samples. The results demonstrate the performance of 96.2% true positive rate at 1.6% false positive rate which is superior to the state-of-the-art results. As part of this work, we release the dataset to the public.",
        "files": {
            "openAccessPdf": "https://ieeexplore.ieee.org/ielx7/8834415/8844588/08844602.pdf"
        },
        "abstract_zh": "本文旨在检测Android系统上运行的应用程序中的恶意软件活动。该检测基于动态分析，并被公式化为弱监督问题。我们设计了一个RNN序列架构，能够使用提出的最大损失目标连续检测恶意活动。实验在由361，265个样本组成的大型工业数据集上进行。结果表明，在1.6%的假阳性率下，具有96.2%的真阳性率，优于现有技术的结果。作为这项工作的一部分，我们向公众发布数据集。",
        "title_zh": "MaxNet:用于持续检测恶意活动的神经网络架构",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/spw2019.html",
        "conf_title": "40th SP 2019: San Francisco, CA, USA - Workshops",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8834415/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SPW.2019.00042",
        "title": "A Study of Vulnerability Analysis of Popular Smart Devices Through Their Companion Apps",
        "authors": "Davino Mauro Junior, Luis Melo, Hao Lu, Marcelo d'Amorim, Atul Prakash",
        "abstract": "Security of Internet of Things (IoT) devices is a well-known concern as these devices come in increasing use in homes and commercial environments. To better understand the extent to which companies take security of the IoT devices seriously and the methods they use to secure them, this paper presents findings from a security analysis of 96 top-selling WiFi IoT devices on Amazon. We found that we could carry out a significant portion of the analysis by first analyzing the code of Android companion apps responsible for controlling the devices. An interesting finding was that these devices used only 32 unique companion apps; we found instances of devices from same as well as different brands sharing the same app, significantly reducing our work. We analyzed the code of these companion apps to understand how they communicated with the devices and the security of that communication. We found security problems to be widespread: 50% of the apps corresponding to 38% of the devices did not use proper encryption techniques; some even used well-known weak ciphers such as Caesar cipher. We also purchased 5 devices and confirmed the vulnerabilities found with exploits. In some cases, we were able to bypass the pairing process and still control the device. Finally, we comment on technical and non-technical lessons learned from the study that have security implications.",
        "files": {
            "openAccessPdf": "https://ieeexplore.ieee.org/ielx7/8834415/8844588/08844591.pdf"
        },
        "abstract_zh": "物联网(IoT)设备的安全性是一个众所周知的问题，因为这些设备在家庭和商业环境中的使用越来越多。为了更好地了解公司对物联网设备安全性的重视程度以及他们使用的保护方法，本文介绍了对亚马逊上96款畅销WiFi物联网设备的安全性分析结果。我们发现，我们可以通过首先分析负责控制设备的Android配套应用程序的代码来进行很大一部分分析。一个有趣的发现是，这些设备只使用了32个独特的配套应用程序；我们发现来自相同或不同品牌的设备共享同一个应用程序，这大大减少了我们的工作量。我们分析了这些配套应用的代码，以了解它们如何与设备通信以及通信的安全性。我们发现安全问题普遍存在:50%的应用程序(相当于38%的设备)没有使用适当的加密技术；有些人甚至使用众所周知的弱密码，如凯撒密码。我们还购买了5台设备，并确认了利用漏洞发现的漏洞。在某些情况下，我们能够绕过配对过程，仍然控制设备。最后，我们对从研究中获得的具有安全影响的技术和非技术经验进行了评论。",
        "title_zh": "基于配套应用的流行智能设备漏洞分析研究",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/spw2019.html",
        "conf_title": "40th SP 2019: San Francisco, CA, USA - Workshops",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8834415/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP.2019.00012",
        "title": "Short Text, Large Effect: Measuring the Impact of User Reviews on Android App Security & Privacy",
        "authors": "Duc Cuong Nguyen, Erik Derr, Michael Backes, Sven Bugiel",
        "abstract": "Application markets streamline the end-users’ task of finding and installing applications. They also form an immediate communication channel between app developers and their end-users in form of app reviews, which allow users to provide developers feedback on their apps. However, it is unclear to which extent users employ this channel to point out their security and privacy concerns about apps, about which aspects of apps users express concerns, and how developers react to such security- and privacy-related reviews. In this paper, we present the first study of the relationship between end-user reviews and security- & privacy-related changes in apps. Using natural language processing on 4.5M user reviews for the top 2,583 apps in Google Play, we identified 5,527 security and privacy relevant reviews (SPR). For each app version mentioned in the SPR, we use static code analysis to extract permission-protected features mentioned in the reviews. We successfully mapped SPRs to privacy-related changes in app updates in 60.77% of all cases. Using exploratory data analysis and regression analysis we are able to show that preceding SPR are a significant factor for predicting privacy-related app updates, indicating that user reviews in fact lead to privacy improvements of apps. Our results further show that apps that adopt runtime permissions receive a significantly higher number of SPR, showing that runtime permissions put privacy-jeopardizing actions better into users’ minds. Further, we can attribute about half of all privacy-relevant app changes exclusively to third-party library code. This hints at larger problems for app developers to adhere to users’ privacy expectations and markets’ privacy regulations. Our results make a call for action to make app behavior more transparent to users in order to leverage their reviews in creating incentives for developers to adhere to security and privacy best practices, while our results call at the same time for better tools to support app developers in this endeavor.",
        "files": {
            "openAccessPdf": "https://ieeexplore.ieee.org/ielx7/8826229/8835208/08835383.pdf"
        },
        "abstract_zh": "应用程序市场简化了最终用户查找和安装应用程序的任务。它们还以应用评论的形式在应用开发者和他们的最终用户之间形成了一个即时的沟通渠道，允许用户向开发者提供关于他们应用的反馈。然而，目前还不清楚用户在多大程度上利用这一渠道来指出他们对应用程序的安全和隐私担忧，用户对应用程序的哪些方面表示担忧，以及开发者对这种安全和隐私相关的评论作何反应。在本文中，我们首次研究了终端用户评论和应用程序中与安全和隐私相关的变化之间的关系。使用自然语言处理Google Play中2583个应用程序的450万条用户评论，我们发现了5527条安全和隐私相关评论(SPR)。对于SPR中提到的每个应用版本，我们使用静态代码分析来提取评论中提到的受权限保护的功能。在60.77%的情况下，我们成功地将SPR映射到应用程序更新中与隐私相关的更改。使用探索性数据分析和回归分析，我们能够表明之前的SPR是预测隐私相关应用更新的重要因素，表明用户评论实际上导致了应用的隐私改善。我们的结果进一步表明，采用运行时权限的应用程序收到的SPR数量明显更高，这表明运行时权限更好地将危及隐私的行为纳入了用户的脑海。此外，我们可以将大约一半的隐私相关应用程序更改完全归因于第三方库代码。这暗示着应用开发者在遵守用户的隐私期望和市场的隐私规定方面存在更大的问题。我们的结果呼吁采取行动，使应用程序行为对用户更加透明，以便利用他们的评论来激励开发人员遵守安全和隐私最佳实践，同时我们的结果呼吁提供更好的工具来支持应用程序开发人员在这方面的努力。",
        "title_zh": "简短的文字，巨大的影响:测量用户评论对Android应用安全性和隐私的影响",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2019.html",
        "conf_title": "40th SP 2019: San Francisco, CA, USA",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8826229/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP.2019.00072",
        "title": "SensorID: Sensor Calibration Fingerprinting for Smartphones",
        "authors": "Jiexin Zhang, Alastair R. Beresford, Ian Sheret",
        "abstract": "Sensors are an essential component of many computer systems today. Mobile devices are a good example, containing a vast array of sensors from accelerometers and GPS units, to cameras and microphones. Data from these sensors are accessible to application programmers who can use this data to build context-aware applications. Good sensor accuracy is often crucial, and therefore manufacturers often use per-device factory calibration to compensate for systematic errors introduced during manufacture. In this paper we explore a new type of fingerprinting attack on sensor data: calibration fingerprinting. A calibration fingerprinting attack infers the per-device factory calibration data from a device by careful analysis of the sensor output alone. Such an attack does not require direct access to any calibration parameters since these are often embedded inside the firmware of the device and are not directly accessible by application developers. We demonstrate the potential of this new class of attack by performing calibration fingerprinting attacks on the inertial measurement unit sensors found in iOS and Android devices. These sensors are good candidates because access to these sensors does not require any special permissions, and the data can be accessed via both a native app installed on a device and also by JavaScript when visiting a website on an iOS and Android device. We find we are able to perform a very effective calibration fingerprinting attack: our approach requires fewer than 100 samples of sensor data and takes less than one second to collect and process into a device fingerprint that does not change over time or after factory reset. We demonstrate that our approach is very likely to produce globally unique fingerprints for iOS devices, with an estimated 67 bits of entropy in the fingerprint for iPhone 6S devices. In addition, we find that the accelerometer of Google Pixel 2 and Pixel 3 devices can also be fingerprinted by our approach.",
        "files": {
            "openAccessPdf": "https://ieeexplore.ieee.org/ielx7/8826229/8835208/08835276.pdf"
        },
        "abstract_zh": "传感器是当今许多计算机系统的基本组件。移动设备就是一个很好的例子，它包含大量的传感器，从加速度计和GPS单元，到摄像头和麦克风。应用程序员可以访问来自这些传感器的数据，并使用这些数据来构建环境感知应用。良好的传感器精度通常至关重要，因此制造商通常使用逐器件工厂校准来补偿制造过程中引入的系统误差。在本文中，我们探索了一种新的传感器数据指纹攻击类型:校准指纹。校准指纹攻击仅通过仔细分析传感器输出，从设备中推断出每个设备的工厂校准数据。这种攻击不需要直接访问任何校准参数，因为这些参数通常嵌入在设备的固件中，应用程序开发者不能直接访问。我们通过对iOS和Android设备中的惯性测量单元传感器进行校准指纹攻击，展示了这种新型攻击的潜力。这些传感器是很好的候选对象，因为访问这些传感器不需要任何特殊权限，并且可以通过安装在设备上的本机应用程序访问数据，也可以在iOS和Android设备上访问网站时通过JavaScript访问数据。我们发现我们能够执行非常有效的校准指纹攻击:我们的方法需要不到100个传感器数据样本，并且花费不到一秒钟的时间来收集和处理设备指纹，该指纹不会随时间推移或在工厂重置后改变。我们证明，我们的方法很可能为iOS设备生成全球唯一的指纹，估计iPhone 6S设备的指纹中有67位熵。此外，我们发现Google Pixel 2和Pixel 3设备的加速度计也可以通过我们的方法获得指纹。",
        "title_zh": "用于智能手机的sensorid传感器校准指纹",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2019.html",
        "conf_title": "40th SP 2019: San Francisco, CA, USA",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8826229/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP.2019.00077",
        "title": "Kiss from a Rogue: Evaluating Detectability of Pay-at-the-Pump Card Skimmers",
        "authors": "Nolen Scaife, Jasmine D. Bowers, Christian Peeters, Grant Hernandez, Imani N. Sherman, Patrick Traynor, Lisa Anthony",
        "abstract": "Credit and debit cards enable ﬁnancial transactions at unattended \"pay-at-the-pump\" gas station terminals across North America. Attackers discreetly open these pumps and install skimmers, which copy sensitive card data. While EMV (“chip-and-PIN”) has made substantial inroads in traditional retailers, such systems have virtually no deployment at pay-at-the-pump terminals due to dramatically higher costs and logistical/regulatory constraints, leaving consumers vulnerable in these contexts. In an effort to improve security, station owners have deployed security indicators such as low-cost tamper-evident seals, and technologists have developed skimmer detection apps for mobile phones. Not only do these solutions put the onus on consumers to notice and react to security concerns at the pump, but the efﬁcacy of these solutions has not been measured. In this paper, we evaluate the indicators available to consumers to detect skimmers. We perform a comprehensive teardown of all known skimmer detection apps for iOS and Android devices, and then conduct a forensic analysis of real-world gas pump skimmer hardware recovered by multiple law enforcement agencies. Finally, we analyze anti-skimmer mechanisms deployed by pump owners/operators, and augment this investigation with an analysis of skimmer reports and accompanying security measures collected by the Florida Department of Agriculture and Consumer Services over four years, making this the most comprehensive long-term study of such devices. Our results show that common gas pump security indicators are not only ineffective at empowering consumers to detect tampering, but may be providing a false sense of security. Accordingly, stronger, reliable, inexpensive measures must be developed to protect consumers and merchants from fraud.",
        "files": {
            "openAccessPdf": "https://ieeexplore.ieee.org/ielx7/8826229/8835208/08835327.pdf"
        },
        "abstract_zh": "信用卡和借记卡支持在北美无人值守的“加油付费”加油站终端进行金融交易。攻击者小心翼翼地打开这些泵并安装分离器，复制敏感的卡数据。虽然EMV(“芯片和密码”)已经在传统零售商中取得了实质性的进展，但是由于成本高得多以及物流/监管限制，这种系统实际上没有在加油站终端部署，这使得消费者在这些情况下很容易受到影响。为了提高安全性，车站所有者部署了安全指示器，如低成本的防篡改封条，技术专家开发了移动电话的撇油器检测应用程序。这些解决方案不仅让消费者有责任注意到泵的安全问题并做出反应，而且这些解决方案的有效性也没有得到衡量。在本文中，我们评估了消费者可以用来检测撇油器的指标。我们对iOS和Android设备上所有已知的撇油器检测应用程序进行了全面的拆解，然后对多个执法机构回收的真实世界的气泵撇油器硬件进行了取证分析。最后，我们分析了泵所有者/运营商部署的反撇油器机制，并通过分析佛罗里达农业和消费者服务部在四年内收集的撇油器报告和附带的安全措施来加强这项调查，使之成为对此类设备最全面的长期研究。我们的结果表明，普通的气泵安全指示器不仅在授权消费者检测篡改方面无效，而且可能提供虚假的安全感。因此，必须开发更强、可靠、廉价的措施来保护消费者和商家免受欺诈。",
        "title_zh": "来自流氓的吻:评估加油卡套的可检测性",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2019.html",
        "conf_title": "40th SP 2019: San Francisco, CA, USA",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8826229/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP.2019.00005",
        "title": "Simple High-Level Code for Cryptographic Arithmetic - With Proofs, Without Compromises",
        "authors": "Andres Erbsen, Jade Philipoom, Jason Gross, Robert Sloan, Adam Chlipala",
        "abstract": "We introduce a new approach for implementing cryptographic arithmetic in short high-level code with machine-checked proofs of functional correctness. We further demonstrate that simple partial evaluation is sufficient to transform into the fastest-known C code, breaking the decades-old pattern that the only fast implementations are those whose instruction-level steps were written out by hand. These techniques were used to build an elliptic-curve library that achieves competitive performance for 80 prime fields and multiple CPU architectures, showing that implementation and proof effort scales with the number and complexity of conceptually different algorithms, not their use cases. As one outcome, we present the first verified high-performance implementation of P-256, the most widely used elliptic curve. implementations from our library were included in BoringSSL to replace existing specialized code, for inclusion in several large deployments for Chrome, Android, and CloudFlare.",
        "files": {
            "openAccessPdf": "https://ieeexplore.ieee.org/ielx7/8826229/8835208/08835346.pdf"
        },
        "abstract_zh": "我们介绍了一种用机器检查的功能正确性证明在短的高级代码中实现密码算法的新方法。我们进一步证明，简单的部分求值足以转换成已知最快的C代码，打破了几十年来唯一快速的实现是那些手工编写指令级步骤的模式。这些技术用于构建一个椭圆曲线库，该库在80个素数域和多个CPU架构上实现了具有竞争力的性能，表明实现和证明工作与概念上不同的算法的数量和复杂性成比例，而不是与它们的用例成比例。作为一项成果，我们展示了第一个经过验证的P-256高性能实现，这是使用最广泛的椭圆曲线。我们库中的实现被包含在BoringSSL中，以取代现有的专用代码，用于Chrome、Android和CloudFlare的几个大型部署中。",
        "title_zh": "简单的高级密码算法代码——有证据，没有妥协",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2019.html",
        "conf_title": "40th SP 2019: San Francisco, CA, USA",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8826229/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP.2017.31",
        "title": "Stack Overflow Considered Harmful? The Impact of Copy&Paste on Android Application Security",
        "authors": "Felix Fischer, Konstantin Böttinger, Huang Xiao, Christian Stransky, Yasemin Acar, Michael Backes, Sascha Fahl",
        "abstract": "Online programming discussion platforms such as Stack Overflow serve as a rich source of information for software developers. Available information include vibrant discussions and oftentimes ready-to-use code snippets. Previous research identified Stack Overflow as one of the most important information sources developers rely on. Anecdotes report that software developers copy and paste code snippets from those information sources for convenience reasons. Such behavior results in a constant flow of community-provided code snippets into production software. To date, the impact of this behaviour on code security is unknown. We answer this highly important question by quantifying the proliferation of security-related code snippets from Stack Overflow in Android applications available on Google Play. Access to the rich source of information available on Stack Overflow including ready-to-use code snippets provides huge benefits for software developers. However, when it comes to code security there are some caveats to bear in mind: Due to the complex nature of code security, it is very difficult to provide ready-to-use and secure solutions for every problem. Hence, integrating a security-related code snippet from Stack Overflow into production software requires caution and expertise. Unsurprisingly, we observed insecure code snippets being copied into Android applications millions of users install from Google Play every day. To quantitatively evaluate the extent of this observation, we scanned Stack Overflow for code snippets and evaluated their security score using a stochastic gradient descent classifier. In order to identify code reuse in Android applications, we applied state-of-the-art static analysis. Our results are alarming: 15.4% of the 1.3 million Android applications we analyzed, contained security-related code snippets from Stack Overflow. Out of these 97.9% contain at least one insecure code snippet.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "在线编程讨论平台（例如堆栈溢出）为软件开发人员提供丰富的信息来源。 可用的信息包括充满活力的讨论和通常的现成代码段。 先前的研究将堆栈溢出确定为开发人员最重要的信息之一。 轶事报告说，出于方便的原因，软件开发人员从这些信息来源复制和粘贴了代码片段。 这种行为导致社区提供的代码片段不断流入生产软件。 迄今为止，此行为对代码安全性的影响尚不清楚。 我们通过量化Google Play上Android应用程序中的堆栈溢出中与安全相关的代码段的扩散来回答这个非常重要的问题。 访问堆栈溢出上可用的丰富信息来源，包括现成的代码片段为软件开发人员提供了巨大的好处。 但是，当涉及到代码安全性时，请记住一些警告：由于代码安全的复杂性质，很难为每个问题提供现成的和安全的解决方案。 因此，将堆栈溢出的与安全相关的代码段集成到生产软件中需要谨慎和专业知识。 毫不奇怪，我们观察到每天将数百万用户从Google Play安装的Android应用程序中复制到Android应用程序中。 为了定量评估该观察的程度，我们扫描了代码段的堆栈溢出，并使用随机梯度下降分类器评估了其安全评分。 为了识别Android应用程序中的代码重复使用，我们应用了最新的静态分析。 我们的结果令人震惊：我们分析的130万个Android应用程序中有15.4％包含来自堆栈溢出的安全相关代码段。 在这97.9％中，至少包含一个不安全的代码段。",
        "title_zh": "堆栈溢出被认为是有害的？复制粘贴对Android应用安全性的影响",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2017.html",
        "conf_title": "38th S&P 2017: San Jose, CA, USA",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7957740/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP.2017.30",
        "title": "NORAX: Enabling Execute-Only Memory for COTS Binaries on AArch64",
        "authors": "Yaohui Chen, Dongli Zhang, Ruowen Wang, Rui Qiao, Ahmed M. Azab, Long Lu, Hayawardh Vijayakumar, Wenbo Shen",
        "abstract": "Code reuse attacks exploiting memory disclosure vulnerabilities can bypass all deployed mitigations. One promising defense against this class of attacks is to enable execute-only memory (XOM) protection on top of fine-grained address space layout randomization (ASLR). However, recent works implementing XOM, despite their efficacy, only protect programs that have been (re)built with new compiler support, leaving commercial-off-the-shelf (COTS) binaries and source-unavailable programs unprotected. We present the design and implementation of NORAX, a practical system that retrofits XOM into stripped COTS binaries on AArch64 platforms. Unlike previous techniques, NORAX requires neither source code nor debugging symbols. NORAX statically transforms existing binaries so that during runtime their code sections can be loaded into XOM memory pages with embedded data relocated and data references properly updated. NORAX allows transformed binaries to leverage the new hardware-based XOM support—a feature widely available on AArch64 platforms (e.g., recent mobile devices) yet virtually unused due to the incompatibility of existing binaries. Furthermore, NORAX is designed to co-exist with other COTS binary hardening techniques, such as in-place randomization (IPR). We apply NORAX to the commonly used Android system binaries running on SAMSUNG Galaxy S6 and LG Nexus 5X devices. The results show that NORAX on average slows down the execution of transformed binaries by 1.18% and increases their memory footprint by 2.21%, suggesting NORAX is practical for real-world adoption.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "代码重复使用攻击利用内存披露漏洞可以绕过所有部署的缓解。 针对这类攻击的一种有希望的防御方法是在细粒度地址空间布局随机化（ASLR）之上启用仅执行仅执行内存（XOM）保护。 但是，最近实施XOM的著作，尽管它们有效，但仅保护（重新）以新的编译器支持构建的程序，而商业企业 - 货架（COTS）二进制文件和源无可用的程序不受保护。 我们介绍了Norax的设计和实现，Norax是一种实用的系统，可将XOM改造成Aarch64平台上的剥离COTS二进制文件。 与以前的技术不同，NORAX不需要源代码也不需要调试符号。 NORAX从静态转换现有的二进制文件，以便在运行时可以将其代码部分加载到XOM内存页面中，并具有嵌入式数据重新定位，并且数据参考已正确更新。 NORAX允许转换后的二进制文件利用新的基于硬件的XOM支持，这是在Aarch64平台（例如，最近的移动设备）上广泛可用的功能，但由于现有二进制文件的不兼容而几乎没有使用。 此外，NORAX旨在与其他COTS二元硬化技术（例如原位随机化（IPR））共存。 我们将NORAX应用于在三星Galaxy S6和LG Nexus 5X设备上运行的常用Android系统二进制文件。 结果表明，Norax平均将转化的二进制文件的执行减少了1.18％，并将其内存足迹提高了2.21％，这表明Norax对于现实世界中的采用是实际的。",
        "title_zh": "NORAX:在AArch64上为COTS二进制文件启用只执行内存",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2017.html",
        "conf_title": "38th S&P 2017: San Jose, CA, USA",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7957740/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP.2017.61",
        "title": "SysPal: System-Guided Pattern Locks for Android",
        "authors": "Geumhwan Cho, Jun Ho Huh, Junsung Cho, Seongyeol Oh, Youngbae Song, Hyoungshick Kim",
        "abstract": "To improve the security of user-chosen Android screen lock patterns, we propose a novel system-guided pattern lock scheme called \"SysPal\" that mandates the use of a small number of randomly selected points while selecting a pattern. Users are given the freedom to use those mandated points at any position. We conducted a large-scale online study with 1,717 participants to evaluate the security and usability of three SysPal policies, varying the number of mandatory points that must be used (upon selecting a pattern) from one to three. Our results suggest that the two SysPal policies that mandate the use of one and two points can help users select significantly more secure patterns compared to the current Android policy: 22.58% and 23.19% fewer patterns were cracked. Those two SysPal policies, however, did not show any statistically significant inferiority in pattern recall success rate (the percentage of participants who correctly recalled their pattern after 24 hours). In our lab study, we asked participants to install our screen unlock application on their own Android device, and observed their real-life phone unlock behaviors for a day. Again, our lab study did not show any statistically significant difference in memorability for those two SysPal policies compared to the current Android policy.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "为了提高用户选择的Android屏幕锁定模式的安全性，我们提出了一种新型的系统指导的模式锁定方案，称为“ Syspal”，该方案要求在选择模式时使用少量随机选择的点。 用户可以自由地使用任何位置的强制性点。 我们对1,717名参与者进行了一项大规模的在线研究，以评估三种Syspal策略的安全性和可用性，从而改变了必须使用（选择模式）从一到三到三的强制性点数。 我们的结果表明，与当前的Android策略相比，两项要求使用一个和两个点的SYSPAL策略可以帮助用户选择更安全的模式：分解了22.58％和23.19％的模式。 但是，这两种SYSPAL政策在模式回忆成功率上没有显示出任何统计学上显着的自卑（在24小时后正确召回其模式的参与者的百分比）。 在我们的实验室研究中，我们要求参与者在自己的Android设备上安装我们的屏幕解锁应用程序，并观察他们一天的现实手机解锁行为。 同样，与当前的Android策略相比，我们的实验室研究没有显示出这两个SYSPAL政策的记忆性上有任何统计学上的显着差异。",
        "title_zh": "SysPal:Android系统引导的模式锁",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2017.html",
        "conf_title": "38th S&P 2017: San Jose, CA, USA",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7957740/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP.2017.39",
        "title": "Cloak and Dagger: From Two Permissions to Complete Control of the UI Feedback Loop",
        "authors": "Yanick Fratantonio, Chenxiong Qian, Simon P. Chung, Wenke Lee",
        "abstract": "The effectiveness of the Android permission system fundamentally hinges on the user's correct understanding of the capabilities of the permissions being granted. In this paper, we show that both the end-users and the security community have significantly underestimated the dangerous capabilities granted by the SYSTEM_ALERT_WINDOW and the BIND_ACCESSIBILITY_SERVICE permissions: while it is known that these are security-sensitive permissions and they have been abused individually (e.g., in UI redressing attacks, accessibility attacks), previous attacks based on these permissions rely on vanishing side-channels to time the appearance of overlay UI, cannot respond properly to user input, or make the attacks literally visible. This work, instead, uncovers several design shortcomings of the Android platform and shows how an app with these two permissions can completely control the UI feedback loop and create devastating attacks. In particular, we demonstrate how such an app can launch a variety of stealthy, powerful attacks, ranging from stealing user's login credentials and security PIN, to the silent installation of a God-mode app with all permissions enabled, leaving the victim completely unsuspecting. To make things even worse, we note that when installing an app targeting a recent Android SDK, the list of its required permissions is not shown to the user and that these attacks can be carried out without needing to lure the user to knowingly enable any permission. In fact, the SYSTEM_ALERT_WINDOW permission is automatically granted for apps installed from the Play Store and our experiment shows that it is practical to lure users to unknowingly grant the BIND_ACCESSIBILITY_SERVICE permission by abusing capabilities from the SYSTEM_ALERT_WINDOW permission. We evaluated the practicality of these attacks by performing a user study: none of the 20 human subjects that took part of the experiment even suspected they had been attacked. We also found that it is straightforward to get a proof-of-concept app requiring both permissions accepted on the official store. We responsibly disclosed our findings to Google. Unfortunately, since these problems are related to design issues, these vulnerabilities are still unaddressed. We conclude the paper by proposing a novel defense mechanism, implemented as an extension to the current Android API, which would protect Android users and developers from the threats we uncovered.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android许可系统的有效性从根本上取决于用户对授予权限能力的正确理解。 在本文中，我们表明，最终用户和安全界都大大低估了System_Alert_window和Bind_Accessibility_service Permissions授予的危险功能：虽然已知这些是安全敏感的许可，并且已被滥用了（例如。 ，在UI纠正攻击，可访问性攻击）中，基于这些权限的先前攻击依赖于消失的侧通道来计时覆盖UI的出现，无法正确响应用户输入，或者使攻击实际上可见。 取而代之的是，这项工作揭示了Android平台的几个设计缺陷，并展示了具有这两个权限的应用程序如何完全控制UI反馈循环并创建毁灭性的攻击。 特别是，我们演示了这样的应用程序如何发起各种隐秘，强大的攻击，从窃取用户的登录凭据和安全销，到启用所有权限的God-Mode应用程序的无声安装，使受害者完全不受欢迎。 为了使情况变得更糟，我们注意到，在以最新的Android SDK为目标时，未向用户显示其所需权限的列表，并且可以执行这些攻击，而无需引诱用户故意启用任何许可 。 实际上，从Play商店安装的应用程序自动授予System_alert_window权限，我们的实验表明，通过滥用System_alert_window permision的功能来吸引用户在不知不觉中授予用户授予BIND_ACCESSIBIDIALY_SERVICESEVICE_SERVICE的权限。 我们通过进行用户研究来评估了这些攻击的实用性：20个人类受试者甚至都怀疑他们受到了攻击。 我们还发现，获得概念验证的应用程序是很简单的，需要在官方商店中接受这两个权限。 我们负责任地向Google披露了我们的发现。 不幸的是，由于这些问题与设计问题有关，因此这些漏洞仍然没有解决。 我们通过提出一种新颖的防御机制来结束本文，该机制是针对当前的Android API的扩展，该机制将保护Android用户和开发人员免受我们发现的威胁。",
        "title_zh": "斗篷和匕首:从两种权限到完全控制UI反馈循环",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2017.html",
        "conf_title": "38th S&P 2017: San Jose, CA, USA",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7957740/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP.2017.25",
        "title": "SmarPer: Context-Aware and Automatic Runtime-Permissions for Mobile Devices",
        "authors": "Katarzyna Olejnik, Italo Dacosta, Joana Soares Machado, Kévin Huguenin, Mohammad Emtiyaz Khan, Jean-Pierre Hubaux",
        "abstract": "Permission systems are the main defense that mobile platforms, such as Android and iOS, offer to users to protect their private data from prying apps. However, due to the tension between usability and control, such systems have several limitations that often force users to overshare sensitive data. We address some of these limitations with SmarPer, an advanced permission mechanism for Android. To address the rigidity of current permission systems and their poor matching of users' privacy preferences, SmarPer relies on contextual information and machine learning methods to predict permission decisions at runtime. Note that the goal of SmarPer is to mimic the users' decisions, not to make privacy-preserving decisions per se. Using our SmarPer implementation, we collected 8,521 runtime permission decisions from 41 participants in real conditions. With this unique data set, we show that using an efficient Bayesian linear regression model results in a mean correct classification rate of 80% (±3%). This represents a mean relative reduction of approximately 50% in the number of incorrect decisions when compared with a user-defined static permission policy, i.e., the model used in current permission systems. SmarPer also focuses on the suboptimal trade-off between privacy and utility, instead of only \"allow\" or \"deny\" type of decisions, SmarPer also offers an \"obfuscate\" option where users can still obtain utility by revealing partial information to apps. We implemented obfuscation techniques in SmarPer for different data types and evaluated them during our data collection campaign. Our results show that 73% of the participants found obfuscation useful and it accounted for almost a third of the total number of decisions. In short, we are the first to show, using a large dataset of real in situ permission decisions, that it is possible to learn users' unique decision patterns at runtime using contextual information while supporting data obfuscation, this is an important step towards automating the management of permissions in smartphones.",
        "files": {
            "openAccessPdf": "https://hal.archives-ouvertes.fr/hal-01489684/file/Olejnik2017S%26P.pdf"
        },
        "abstract_zh": "许可系统是Android和iOS等移动平台提供的主要防御，以保护其私人数据免受撬动应用的保护。 但是，由于可用性和控制之间的张力，此类系统具有多个局限性，通常迫使用户覆盖敏感数据。 我们用Smarper（Android的高级许可机制）解决了其中一些限制。 为了解决当前许可系统的刚度及其对用户隐私偏好的匹配不佳，Smarper依靠上下文信息和机器学习方法来预测运行时的权限决策。 请注意，智能者的目标是模仿用户的决定，而不是本身就可以做出隐私的决策。 使用我们的智能实施，我们在实际条件下从41位参与者那里收集了8,521个运行时许可决策。 使用此独特的数据集，我们表明，使用有效的贝叶斯线性回归模型会导致平均正确的分类速率为80％（±3％）。 与用户定义的静态许可策略（即当前许可系统中使用的模型）相比，这表示错误决策数量的相对相对减少约50％的平均相对减少。 Smarper还专注于隐私和公用事业之间的次优折衷，而不仅仅是“允许”或“拒绝”的决策类型，Smarper还提供了一个“混淆”选项，用户仍然可以通过向应用程序透露部分信息来获取实用程序。 我们针对不同的数据类型实施了智能技术的混淆技术，并在数据收集活动中对其进行了评估。 我们的结果表明，有73％的参与者发现混淆有用，几乎占决策总数的三分之一。 简而言之，我们是第一个使用真实的原位权限决策数据集，即使用上下文信息在运行时学习用户在运行时的独特决策模式，同时支持数据混淆，这是自动化自动化数据的重要步骤 智能手机权限的管理。",
        "title_zh": "SmarPer:移动设备的上下文感知和自动运行时许可",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2017.html",
        "conf_title": "38th S&P 2017: San Jose, CA, USA",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7957740/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SPW.2017.34",
        "title": "HybridGuard: A Principal-Based Permission and Fine-Grained Policy Enforcement Framework for Web-Based Mobile Applications",
        "authors": "Phu H. Phung, Abhinav Mohanty, Rahul Rachapalli, Meera Sridhar",
        "abstract": "Web-based or hybrid mobile applications (apps) are widely used and supported by various modern hybrid app development frameworks. In this architecture, any JavaScript code, local or remote, can access available APIs, including JavaScript bridges provided by the hybrid framework, to access device resources. This JavaScript inclusion capability is dangerous, since there is no mechanism to determine the origin of the code to control access, and any JavaScript code running in the mobile app can access the device resources through the exposed APIs. Previous solutions are either limited to a particular platform (e.g., Android) or a specific hybrid framework (e.g., Cordova) or only protect the device resources and disregard the sensitive elements in the web environment. Moreover, most of the solutions require the modification of the base platform. In this paper, we present HybridGuard, a novel policy enforcement framework that can enforce principal-based, stateful policies, on multiple origins without modifying the hybrid frameworks or mobile platforms. In HybridGuard, hybrid app developers can specify principal-based permissions, and define fine-grained, and stateful policies that can mitigate a significant class of attacks caused by potentially malicious JavaScript code included from third-party domains, including ads running inside the app. HybridGuard also provides a mechanism and policy patterns for app developers to specify fine-grained policies for multiple principals. HybridGuard is implemented in JavaScript, therefore, it can be easily adapted for other hybrid frameworks or mobile platforms without modification of these frameworks or platforms. We present attack scenarios and report experimental results to demonstrate how HybridGuard can thwart attacks against hybrid mobile apps.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "基于Web的或混合移动应用程序（APP）由各种现代混合应用程序开发框架广泛使用和支持。 在此体系结构中，任何本地或远程的JavaScript代码都可以访问可用的API，包括Hybrid Framework提供的JavaScript Bridges，以访问设备资源。 此JavaScript包含功能是危险的，因为没有任何机制来确定代码控制访问的原点，并且在移动应用程序中运行的任何JavaScript代码都可以通过暴露的API访问设备资源。 以前的解决方案仅限于特定平台（例如Android）或特定的混合框架（例如Cordova），或者仅保护设备资源，而无视Web环境中的敏感元素。 此外，大多数解决方案都需要修改基本平台。 在本文中，我们介绍了Hybridguard，这是一个新颖的政策执法框架，可以在多个起源上执行基于主体的，州的政策，而无需修改混合框架或移动平台。 在Hybridguard中，Hybrid App开发人员可以指定基于主体的权限，并定义可减轻由第三方域中的潜在恶意JavaScript代码引起的重要攻击，包括在应用程序内部运行的广告，包括可能是恶意的JavaScript代码。 Hybridguard还为应用程序开发人员提供了一种机制和政策模式，以为多个主体指定细粒度的策略。 Hybridguard在JavaScript中实现，因此，它可以轻松地适用于其他混合框架或移动平台，而无需修改这些框架或平台。 我们提出攻击场景并报告实验结果，以证明混合守卫如何阻止攻击混合移动应用程序。",
        "title_zh": "HybridGuard:基于主体的权限和细粒度策略执行框架，用于基于Web的移动应用",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/spw2017.html",
        "conf_title": "38th S&P 2017: San Jose, CA, USA - Workshops",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8226722/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SPW.2017.15",
        "title": "Spartan Jester: End-to-End Information Flow Control for Hybrid Android Applications",
        "authors": "Julian Sexton, Andrey Chudnov, David A. Naumann",
        "abstract": "Web-based applications are attractive due to their portability. To leverage that, many mobile applications are hybrid, incorporating a web component that implements most of their functionality. While solutions for enforcing security exist for both mobile and web applications, enforcing and reasoning about the security of their combinations is difficult. We argue for a combination of static and dynamic analysis for assurance of end-to-end confidentiality in hybrid apps. We show how information flows in hybrid Android applications can be secured through use of SPARTA, a static analyzer for Android/Java, and JEST, a dynamic monitor for JavaScript, connected by a compatibility layer that translates policies and value representations. This paper reports on our preliminary investigation using a case study.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "基于Web的应用程序由于其可移植性而具有吸引力。 为了利用这一点，许多移动应用程序都是混合的，结合了实现其大部分功能的Web组件。 尽管为移动应用程序和Web应用程序都存在实施安全性的解决方案，但很难对其组合的安全性执行和推理。 我们主张将静态和动态分析结合在一起，以确保混合应用程序中的端到端机密性。 我们展示了如何通过使用Sparta（用于Android/Java的静态分析仪）和JEST（用于JavaScript的动态监视器）的静态分析器来确保信息流中的信息流，该分析仪是通过翻译策略和价值表示的兼容层连接的。 本文使用案例研究报告了我们的初步研究。",
        "title_zh": "Spartan Jester:混合Android应用的端到端信息流控制",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/spw2017.html",
        "conf_title": "38th S&P 2017: San Jose, CA, USA - Workshops",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8226722/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SPW.2017.24",
        "title": "Seamless In-App Ad Blocking on Stock Android",
        "authors": "Michael Backes, Sven Bugiel, Philipp von Styp-Rekowsky, Marvin WiBfeld",
        "abstract": "Advertisements in mobile applications have been shown to be a true danger to the users' privacy and security. Unfortunately, all existing solutions for protecting users from this threat are not simultaneously satisfying in terms of effectiveness or deployability. Leveraging recent advances in app virtualization on Android, we present in this paper a solution for in-app ad-blocking that provides a high level of effectiveness in blocking ads while at the same time being favorable for end-user deployment by abstaining from OS modifications or any elevated privileges. We discuss the technical challenges and their solutions for robustly stripping ads from apps while preserving the apps' functionality.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "移动应用程序中的广告已被证明是对用户隐私和安全性的真正危险。 不幸的是，在有效性或可部署性方面，所有现有的用于保护用户免受这种威胁的解决方案都不满足。 利用Android的应用程序虚拟化的最新进展，我们在本文中提出了一种用于应用内广告块的解决方案，该解决方案在阻断广告方面具有很高的有效性，同时又有利于弃权通过OS修改而有利于最终用户部署 或任何提高特权。 我们在保留应用程序功能的同时，讨论了从应用程序中稳健剥离广告的技术挑战及其解决方案。",
        "title_zh": "在安卓系统上无缝拦截应用内广告",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/spw2017.html",
        "conf_title": "38th S&P 2017: San Jose, CA, USA - Workshops",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8226722/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SPW.2017.29",
        "title": "The Applicability of Ambient Sensors as Proximity Evidence for NFC Transactions",
        "authors": "Carlton Shepherd, Iakovos Gurulian, Eibe Frank, Konstantinos Markantonakis, Raja Naeem Akram, Emmanouil Panaousis, Keith Mayes",
        "abstract": "Near Field Communication (NFC) has enabled mobile phones to emulate contactless smart cards. Similar to contactless smart cards, they are also susceptible to relay attacks. To counter these, a number of methods have been proposed that rely primarily on ambient sensors as a proximity detection mechanism (also known as an anti-relay mechanism). In this paper, we empirically evaluate a comprehensive set of ambient sensors for their effectiveness as a proximity detection mechanism for NFC contactless-based applications like banking, transport and high-security access controls. We selected 17 sensors available via the Google Android platform. Each sensor, where feasible, was used to record the measurements of 1,000 contactless transactions at four different physical locations. A total of 252 users, a random sample from the university student population, were involved during the field trials. After careful analysis, we conclude that no single evaluated mobile ambient sensor is suitable for proximity detection in NFC-based contactless applications in realistic deployment scenarios. Lastly, we identify a number of potential avenues that may improve their effectiveness.",
        "files": {
            "openAccessPdf": "https://researchcommons.waikato.ac.nz/bitstream/10289/12388/4/MoST17%20paper.pdf"
        },
        "abstract_zh": "近场通信（NFC）使手机能够模仿非接触式智能卡。 与非接触式智能卡类似，它们也容易接力攻击。 为了解决这些问题，已经提出了许多主要依赖环境传感器作为接近检测机制的方法（也称为抗Relay机制）。 在本文中，我们从经验上评估了一组全面的环境传感器，以作为NFC非接触式应用程序（例如银行，运输和高安全性访问控件）的邻近检测机制。 我们通过Google Android平台选择了17个传感器。 每个传感器（可行的地方）都用于记录四个不同物理位置的1,000次非接触式交易的测量。 在现场试验期间，共有252位用户，是大学学生群体的随机样本。 经过仔细的分析后，我们得出结论，在现实的部署方案中，没有一个评估的移动环境传感器适用于基于NFC的非接触式应用中的接近性检测。 最后，我们确定了许多可能提高其有效性的潜在途径。",
        "title_zh": "环境传感器作为NFC交易的邻近证据的适用性",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/spw2017.html",
        "conf_title": "38th S&P 2017: San Jose, CA, USA - Workshops",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8226722/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SPW.2017.12",
        "title": "MR-Droid: A Scalable and Prioritized Analysis of Inter-App Communication Risks",
        "authors": "Fang Liu, Haipeng Cai, Gang Wang, Danfeng Yao, Karim O. Elish, Barbara G. Ryder",
        "abstract": "Inter-Component Communication (ICC) enables useful interactions between mobile apps. However, misuse of ICC exposes users to serious threats, allowing malicious apps to access privileged user data via another app. Unfortunately, existing ICC analyses are largely insufficient in both accuracy and scalability. Most approaches rely on single-app ICC analysis which results in inaccurate and excessive alerts. A few recent works use pairwise app analysis, but are limited by small data sizes and scalability. In this paper, we present MR-Droid, a MapReduce-based computing framework for accurate and scalable inter-app ICC analysis in Android. MR-Droid extracts data-flow features between multiple communicating apps to build a large-scale ICC graph. We leverage the ICC graph to provide contexts for inter-app communications to produce precise alerts and prioritize risk assessments. This scheme requires quickly processing a large number of app-pairs, which is enabled by our MapReduce-based program analysis. Extensive experiments on 11,996 apps from 24 app categories (13 million pairs) demonstrate the effectiveness of our risk prioritization scheme. Our analyses also reveal new real-world hijacking attacks and collusive app pairs. Based on our findings, we provide practical recommendations for reducing inter-app communication risks.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Inter-Component Communication（ICC）可以在移动应用程序之间进行有用的交互。 但是，滥用ICC会使用户面临严重威胁，从而使恶意应用程序可以通过另一个应用程序访问特权用户数据。 不幸的是，现有的ICC分析在很大程度上不足以准确和可扩展性。 大多数方法都依赖于单应用ICC分析，从而导致不准确和过度警报。 最近的一些作品使用成对应用分析，但受到小数据尺寸和可扩展性的限制。 在本文中，我们提出了MR-Droid，这是一种基于MAPREDUCE的计算框架，用于在Android中进行准确且可扩展的ICC分析。 MR-Droid提取多个通信应用程序之间的数据流以构建大型ICC图。 我们利用ICC图为应用程序间通信提供上下文，以产生精确的警报并确定风险评估的优先级。 该方案需要快速处理大量的应用程序对，这是通过基于MapReduce的程序分析来启用的。 来自24个应用程序类别（1300万对）的11,996个应用程序的广泛实验证明了我们的风险优先级方案的有效性。 我们的分析还揭示了新的现实劫持攻击和辅助应用程序对。 根据我们的发现，我们提供了减少应用间沟通风险的实用建议。",
        "title_zh": "MR-Droid:应用程序间通信风险的可扩展和优先分析",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/spw2017.html",
        "conf_title": "38th S&P 2017: San Jose, CA, USA - Workshops",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8226722/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SPW.2018.00031",
        "title": "A Dynamic Taint Analysis Tool for Android App Forensics",
        "authors": "Zhen Xu, Chen Shi, Chris Chao-Chun Cheng, Neil Zhenqiang Gong, Yong Guan",
        "abstract": "The plethora of mobile apps introduce critical challenges to digital forensics practitioners, due to the diversity and the large number (millions) of mobile apps available to download from Google play, Apple store, as well as hundreds of other online app stores. Law enforcement investigators often find themselves in a situation that on the seized mobile phone devices, there are many popular and less-popular apps with interface of different languages and functionalities. Investigators would not be able to have sufficient expert-knowledge about every single app, sometimes nor even a very basic understanding about what possible evidentiary data could be discoverable from these mobile devices being investigated. Existing literature in digital forensic field showed that most such investigations still rely on the investigator's manual analysis using mobile forensic toolkits like Cellebrite and Encase. The problem with such manual approaches is that there is no guarantee on the completeness of such evidence discovery. Our goal is to develop an automated mobile app analysis tool to analyze an app and discover what types of and where forensic evidentiary data that app generate and store locally on the mobile device or remotely on external 3rd-party server(s). With the app analysis tool, we will build a database of mobile apps, and for each app, we will create a list of app-generated evidence in terms of data types, locations (and/or sequence of locations) and data format/syntax. The outcome from this research will help digital forensic practitioners to reduce the complexity of their case investigations and provide a better completeness guarantee of evidence discovery, thereby deliver timely and more complete investigative results, and eventually reduce backlogs at crime labs. In this paper, we will present the main technical approaches for us to implement a dynamic Taint analysis tool for Android apps forensics. With the tool, we have analyzed 2,100 real-world Android apps. For each app, our tool produces the list of evidentiary data (e.g., GPS locations, device ID, contacts, browsing history, and some user inputs) that the app could have collected and stored on the devices' local storage in the forms of file or SQLite database. We have evaluated our tool using both benchmark apps and real-world apps. Our results demonstrated that the initial success of our tool in accurately discovering the evidentiary data.",
        "files": {
            "openAccessPdf": "https://ieeexplore.ieee.org/ielx7/8420091/8424589/08424647.pdf"
        },
        "abstract_zh": "由于多样性和大量移动应用程序可从Google Play，Apple Store，Apple Store以及其他数百个在线应用程序商店下载，因此大量移动应用程序对数字取证从业人员介绍了关键挑战。 执法调查人员经常发现自己处于在被查获的手机设备上，有许多流行且受欢迎的应用程序具有不同语言和功能的接口。 调查人员将无法对每个应用程序有足够的专家知识，有时甚至无法从所研究的这些移动设备中发现哪些可能的证据数据。 数字法医领域中的现有文献表明，大多数此类研究仍使用移动法医工具包（如Cellebrite和Encase）依赖研究者的手动分析。 这种手动方法的问题在于，不能保证这种证据发现的完整性。 我们的目标是开发一个自动化的移动应用分析工具来分析应用程序，并发现应用程序在移动设备上生成和存储在移动设备上或远程存储在外部3rd Party Server上的法医证据数据。 使用应用程序分析工具，我们将构建一个移动应用程序数据库，对于每个应用程序，我们将根据数据类型，位置（和/或位置的序列）和数据格式/数据格式创建应用程序生成的证据列表 。 这项研究的结果将有助于数字法医实践者减少案例调查的复杂性，并提供更好的证据发现保证，从而及时，更完整的调查结果，并最终减少犯罪实验室的积压。 在本文中，我们将为我们提供针对Android应用程序取证的动态污点分析工具的主要技术方法。 使用该工具，我们分析了2,100个现实世界Android应用程序。 对于每个应用程序，我们的工具会生成该应用程序可以收集并存储在设备的本地存储中，以文件的形式收集并存储在设备的本地存储上 或SQLITE数据库。 我们已经使用基准应用程序和现实世界应用程序评估了我们的工具。 我们的结果表明，我们的工具在准确发现证据数据方面的最初成功。",
        "title_zh": "用于Android应用取证的动态污点分析工具",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/spw2018.html",
        "conf_title": "39th S&P 2018: San Francisco, CA, USA - Workshops",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8420091/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP.2018.00010",
        "title": "EyeTell: Video-Assisted Touchscreen Keystroke Inference from Eye Movements",
        "authors": "Yimin Chen, Tao Li, Rui Zhang, Yanchao Zhang, Terri Hedgpeth",
        "abstract": "Keystroke inference attacks pose an increasing threat to ubiquitous mobile devices. This paper presents EyeTell, a novel video-assisted attack that can infer a victim's keystrokes on his touchscreen device from a video capturing his eye movements. EyeTell explores the observation that human eyes naturally focus on and follow the keys they type, so a typing sequence on a soft keyboard results in a unique gaze trace of continuous eye movements. In contrast to prior work, EyeTell requires neither the attacker to visually observe the victim's inputting process nor the victim device to be placed on a static holder. Comprehensive experiments on iOS and Android devices confirm the high efficacy of EyeTell for inferring PINs, lock patterns, and English words under various environmental conditions.",
        "files": {
            "openAccessPdf": "https://ieeexplore.ieee.org/ielx7/8418581/8418583/08418601.pdf"
        },
        "abstract_zh": "击键推理攻击对无处不在的移动设备构成了越来越多的威胁。 本文介绍了Eyetell，这是一种新颖的视频辅助攻击，可以通过视频捕捉他的眼睛动作来推断受害者在触摸屏设备上的击键。 Eyetell探讨了人眼自然关注并遵循其键入的键的观察，因此在软键盘上的打字顺序会导致独特的凝视痕迹连续的眼动。 与先前的工作相反，Eyetell不要求攻击者在视觉上观察受害者的投入过程，也不需要将受害者装置放在静态持有人上。 关于iOS和Android设备的综合实验证实了Eyetell在各种环境条件下推断引脚，锁定图案和英语单词的高效率。",
        "title_zh": "EyeTell:通过眼球运动推断视频辅助触摸屏按键",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2018.html",
        "conf_title": "39th S&P 2018: San Francisco, CA, USA",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8418581/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP.2018.00005",
        "title": "The Rise of the Citizen Developer: Assessing the Security Impact of Online App Generators",
        "authors": "Marten Oltrogge, Erik Derr, Christian Stransky, Yasemin Acar, Sascha Fahl, Christian Rossow, Giancarlo Pellegrino, Sven Bugiel, Michael Backes",
        "abstract": "Mobile apps are increasingly created using online application generators (OAGs) that automate app development, distribution, and maintenance. These tools significantly lower the level of technical skill that is required for app development, which makes them particularly appealing to citizen developers, i.e., developers with little or no software engineering background. However, as the pervasiveness of these tools increases, so does their overall influence on the mobile ecosystem's security, as security lapses by such generators affect thousands of generated apps. The security of such generated apps, as well as their impact on the security of the overall app ecosystem, has not yet been investigated. We present the first comprehensive classification of commonly used OAGs for Android and show how to fingerprint uniquely generated apps to link them back to their generator. We thereby quantify the market penetration of these OAGs based on a corpus of 2,291,898 free Android apps from Google Play and discover that at least 11.1% of these apps were created using OAGs. Using a combination of dynamic, static, and manual analysis, we find that the services' app generation model is based on boilerplate code that is prone to reconfiguration attacks in 7/13 analyzed OAGs. Moreover, we show that this boilerplate code includes well-known security issues such as code injection vulnerabilities and insecure WebViews. Given the tight coupling of generated apps with their services' backends, we further identify security issues in their infrastructure. Due to the blackbox development approach, citizen developers are unaware of these hidden problems that ultimately put the end-users sensitive data and privacy at risk and violate the user's trust assumption. A particular worrisome result of our study is that OAGs indeed have a significant amplification factor for those vulnerabilities, notably harming the health of the overall mobile app ecosystem.",
        "files": {
            "openAccessPdf": "https://ieeexplore.ieee.org/ielx7/8418581/8418583/08418628.pdf"
        },
        "abstract_zh": "移动应用程序越来越多地使用在线应用程序生成器（OAG）自动化应用程序开发，分发和维护。 这些工具大大降低了应用程序开发所需的技术技能水平，这使得它们特别吸引了公民开发人员，即很少或没有软件工程背景的开发人员。 但是，随着这些工具的普遍性的增加，由于这些发电机的安全失速影响了数千个生成的应用程序，因此它们对移动生态系统安全的总体影响也会增加。 此类生成的应用程序的安全性及其对整个应用程序生态系统安全性的影响尚未得到调查。 我们介绍了第一个用于Android常用OAG的全面分类，并展示了如何指纹唯一生成的应用程序将其链接回发电机。 因此，我们根据Google Play的2,291,898个免费的Android应用程序的语料库来量化这些OAG的市场渗透，并发现使用OAGS创建了至少11.1％的这些应用程序。 使用动态，静态和手动分析的组合，我们发现Services的应用程序生成模型基于样板代码，该模型容易在分析的OAGS中重新配置攻击。 此外，我们表明此样板代码包括众所周知的安全问题，例如代码注入漏洞和不安全的WebViews。 鉴于生成的应用程序与其服务的后端紧密结合，我们进一步确定了其基础架构中的安全问题。 由于黑框开发方法，公民开发人员不知道这些隐藏的问题，这些问题最终使最终用户敏感的数据和隐私处于危险之中，并违反了用户的信任假设。 我们研究的一个特殊令人担忧的结果是，OAGS确实对这些漏洞具有重要的放大因素，特别是损害了整个移动应用程序生态系统的健康。",
        "title_zh": "公民开发者的崛起:评估在线应用生成器的安全影响",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2018.html",
        "conf_title": "39th S&P 2018: San Francisco, CA, USA",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8418581/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP.2018.00043",
        "title": "Study and Mitigation of Origin Stripping Vulnerabilities in Hybrid-postMessage Enabled Mobile Applications",
        "authors": "Guangliang Yang, Jeff Huang, Guofei Gu, Abner Mendoza",
        "abstract": "postMessage is popular in HTML5 based web apps to allow the communication between different origins. With the increasing popularity of the embedded browser (i.e., WebView) in mobile apps (i.e., hybrid apps), postMessage has found utility in these apps. However, different from web apps, hybrid apps have a unique requirement that their native code (e.g., Java for Android) also needs to exchange messages with web code loaded in WebView. To bridge the gap, developers typically extend postMessage by treating the native context as a new frame, and allowing the communication between the new frame and the web frames. We term such extended postMessage \"hybrid postMessage\" in this paper. We find that hybrid postMessage introduces new critical security flaws: all origin information of a message is not respected or even lost during the message delivery in hybrid postMessage. If adversaries inject malicious code into WebView, the malicious code may leverage the flaws to passively monitor messages that may contain sensitive information, or actively send messages to arbitrary message receivers and access their internal functionalities and data. We term the novel security issue caused by hybrid postMessage \"Origin Stripping Vulnerability\" (OSV). In this paper, our contributions are fourfold. First, we conduct the first systematic study on OSV. Second, we propose a lightweight detection tool against OSV, called OSV-Hunter. Third, we evaluate OSV-Hunter using a set of popular apps. We found that 74 apps implemented hybrid postMessage, and all these apps suffered from OSV, which might be exploited by adversaries to perform remote real-time microphone monitoring, data race, internal data manipulation, denial of service (DoS) attacks and so on. Several popular development frameworks, libraries (such as the Facebook React Native framework, and the Google cloud print library) and apps (such as Adobe Reader and WPS office) are impacted. Lastly, to mitigate OSV from the root, we design and implement three new postMessage APIs, called OSV-Free. Our evaluation shows that OSV-Free is secure and fast, and it is generic and resilient to the notorious Android fragmentation problem. We also demonstrate that OSV-Free is easy to use, by applying OSV-Free to harden the complex \"Facebook React Native\" framework. OSV-Free is open source, and its source code and more implementation and evaluation details are available online.",
        "files": {
            "openAccessPdf": "https://ieeexplore.ieee.org/ielx7/8418581/8418583/08418635.pdf"
        },
        "abstract_zh": "Postmessage在基于HTML5的Web应用程序中很受欢迎，可以允许不同起源之间的通信。 随着移动应用程序中嵌入式浏览器（即WebView）的日益普及（即混合应用程序），Postmessage在这些应用程序中发现了实用程序。 但是，与Web应用程序不同，Hybrid应用程序具有独特的要求，即其本机代码（例如，Android的Java）还需要与WebView中加载的Web代码交换消息。 为了弥合差距，开发人员通常通过将本地上下文视为新框架，并允许新框架和Web框架之间的通信来扩展术后。 我们在本文中称这种扩展后的后“混合后邮政邮记”。 我们发现混合邮政在介绍了新的关键安全缺陷：在混合邮政邮政随机邮件中的消息传递过程中，消息的所有来源信息均未尊重甚至丢失。 如果对手将恶意代码注入WebView，则恶意代码可能会利用这些缺陷来监视可能包含敏感信息的消息，或者主动将消息发送到任意消息接收器并访问其内部功能和数据。 我们认为由混合后的后期“起源剥离脆弱性”（OSV）造成的新型安全问题（OSV）。 在本文中，我们的贡献是四倍。 首先，我们对OSV进行了首次系统研究。 其次，我们提出了一种针对OSV的轻质检测工具，称为OSV猎人。 第三，我们使用一组流行的应用程序评估OSV猎人。 我们发现74个应用程序实施了混合后的邮件，并且所有这些应用程序都遭受了OSV的困扰，对手可能会利用这些应用程序来执行远程实时麦克风监控，数据竞赛，内部数据操纵，拒绝服务（DOS）攻击等。 影响了几个流行的开发框架，库（例如Facebook React本地框架和Google Cloud Print Library）和应用程序（例如Adobe Reader和WPS Office）受到影响。 最后，为了减轻根部的OSV，我们设计并实施了三个新的Postmessage API，称为无OSV。 我们的评估表明，无OSV是安全和快速的，它对臭名昭著的Android碎片化问题是一般且有弹性的。 我们还通过应用无OSV来硬化复杂的“ Facebook React Native”框架来证明无OSV易于使用。 无OSV是开源的，其源代码以及更多实施和评估详细信息可在线获得。",
        "title_zh": "支持混合后消息的移动应用中起点剥离漏洞的研究与缓解",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2018.html",
        "conf_title": "39th S&P 2018: San Francisco, CA, USA",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8418581/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP.2018.00039",
        "title": "Mobile Application Web API Reconnaissance: Web-to-Mobile Inconsistencies & Vulnerabilities",
        "authors": "Abner Mendoza, Guofei Gu",
        "abstract": "Modern mobile apps use cloud-hosted HTTP-based API services and heavily rely on the Internet infrastructure for data communication and storage. To improve performance and leverage the power of the mobile device, input validation and other business logic required for interfacing with web API services are typically implemented on the mobile client. However, when a web service implementation fails to thoroughly replicate input validation, it gives rise to inconsistencies that could lead to attacks that can compromise user security and privacy. Developing automatic methods of auditing web APIs for security remains challenging. In this paper, we present a novel approach for automatically analyzing mobile app-to-web API communication to detect inconsistencies in input validation logic between apps and their respective web API services. We present our system, WARDroid, which implements a static analysis-based web API reconnaissance approach to uncover inconsistencies on real world API services that can lead to attacks with severe consequences for potentially millions of users throughout the world. Our system utilizes program analysis techniques to automatically extract HTTP communication templates from Android apps that encode the input validation constraints imposed by the apps on outgoing web requests to web API services. WARDroid is also enhanced with blackbox testing of server validation logic to identify inconsistencies that can lead to attacks. We evaluated our system on a set of 10,000 popular free apps from the Google Play Store. We detected problematic logic in APIs used in over 4,000 apps, including 1,743 apps that use unencrypted HTTP communication. We further tested 1,000 apps to validate web API hijacking vulnerabilities that can lead to potential compromise of user privacy and security and found that millions of users are potentially affected from our sample set of tested apps.",
        "files": {
            "openAccessPdf": "https://ieeexplore.ieee.org/ielx7/8418581/8418583/08418636.pdf"
        },
        "abstract_zh": "现代移动应用程序使用基于HTTP的云主持的API服务，并在很大程度上依赖Internet基础架构来进行数据通信和存储。 为了提高性能并利用移动设备的功能，通常在移动客户端上实现了与Web API服务接口所需的输入验证和其他业务逻辑。 但是，当Web服务实现未能彻底复制输入验证时，它会导致不一致的情况，这可能会导致攻击，从而损害用户安全和隐私。 开发自动审核Web API以进行安全性仍然具有挑战性。 在本文中，我们提出了一种新颖的方法，用于自动分析移动应用到WEB API通信，以检测应用程序及其各自的Web API服务之间的输入验证逻辑中的不一致。 我们介绍了我们的系统Wardroid，该系统实现了基于静态分析的Web API侦察方法，以发现对现实世界中API服务的不一致之处，这可能会导致对全世界数百万用户的严重后果造成严重后果。 我们的系统利用程序分析技术自动从Android应用程序中提取HTTP通信模板，这些应用程序编码了该应用程序对Web API服务的输入验证约束。 通过黑框测试服务器验证逻辑也可以增强Wardroid，以识别可能导致攻击的不一致之处。 我们通过Google Play商店的10,000套受欢迎的免费应用程序评估了系统。 我们检测到4,000多个应用程序中使用的API中有问题的逻辑，其中包括使用未加密HTTP通信的1,743个应用程序。 我们进一步测试了1,000个应用程序，以验证Web API劫持漏洞，这些漏洞可能会导致用户隐私和安全性妥协，并发现数百万用户可能受到我们测试过的应用程序样本集的影响。",
        "title_zh": "移动应用程序Web API侦察:Web到移动的不一致性和漏洞",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2018.html",
        "conf_title": "39th S&P 2018: San Francisco, CA, USA",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8418581/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP.2016.25",
        "title": "You Get Where You're Looking for: The Impact of Information Sources on Code Security",
        "authors": "Yasemin Acar, Michael Backes, Sascha Fahl, Doowon Kim, Michelle L. Mazurek, Christian Stransky",
        "abstract": "Vulnerabilities in Android code -- including but not limited to insecure data storage, unprotected inter-component communication, broken TLS implementations, and violations of least privilege -- have enabled real-world privacy leaks and motivated research cataloguing their prevalence and impact. Researchers have speculated that appification promotes security problems, as it increasingly allows inexperienced laymen to develop complex and sensitive apps. Anecdotally, Internet resources such as Stack Overflow are blamed for promoting insecure solutions that are naively copy-pasted by inexperienced developers. In this paper, we for the first time systematically analyzed how the use of information resources impacts code security. We first surveyed 295 app developers who have published in the Google Play market concerning how they use resources to solve security-related problems. Based on the survey results, we conducted a lab study with 54 Android developers (students and professionals), in which participants wrote security-and privacy-relevant code under time constraints. The participants were assigned to one of four conditions: free choice of resources, Stack Overflow only, official Android documentation only, or books only. Those participants who were allowed to use only Stack Overflow produced significantly less secure code than those using, the official Android documentation or books, while participants using the official Android documentation produced significantly less functional code than those using Stack Overflow. To assess the quality of Stack Overflow as a resource, we surveyed the 139 threads our participants accessed during the study, finding that only 25% of them were helpful in solving the assigned tasks and only 17% of them contained secure code snippets. In order to obtain ground truth concerning the prevalence of the secure and insecure code our participants wrote in the lab study, we statically analyzed a random sample of 200,000 apps from Google Play, finding that 93.6% of the apps used at least one of the API calls our participants used during our study. We also found that many of the security errors made by our participants also appear in the wild, possibly also originating in the use of Stack Overflow to solve programming problems. Taken together, our results confirm that API documentation is secure but hard to use, while informal documentation such as Stack Overflow is more accessible but often leads to insecurity. Given time constraints and economic pressures, we can expect that Android developers will continue to choose those resources that are easiest to use, therefore, our results firmly establish the need for secure-but-usable documentation.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android代码中的漏洞 - 包括但不限于不安全的数据存储，未受保护的组件间通信，破碎的TLS实施以及最少特权的违规行为 - 使现实世界中的隐私泄漏和动机研究对其流行和影响进行了分类。 研究人员推测，应用程序会促进安全问题，因为它越来越多地允许没有经验的外行开发复杂和敏感的应用程序。 有趣的是，诸如Stack Overflow之类的互联网资源被指责为促进不受欢迎的开发人员仿制的不安全解决方案。 在本文中，我们首次系统地分析了信息资源的使用如何影响代码安全性。 我们首先调查了295个应用程序开发人员，他们在Google Play市场上发表了有关如何使用资源解决与安全有关的问题的开发人员。 根据调查结果，我们对54名Android开发人员（学生和专业人员）进行了实验室研究，参与者在时间限制下编写了与安全和隐私相关的代码。 将参与者分配到四个条件之一：免费选择资源，仅堆叠溢出，仅官方Android文档或仅书籍。 那些被允许仅使用堆栈溢出的参与者的安全代码明显少于官方的Android文档或书籍，而使用官方Android文档的参与者的功能代码明显少于使用Stack Overflow的参与者。 为了评估堆栈溢出作为资源的质量，我们调查了研究期间参与者访问的139个线程，发现其中只有25％有助于解决分配的任务，其中只有17％包含安全的代码段。 为了获得有关我们参与者在实验室研究中撰写的安全和不安全代码的普遍性的基础真相，我们静态地分析了从Google Play中的200,000个应用程序的随机样本，发现93.6％的应用程序使用了至少一个API 在我们的学习过程中打电话给我们的参与者使用。 我们还发现，我们的参与者犯下的许多安全错误也出现在野外，也可能起源于使用堆栈溢出来解决编程问题。 综上所述，我们的结果证实了API文档是安全但难以使用的，而非正式文档（例如堆栈溢出）更容易访问，但通常会导致不安全感。 考虑到时间限制和经济压力，我们可以预期，Android开发人员将继续选择最容易使用的资源，因此，我们的结果牢固地确定了对可安全和可使用的文档的需求。",
        "title_zh": "你得到了你想要的:信息来源对代码安全性的影响",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2016.html",
        "conf_title": "37th S&P 2016: San Jose, CA, USA",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7528194/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP.2016.29",
        "title": "Following Devil's Footprints: Cross-Platform Analysis of Potentially Harmful Libraries on Android and iOS",
        "authors": "Kai Chen, Xueqiang Wang, Yi Chen, Peng Wang, Yeonjoon Lee, XiaoFeng Wang, Bin Ma, Aohui Wang, Yingjun Zhang, Wei Zou",
        "abstract": "It is reported recently that legitimate libraries are repackaged for propagating malware. An in-depth analysis of such potentially-harmful libraries (PhaLibs), however, has never been done before, due to the challenges in identifying those libraries whose code can be unavailable online (e.g., removed from the public repositories, spreading underground, etc.). Particularly, for an iOS app, the library it integrates cannot be trivially recovered from its binary code and cannot be analyzed by any publicly available anti-virus (AV) systems. In this paper, we report the first systematic study on PhaLibs across Android and iOS, based upon a key observation that many iOS libraries have Android versions that can potentially be used to understand their behaviors and the relations between the libraries on both sides. To this end, we utilize a methodology that first clusters similar packages from a large number of popular Android apps to identify libraries, and strategically analyze them using AV systems to find PhaLibs. Those libraries are then used to search for their iOS counterparts within Apple apps based upon the invariant features shared cross platforms. On each discovered iOS PhaLib, our approach further identifies its suspicious behaviors that also appear on its Android version and uses the AV system on the Android side to confirm that it is indeed potentially harmful. Running our methodology on 1.3 million Android apps and 140,000 popular iOS apps downloaded from 8 markets, we discovered 117 PhaLibs with 1008 variations on Android and 23 PhaLibs with 706 variations on iOS. Altogether, the Android PhaLibs is found to infect 6.84% of Google Play apps and the iOS libraries are embedded within thousands of iOS apps, 2.94% among those from the official Apple App Store. Looking into the behaviors of the PhaLibs, not only do we discover the recently reported suspicious iOS libraries such as mobiSage, but also their Android counterparts and 6 other back-door libraries never known before. Those libraries are found to contain risky behaviors such as reading from their host apps' keychain, stealthily recording audio and video and even attempting to make phone calls. Our research shows that most Android-side harmful behaviors have been preserved on their corresponding iOS libraries, and further identifies new evidence about libraries repackaging for harmful code propagations on both sides.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "据报道，合法图书馆被重新包装以传播恶意软件。 但是，由于识别那些无法在线无法使用的代码（例如，从公共存储库中删除，在地下传播等）所面临的挑战，对此类潜在的库库（Phalibs）的深入分析（Phalibs）从未做过。 ）。 特别是，对于iOS应用程序，其集成的库不能从其二进制代码中琐碎地恢复，也不能由任何公开可用的反病毒系统（AV）系统分析。 在本文中，我们报告了对Android和iOS的Phalibs进行的首次系统研究，基于一个关键观察结果，即许多iOS库都具有Android版本，这些版本有可能用于了解其行为以及双方库之间的关系。 为此，我们利用了一种方法，该方法首先要从大量流行的Android应用程序中类似的包装来识别库，并使用AV系统来查找Phalibs进行战略性分析。 然后，这些库可根据不变特征共享的跨平台在Apple应用程序中搜索其iOS对应物。 在每个发现的ios Phalib上，我们的方法进一步识别出其可疑行为，这些行为也出现在其Android版本上，并在Android方面使用AV系统，以确认其确实有可能有害。 在从8个市场下载的130万个Android应用程序和140,000个流行的iOS应用程序上运行我们的方法，我们发现了117个Phalibs，在Android上有1008个变化，23个Phalibs和23个Phalibs，iOS上有706个变化。 总共发现，Android Phalibs感染了6.84％的Google Play应用程序，并且iOS库嵌入了数千个iOS应用程序中，而官方Apple App Store的iOS应用程序则为2.94％。 研究了Phalibs的行为，我们不仅发现了最近报道的可疑iOS库，例如Mobisage，而且还发现了他们的Android同行以及其他6个其他后门库。 发现这些图书馆包含风险行为，例如从他们的主机应用程序的钥匙串中阅读，偷偷录制音频和视频，甚至尝试拨打电话。 我们的研究表明，大多数Android侧的有害行为都保留在其相应的iOS库上，并进一步确定了有关库重新包装有害代码传播的新证据。",
        "title_zh": "追随魔鬼的足迹:Android和iOS上潜在有害库的跨平台分析",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2016.html",
        "conf_title": "37th S&P 2016: San Jose, CA, USA",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7528194/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP.2016.30",
        "title": "TriggerScope: Towards Detecting Logic Bombs in Android Applications",
        "authors": "Yanick Fratantonio, Antonio Bianchi, William K. Robertson, Engin Kirda, Christopher Kruegel, Giovanni Vigna",
        "abstract": "Android is the most popular mobile platform today, and it is also the mobile operating system that is most heavily targeted by malware. Existing static analyses are effective in detecting the presence of most malicious code and unwanted information flows. However, certain types of malice are very difficult to capture explicitly by modeling permission sets, suspicious API calls, or unwanted information flows. One important type of such malice is malicious application logic, where a program (often subtly) modifies its outputs or performs actions that violate the expectations of the user. Malicious application logic is very hard to identify without a specification of the \"normal,\" expected functionality of the application. We refer to malicious application logic that is executed, or triggered, only under certain (often narrow) circumstances as a logic bomb. This is a powerful mechanism that is commonly employed by targeted malware, often used as part of APTs and state-sponsored attacks: in fact, in this scenario, the malware is designed to target specific victims and to only activate under certain circumstances. In this paper, we make a first step towards detecting logic bombs. In particular, we propose trigger analysis, a new static analysis technique that seeks to automatically identify triggers in Android applications. Our analysis combines symbolic execution, path predicate reconstruction and minimization, and inter-procedural control-dependency analysis to enable the precise detection and characterization of triggers, and it overcomes several limitations of existing approaches. We implemented a prototype of our analysis, called TriggerScope, and we evaluated it over a large corpus of 9,582 benign apps from the Google Play Store and a set of trigger-based malware, including the recently-discovered HackingTeam's RCSAndroid advanced malware. Our system is capable of automatically identify several interesting time-, location-, and SMS-related triggers, is affected by a low false positive rate (0.38%), and it achieves 100% detection rate on the malware set. We also show how existing approaches, specifically when tasked to detect logic bombs, are affected by either a very high false positive rate or false negative rate. Finally, we discuss the logic bombs identified by our analysis, including two previously-unknown backdoors in benign apps.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android是当今最受欢迎的移动平台，它也是最受恶意软件针对的移动操作系统。 现有的静态分析可有效地检测出大多数恶意代码和不需要的信息流的存在。 但是，某些类型的恶意很难通过建模权限集，可疑的API调用或不需要的信息流来明确捕获。 这种恶意的一种重要类型是恶意应用程序逻辑，该程序（通常巧妙）修改其输出或执行违反用户期望的操作。 在没有规定应用程序的“正常”期望功能的情况下，恶意应用程序逻辑很难识别。 我们将仅在某些（通常狭窄）的情况下执行或触发的恶意应用程序逻辑作为逻辑炸弹。 这是一种强大的机制，通常由目标恶意软件使用，通常用作APT和国家赞助的攻击的一部分：实际上，在这种情况下，恶意软件旨在针对特定的受害者，并且仅在某些情况下激活。 在本文中，我们迈出了检测逻辑炸弹的第一步。 特别是，我们提出了触发分析，这是一种新的静态分析技术，旨在自动识别Android应用中的触发因素。 我们的分析结合了符号执行，谓词重建和最小化以及术间控制依赖性分析，以实现触发器的精确检测和表征，并克服了现有方法的几个限制。 我们实施了分析的原型，称为TriggerScope，并通过Google Play商店的9,582个良性应用程序和一套基于触发的恶意软件进行了评估，其中包括最近发现的HackingTeam的RCSandroid Advanced Advanced Advanced恶意软件。 我们的系统能够自动识别几个有趣的时间，位置和与SMS相关的触发器，受到较低的假正率（0.38％）的影响，并且在恶意软件集合中达到了100％的检测率。 我们还展示了现有的方法，特别是在检测逻辑炸弹的任务时如何受到非常高的假正率或假阴性率的影响。 最后，我们讨论了通过我们的分析确定的逻辑炸弹，包括良性应用程序中的两个以前未知的后门。",
        "title_zh": "TriggerScope:检测Android应用程序中的逻辑炸弹",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2016.html",
        "conf_title": "37th S&P 2016: San Jose, CA, USA",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7528194/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP.2016.31",
        "title": "Inferring User Routes and Locations Using Zero-Permission Mobile Sensors",
        "authors": "Sashank Narain, Triet D. Vo-Huu, Kenneth Block, Guevara Noubir",
        "abstract": "Leakage of user location and traffic patterns is a serious security threat with significant implications on privacy as reported by recent surveys and identified by the US Congress Location Privacy Protection Act of 2014. While mobile phones can restrict the explicit access to location information to applications authorized by the user, they are ill-equipped to protect against side-channel attacks. In this paper, we show that a zero-permissions Android app can infer vehicular users' location and traveled routes, with high accuracy and without the users' knowledge, using gyroscope, accelerometer, and magnetometer information. We modeled this problem as a maximum likelihood route identification on a graph. The graph is generated from the OpenStreetMap publicly available database of roads. Our route identification algorithms output both a ranked list of potential routes as well a ranked list of route-clusters. Through extensive simulations over 11 cities, we show that for most cities with probability higher than 50% it is possible to output a short list of 10 routes containing the traveled route. In real driving experiments (over 980 Km) in the cities of Boston (resp. Waltham), Massachusetts, we report a probability of 30% (resp. 60%) of inferring a list of 10 routes containing the true route.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "用户位置和流量模式的泄漏是一个严重的安全威胁 用户，他们的能力不足，无法防止侧通道攻击。 在本文中，我们表明，零通讯Android应用程序可以使用陀螺仪，加速度计和磁力计信息来推断车辆用户的位置和旅行路线，并且没有用户的知识。 我们将此问题建模为图表上的最大似然路线识别。 该图是从OpenStreetMap公开可用的道路数据库生成的。 我们的路线标识算法都输出了潜在路线的排名列表以及排名的路线群体列表。 通过在11个城市的大量模拟中，我们表明，对于大多数概率高于50％的城市，可以输出包含旅行路线的10条路线的简短列表。 在马萨诸塞州波士顿城市（分别是沃尔瑟姆）城市的实际驾驶实验（超过980公里）中，我们报告说，推断包含真正途径的10条路线的列表的概率为30％（分别为60％）。",
        "title_zh": "使用零许可移动传感器推断用户路线和位置",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2016.html",
        "conf_title": "37th S&P 2016: San Jose, CA, USA",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7528194/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP.2016.32",
        "title": "No Pardon for the Interruption: New Inference Attacks on Android Through Interrupt Timing Analysis",
        "authors": "Wenrui Diao, Xiangyu Liu, Zhou Li, Kehuan Zhang",
        "abstract": "Many new specialized hardware components have been integrated into Android smartphones to improve mobility and usability, such as touchscreen, Bluetooth module, and NFC controller. At the system level, the kernel of Android is built on Linux and inherits its device management mechanisms. However, the security implications surfaced from the integration of new hardware components and the tailored Linux kernel are not fully understood. In this paper, we make the first attempt to evaluate such implications. As a result, we identify a critical information leakage channel from the interrupt handling mechanism, which can be exploited to launch inference attacks without any permission. On Android, all reported interrupts are counted by Linux kernel and the statistical information is logged in a system file /proc/interrupts, which is public to any process. Such statistical information reveals the running status of all integrated devices, and could be exploited by attackers to infer sensitive information passing through them. To assess this new threat, we propose a general attack approach -- interrupt timing analysis and apply it to interrupt logs. As showcases, we present two concrete inference attacks against user's unlock pattern and foreground app status respectively. Through analyzing the interrupt time series produced from touchscreen controller, attacker's chance of cracking user's unlock pattern is increased substantially. The interrupt time series produced from Display Sub-System reveals unique UI refreshing patterns and could be leveraged as fingerprints to identify the app running in the foreground. Such information can serve as the stepping stone for the subsequent phishing attacks. The experiment results suggest our inference attacks are highly effective, and the risks should be mitigated immediately.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "许多新的专业硬件组件已集成到Android智能手机中，以提高移动性和可用性，例如触摸屏，蓝牙模块和NFC控制器。 在系统级别上，Android的内核建立在Linux上，并继承其设备管理机制。 但是，新硬件组件和量身定制的Linux内核的集成所产生的安全含义尚未完全了解。 在本文中，我们首次尝试评估这种含义。 结果，我们从中断处理机制中确定了关键信息泄漏渠道，该通道可以在未经任何许可的情况下被利用以启动推理攻击。 在Android上，所有报告的中断都由Linux内核计数，并且统计信息在系统文件 /PROC /中断中记录在任何过程中。 这样的统计信息揭示了所有集成设备的运行状态，并且可以被攻击者利用以推断通过它们的敏感信息。 为了评估这一新威胁，我们提出了一种通用攻击方法 - 中断定时分析并将其应用于中断日志。 作为展示，我们分别针对用户的解锁模式和前景应用程序状态提出了两次具体推理攻击。 通过分析触摸屏控制器产生的中断时间序列，攻击者破解用户解锁模式的机会大大增加了。 从显示子系统产生的中断时间序列揭示了独特的UI刷新模式，并且可以用作指纹识别在前景中运行的应用程序。 这些信息可以用作随后的网络钓鱼攻击的垫脚石。 实验结果表明我们的推论攻击非常有效，应立即降低风险。",
        "title_zh": "不原谅中断:通过中断时序分析对Android的新推理攻击",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2016.html",
        "conf_title": "37th S&P 2016: San Jose, CA, USA",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7528194/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP.2016.33",
        "title": "SoK: Lessons Learned from Android Security Research for Appified Software Platforms",
        "authors": "Yasemin Acar, Michael Backes, Sven Bugiel, Sascha Fahl, Patrick D. McDaniel, Matthew Smith",
        "abstract": "Android security and privacy research has boomed in recent years, far outstripping investigations of other appified platforms. However, despite this attention, research efforts are fragmented and lack any coherent evaluation framework. We present a systematization of Android security and privacy research with a focus on the appification of software systems. To put Android security and privacy research into context, we compare the concept of appification with conventional operating system and software ecosystems. While appification has improved some issues (e.g., market access and usability), it has also introduced a whole range of new problems and aggravated some problems of the old ecosystems (e.g., coarse and unclear policy, poor software development practices). Some of our key findings are that contemporary research frequently stays on the beaten path instead of following unconventional and often promising new routes. Many security and privacy proposals focus entirely on the Android OS and do not take advantage of the unique features and actors of an appified ecosystem, which could be used to roll out new security mechanisms less disruptively. Our work highlights areas that have received the larger shares of attention, which attacker models were addressed, who is the target, and who has the capabilities and incentives to implement the countermeasures. We conclude with lessons learned from comparing the appified with the old world, shedding light on missed opportunities and proposing directions for future research.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "近年来，Android安全和隐私研究蓬勃发展，对其他附属平台的调查远远超过了调查。 然而，尽管有这种关注，研究工作还是分散的，缺乏任何连贯的评估框架。 我们介绍了Android安全和隐私研究的系统化，重点是软件系统的应用。 为了将Android安全和隐私研究置于上下文中，我们将应用程序化的概念与常规操作系统和软件生态系统进行比较。 尽管应用程序改善了一些问题（例如，市场访问和可用性），但它也引入了一系列新问题，并加剧了旧生态系统的一些问题（例如，粗糙和不清楚的政策，糟糕的软件开发实践）。 我们的一些主要发现是，当代研究经常停留在人迹罕至的道路上，而不是遵循非常规且经常有希望的新路线。 许多安全和隐私提案完全集中在Android OS上，并且不利用适用的生态系统的独特功能和参与者，可用于破坏新的安全机制。 我们的工作重点介绍了已经获得了更大关注份额的领域，这些领域是攻击者模型的解决方案，谁是目标，谁具有实施对策的能力和激励措施。 我们以将其与旧世界进行比较，阐明错过的机会并提出未来研究的指示来汲取的教训。",
        "title_zh": "SoK:从应用软件平台的Android安全研究中吸取的教训",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2016.html",
        "conf_title": "37th S&P 2016: San Jose, CA, USA",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7528194/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SPW.2016.32",
        "title": "Detection of Mobile Malware: An Artificial Immunity Approach",
        "authors": "James Brown, Mohd Anwar, Gerry V. Dozier",
        "abstract": "Inspired by the human immune system, we explore the development of a new multiple detector set artificial immune system (mAIS) for the detection of mobile malware based on the information flows in Android apps. mAISs differ from conventional AISs in that multiple detector sets are evolved concurrently via negative selection. Typically, the first detector set is composed of detectors that match information flows associated with malicious apps while the second detector set is composed of detectors that match the information flows associated with benign apps. The mAIS presented in this paper incorporates feature selection along with a negative selection technique known as the split detector method (SDM). This new mAIS has been compared with a variety of conventional AISs and mAISs using a dataset of information flows captured from malicious and benign Android applications. Our preliminary results show that the newly designed mAIS outperforms the conventional AISs and mAISs in terms of accuracy and false positive rate of malware detection. This paper ends with a discussion of how mAISs can be used to solve dynamic cybersecurity problems as well as a discussion of our future research. This approach achieved 93.33% accuracy with a 0.00% false positive rate.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "受人免疫系统的启发，我们探索了新的多重检测器集人工免疫系统（MAI）的开发，用于根据Android应用中的信息流检测移动恶意软件。 MAISS与常规AISS不同，因为多个检测器集是通过负选择同时进化的。 通常，第一个检测器集由与恶意应用程序相关的信息流匹配的检测器组成，而第二个检测器集由与良性应用相关的信息流匹配的检测器组成。 本文介绍的MAI结合了特征选择以及一种称为拆分检测器方法（SDM）的负选择技术。 使用了来自恶意和良性Android应用程序捕获的信息流的数据集，将此新的MAI与各种常规的AISS和MAISS进行了比较。 我们的初步结果表明，新设计的MAI在准确性和虚假的恶意软件检测率方面优于常规的AISS和MAISS。 本文以讨论如何使用MAIS来解决动态网络安全问题以及对我们未来研究的讨论结束。 该方法以0.00％的假阳性率达到93.33％的精度。",
        "title_zh": "移动恶意软件检测:一种人工免疫方法",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/spw2016.html",
        "conf_title": "37th S&P 2016: San Jose, CA, USA - Workshops",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7517741/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SPW.2016.41",
        "title": "In Search of Shotgun Parsers in Android Applications",
        "authors": "Katherine Underwood, Michael E. Locasto",
        "abstract": "In any software system, unprincipled handling of input data presents significant security risks. This is particularly true in the case of mobile platforms, where the prevalence of applications developed by amateur developers in combination with devices that hold a wealth of users' personal information can lead to significant security and privacy concerns. Of particular concern is the so-called shotgun parser pattern, in which input recognition is intermixed with input processing throughout the code base. In this work, we take the first steps toward building a tool for identification of shotgun parsers in Android applications. By extending the FlowDroid framework for static taint analysis, we are able to quantify the spread of untrusted data through 55 applications selected from 15 categories on the Google Play store. Our analysis reveals that on average, most untrusted input propagates a relatively short distance within the application code. However, we also find several specific instances of very long data propagations. In addition to providing a first look at the \"state of parsing\" in a variety of Android applications, our work in this paper lays the groundwork for more precise shotgun parser signature recognition.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "在任何软件系统中，未经原理的输入数据处理都会带来重大的安全风险。 在移动平台的情况下，尤其如此，业余开发人员与拥有大量用户个人信息的设备共同开发的应用程序的流行率可能会导致重大的安全性和隐私问题。 特别令人担忧的是所谓的shot弹枪解析器模式，其中输入识别与整个代码库中的输入处理相结合。 在这项工作中，我们迈出了第一步，以构建用于识别Android应用中的shot弹枪解析器的工具。 通过扩展静态污染分析的FlowDroid框架，我们可以通过从Google Play商店中的15个类别中选择的55个应用程序量化不信任数据的传播。 我们的分析表明，平均而言，最不受信任的输入在应用程序代码中传播了相对较短的距离。 但是，我们还发现了一些很长的数据传播的特定实例。 除了首先查看各种Android应用中的“解析状态”外，我们在本文中的工作还为更精确的shot弹枪放射线签名识别奠定了基础。",
        "title_zh": "在Android应用程序中搜索猎枪解析器",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/spw2016.html",
        "conf_title": "37th S&P 2016: San Jose, CA, USA - Workshops",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7517741/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SPW.2016.31",
        "title": "Target Fragmentation in Android Apps",
        "authors": "Patrick Mutchler, Yeganeh Safaei, Adam Doupé, John C. Mitchell",
        "abstract": "Android apps declare a target version of the Android run-time platform. When run on devices with more recent Android versions, apps are executed in a compatibility mode that attempts to mimic the behavior of the older target version. This design has serious security consequences. Apps that target outdated Android versions disable important security changes to the Android platform. We call the problem of apps targeting outdated Android versions the target fragmentation problem. We analyze a dataset of 1,232,696 free Android apps collected between May, 2012 and December, 2015 and show that the target fragmentation problem is a serious concern across the entire app ecosystem and has not changed considerably in several years. In total, 93% of current apps target out-of-date platform versions and have a mean outdatedness of 686 days, 79% of apps are already out-of-date on the day they are uploaded to the app store. Finally, we examine seven security related changes to the Android platform that are disabled in apps that target outdated platform versions and show that target fragmentation hamstrings attempts to improve the security of Android apps.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android应用程序声明了Android运行时平台的目标版本。 当在具有最新Android版本的设备上运行时，应用程序将以兼容模式执行，该应用程序试图模仿旧目标版本的行为。 该设计具有严重的安全后果。 针对过时的Android版本的应用程序禁用了对Android平台的重要安全性更改。 我们称针对过时的Android版本的应用程序问题为目标碎片问题。 我们分析了一个在2012年5月，2012年5月至2015年12月之间收集的1,232,696个免费的Android应用的数据集，并表明目标碎片化问题在整个应用程序生态系统上是一个严重关注的问题，并且在几年内没有发生很大变化。 总共有93％的当前应用程序目标超越平台版本，平均过时性为686天，在将其上传到App Store的那一天，已有79％的应用程序已经过时了。 最后，我们研究了针对过时平台版本的应用程序中禁用的Android平台的七个与安全性相关的更改，并表明Target Obrantation Hamstrings试图提高Android应用程序的安全性。",
        "title_zh": "Android应用中的目标碎片化",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/spw2016.html",
        "conf_title": "37th S&P 2016: San Jose, CA, USA - Workshops",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7517741/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SPW.2016.40",
        "title": "A Study of Grayware on Google Play",
        "authors": "Benjamin Andow, Adwait Nadkarni, Blake Bassett, William Enck, Tao Xie",
        "abstract": "While there have been various studies identifying and classifying Android malware, there is limited discussion of the broader class of apps that fall in a gray area. Mobile grayware is distinct from PC grayware due to differences in operating system properties. Due to mobile grayware's subjective nature, it is difficult to identify mobile grayware via program analysis alone. Instead, we hypothesize enhancing analysis with text analytics can effectively reduce human effort when triaging grayware. In this paper, we design and implement heuristics for seven main categories of grayware. We then use these heuristics to simulate grayware triage on a large set of apps from Google Play. We then present the results of our empirical study, demonstrating a clear problem of grayware. In doing so, we show how even relatively simple heuristics can quickly triage apps that take advantage of users in an undesirable way.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "尽管已经进行了各种识别和分类Android恶意软件的研究，但对落在灰色区域的更广泛的应用程序的讨论有限。 由于操作系统属性的差异，移动灰色软件与PC灰色软件不同。 由于移动灰色的主观性质，仅通过程序分析很难识别移动灰色软件。 取而代之的是，我们假设通过文本分析来增强分析可以有效地减少灰软件分类时的人类努力。 在本文中，我们为七个主要类别的灰色软件设计和实施启发式方法。 然后，我们使用这些启发式方法在Google Play的大量应用程序上模拟了灰色软件。 然后，我们介绍了我们的实证研究结果，证明了一个明显的灰色问题问题。 在此过程中，我们展示了甚至相对简单的启发式方法如何快速以不良方式利用用户的分类应用程序。",
        "title_zh": "Google Play上的灰色软件研究",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/spw2016.html",
        "conf_title": "37th S&P 2016: San Jose, CA, USA - Workshops",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7517741/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SPW.2016.25",
        "title": "DroidScribe: Classifying Android Malware Based on Runtime Behavior",
        "authors": "Santanu Kumar Dash, Guillermo Suarez-Tangil, Salahuddin J. Khan, Kimberly Tam, Mansour Ahmadi, Johannes Kinder, Lorenzo Cavallaro",
        "abstract": "The Android ecosystem has witnessed a surge in malware, which not only puts mobile devices at risk but also increases the burden on malware analysts assessing and categorizing threats. In this paper, we show how to use machine learning to automatically classify Android malware samples into families with high accuracy, while observing only their runtime behavior. We focus exclusively on dynamic analysis of runtime behavior to provide a clean point of comparison that is dual to static approaches. Specific challenges in the use of dynamic analysis on Android are the limited information gained from tracking low-level events and the imperfect coverage when testing apps, e.g., due to inactive command and control servers. We observe that on Android, pure system calls do not carry enough semantic content for classification and instead rely on lightweight virtual machine introspection to also reconstruct Android-level inter-process communication. To address the sparsity of data resulting from low coverage, we introduce a novel classification method that fuses Support Vector Machines with Conformal Prediction to generate high-accuracy prediction sets where the information is insufficient to pinpoint a single family.",
        "files": {
            "openAccessPdf": "https://pearl.plymouth.ac.uk/bitstream/10026.1/16066/1/DroidScribe%20Classifying%20Android%20Malware%20Based%20on%20Runtime%20Behavior%20-%20MoST2016.pdf"
        },
        "abstract_zh": "Android生态系统目睹了恶意软件的激增，这不仅使移动设备处于危险之中，而且增加了恶意软件分析师评估和分类威胁的负担。 在本文中，我们展示了如何使用机器学习将Android恶意软件样本自动分类为具有高精度的家庭，同时仅观察其运行时行为。 我们专注于对运行时行为的动态分析，以提供对静态方法双重比较的简洁比较点。 在Android上使用动态分析的具体挑战是从跟踪低级事件和测试应用程序时的不完善覆盖范围所获得的有限信息，例如由于不活动的命令和控制服务器。 我们观察到，在Android上，纯系统调用没有足够的语义内容来分类，而是依靠轻巧的虚拟机内省来重建Android级别的跨程序间通信。 为了解决低覆盖范围引起的数据的稀疏性，我们引入了一种新型的分类方法，该方法将支持向量机的支持机器具有共形预测，从而生成高智度预测集，而信息不足以确定一个家庭。",
        "title_zh": "DroidScribe:基于运行时行为对Android恶意软件进行分类",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/spw2016.html",
        "conf_title": "37th S&P 2016: San Jose, CA, USA - Workshops",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7517741/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SPW.2016.33",
        "title": "Analysis of Code Heterogeneity for High-Precision Classification of Repackaged Malware",
        "authors": "Ke Tian, Danfeng Yao, Barbara G. Ryder, Gang Tan",
        "abstract": "During repackaging, malware writers statically inject malcode and modify the control flow to ensure its execution. Repackaged malware is difficult to detect by existing classification techniques, partly because of their behavioral similarities to benign apps. By exploring the app's internal different behaviors, we propose a new Android repackaged malware detection technique based on code heterogeneity analysis. Our solution strategically partitions the code structure of an app into multiple dependence-based regions (subsets of the code). Each region is independently classified on its behavioral features. We point out the security challenges and design choices for partitioning code structures at the class and method level graphs, and present a solution based on multiple dependence relations. We have performed experimental evaluation with over 7,542 Android apps. For repackaged malware, our partition-based detection reduces false negatives (i.e., missed detection) by 30-fold, when compared to the non-partition-based approach. Overall, our approach achieves a false negative rate of 0.35% and a false positive rate of 2.97%.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "在重新包装期间，恶意软件作者静态注射恶意表明并修改控制流以确保其执行。 重新包装的恶意软件很难通过现有分类技术检测到，部分原因是它们与良性应用程序的行为相似性。 通过探索应用程序的内部不同行为，我们提出了一种基于代码异质性分析的新的Android重新包装的恶意软件检测技术。 我们的解决方案从战略上将应用程序的代码结构划分为基于多个基于依赖关系的区域（代码的子集）。 每个区域都根据其行为特征进行独立分类。 我们指出了在类和方法级别图表上分区代码结构的安全挑战和设计选择，并根据多个依赖关系提供了解决方案。 我们已经对超过7,542个Android应用进行了实验评估。 对于重新包装的恶意软件，与基于非分区的方法相比，我们基于分区的检测将假否定性（即错过检测）降低了30倍。 总体而言，我们的方法达到了0.35％的假负率，假正率为2.97％。",
        "title_zh": "面向恶意软件高精度分类的代码异构性分析",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/spw2016.html",
        "conf_title": "37th S&P 2016: San Jose, CA, USA - Workshops",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7517741/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP.2015.60",
        "title": "Effective Real-Time Android Application Auditing",
        "authors": "Mingyuan Xia, Lu Gong, Yuanhao Lyu, Zhengwei Qi, Xue Liu",
        "abstract": "Mobile applications can access both sensitive personal data and the network, giving rise to threats of data leaks. App auditing is a fundamental program analysis task to reveal such leaks. Currently, static analysis is the de facto technique which exhaustively examines all data flows and pinpoints problematic ones. However, static analysis generates false alarms for being over-estimated and requires minutes or even hours to examine a real app. These shortcomings greatly limit the usability of automatic app auditing. To overcome these limitations, we design AppAudit that relies on the synergy of static and dynamic analysis to provide effective real-time app auditing. AppAudit embodies a novel dynamic analysis that can simulate the execution of part of the program and perform customized checks at each program state. AppAudit utilizes this to prune false positives of an efficient but over-estimating static analysis. Overall, AppAudit makes app auditing useful for app market operators, app developers and mobile end users, to reveal data leaks effectively and efficiently. We apply AppAudit to more than 1,000 known malware and 400 real apps from various markets. Overall, AppAudit reports comparative number of true data leaks and eliminates all false positives, while being 8.3x faster and using 90% less memory compared to existing approaches. AppAudit also uncovers 30 data leaks in real apps. Our further study reveals the common patterns behind these leaks: 1) most leaks are caused by 3rd-party advertising modules; 2) most data are leaked with simple unencrypted HTTP requests. We believe AppAudit serves as an effective tool to identify data-leaking apps and provides implications to design promising runtime techniques against data leaks.",
        "files": {
            "openAccessPdf": "https://ieeexplore.ieee.org/ielx7/7160813/7163005/07163067.pdf"
        },
        "abstract_zh": "移动应用程序可以访问敏感的个人数据和网络，从而引起数据泄漏的威胁。 应用程序审计是揭示此类泄漏的基本程序分析任务。 当前，静态分析是事实上的技术，它详尽地研究了所有数据流并查明有问题的技术。 但是，静态分析会产生错误的警报，以使其被高估，并且需要数分钟甚至数小时才能检查真实的应用程序。 这些缺点极大地限制了自动应用审核的可用性。 为了克服这些限制，我们设计了依赖静态和动态分析协同作用的Appaudit，以提供有效的实时应用程序审核。 Appaudit体现了一种新颖的动态分析，该分析可以模拟程序的一部分执行并在每个程序状态下执行自定义检查。 Appaudit利用此方法来修剪有效但高估的静态分析的误报。 总体而言，Appaudit使应用程序审核对应用程序市场运营商，应用程序开发人员和移动最终用户有用，以有效，高效地揭示数据泄漏。 我们将Appaudit应用于来自各个市场的1,000多个已知恶意软件和400个真实应用程序。 总体而言，Appaudit报告了真实数据泄漏的比较数量，并消除了所有误报，而与现有方法相比，速度更快8.3倍，使用记忆少90％。 Appaudit还发现了实际应用中的30个数据泄漏。 我们的进一步研究揭示了这些泄漏背后的常见模式：1）大多数泄漏是由第三方广告模块引起的； 2）大多数数据被简单的未加密HTTP请求泄漏。 我们认为，Appaudit是识别数据渗透应用程序的有效工具，并为设计有希望的运行时技术提供了影响，以防止数据泄漏。",
        "title_zh": "有效的实时Android应用审计",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2015.html",
        "conf_title": "36th S&P 2015: San Jose, CA, USA",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7160813/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP.2015.61",
        "title": "Leave Me Alone: App-Level Protection against Runtime Information Gathering on Android",
        "authors": "Nan Zhang, Kan Yuan, Muhammad Naveed, Xiao-yong Zhou, XiaoFeng Wang",
        "abstract": "Stealing of sensitive information from apps is always considered to be one of the most critical threats to Android security. Recent studies show that this can happen even to the apps without explicit implementation flaws, through exploiting some design weaknesses of the operating system, e.g., Shared communication channels such as Bluetooth, and side channels such as memory and network-data usages. In all these attacks, a malicious app needs to run side-by-side with the target app (the victim) to collect its runtime information. Examples include recording phone conversations from the phone app, gathering WebMD's data usages to infer the disease condition the user looks at, etc. This runtime-information-gathering (RIG) threat is realistic and serious, as demonstrated by prior research and our new findings, which reveal that the malware monitoring popular Android-based home security systems can figure out when the house is empty and the user is not looking at surveillance cameras, and even turn off the alarm delivered to her phone. To defend against this new category of attacks, we propose a novel technique that changes neither the operating system nor the target apps, and provides immediate protection as soon as an ordinary app (with only normal and dangerous permissions) is installed. This new approach, called App Guardian, thwarts a malicious app's runtime monitoring attempt by pausing all suspicious background processes when the target app (called principal) is running in the foreground, and resuming them after the app stops and its runtime environment is cleaned up. Our technique leverages a unique feature of Android, on which third-party apps running in the background are often considered to be disposable and can be stopped anytime with only a minor performance and utility implication. We further limit such an impact by only focusing on a small set of suspicious background apps, which are identified by their behaviors inferred from their side channels (e.g., Thread names, CPU scheduling and kernel time). App Guardian is also carefully designed to choose the right moments to start and end the protection procedure, and effectively protect itself against malicious apps. Our experimental studies show that this new technique defeated all known RIG attacks, with small impacts on the utility of legitimate apps and the performance of the OS. Most importantly, the idea underlying our approach, including app-level protection, side-channel based defense and lightweight response, not only significantly raises the bar for the RIG attacks and the research on this subject but can also inspire the follow-up effort on new detection systems practically deployable in the fragmented Android ecosystem.",
        "files": {
            "openAccessPdf": "https://ieeexplore.ieee.org/ielx7/7160813/7163005/07163068.pdf"
        },
        "abstract_zh": "从应用程序中窃取敏感信息总是被认为是对Android安全的最关键威胁之一。 最近的研究表明，通过利用操作系统的某些设计弱点，例如共享通信渠道（例如蓝牙），以及内存和网络数据使用等侧面渠道，即使在没有明确实现缺陷的情况下进行这种情况也可以发生。 在所有这些攻击中，恶意应用需要与目标应用程序（受害者）并排运行以收集其运行时信息。 示例包括录制电话应用程序中的电话对话，收集WebMD的数据用法来推断用户查看的疾病状况等。正如先前的研究和我们的新发现所证明的那样，这种运行时信息收集（钻机）是现实而严重的 ，这揭示了恶意软件监视受欢迎的基于Android的家庭安全系统可以弄清楚房屋何时空着，并且用户不在查看监视摄像机，甚至关闭了发送给手机的警报。 为了防止这种新的攻击类别，我们提出了一种新的技术，该技术既不更改操作系统也不更改目标应用程序，并且在安装了普通应用程序（仅具有正常和危险的许可）后立即提供保护。 这种称为App Guardian的新方法挫败了恶意应用程序的运行时监视尝试，通过在目标应用程序（称为principal）运行的所有可疑背景过程中暂停所有可疑的背景过程，并在应用程序停止及其运行时环境清理后恢复它们。 我们的技术利用了Android的独特功能，在该功能上，在该应用程序上通常认为在后台运行的第三方应用程序可容纳，并且可以随时停止，只有较小的性能和效用含义。 我们仅通过专注于一组可疑的背景应用程序来进一步限制这种影响，这些应用程序是通过其侧渠道推断出的行为（例如，线程名称，CPU调度和内核时间）来识别的。 App Guardian还经过精心设计，以选择正确的时刻来开始和结束保护程序，并有效地保护自己免受恶意应用程序的影响。 我们的实验研究表明，这种新技术击败了所有已知的钻机攻击，对合法应用程序的实用性和操作系统的性能产生了很小的影响。 最重要的是，我们的方法为基础的想法，包括应用程序级保护，基于侧渠道的防御和轻量级响应，不仅显着提高了钻机攻击和对该主题的研究的标准，而且还可以激发后续工作 新的检测系统实际上可以在零散的Android生态系统中部署。",
        "title_zh": "别管我:针对Android上运行时信息收集的应用级保护",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2015.html",
        "conf_title": "36th S&P 2015: San Jose, CA, USA",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7160813/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP.2015.62",
        "title": "What the App is That? Deception and Countermeasures in the Android User Interface",
        "authors": "Antonio Bianchi, Jacopo Corbetta, Luca Invernizzi, Yanick Fratantonio, Christopher Kruegel, Giovanni Vigna",
        "abstract": "Mobile applications are part of the everyday lives of billions of people, who often trust them with sensitive information. These users identify the currently focused app solely by its visual appearance, since the GUIs of the most popular mobile OSes do not show any trusted indication of the app origin. In this paper, we analyze in detail the many ways in which Android users can be confused into misidentifying an app, thus, for instance, being deceived into giving sensitive information to a malicious app. Our analysis of the Android platform APIs, assisted by an automated state-exploration tool, led us to identify and categorize a variety of attack vectors (some previously known, others novel, such as a non-escapable full screen overlay) that allow a malicious app to surreptitiously replace or mimic the GUI of other apps and mount phishing and click-jacking attacks. Limitations in the system GUI make these attacks significantly harder to notice than on a desktop machine, leaving users completely defenseless against them. To mitigate GUI attacks, we have developed a two-layer defense. To detect malicious apps at the market level, we developed a tool that uses static analysis to identify code that could launch GUI confusion attacks. We show how this tool detects apps that might launch GUI attacks, such as ransom ware programs. Since these attacks are meant to confuse humans, we have also designed and implemented an on-device defense that addresses the underlying issue of the lack of a security indicator in the Android GUI. We add such an indicator to the system navigation bar, this indicator securely informs users about the origin of the app with which they are interacting (e.g., The Pay Pal app is backed by \"Pay Pal, Inc.\"). We demonstrate the effectiveness of our attacks and the proposed on-device defense with a user study involving 308 human subjects, whose ability to detect the attacks increased significantly when using a system equipped with our defense.",
        "files": {
            "openAccessPdf": "http://www.ieee-security.org/TC/SP2015/papers-archived/6949a931.pdf"
        },
        "abstract_zh": "移动应用程序是数十亿人的日常生活的一部分，他们经常用敏感信息信任他们。 这些用户仅通过视觉外观来识别当前专注的应用程序，因为最受欢迎的移动OS的GUI并未显示出对应用程序来源的任何可信赖的指示。 在本文中，我们详细分析了Android用户可以将Android用户误认为应用程序的多种方式，因此，被欺骗到为恶意应用程序提供敏感信息。 我们对Android平台API的分析，在自动化状态探索工具的辅助下，使我们识别和分类了各种攻击向量（有些以前已知的其他小说，例如不可证实的全屏覆盖），这些小说允许恶意 应用程序秘密地更换或模仿其他应用程序的GUI以及安装网络钓鱼以及点击式攻击。 系统GUI中的局限性使这些攻击比在台式机上更难注意到，这使用户完全毫无防备。 为了减轻GUI攻击，我们已经开发了两层防御。 为了在市场层面检测恶意应用程序，我们开发了一种使用静态分析来识别可能引发GUI混乱攻击的代码的工具。 我们展示了该工具如何检测可能启动GUI攻击的应用程序，例如Ransom Ware计划。 由于这些攻击旨在使人类感到困惑，因此我们还设计并实施了一个设备防御，该防御能够解决Android GUI中缺乏安全指标的根本问题。 我们在系统导航栏中添加了这样的指标，该指标可以安全地将其与之交互的应用程序的来源牢固地告知用户（例如，PAY PAL应用程序由“ Pay Pal，Inc。”支持）。 我们通过涉及308名人类受试者的用户研究来证明我们的攻击的有效性以及提议的在设备防御措施，当使用配备我们防御的系统时，他们的检测攻击能力大大增加。",
        "title_zh": "那是什么应用程序？Android用户界面中的欺骗与对策",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2015.html",
        "conf_title": "36th S&P 2015: San Jose, CA, USA",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7160813/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP46215.2023.10179347",
        "title": "Jigsaw Puzzle: Selective Backdoor Attack to Subvert Malware Classifiers",
        "authors": "Limin Yang, Zhi Chen, Jacopo Cortellazzi, Feargus Pendlebury, Kevin Tu, Fabio Pierazzi, Lorenzo Cavallaro, Gang Wang",
        "abstract": "Malware classifiers are subject to training-time exploitation due to the need to regularly retrain using samples collected from the wild. Recent work has demonstrated the feasibility of backdoor attacks against malware classifiers, and yet the stealthiness of such attacks is not well understood. In this paper, we focus on Android malware classifiers and investigate backdoor attacks under the clean-label setting (i.e., attackers do not have complete control over the training process or the labeling of poisoned data). Empirically, we show that existing backdoor attacks against malware classifiers are still detectable by recent defenses such as MNTD. To improve stealthiness, we propose a new attack, Jigsaw Puzzle (JP), based on the key observation that malware authors have little to no incentive to protect any other authors’ malware but their own. As such, Jigsaw Puzzle learns a trigger to complement the latent patterns of the malware author’s samples, and activates the backdoor only when the trigger and the latent pattern are pieced together in a sample. We further focus on realizable triggers in the problem space (e.g., software code) using bytecode gadgets broadly harvested from benign software. Our evaluation confirms that Jigsaw Puzzle is effective as a backdoor, remains stealthy against state-of-the-art defenses, and is a threat in realistic settings that depart from reasoning about feature-space-only attacks. We conclude by exploring promising approaches to improve backdoor defenses.",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "拼图游戏:颠覆恶意软件分类器的选择性后门攻击",
        "abstract_zh": "由于需要定期使用从野外收集的样本进行重新训练，恶意软件分类器容易受到训练时间的利用。最近的工作已经证明了针对恶意软件分类器的后门攻击的可行性，然而这种攻击的隐秘性并没有被很好地理解。在本文中，我们将重点放在Android恶意软件分类器上，并研究干净标签设置下的后门攻击(即攻击者不能完全控制训练过程或中毒数据的标签)。根据经验，我们表明现有的针对恶意软件分类器的后门攻击仍然可以被最近的防御手段检测到，例如MNTD。为了提高隐蔽性，我们提出了一种新的攻击——拼图游戏(JP ),这是基于恶意软件作者除了保护自己的恶意软件之外，几乎没有保护任何其他作者的恶意软件的动机这一关键观察。因此，拼图游戏学习触发器来补充恶意软件作者样本的潜在模式，并且仅当触发器和潜在模式在样本中拼凑在一起时才激活后门。我们进一步关注问题空间(例如，软件代码)中的可实现触发器，使用从良性软件中广泛收获的字节码小工具。我们的评估证实，拼图玩具作为后门是有效的，在最先进的防御手段下保持隐形，并且在现实环境中是一种威胁，这种威胁与仅基于特征空间的攻击不同。最后，我们探索了一些有前途的方法来改进后门防御。",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2023.html",
        "conf_title": "44th SP 2023:\nSan Francisco, CA, USA",
        "conf_url": "https://doi.org/10.1109/SP46215.2023",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SP46215.2023.10179302",
        "title": "TEEzz: Fuzzing Trusted Applications on COTS Android Devices",
        "authors": "Marcel Busch, Aravind Machiry, Chad Spensky, Giovanni Vigna, Christopher Kruegel, Mathias Payer",
        "abstract": "Security and privacy-sensitive smartphone applications use trusted execution environments (TEEs) to protect sensitive operations from malicious code. By design, TEEs have privileged access to the entire system but expose little to no insight into their inner workings. Moreover, real-world TEEs enforce strict format and protocol interactions when communicating with trusted applications (TAs), which prohibits effective automated testing.TEEzz is the first TEE-aware fuzzing framework capable of effectively fuzzing TAs in situ on production smartphones, i.e., the TA runs in the encrypted and protected TEE and the fuzzer may only observe interactions with the TA but has no control over the TA’s code or data. Unlike traditional fuzzing techniques, which monitor the execution of a program being fuzzed and view its memory after a crash, TEEzz only requires a limited view of the target. TEEzz overcomes key limitations of TEE fuzzing (e.g., lack of visibility into the executed TAs, proprietary exchange formats, and value dependencies of interactions) by automatically attempting to infer the field types and message dependencies of the TA API through its interactions, designing state- and type-aware fuzzing mutators, and creating an in situ, on-device fuzzer.Due to the limited availability of systematic fuzzing research for TAs on commercial-off-the-shelf (COTS) Android devices, we extensively examine existing solutions, explore their limitations, and demonstrate how TEEzz improves the state-of-the-art. First, we show that general-purpose kernel driver fuzzers are ineffective for fuzzing TAs. Then, we establish a baseline for fuzzing TAs using a ground-truth experiment. We show that TEEzz outperforms other blackbox fuzzers, can improve greybox approaches (if TAs source code is available), and even outperforms greybox approaches for stateful targets. We found 13 previously unknown bugs in the latest versions of OPTEE TAs in total, out of which TEEzz is the only fuzzer to trigger three. We also ran TEEzz on popular phones and found 40 unique bugs for which one CVE was assigned so far.",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "TEEzz:模糊COTS Android设备上的可信应用",
        "abstract_zh": "对安全性和隐私敏感的智能手机应用程序使用可信执行环境(TEEs)来保护敏感操作免受恶意代码的攻击。从设计上来说，球座拥有访问整个系统的特权，但对他们的内部运作却知之甚少。此外，现实世界中的tee在与可信应用程序(TAs)通信时会强制执行严格的格式和协议交互，这阻碍了有效的自动化测试。TEEzz是第一个TEE感知模糊化框架，能够在生产智能手机上有效地现场模糊化ta，即TA在加密和受保护的TEE中运行，模糊化器只能观察与TA的交互，但不能控制TA的代码或数据。与传统的模糊化技术不同，传统的模糊化技术监视被模糊化的程序的执行，并在崩溃后查看其内存，TEEzz只需要有限的目标视图。TEEzz克服了TEE fuzzing的主要限制(例如，缺乏对执行的TA、专有交换格式和交互的值依赖性的可见性)，通过其交互自动尝试推断TA API的字段类型和消息依赖性，设计状态和类型感知模糊变异器，并创建原位、设备上模糊器。由于商用现成(COTS) Android设备上TAs的系统模糊化研究有限，我们广泛研究了现有的解决方案，探索了它们的局限性，并展示了TEEzz如何改进最先进的技术。首先，我们表明通用内核驱动程序模糊化器对模糊化TAs无效。然后，我们建立了一个基线模糊TAs使用地面真相实验。我们证明TEEzz优于其他blackbox fuzzers，可以改进greybox方法(如果TAs源代码可用)，甚至优于有状态目标的greybox方法。我们在最新版本的OPTEE TAs中总共发现了13个以前未知的bug，其中TEEzz是唯一一个触发三个bug的fuzzer。我们还在流行的手机上运行TEEzz，发现了40个独特的bug，到目前为止，其中一个是CVE指定的。",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2023.html",
        "conf_title": "44th SP 2023:\nSan Francisco, CA, USA",
        "conf_url": "https://doi.org/10.1109/SP46215.2023",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SPW59333.2023.00007",
        "title": "Is It Overkill? Analyzing Feature-Space Concept Drift in Malware Detectors",
        "authors": "Zhi Chen, Zhenning Zhang, Zeliang Kan, Limin Yang, Jacopo Cortellazzi, Feargus Pendlebury, Fabio Pierazzi, Lorenzo Cavallaro, Gang Wang",
        "abstract": "Concept drift is a major challenge faced by machine learning-based malware detectors when deployed in practice. While existing works have investigated methods to detect concept drift, it is not yet well understood regarding the main causes behind the drift. In this paper, we design experiments to empirically analyze the impact of feature-space drift (new features introduced by new samples) and compare it with data-space drift (data distribution shift over existing features). Surprisingly, we find that data-space drift is the dominating contributor to the model degradation over time while feature-space drift has little to no impact. This is consistently observed over both Android and PE malware detectors, with different feature types and feature engineering methods, across different settings. We further validate this observation with recent online learning based malware detectors that incrementally update the feature space. Our result indicates the possibility of handling concept drift without frequent feature updating, and we further discuss the open questions for future research.",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "是否矫枉过正？恶意软件检测器的特征空间概念漂移分析",
        "abstract_zh": "概念漂移是基于机器学习的恶意软件检测器在实际部署时面临的主要挑战。虽然现有的工作已经研究了检测概念漂移的方法，但是还没有很好地理解漂移背后的主要原因。在本文中，我们设计实验来实证分析特征空间漂移(新样本引入的新特征)的影响，并将其与数据空间漂移(现有特征上的数据分布漂移)进行比较。令人惊讶的是，我们发现数据空间漂移是模型随时间退化的主要原因，而特征空间漂移几乎没有影响。这在Android和PE恶意软件检测器上一致观察到，具有不同的特征类型和特征工程方法，跨越不同的设置。我们用最近的基于在线学习的恶意软件检测器进一步验证了这一观察，该恶意软件检测器递增地更新特征空间。我们的结果表明，在不频繁更新特征的情况下处理概念漂移的可能性，我们进一步讨论了未来研究的开放问题。",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2023w.html",
        "conf_title": "44th SP 2023:\nSan Francisco, CA, USA - Workshops",
        "conf_url": "https://doi.org/10.1109/SPW59333.2023",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SPW59333.2023.00021",
        "title": "Blind Spots: Identifying Exploitable Program Inputs",
        "authors": "Henrik Brodin, Marek Surovic, Evan Sultanik",
        "abstract": "A blind spot is any input to a program that can be arbitrarily mutated without affecting the program's output. Blind spots can be used for steganography or to embed malware payloads. If blind spots overlap file format keywords, they indicate parsing bugs that can lead to exploitable differentials. For example, one could craft a document that renders one way in one viewer and a completely different way in another viewer. They have also been used to circumvent code signing in Android binaries, to coerce certificate authorities to misbehave, and to execute HTTP request smuggling and parameter pollution attacks. This paper formalizes the operational semantics of blind spots, leading to a technique based on dynamic information flow tracking that automatically detects blind spots. An efficient implementation is introduced and evaluated against a corpus of over a thousand diverse PDFs parsed through MµPDF11https://mupdf.com/, revealing exploitable bugs in the parser. All of the blind spot classifications are confirmed to be correct and the missed detection rate is no higher than 11 %. On average, at least 5 % of each PDF file is completely ignored by the parser. Our results show promise that this technique is an efficient automated means to detect exploitable parser bugs, over-permissiveness and differentials. Nothing in the technique is tied to PDF in general, so it can be immediately applied to other notoriously difficult-to-parse formats like ELF, X.509, and XML.",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "盲点:识别可利用的程序输入",
        "abstract_zh": "盲点是程序的任何输入，可以在不影响程序输出的情况下任意变异。盲点可用于隐写术或嵌入恶意软件有效载荷。如果盲点与文件格式关键字重叠，则表明解析错误会导致可利用的差异。例如，可以设计一个文档，在一个查看器中以一种方式呈现，而在另一个查看器中以完全不同的方式呈现。它们还被用于规避Android二进制文件中的代码签名，强制认证机构行为不当，以及执行HTTP请求走私和参数污染攻击。本文形式化了盲点的操作语义，从而产生了一种基于动态信息流跟踪的自动检测盲点的技术。介绍了一个有效的实现，并对通过M PDF11https://muPDF.com/解析的一千多个不同pdf的语料库进行了评估，揭示了解析器中可利用的缺陷。所有的盲点分类都被证实是正确的，漏检率不高于11 %。平均而言，每个PDF文件中至少有5 %被解析器完全忽略。我们的结果表明，这种技术是一种有效的自动化手段来检测可利用的解析器错误，过度许可和差异。一般来说，这种技术与PDF没有任何关系，因此它可以立即应用于其他众所周知的难以解析的格式，如ELF、X.509和XML。",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sp/sp2023w.html",
        "conf_title": "44th SP 2023:\nSan Francisco, CA, USA - Workshops",
        "conf_url": "https://doi.org/10.1109/SPW59333.2023",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3488932.3497765",
        "title": "Driving Execution of Target Paths in Android Applications with (a) CAR",
        "authors": "Michelle Y. Wong, David Lie",
        "abstract": "Dynamic program analysis is commonly used to vet Android applications. One approach is targeted execution, in which interesting or suspicious code is specifically targeted and analyzed dynamically. However, faithful execution to just the paths that reach these targets can be difficult due to the dependencies they have on other parts of the application. Prior works that handle dependencies must favor either soundness or completeness to the detriment of the other. Techniques that rely on precise dependency tracking ultimately result in lower coverage of targets due to overhead. Meanwhile, other techniques that aim for completeness by ignoring or bypassing dependencies lead to unsound execution and false positives. In this paper, we treat dependencies through the lens of a path context, which represents the program state expected by the path as it is executing. We propose an approach that provides better completeness and low false positives using Context Approximation and Refinement (CAR), which combines static constraint analysis and dynamic error recovery to infer a context based on the desired path flow and refine it during execution. We show that the integration of CAR with targeted execution can reach 3.1x more target locations in popular Android applications than the existing state of the art while having a false detection rate of 9%, enabling more complete analysis and detection of security-sensitive behaviors.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "动态程序分析通常用于审查Android应用程序。一种方法是定向执行，在这种方法中，感兴趣或可疑的代码被特别地定向并被动态地分析。然而，由于它们依赖于应用程序的其他部分，只忠实地执行到达这些目标的路径可能是困难的。先前处理依赖关系的工作必须有利于健全性或完整性，而不利于另一个。依赖于精确依赖性跟踪的技术最终会由于开销而导致较低的目标覆盖率。同时，通过忽略或绕过依赖性来实现完整性的其他技术会导致不健全的执行和误报。在本文中，我们通过路径上下文来处理依赖关系，路径上下文代表了路径在执行时所期望的程序状态。我们提出了一种使用上下文近似和提炼(CAR)来提供更好的完整性和低误报的方法，该方法结合了静态约束分析和动态错误恢复，以基于期望的路径流来推断上下文，并在执行期间提炼它。我们表明，与现有技术相比，CAR与目标执行的集成可以在流行的Android应用程序中多到达3.1倍的目标位置，同时具有9%的错误检测率，从而能够更完整地分析和检测安全敏感行为。",
        "title_zh": "使用（a）汽车驱动在Android应用中执行目标路径",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/asiaccs/asiaccs2022.html",
        "conf_title": "17th AsiaCCS 2022: Nagasaki, Japan",
        "conf_url": "https://doi.org/10.1145/3488932?",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3488932.3527290",
        "title": "Developing Secured Android Applications by Mitigating Code Vulnerabilities with Machine Learning",
        "authors": "Janaka Senanayake, Harsha K. Kalutarage, M. Omar Al-Kadri, Andrei V. Petrovski, Luca Piras",
        "abstract": "Mobile application developers sometimes might not be serious about source code security and publish apps to the marketplaces. Therefore, it is essential to have a fully automated security solutions generator to integrate security-by-design into the development practices, especially for the Android platform. This research proposes a Machine Learning (ML) based highly accurate method to detect Android source code vulnerabilities. A new labelled dataset containing Android source code vulnerability samples was generated initially. The dataset was used to train binary and multi-class classification based ML models, to identify code issues by following a static analysis approach. The proposed model can detect code vulnerabilities with a 0.90 F1-Score and vulnerability categories (CWE) with a 0.96 F1-Score. By integrating this with the Android development environment, app developers can analyse source code and identify security vulnerabilities in real-time. The proposed framework can be extended to suggest suitable patches to overcome the source code issues by providing real-time fixes in future.",
        "files": {
            "openAccessPdf": "https://rgu-repository.worktribe.com/preview/1721642/SENANAYAKE%202022%20Developing%20secured%20android.pdf"
        },
        "abstract_zh": "移动应用程序开发人员有时可能不重视源代码安全，将应用程序发布到市场上。因此，有一个完全自动化的安全解决方案生成器来将安全性设计集成到开发实践中是非常必要的，尤其是对于Android平台。本研究提出了一种基于机器学习的高精度Android源代码漏洞检测方法。最初生成了包含Android源代码漏洞样本的新标记数据集。该数据集用于训练基于二元和多类分类的ML模型，以通过遵循静态分析方法来识别代码问题。所提出的模型可以检测F1值为0.90的代码漏洞和F1值为0.96的漏洞类别(CWE)。通过将其与Android开发环境集成，应用程序开发人员可以分析源代码并实时识别安全漏洞。所提出的框架可以被扩展以建议合适的补丁，从而通过在将来提供实时修复来克服源代码问题。",
        "title_zh": "通过通过机器学习来减轻代码漏洞来开发安全的Android应用程序",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/asiaccs/asiaccs2022.html",
        "conf_title": "17th AsiaCCS 2022: Nagasaki, Japan",
        "conf_url": "https://doi.org/10.1145/3488932?",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3320269.3384713",
        "title": "NativeX: Native Executioner Freezes Android",
        "authors": "Qinsheng Hou, Yao Cheng, Lingyun Ying",
        "abstract": "Android is a Linux-based multi-thread open-source operating system that dominates 85% of the worldwide smartphone market share. Though Android has its established management for its framework layer processes, we discovered for the first time that the weak management of native processes is posing tangible threats to Android systems from version 4.2 to 9.0. As a consequence, any third-party application without any permission can freeze the system or force the system to go through a reboot by starving or significantly delaying the critical system services using Android commands in its native processes. We design NativeX to systematically analyze the Android source code to identify the risky Android commands. For each identified risky command, NativeX can automatically generate the PoC (Proof-of-Concept) application, and verify the effectiveness of the generated PoC. We conduct manual vulnerability analysis to reveal two root causes beyond the superficial attack consequences. We further carry out quantitative experiments to demonstrate the attack consequences, including the device temperature surge, the battery degeneration, and the computing performance decrease, based on which, three representative PoC attacks are engineered. Finally, we discuss possible defense approaches to improve the management of Android native processes.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android是一个基于Linux的多线程开源操作系统，占据了全球85%的智能手机市场份额。虽然Android对其框架层进程有其既定的管理，但我们首次发现，从版本4.2到9.0，本地进程的薄弱管理正在对Android系统构成切实的威胁。因此，任何未经许可的第三方应用程序都可以通过在其本机进程中使用Android命令来饥饿或显著延迟关键系统服务，从而冻结系统或强制系统重新启动。我们设计NativeX是为了系统地分析Android源代码，以识别有风险的Android命令。对于每个识别出的有风险的命令，NativeX可以自动生成PoC(概念验证)应用程序，并验证生成的PoC的有效性。我们进行手动漏洞分析，以揭示表面攻击后果之外的两个根本原因。我们进一步进行了定量实验来演示攻击后果，包括设备温度激增、电池退化和计算性能下降，并在此基础上设计了三种有代表性的PoC攻击。最后，我们讨论了改进Android本地进程管理的可能防御方法。",
        "title_zh": "本地X：本地execution子手冻结Android",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2020.html",
        "conf_title": "15th AsiaCCS 2020: Taipei, Taiwan",
        "conf_url": "https://doi.org/10.1145/3320269",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3320269.3384745",
        "title": "Hidden in Plain Sight: Obfuscated Strings Threatening Your Privacy",
        "authors": "Leonid Glanz, Patrick Müller, Lars Baumgärtner, Michael Reif, Sven Amann, Pauline Anthonysamy, Mira Mezini",
        "abstract": "String obfuscation is an established technique used by proprietary, closed-source applications to protect intellectual property. Furthermore, it is also frequently used to hide spyware or malware in applications. In both cases, the techniques range from bit-manipulation over XOR operations to AES encryption. However, string obfuscation techniques/tools suffer from one shared weakness: They generally have to embed the necessary logic to deobfuscate strings into the app code. In this paper, we show that most of the string obfuscation techniques found in malicious and benign applications for Android can easily be broken in an automated fashion. We developed StringHound, an open-source tool that uses novel techniques that identify obfuscated strings and reconstruct the originals using slicing. We evaluated StringHound on both benign and malicious Android apps. In summary, we deobfuscate almost 30 times more obfuscated strings than other string deobfuscation tools. Additionally, we analyzed 100,000 Google Play Store apps and found multiple obfuscated strings that hide vulnerable cryptographic usages, insecure internet accesses, API keys, hard-coded passwords, and exploitation of privileges without the awareness of the developer. Furthermore, our analysis reveals that not only malware uses string obfuscation but also benign apps make extensive use of string obfuscation.",
        "files": {
            "openAccessPdf": "https://dl.acm.org/doi/pdf/10.1145/3320269.3384745"
        },
        "abstract_zh": "字符串混淆是一种成熟的技术，由专有的、封闭源代码的应用程序用来保护知识产权。此外，它还经常用于隐藏应用程序中的间谍软件或恶意软件。在这两种情况下，技术范围从异或运算的位操作到AES加密。然而，字符串模糊技术/工具有一个共同的弱点:它们通常必须在应用程序代码中嵌入必要的逻辑来消除字符串模糊。在本文中，我们展示了在Android的恶意和良性应用程序中发现的大多数字符串混淆技术可以很容易地以自动化的方式被破解。我们开发了StringHound，这是一个开源工具，它使用新颖的技术来识别模糊的字符串，并使用切片来重建原始字符串。我们评估了良性和恶意Android应用程序上的StringHound。总之，我们消除模糊字符串的能力是其他字符串消除工具的30倍。此外，我们分析了100，000个谷歌Play商店应用程序，发现了多个混淆的字符串，这些字符串隐藏了易受攻击的加密用法、不安全的互联网访问、API密钥、硬编码密码以及在开发人员不知情的情况下利用特权。此外，我们的分析显示，不仅恶意软件使用字符串混淆，良性应用程序也大量使用字符串混淆。",
        "title_zh": "隐藏在视线中：混淆的字符串威胁您的隐私",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2020.html",
        "conf_title": "15th AsiaCCS 2020: Taipei, Taiwan",
        "conf_url": "https://doi.org/10.1145/3320269",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3433210.3437511",
        "title": "Measuring User Perception for Detecting Unexpected Access to Sensitive Resource in Mobile Apps",
        "authors": "Trung Tin Nguyen, Duc Cuong Nguyen, Michael Schilling, Gang Wang, Michael Backes",
        "abstract": "Understanding users' perception of app behaviors is an important step to detect data access that violates user expectations. While existing works have used various proxies to infer user expectations (e.g., by analyzing app descriptions), how real-world users perceive an app's data access when they interact with graphical user interfaces (UI) has not been fully explored. In this paper, we aimed to fill this gap by directly measuring how end-users perceive app behaviors based on graphical UI elements via extensive user studies. The results are used to build an automated tool - GUIBAT (Graphical User Interface Behavioral Analysis Tool) - that detects sensitive resource accesses that violate user expectations. We conducted three user studies in total (N=904). The first two user studies were used to build a semantic mapping between user expectations of sensitive resource accesses and the common graphical UI elements (N=459). The third user study (N=445) was used to validate the performance of GUIBAT in predicting user expectations. By comparing user expectations and the actual app behavior (inferred by static program analysis) for 47,909 Android apps, we found that 75.38% of the apps have at least one unexpected sensitive resource access in which third-party libraries attributed to 46.13%. Our analysis lays a concrete foundation for modeling user expectations based on UI elements. We show the urgent need for more transparent UI designs to better inform users of data access, and call for new tools to support app developers in this endeavor.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "了解用户对应用行为的感知是检测违反用户预期的数据访问的重要一步。虽然现有的工作已经使用了各种代理来推断用户的期望(例如，通过分析应用程序描述)，但现实世界的用户在与图形用户界面(UI)交互时如何感知应用程序的数据访问尚未得到充分探索。在本文中，我们旨在通过广泛的用户研究，直接测量最终用户如何感知基于图形用户界面元素的应用行为，从而填补这一空白。这些结果被用来构建一个自动化工具——GUI bat(图形用户界面行为分析工具)——来检测违反用户期望的敏感资源访问。我们总共进行了三项用户研究(N=904)。前两个用户研究用于在用户对敏感资源访问的期望和公共图形用户界面元素之间建立语义映射(N=459)。第三项用户研究(N=445)用于验证GUIBAT在预测用户期望方面的表现。通过比较47，909个Android应用程序的用户预期和实际应用程序行为(通过静态程序分析推断)，我们发现75.38%的应用程序至少有一次意外的敏感资源访问，其中第三方库占46.13%。我们的分析为基于UI元素的用户期望建模奠定了坚实的基础。我们表明迫切需要更透明的UI设计来更好地通知用户数据访问，并呼吁新的工具来支持应用程序开发人员在这方面的努力。",
        "title_zh": "测量用户的看法，以检测移动应用中对敏感资源的意外访问",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/asiaccs/asiaccs2021.html",
        "conf_title": "16th AsiaCCS 2021: Virtual Event, Hong Kong",
        "conf_url": "https://doi.org/10.1145/3433210",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3321705.3329804",
        "title": "Undermining User Privacy on Mobile Devices Using AI",
        "authors": "Berk Gülmezoglu, Andreas Zankl, M. Caner Tol, Saad Islam, Thomas Eisenbarth, Berk Sunar",
        "abstract": "Over the past years, literature has shown that attacks exploiting the microarchitecture of modern processors pose a serious threat to user privacy. This is because applications leave distinct footprints in the processor, which malware can use to infer user activities. In this work, we show that these inference attacks can greatly be enhanced with advanced AI techniques. In particular, we focus on profiling the activity in the last-level cache (LLC) of ARM processors. We employ a simple Prime+Probe based monitoring technique to obtain cache traces, which we classify with deep learning methods including convolutional neural networks. We demonstrate our approach on an off-the-shelf Android phone by launching a successful attack from an unprivileged, zero-permission app in well under a minute. The app detects running applications, opened websites, and streaming videos with up to 98% accuracy and a profiling phase of at most 6 seconds. This is possible, as deep learning compensates measurement disturbances stemming from the inherently noisy LLC monitoring and unfavorable cache characteristics. In summary, our results show that thanks to advanced AI techniques, inference attacks are becoming alarmingly easy to execute in practice. This once more calls for countermeasures that confine microarchitectural leakage and protect mobile phone applications, especially those valuing the privacy of their users.",
        "files": {
            "openAccessPdf": "https://dl.acm.org/doi/pdf/10.1145/3321705.3329804"
        },
        "abstract_zh": "在过去的几年中，文献表明，利用现代处理器的微体系结构的攻击对用户隐私构成了严重威胁。这是因为应用程序会在处理器中留下明显的痕迹，恶意软件可以利用这些痕迹来推断用户的活动。在这项工作中，我们表明这些推理攻击可以通过先进的人工智能技术得到极大的增强。特别是，我们重点分析ARM处理器末级缓存(LLC)中的活动。我们采用简单的基于Prime+Probe的监控技术来获得缓存踪迹，我们使用包括卷积神经网络在内的深度学习方法对其进行分类。我们在现成的Android手机上演示了我们的方法，在不到一分钟的时间内，从一个无特权、零权限的应用程序发起了一次成功的攻击。该应用程序可以检测正在运行的应用程序、打开的网站和流媒体视频，准确率高达98%，分析阶段最多6秒。这是可能的，因为深度学习补偿了源于固有噪声LLC监控和不利缓存特性的测量干扰。总之，我们的结果表明，由于先进的人工智能技术，推理攻击在实践中变得惊人地容易执行。这再次要求采取对策，限制微体系结构泄漏并保护移动电话应用程序，尤其是那些重视用户隐私的应用程序。",
        "title_zh": "使用AI破坏移动设备上的用户隐私",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2019.html",
        "conf_title": "14th AsiaCCS 2019: Auckland, New Zealand",
        "conf_url": "https://doi.org/10.1145/3321705",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3321705.3329799",
        "title": "Exploiting Sound Masking for Audio Privacy in Smartphones",
        "authors": "Yu-Chih Tung, Kang G. Shin",
        "abstract": "Privacy leakage via malware's unauthorized audio recording has become an emerging threat to mobile users. To counter this threat, we propose SafeChat which prevents unauthorized recording without requiring new audio privacy settings in operating systems. SafeChat utilizes sound masking to differentiate audio information between authorized and unauthorized recording apps. Specifically, SafeChat enables authorized recording apps to recover more private/secret information than the unauthorized apps even though both of them record identical audio signals from the same microphone. We have implemented SafeChat as an Android chat app. Our experiments on several commodity phones have shown that SafeChat can make an up-to-26dB difference in signal strength between authorized and unauthorized recording apps. This difference reduces the accuracy of state-of-the-art speech recognition engines, like Google Speech API, to less than 0.1% in understanding the unauthorized recording while comprehending the authorized recording with high accuracy. Moreover, none of the 317 testing participants we recruited online could comprehend the masked speech. Our usability study shows that only 35% of the participants were aware of this threat of privacy leakage and 60% of them wanted to use SafeChat to protect their private/secret information from unauthorized recording.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "通过恶意软件的未经授权的音频记录泄露隐私已经成为移动用户的一个新威胁。为了应对这种威胁，我们提出了SafeChat，它可以防止未经授权的录音，而无需在操作系统中设置新的音频隐私设置。SafeChat利用声音屏蔽来区分授权和未授权录音应用程序之间的音频信息。具体来说，SafeChat使授权的录音应用程序能够比未授权的应用程序恢复更多的私人/秘密信息，即使它们都从同一个麦克风录制相同的音频信号。我们已经将SafeChat实现为一款Android聊天应用。我们在几款商用手机上的实验表明，SafeChat可以在授权和未授权的录音应用程序之间产生高达26dB的信号强度差异。这种差异将最先进的语音识别引擎(如Google Speech API)在理解未授权记录的同时以高准确度理解授权记录的准确度降低到小于0.1%。此外，我们在网上招募的317名测试参与者中没有一个人能够理解蒙面演讲。我们的可用性研究表明，只有35%的参与者意识到这种隐私泄露的威胁，60%的参与者希望使用SafeChat来保护他们的私人/秘密信息免受未经授权的记录。",
        "title_zh": "在智能手机中利用声音掩蔽以进行音频隐私",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2019.html",
        "conf_title": "14th AsiaCCS 2019: Auckland, New Zealand",
        "conf_url": "https://doi.org/10.1145/3321705",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3321705.3329801",
        "title": "MoSSOT: An Automated Blackbox Tester for Single Sign-On Vulnerabilities in Mobile Applications",
        "authors": "Shangcheng Shi, Xianbo Wang, Wing Cheong Lau",
        "abstract": "Mobile applications today increasingly integrate Single Sign-On (SSO) into their account management mechanisms. Unfortunately, the involved multi-party protocol, i.e., OAuth 2.0, was originally designed to serve websites for authorization purpose. Due to the complexity of the adapted protocol, a large number of insecure SSO implementations still exist in the wild. Although the security testing for real-world SSO deployments has attracted considerable attention in recent years, existing work either focuses on websites or relies on the manual discovery of specific and previously-known vulnerabilities. In the paper, we design and implement MoSSOT (Mobile SSO Tester), an automated blackbox security testing tool for Android applications utilizing the SSO services from three mainstream service providers. The tool detects the vulnerabilities within the practical SSO implementations by fuzzing related network messages. We used MoSSOT to examine over 500 first-tier third-party Android applications from US and Chinese app markets. According to the test result, around 72% of the tested applications incorrectly implement SSO and are thus vulnerable. Besides, our test identifies an unknown vulnerability as well as a new variant, in addition to four known ones. The vulnerabilities enable the attacker to illegally log into the mobile applications as the victims or gain access to the protected resources. MoSSOT has been released as an open-source project.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "如今，移动应用越来越多地将单点登录(SSO)集成到他们的帐户管理机制中。不幸的是，所涉及的多方协议，即OAuth 2.0，最初是为了授权的目的而设计的。由于适配协议的复杂性，大量不安全的SSO实现仍然广泛存在。尽管近年来对真实世界的SSO部署的安全测试已经吸引了相当多的关注，但是现有的工作要么集中在网站上，要么依赖于特定的和先前已知的漏洞的手动发现。在本文中，我们设计并实现了MoSSOT (Mobile SSO Tester ),这是一个针对Android应用的自动化黑盒安全测试工具，利用了三个主流服务提供商的SSO服务。该工具通过模糊相关的网络消息来检测实际SSO实现中的漏洞。我们使用MoSSOT检查了来自美国和中国应用市场的500多个一线第三方Android应用。根据测试结果，大约72%的测试应用程序没有正确实现SSO，因此容易受到攻击。此外，除了四个已知漏洞之外，我们的测试还发现了一个未知漏洞和一个新变种。这些漏洞使攻击者能够作为受害者非法登录移动应用程序或获得受保护资源的访问权限。MoSSOT已经作为开源项目发布。",
        "title_zh": "MOSSOT：移动应用程序中的单个登录漏洞的自动化Blackbox测试仪",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2019.html",
        "conf_title": "14th AsiaCCS 2019: Auckland, New Zealand",
        "conf_url": "https://doi.org/10.1145/3321705",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3321705.3329817",
        "title": "MagAttack: Guessing Application Launching and Operation via Smartphone",
        "authors": "Yushi Cheng, Xiaoyu Ji, Wenyuan Xu, Hao Pan, Zhuangdi Zhu, Chuang-Wen You, Yi-Chao Chen, Lili Qiu",
        "abstract": "Mobile devices have emerged as the most popular platforms to access information. However, they have also become a major concern of privacy violation and previous researches have demonstrated various approaches to infer user privacy based on mobile devices. In this paper, we study a new side channel of a laptop that could be harvested by a commercial-off-the-shelf (COTS) mobile device, eg, a smartphone. We propose MagAttack, which exploits the electromagnetic (EM) side channel of a laptop to infer user activities, i.e., application launching and application operation. The key insight of MagAttack is that applications are discrepant in essence due to the different compositions of instructions, which can be reflected on the CPU power consumption, and thus the corresponding EM emissions. MagAttack is challenging since that EM signals are noisy due to the dynamics of applications and the limited sampling rate of the built-in magnetometers in COTS mobile devices. We overcome these challenges and convert noisy coarse-grained EM signals to robust fine-grained features. We implement MagAttack on both an iOS and an Android smartphone without any hardware modification, and evaluate its performance with 13 popular applications and 50 top websites in China. The results demonstrate that MagAttack can recognize aforementioned 13 applications with an average accuracy of 98.6%, and figure out the visiting operation among 50 websites with an average accuracy of 84.7%.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "移动设备已经成为最受欢迎的信息访问平台。然而，它们也成为侵犯隐私的主要问题，先前的研究已经展示了基于移动设备推断用户隐私的各种方法。在本文中，我们研究了一种新的笔记本电脑侧信道，它可以由商用现货(COTS)移动设备(如智能手机)获取。我们提出MagAttack，它利用笔记本电脑的电磁(EM)侧信道来推断用户活动，即应用启动和应用操作。MagAttack的关键见解是，由于指令的组成不同，应用程序在本质上是有差异的，这可以反映在CPU功耗上，从而反映在相应的电磁辐射上。由于应用的动态性和COTS移动设备中内置磁力计的有限采样速率，电磁信号具有高噪声，因此电磁跟踪极具挑战性。我们克服了这些挑战，将有噪声的粗粒度EM信号转换为鲁棒的细粒度特征。我们在没有任何硬件修改的情况下，在iOS和Android智能手机上实现了MagAttack，并使用中国13个热门应用和50个顶级网站评估了它的性能。实验结果表明，MagAttack能够以平均98.6%的准确率识别上述13个应用，并以平均84.7%的准确率计算出50个网站的访问操作。",
        "title_zh": "Magattack：猜测应用程序通过智能手机启动和操作",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2019.html",
        "conf_title": "14th AsiaCCS 2019: Auckland, New Zealand",
        "conf_url": "https://doi.org/10.1145/3321705",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3321705.3329831",
        "title": "Towards Understanding Android System Vulnerabilities: Techniques and Insights",
        "authors": "Daoyuan Wu, Debin Gao, Eric K. T. Cheng, Yichen Cao, Jintao Jiang, Robert H. Deng",
        "abstract": "As a common platform for pervasive devices, Android has been targeted by numerous attacks that exploit vulnerabilities in its apps and the operating system. Compared to app vulnerabilities, system-level vulnerabilities in Android, however, were much less explored in the literature. In this paper, we perform the first systematic study of Android system vulnerabilities by comprehensively analyzing all 2,179 vulnerabilities on the Android Security Bulletin program over about three years since its initiation in August 2015. To this end, we propose an automatic analysis framework, upon a hierarchical database structure, to crawl, parse, clean, and analyze vulnerability reports and their publicly available patches. This framework includes (i) a lightweight technique to pinpoint the affected modules of given vulnerabilities; (ii) a robust method to study the complexity of patch code; and most importantly, (iii) a similarity-based algorithm to cluster patch code patterns. Our clustering algorithm first extracts patch code's essential changes that not only concisely reflect syntactic changes but also keep important semantics, and then leverages affinity propagation to automatically generate clusters based on their pairwise similarity. It allows us to obtain 16 vulnerability patterns, including six new ones not known in the literature, and we further analyze their characteristics via case studies. Besides identifying these useful patterns, we also find that 92% Android vulnerabilities are located in the low-level modules (mostly in native libraries and the kernel), whereas the framework layer causes only 5% vulnerabilities, and that half of the vulnerabilities can be fixed in fewer than 10 lines of code each, with 110 out of 1,158 cases requiring only one single line of code change. We further discuss the implications of all these results. Overall, we provide a clear overview and new insights about Android system vulnerabilities.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "作为普及设备的通用平台，Android已经成为利用其应用程序和操作系统漏洞的众多攻击的目标。然而，与应用程序漏洞相比，Android中的系统级漏洞在文献中的探索要少得多。在本文中，我们通过全面分析Android安全公告计划自2015年8月启动以来大约三年时间里的所有2，179个漏洞，对Android系统漏洞进行了首次系统研究。为此，我们提出了一个基于分层数据库结构的自动分析框架，用于抓取、解析、清理和分析漏洞报告及其公开可用的补丁。该框架包括(I)一种轻量级技术，用于查明给定漏洞的受影响模块；(ii)研究补丁代码复杂性的稳健方法；最重要的是，(iii)基于相似性的算法来聚类补丁代码模式。我们的聚类算法首先提取补丁代码的本质变化，这些变化不仅简明地反映了语法变化，而且保留了重要的语义，然后利用相似性传播根据它们的成对相似性自动生成聚类。它允许我们获得16种漏洞模式，包括6种文献中未知的新模式，并通过案例研究进一步分析它们的特征。除了识别这些有用的模式之外，我们还发现92%的Android漏洞位于低级模块中(主要在本地库和内核中)，而框架层仅导致5%的漏洞，并且一半的漏洞可以在不到10行代码中修复，1158个案例中有110个只需要一行代码更改。我们进一步讨论了所有这些结果的含义。总的来说，我们提供了关于Android系统漏洞的清晰概述和新见解。",
        "title_zh": "要了解Android系统漏洞：技术和见解",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2019.html",
        "conf_title": "14th AsiaCCS 2019: Auckland, New Zealand",
        "conf_url": "https://doi.org/10.1145/3321705",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3321705.3329854",
        "title": "AndrEnsemble: Leveraging API Ensembles to Characterize Android Malware Families",
        "authors": "Omid Mirzaei, Guillermo Suarez-Tangil, José María de Fuentes, Juan Tapiador, Gianluca Stringhini",
        "abstract": "Assigning family labels to malicious apps is a common practice for grouping together malware with identical behavior. However, recent studies show that apps labeled as belonging to the same family do not necessarily behave similarly: one app may lack or have extra capabilities compared to others in the same family, and, conversely, two apps labeled as belonging to different families may exhibit close behavior. To reveal these inconsistencies, this paper presents AndrEnsemble, a characterization system for Android malware families based on ensembles of sensitive API calls extracted from aggregated call graphs of different families. Our method has several advantages over similar characterization approaches, including a greater reduction ratio with respect to original call graphs, robustness against transformation attacks, and flexibility to be applied at different granularity levels. We experimentally validate our approach and discuss three specific use cases: mobile ransomware, SMS Trojans and banking Trojans. This left us with some interesting findings. First of all, malicious operations in these types of malware are not necessarily exercised by using several sensitive API calls all together. Second, SMS Trojans have larger ensembles of API calls compared to the other types. Last but not least, we identified several samples with identical ensembles though being labeled as part of different families.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "为恶意应用程序分配家族标签是将具有相同行为的恶意软件归为一类的常见做法。然而，最近的研究表明，标记为属于同一家族的应用程序不一定表现相似:与同一家族的其他应用程序相比，一个应用程序可能缺乏或具有额外的功能，相反，两个标记为属于不同家族的应用程序可能表现出相近的行为。为了揭示这些不一致性，本文提出了AndrEnsemble，这是一个基于从不同家族的聚合调用图中提取的敏感API调用集合的Android恶意软件家族表征系统。我们的方法与类似的表征方法相比有几个优点，包括相对于原始调用图的更大的缩减率，抵抗变换攻击的鲁棒性，以及在不同粒度级别应用的灵活性。我们通过实验验证了我们的方法，并讨论了三个具体的用例:移动勒索软件，短信木马和银行木马。这给我们留下了一些有趣的发现。首先，这些类型的恶意软件中的恶意操作不一定是通过一起使用几个敏感的API调用来执行的。其次，与其他类型相比，SMS特洛伊木马具有更大的API调用集合。最后但并非最不重要的是，我们确定了几个样本具有相同的系综，尽管被标记为不同家族的一部分。",
        "title_zh": "Andrensemble：利用API合奏来表征Android恶意软件系列",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2019.html",
        "conf_title": "14th AsiaCCS 2019: Auckland, New Zealand",
        "conf_url": "https://doi.org/10.1145/3321705",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2897845.2897891",
        "title": "No-Execute-After-Read: Preventing Code Disclosure in Commodity Software",
        "authors": "Jan Werner, George Baltas, Rob Dallara, Nathan Otterness, Kevin Z. Snow, Fabian Monrose, Michalis Polychronakis",
        "abstract": "Memory disclosure vulnerabilities enable an adversary to successfully mount arbitrary code execution attacks against applications via so-called just-in-time code reuse attacks, even when those applications are fortified with fine-grained address space layout randomization. This attack paradigm requires the adversary to first read the contents of randomized application code, then construct a code reuse payload using that knowledge. In this paper, we show that the recently proposed Execute-no-Read (XnR) technique fails to prevent just-in-time code reuse attacks. Next, we introduce the design and implementation of a novel memory permission primitive, dubbed No-Execute-After-Read (near), that foregoes the problems of XnR and provides strong security guarantees against just-in-time attacks in commodity binaries. Specifically, near allows all code to be disclosed, but prevents any disclosed code from subsequently being executed, thus thwarting just-in-time code reuse. At the same time, commodity binaries with mixed code and data regions still operate correctly, as legitimate data is still readable. To demonstrate the practicality and portability of our approach we implemented prototypes for both Linux and Android on the ARMv8 architecture, as well as a prototype that protects unmodified Microsoft Windows executables and dynamically linked libraries. In addition, our evaluation on the SPEC2006 benchmark demonstrates that our prototype has negligible runtime overhead, making it suitable for practical deployment.",
        "files": {
            "openAccessPdf": "http://dl.acm.org/ft_gateway.cfm?id=2897891&type=pdf"
        },
        "abstract_zh": "内存泄漏漏洞使对手能够通过所谓的即时代码重用攻击，成功地对应用程序发起任意代码执行攻击，即使这些应用程序采用了细粒度的地址空间布局随机化进行了强化。这种攻击模式要求对手首先读取随机应用程序代码的内容，然后使用该知识构建代码重用有效负载。在本文中，我们表明最近提出的不读执行(XnR)技术无法防止实时代码重用攻击。接下来，我们介绍一种新的内存权限原语的设计和实现，称为读后不执行(near ),它避免了XnR的问题，并提供了强大的安全性保证，可以抵御商品二进制文件中的即时攻击。具体来说，near允许公开所有代码，但阻止任何公开的代码随后被执行，从而阻碍了实时代码重用。同时，具有混合代码和数据区域的商品二进制文件仍然可以正常运行，因为合法的数据仍然是可读的。为了展示我们方法的实用性和可移植性，我们在ARMv8架构上实现了Linux和Android的原型，以及保护未修改的Microsoft Windows可执行文件和动态链接库的原型。此外，我们在SPEC2006基准上的评估表明，我们的原型具有可忽略的运行时开销，使其适合实际部署。",
        "title_zh": "无读者阅读：预防商品软件中的代码披露",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2016.html",
        "conf_title": "11th AsiaCCS 2016: Xi'an, China",
        "conf_url": "https://doi.org/10.1145/2897845",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2897845.2897927",
        "title": "R-Droid: Leveraging Android App Analysis with Static Slice Optimization",
        "authors": "Michael Backes, Sven Bugiel, Erik Derr, Sebastian Gerling, Christian Hammer",
        "abstract": "Today's feature-rich smartphone apps intensively rely on access to highly sensitive (personal) data. This puts the user's privacy at risk of being violated by overly curious apps or libraries (like advertisements). Central app markets conceptually represent a first line of defense against such invasions of the user's privacy, but unfortunately we are still lacking full support for automatic analysis of apps' internal data flows and supporting analysts in statically assessing apps' behavior. In this paper we present a novel slice-optimization approach to leverage static analysis of Android applications. Building on top of precise application lifecycle models, we employ a slicing-based analysis to generate data-dependent statements for arbitrary points of interest in an application. As a result of our optimization, the produced slices are, on average, 49% smaller than standard slices, thus facilitating code understanding and result validation by security analysts. Moreover, by re-targeting strings, our approach enables automatic assessments for a larger number of use-cases than prior work. We consolidate our improvements on statically analyzing Android apps into a tool called R-Droid and conducted a large-scale data-leak analysis on a set of 22,700 Android apps from Google Play. R-Droid managed to identify a significantly larger set of potential privacy-violating information flows than previous work, including 2,157 sensitive flows of password-flagged UI widgets in 256 distinct apps.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "如今功能丰富的智能手机应用程序高度依赖于对高度敏感(个人)数据的访问。这使得用户的隐私有被过度好奇的应用程序或库(如广告)侵犯的风险。中央应用市场在概念上代表了防止这种侵犯用户隐私的第一道防线，但不幸的是，我们仍然缺乏对应用内部数据流自动分析的全面支持，也缺乏对分析师静态评估应用行为的支持。在本文中，我们提出了一种新的切片优化方法，以利用Android应用程序的静态分析。基于精确的应用生命周期模型，我们采用基于切片的分析来为应用中的任意兴趣点生成数据相关的语句。由于我们的优化，生成的切片平均比标准切片小49%，从而有助于安全分析师理解代码和验证结果。此外，通过重新定位字符串，我们的方法能够比以前的工作对更多的用例进行自动评估。我们将我们在静态分析Android应用程序方面的改进整合到一个名为R-Droid的工具中，并对Google Play的22，700个Android应用程序进行了大规模数据泄漏分析。与之前的工作相比，R-Droid成功识别出了大量潜在的侵犯隐私的信息流，包括256个不同应用程序中2157个带有密码标记的用户界面小部件的敏感信息流。",
        "title_zh": "R-Droid：利用静态切片优化的Android应用分析",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2016.html",
        "conf_title": "11th AsiaCCS 2016: Xi'an, China",
        "conf_url": "https://doi.org/10.1145/2897845",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2897845.2897856",
        "title": "Mystique: Evolving Android Malware for Auditing Anti-Malware Tools",
        "authors": "Guozhu Meng, Yinxing Xue, Mahinthan Chandramohan, Annamalai Narayanan, Yang Liu, Jie Zhang, Tieming Chen",
        "abstract": "In the arms race of attackers and defenders, the defense is usually more challenging than the attack due to the unpredicted vulnerabilities and newly emerging attacks every day. Currently, most of existing malware detection solutions are individually proposed to address certain types of attacks or certain evasion techniques. Thus, it is desired to conduct a systematic investigation and evaluation of anti-malware solutions and tools based on different attacks and evasion techniques. In this paper, we first propose a meta model for Android malware to capture the common attack features and evasion features in the malware. Based on this model, we develop a framework, MYSTIQUE, to automatically generate malware covering four attack features and two evasion features, by adopting the software product line engineering approach. With the help of MYSTIQUE, we conduct experiments to 1) understand Android malware and the associated attack features as well as evasion techniques; 2) evaluate and compare the 57 off-the-shelf anti-malware tools, 9 academic solutions and 4 App market vetting processes in terms of accuracy in detecting attack features and capability in addressing evasion. Last but not least, we provide a benchmark of Android malware with proper labeling of contained attack and evasion features.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "在攻击者和防御者的军备竞赛中，由于不可预测的漏洞和每天新出现的攻击，防御通常比攻击更具挑战性。目前，大多数现有的恶意软件检测解决方案都是针对特定类型的攻击或特定规避技术单独提出的。因此，希望对基于不同攻击和规避技术的反恶意软件解决方案和工具进行系统的调查和评估。在本文中，我们首先提出了一个Android恶意软件的元模型来捕获恶意软件中常见的攻击特征和规避特征。基于该模型，我们开发了一个框架MYSTIQUE，通过采用软件产品线工程方法，自动生成包含四个攻击特征和两个规避特征的恶意软件。在MYSTIQUE的帮助下，我们进行了实验，以1)了解Android恶意软件和相关的攻击特征以及规避技术；2)评估和比较57个现成的反恶意软件工具、9个学术解决方案和4个应用程序市场审查流程在检测攻击特征的准确性和解决规避问题的能力方面的差异。最后但同样重要的是，我们提供了一个Android恶意软件的基准，并对包含的攻击和规避功能进行了适当的标记。",
        "title_zh": "神秘：用于审核反恶意软件工具的不断发展的Android恶意软件",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2016.html",
        "conf_title": "11th AsiaCCS 2016: Xi'an, China",
        "conf_url": "https://doi.org/10.1145/2897845",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2897845.2897860",
        "title": "StormDroid: A Streaminglized Machine Learning-Based System for Detecting Android Malware",
        "authors": "Sen Chen, Minhui Xue, Zhushou Tang, Lihua Xu, Haojin Zhu",
        "abstract": "Mobile devices are especially vulnerable nowadays to malware attacks, thanks to the current trend of increased app downloads. Despite the significant security and privacy concerns it received, effective malware detection (MD) remains a significant challenge. This paper tackles this challenge by introducing a streaminglized machine learning-based MD framework, StormDroid: (i) The core of StormDroid is based on machine learning, enhanced with a novel combination of contributed features that we observed over a fairly large collection of data set; and (ii) we streaminglize the whole MD process to support large-scale analysis, yielding an efficient and scalable MD technique that observes app behaviors statically and dynamically. Evaluated on roughly 8,000 applications, our combination of contributed features improves MD accuracy by almost 10% compared with state-of-the-art antivirus systems; in parallel our streaminglized process, StormDroid, further improves efficiency rate by approximately three times than a single thread.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "由于目前应用程序下载量增加的趋势，移动设备现在特别容易受到恶意软件的攻击。尽管受到严重的安全和隐私问题的关注，有效的恶意软件检测(MD)仍然是一个重大的挑战。本文通过介绍一个基于流式机器学习的多维框架StormDroid来应对这一挑战:(1)storm droid的核心基于机器学习，并通过我们在一个相当大的数据集上观察到的贡献特征的新组合来增强；以及(ii)我们将整个多维处理流程流式化，以支持大规模分析，从而产生一种高效且可扩展的多维技术，可静态和动态地观察应用行为。在对大约8，000个应用程序进行评估后，与最先进的防病毒系统相比，我们的贡献功能组合将MD准确性提高了近10%;与此同时，我们的流化进程StormDroid进一步提高了效率，大约是单线程的三倍。",
        "title_zh": "Stormdroid：基于流媒体的机器学习系统，用于检测Android恶意软件",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2016.html",
        "conf_title": "11th AsiaCCS 2016: Xi'an, China",
        "conf_url": "https://doi.org/10.1145/2897845",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2897845.2897888",
        "title": "DroidDisintegrator: Intra-Application Information Flow Control in Android Apps",
        "authors": "Eran Tromer, Roei Schuster",
        "abstract": "In mobile platforms and their app markets, controlling app permissions and preventing abuse of private information are crucial challenges. Information Flow Control (IFC) is a powerful approach for formalizing and answering user concerns such as: \"Does this app send my geolocation to the Internet?\" Yet despite intensive research efforts, IFC has not been widely adopted in mainstream programming practice. Abstract We observe that the typical structure of Android apps offers an opportunity for a novel and effective application of IFC. In Android, an app consists of a collection of a few dozen \"components\", each in charge of some high-level functionality. Most components do not require access to most resources. These components are a natural and effective granularity at which to apply IFC (as opposed to the typical process-level or language-level granularity). By assigning different permission labels to each component, and limiting information flow between components, it is possible to express and enforce IFC constraints. Yet nuances of the Android platform, such as its multitude of discretionary (and somewhat arcane) communication channels, raise challenges in defining and enforcing component boundaries. Abstract We build a system, DroidDisintegrator, which demonstrates the viability of component-level IFC for expressing and controlling app behavior. DroidDisintegrator uses dynamic analysis to generate IFC policies for Android apps, repackages apps to embed these policies, and enforces the policies at runtime. We evaluate DroidDisintegrator on dozens of apps.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "在移动平台及其应用市场中，控制应用权限和防止滥用私人信息是至关重要的挑战。信息流控制(IFC)是一种强大的方法，用于形式化和回答用户的问题，例如:“这个应用程序会将我的地理位置发送到互联网吗？”然而，尽管进行了大量的研究工作，IFC还没有在主流编程实践中被广泛采用。摘要我们观察到，Android应用程序的典型结构为IFC的新颖而有效的应用提供了机会。在Android中，一个应用程序由几十个“组件”组成，每个组件负责一些高级功能。大多数组件不需要访问大多数资源。这些组件是应用IFC的自然而有效的粒度(与典型的流程级或语言级粒度相反)。通过为每个组件分配不同的权限标签，并限制组件之间的信息流，可以表达和实施IFC约束。然而，Android平台的细微差别，如其众多自主(有些神秘)的通信渠道，在定义和实施组件边界方面提出了挑战。摘要我们构建了一个系统DroidDisintegrator，它展示了组件级IFC表达和控制应用程序行为的可行性。DroidDisintegrator使用动态分析来为Android应用程序生成IFC策略，重新打包应用程序以嵌入这些策略，并在运行时强制执行这些策略。我们在几十个应用上评估DroidDisintegrator。",
        "title_zh": "droidDissintegrator：Android应用中的内部应用信息流量控制",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2016.html",
        "conf_title": "11th AsiaCCS 2016: Xi'an, China",
        "conf_url": "https://doi.org/10.1145/2897845",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2897845.2897896",
        "title": "CDRep: Automatic Repair of Cryptographic Misuses in Android Applications",
        "authors": "Siqi Ma, David Lo, Teng Li, Robert H. Deng",
        "abstract": "Cryptography is increasingly being used in mobile applications to provide various security services; from user authentication, data privacy, to secure communications. However, there are plenty of mistakes that developers could accidentally make when using cryptography in their mobile apps and such mistakes can lead to a false sense of security. Recent research efforts indeed show that a significant portion of mobile apps in both Android and iOS platforms misused cryptographic APIs. In this paper, we present CDRep, a tool for automatically repairing cryptographic misuse defects in Android apps. We classify such defects into seven types and manually assemble the corresponding fix patterns based on the best practices in cryptographic implementations. CDRep consists of two phases, a detection phase which identifies defect locations in a mobile app and a repair phase which repairs the vulnerable app automatically. In our validation, CDRep is able to successfully repair 94.5% of 1,262 vulnerable apps. Furthermore, CDRep is lightweight, the average runtime to generate a patch is merely 19.3 seconds and the size of a repaired app increases by only 0.667% on average.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "密码术越来越多地用于移动应用中，以提供各种安全服务；从用户认证、数据隐私到安全通信。然而，开发人员在他们的移动应用程序中使用加密技术时可能会意外地犯很多错误，这些错误可能会导致错误的安全感。最近的研究工作确实表明，Android和iOS平台中有很大一部分移动应用程序滥用了加密API。在本文中，我们介绍了CDRep，一种自动修复Android应用程序中加密误用缺陷的工具。我们将这种缺陷分为七种类型，并根据加密实现中的最佳实践手动组装相应的修复模式。CDRep由两个阶段组成，检测阶段识别移动应用中的缺陷位置，修复阶段自动修复易受攻击的应用。在我们的验证中，CDRep能够成功修复1262个易受攻击应用中的94.5%。此外，CDRep是轻量级的，生成补丁的平均运行时间仅为19.3秒，修复后的应用程序大小平均仅增加0.667%。",
        "title_zh": "CDREP：自动修复Android应用中的加密滥用",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2016.html",
        "conf_title": "11th AsiaCCS 2016: Xi'an, China",
        "conf_url": "https://doi.org/10.1145/2897845",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2897845.2897904",
        "title": "Checking Intent-based Communication in Android with Intent Space Analysis",
        "authors": "Yiming Jing, Gail-Joon Ahn, Adam Doupé, Jeong Hyun Yi",
        "abstract": "Intent-based communication is an inter-application communication mechanism in Android. While its importance has been proven by plenty of security extensions that protect it with policy-driven mandatory access control, an overlooked problem is the verification of the security policies. Checking one security extension's policy is indeed complex. Furthermore, intent-based communication introduces even more complexities because it is mediated by multiple security extensions that respectively enforce their own incompatible, distributed, and dynamic policies. This paper seeks a systematic approach to address the complexities involved in checking intent-based communication. To this end, we propose intent space analysis. Intent space analysis formulates the intent forwarding functionalities of security extensions as transformations on a geometric intent space. We further introduce a policy checking framework called IntentScope that proactively and automatically aggregates distributed policies into a holistic and verifiable view. We evaluate our approach against customized Android OSs and commodity Android devices. In addition, we further conduct experiments with four security extensions to demonstrate how our approach helps identify potential vulnerabilities in each extension.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "基于意图的通信是Android中应用程序间的通信机制。虽然它的重要性已经被大量的安全扩展所证明，这些安全扩展通过策略驱动的强制访问控制来保护它，但是一个被忽视的问题是安全策略的验证。检查一个安全扩展的策略确实很复杂。此外，基于意图的通信引入了更多的复杂性，因为它是由多个安全扩展来协调的，这些安全扩展分别实施它们自己的不兼容的、分布式的和动态的策略。本文寻求一种系统的方法来解决检查基于意图的通信所涉及的复杂性。为此，我们提出意图空间分析。意图空间分析将安全扩展的意图转发功能公式化为几何意图空间上的变换。我们还引入了一个名为IntentScope的策略检查框架，它可以主动、自动地将分布式策略聚合到一个整体的、可验证的视图中。我们针对定制的Android操作系统和商用Android设备评估了我们的方法。此外，我们还对四个安全扩展进行了实验，以展示我们的方法如何帮助识别每个扩展中的潜在漏洞。",
        "title_zh": "通过意图空间分析在Android中检查基于意图的通信",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2016.html",
        "conf_title": "11th AsiaCCS 2016: Xi'an, China",
        "conf_url": "https://doi.org/10.1145/2897845",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2897845.2897914",
        "title": "revDroid: Code Analysis of the Side Effects after Dynamic Permission Revocation of Android Apps",
        "authors": "Zheran Fang, Weili Han, Dong Li, Zeqing Guo, Danhao Guo, Xiaoyang Sean Wang, Zhiyun Qian, Hao Chen",
        "abstract": "Dynamic revocation of permissions of installed Android applications has been gaining popularity, because of the increasing concern of security and privacy in the Android platform. However, applications often crash or misbehave when their permissions are revoked, rendering applications completely unusable. Even though Google has officially introduced the new permission mechanism in Android 6.0 to explicitly support dynamic permission revocation, the issue still exists. In this paper, we conduct an empirical study to understand the latest application practice post Android 6.0. Specifically, we design a practical tool, referred to as revDroid, to help us to empirically analyze how often the undesirable side effects, especially application crash, can occur in off-the-shelf Android applications. From the analysis of 248 popular applications from Google Play Store, revDroid finds out that 70% applications and 46% permission-relevant calls do not appropriately catch exceptions caused by permission revocation, while third-party libraries pay much more attention to permission revocation. We also use revDroid to analyze 132 recent malware samples. The result shows that only 27% malwares and 36% permission-relevant API calls of malwares fail to consider the permission revocation. In fact, many of them perform specialized handling of permission revocation to keep the core malicious logic running. Finally, revDroid can be used to help developers uncover the unhandled permission revocations during development time and greatly improve the application quality.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "由于Android平台中对安全性和隐私的日益关注，对已安装的Android应用程序的许可的动态撤销已经变得越来越流行。然而，当应用程序的权限被撤销时，应用程序通常会崩溃或行为不当，导致应用程序完全不可用。尽管Google已经在Android 6.0中正式引入了新的权限机制，以明确支持动态权限撤销，但该问题仍然存在。本文通过实证研究来了解Android 6.0后的最新应用实践。具体来说，我们设计了一个实用的工具，称为revDroid，以帮助我们根据经验分析不良副作用(尤其是应用程序崩溃)在现成的Android应用程序中发生的频率。通过对248个来自谷歌Play商店的流行应用程序的分析，revDroid发现70%的应用程序和46%的权限相关调用不能恰当地捕获由权限撤销引起的异常，而第三方库更加关注权限撤销。我们还使用revDroid分析了132个最近的恶意软件样本。结果表明，只有27%的恶意软件和36%的恶意软件权限相关API调用没有考虑权限撤销。事实上，它们中的许多都执行权限撤销的专门处理，以保持核心恶意逻辑的运行。最后，revDroid可用于帮助开发人员在开发期间发现未处理的权限撤销，并大大提高应用程序的质量。",
        "title_zh": "RevDroid：动态许可撤销Android应用程序后副作用的代码分析",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2016.html",
        "conf_title": "11th AsiaCCS 2016: Xi'an, China",
        "conf_url": "https://doi.org/10.1145/2897845",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2897845.2897897",
        "title": "Attacks and Defence on Android Free Floating Windows",
        "authors": "Lingyun Ying, Yao Cheng, Yemian Lu, Yacong Gu, Purui Su, Dengguo Feng",
        "abstract": "Nowadays, the popular Android is so closely involved in people's daily lives that people rely on Android to perform critical operations and trust Android with sensitive information. It is of great importance to guarantee the usability and security of Android which, however, is such a huge system that a potential threat may arise from any part of it. In this paper, we focus on the Free Floating window (FF window) which is a category of windows that can appear freely above any other applications. It can share the screen space with other FF windows, dialogs, and activities. An FF window is flexible in both its appearance and behaviour features. We analyse the behaviour features of FF windows, including the priority in display layer and the capability of processing user-generated events. Three types of attacks via FF windows with delicate design in their appearance and behaviour features are demonstrated, i.e., DoS attack against Android system, GUI hijacking by targeting overlap, and input inference using FF windows as a side channel. To address the threat caused by FF windows, we design a priority framework for FF windows, which protects a sensitive activity/FF window declared by developers from being attacked by any malicious FF windows. A complementary solution is proposed to mitigate the confusion attack from malicious activities. Finally, we provide Android with suggestions on how to manage FF windows.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "如今，流行的Android与人们的日常生活联系如此紧密，以至于人们依赖Android来执行关键操作，并将敏感信息托付给Android。保证Android的可用性和安全性是非常重要的，然而Android是一个非常庞大的系统，它的任何一个部分都可能产生潜在的威胁。在本文中，我们关注自由浮动窗口(FF window ),这是一类可以自由出现在任何其他应用程序之上的窗口。它可以与其他FF窗口、对话框和活动共享屏幕空间。FF窗口在外观和行为特征上都是灵活的。我们分析了FF窗口的行为特征，包括显示层的优先级和处理用户生成事件的能力。展示了三种通过FF窗口进行的攻击，它们的外观和行为特征都经过了精心的设计，即针对Android系统的DoS攻击、通过目标重叠进行的GUI劫持和利用FF窗口作为旁路的输入推理。为了解决FF窗口带来的威胁，我们为FF窗口设计了一个优先级框架，保护开发者声明的敏感活动/FF窗口免受任何恶意FF窗口的攻击。提出了一种补充的解决方案来减轻来自恶意活动的混淆攻击。最后，我们为Android提供如何管理FF窗口的建议。",
        "title_zh": "攻击和防御无Android浮动窗户",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2016.html",
        "conf_title": "11th AsiaCCS 2016: Xi'an, China",
        "conf_url": "https://doi.org/10.1145/2897845",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2714576.2714589",
        "title": "Towards Discovering and Understanding Unexpected Hazards in Tailoring Antivirus Software for Android",
        "authors": "Heqing Huang, Kai Chen, Chuangang Ren, Peng Liu, Sencun Zhu, Dinghao Wu",
        "abstract": "In its latest comparison of Android Virus Detectors (AVDs), the independent lab AV-TEST reports that they have around 95% malware detection rate. This only indicates that current AVDs on Android have good malware signature databases. When the AVDs are deployed on the fast-evolving mobile system, their effectiveness should also be measured on their runtime behavior. Therefore, we perform a comprehensive analysis on the design of top 30 AVDs tailored for Android. Our new understanding of the AVDs' design leads us to discover the hazards in adopting AVD solutions for Android, including hazards in malware scan (malScan) mechanisms and the engine update (engineUpdate). First, the malScan mechanisms of all the analyzed AVDs lack comprehensive and continuous scan coverage. To measure the seriousness of the identified hazards, we implement targeted evasions at certain time (e.g., end of the scan) and locations (certain folders) and find that the evasions can work even under the assumption that the AVDs are equipped with \"complete\" virus definition files. Second, we discover that, during the engineUpdate, the Android system surprisingly nullifies all types of protections of the AVDs and renders the system for a period of high risk. We confirmed the presence of this vulnerable program logic in all versions of Google Android source code and other vendor customized system images. Since AVDs have about 650-1070 million downloads on the Google store, we immediately reported these hazards to AVD vendors across 16 countries. Google also confirmed our discovered hazard in the engineUpdate procedure, so feature enhancements might be included in later versions. Our research sheds the light on the importance of taking the secure and preventive design strategies for AVD or other mission critical apps for fast-evolving mobile-systems.",
        "files": {
            "openAccessPdf": "https://faculty.ist.psu.edu/wu/papers/avd-asiaccs-2015.pdf"
        },
        "abstract_zh": "独立实验室AV-TEST在对Android病毒检测器(avd)的最新比较中报告称，它们的恶意软件检测率约为95%。这只能表明当前Android上的avd具有良好的恶意软件签名数据库。当avd部署在快速发展的移动系统上时，它们的有效性也应该根据它们的运行时行为来衡量。因此，我们对为Android量身定制的30款顶级avd的设计进行了全面的分析。我们对AVD设计的新理解使我们发现了在Android上采用AVD解决方案的危险，包括恶意软件扫描(malScan)机制和引擎更新(engine update)中的危险。首先，所有分析的avd的malScan机制缺乏全面和连续的扫描覆盖。为了衡量已识别危险的严重性，我们在特定时间(例如，扫描结束)和位置(特定文件夹)实施有针对性的规避，并发现即使假设avd配备了“完整”的病毒定义文件，这些规避也能起作用。其次，我们发现，在引擎更新期间，Android系统令人惊讶地取消了AVDs的所有类型的保护，并使系统处于高风险时期。我们确认了该易受攻击的程序逻辑存在于所有版本的Google Android源代码和其他供应商定制的系统映像中。由于AVD在Google store上有大约6.5-10.7亿次下载，我们立即向16个国家的AVD供应商报告了这些危险。Google也证实了我们在engineUpdate过程中发现的危险，因此功能增强可能会包含在以后的版本中。我们的研究揭示了为快速发展的移动系统的AVD或其他关键任务应用采取安全和预防性设计策略的重要性。",
        "title_zh": "在为Android调整防病毒软件中发现和理解意外危害",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2015.html",
        "conf_title": "10th AsiaCCS 2015: Singapore",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2714576",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2714576.2714598",
        "title": "Hybrid User-level Sandboxing of Third-party Android Apps",
        "authors": "Yajin Zhou, Kunal Patel, Lei Wu, Zhi Wang, Xuxian Jiang",
        "abstract": "Users of Android phones increasingly entrust personal information to third-party apps. However, recent studies reveal that many apps, even benign ones, could leak sensitive information without user awareness or consent. Previous solutions either require to modify the Android framework thus significantly impairing their practical deployment, or could be easily defeated by malicious apps using a native library. In this paper, we propose AppCage, a system that thoroughly confines the run-time behavior of third-party Android apps without requiring framework modifications or root privilege. AppCage leverages two complimentary user-level sandboxes to interpose and regulate an app's access to sensitive APIs. Specifically, dex sandbox hooks into the app's Dalvik virtual machine instance and redirects each sensitive framework API to a proxy which strictly enforces the user-defined policies, and native sandbox leverages software fault isolation to prevent the app's native libraries from directly accessing the protected APIs or subverting the dex sandbox. We have implemented a prototype of AppCage. Our evaluation shows that AppCage can successfully detect and block attempts to leak private information by third-party apps, and the performance overhead caused by AppCage is negligible for apps without native libraries and minor for apps with them.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android手机用户越来越多地将个人信息委托给第三方应用。然而，最近的研究显示，许多应用程序，即使是良性的，也可能在用户不知情或未经用户同意的情况下泄露敏感信息。以前的解决方案要么需要修改Android框架，从而大大削弱了它们的实际部署，要么可能很容易被使用本机库的恶意应用程序击败。在本文中，我们提出了AppCage，这是一个彻底限制第三方Android应用程序运行时行为的系统，无需修改框架或root权限。AppCage利用两个免费的用户级沙箱来干预和管理应用程序对敏感API的访问。具体来说，dex沙盒挂钩到应用的Dalvik虚拟机实例，并将每个敏感的框架API重定向到一个代理，该代理严格执行用户定义的策略，而本机沙盒利用软件故障隔离来防止应用的本机库直接访问受保护的API或破坏dex沙盒。我们已经实现了一个AppCage的原型。我们的评估表明，AppCage可以成功检测和阻止第三方应用泄漏私人信息的尝试，AppCage造成的性能开销对于没有本机库的应用来说可以忽略不计，对于有本机库的应用来说则微不足道。",
        "title_zh": "第三方Android应用的混合用户级沙箱",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2015.html",
        "conf_title": "10th AsiaCCS 2015: Singapore",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2714576",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2714576.2714607",
        "title": "On Designing an Efficient Distributed Black-Box Fuzzing System for Mobile Devices",
        "authors": "Lee Wang Hao, Murali Srirangam Ramanujam, S. P. T. Krishnan",
        "abstract": "Security researchers who jailbreak iOS devices have usually crowdsourced for system level vulnerabilities [1] for iOS. However, their success has depended on whether a particular device owner encountered a crash in system-level code. To conduct voluntary security testing, black-box fuzzing is one of the ideal low-cost and simple techniques to find system level vulnerabilities for the less technical crowd. However, it is not the most effective method due to the large fuzzing space. At the same time, when fuzzing mobile devices such as today's smartphones, it is extremely time consuming to instrument mobile devices of varying versions of system software across the world. This paper, describes Mobile Vulnerability Discovery Pipeline (MVDP), a semi-automated, vulnerability discovery pipeline for mobile devices. MVDP is a carefully crafted process targeted to produce malicious output that is very likely to crash the target leading to vulnerability discovery. MVDP employs a few novel black-box fuzzing techniques such as distributed fuzzing, parameter selection, mutation position optimisation and selection of good seed files. To date, MVDP has discovered around 1900 unique crashing inputs and helped to identify 7 unique vulnerabilities across various Android and iOS phone models.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "破解iOS设备的安全研究人员通常会众包iOS的系统级漏洞。然而，他们的成功取决于特定设备所有者是否遇到了系统级代码崩溃。为了进行自愿的安全测试，黑盒模糊化是为不太懂技术的人群找到系统级漏洞的理想的低成本和简单的技术之一。然而，由于模糊空间大，这不是最有效的方法。与此同时，当对移动设备(如今天的智能手机)进行模糊处理时，在全球范围内检测不同版本系统软件的移动设备是非常耗时的。本文描述了移动漏洞发现管道(MVDP)，一个半自动的，用于移动设备的漏洞发现管道。MVDP是一个精心制作的过程，旨在产生恶意输出，这很可能导致目标崩溃，从而导致漏洞发现。MVDP采用了一些新的黑盒模糊技术，如分布式模糊，参数选择，突变位置优化和选择良好的种子文件。迄今为止，MVDP已经发现了大约1900个独特的崩溃输入，并帮助确定了各种Android和iOS手机型号的7个独特的漏洞。",
        "title_zh": "在为移动设备设计有效的分布式黑盒模糊系统时",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2015.html",
        "conf_title": "10th AsiaCCS 2015: Singapore",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2714576",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2714576.2714626",
        "title": "AppPolicyModules: Mandatory Access Control for Third-Party Apps",
        "authors": "Enrico Bacis, Simone Mutti, Stefano Paraboschi",
        "abstract": "Android has recently introduced the support for Mandatory Access Control, which extends previous security services relying on the Android Permission Framework and on the kernel-level Discretionary Access Control. This extension has been obtained with the use of SELinux and its adaptation to Android (SEAndroid). Currently, the use of the MAC model is limited to the protection of system resources. All the apps that are installed by users fall in a single undifferentiated domain, untrusted_app. We propose an extension of the architecture that permits to associate with each app a dedicated MAC policy, contained in a dedicated appPolicyModule, in order to protect app resources even from malware with root privileges. A crucial difference with respect to the support for policy modules already available in some SELinux implementations is the need to constrain the policies in order to guarantee that an app policy is not able to manipulate the system policy. We present the security requirements that have to be satisfied by the support for modules and show that our solution satisfies these requirements. The support for appPolicyModules can also be the basis for the automatic generation of policies, with a stricter enforcement of Android permissions. A prototype has been implemented and experimental results show a minimal performance overhead for app installation and runtime.",
        "files": {
            "openAccessPdf": "https://aisberg.unibg.it/bitstream/10446/57986/1/AppPolicyModules.pdf"
        },
        "abstract_zh": "Android最近引入了对强制访问控制的支持，这扩展了以前依赖于Android权限框架和内核级自主访问控制的安全服务。这个扩展是通过使用SELinux及其对Android (SEAndroid)的修改获得的。目前，MAC模型的使用仅限于保护系统资源。用户安装的所有应用程序都属于一个无差别的域——不可信应用程序。我们建议对该架构进行扩展，允许将包含在专用appPolicyModule中的专用MAC策略与每个应用相关联，以便保护应用资源，甚至免受具有root权限的恶意软件的攻击。对于一些SELinux实现中已经可用的策略模块的支持，一个关键的区别是需要约束策略，以保证应用程序策略不能操纵系统策略。我们提出了支持模块必须满足的安全需求，并表明我们的解决方案满足这些需求。对appPolicyModules的支持也可以作为自动生成策略的基础，同时更严格地执行Android权限。已经实现了一个原型，实验结果显示了应用程序安装和运行时的最小性能开销。",
        "title_zh": "AppPolicyModules：第三方应用程序的强制性访问控制",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2015.html",
        "conf_title": "10th AsiaCCS 2015: Singapore",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2714576",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2714576.2714593",
        "title": "Enpublic Apps: Security Threats Using iOS Enterprise and Developer Certificates",
        "authors": "Min Zheng, Hui Xue, Yulong Zhang, Tao Wei, John C. S. Lui",
        "abstract": "Compared with Android, the conventional wisdom is that iOS is more secure. However, both jailbroken and non-jailbroken iOS devices have number of vulnerabilities. For iOS, apps need to interact with the underlying system using Application Programming Interfaces (APIs). Some of these APIs remain undocumented and Apple forbids apps in App Store from using them. These APIs, also known as \"private APIs\", provide powerful features to developers and yet they may have serious security consequences if misused. Furthermore, apps which use private APIs can bypass the App Store and use the \"Apple's Enterprise/Developer Certificates\" for distribution. This poses a significant threat to the iOS ecosystem. So far, there is no formal study to understand these apps and how private APIs are being encapsulated. We call these iOS apps which distribute to the public using enterprise certificates as \"enpublic\" apps. In this paper, we present the design and implementation of iAnalytics, which can automatically analyze \"enpublic\" apps' private API usages and vulnerabilities. Using iAnalytics, we crawled and analyzed 1,408 enpublic iOS apps. We discovered that: 844 (60%) out of the 1408 apps do use private APIs, 14 (1%) apps contain URL scheme vulnerabilities, 901 (64%) enpublic apps transport sensitive information through unencrypted channel or store the information in plaintext on the phone. In addition, we summarized 25 private APIs which are crucial and security sensitive on iOS 6/7/8, and we have filed one CVE (Common Vulnerabilities and Exposures) for iOS devices.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "与Android相比，传统观点认为iOS更安全。然而，越狱和非越狱的iOS设备都有许多漏洞。对于iOS，应用需要使用应用编程接口(API)与底层系统进行交互。其中一些API仍然没有记录，苹果禁止App Store中的应用程序使用它们。这些API，也称为“私有API”，为开发人员提供了强大的功能，但如果被误用，它们可能会带来严重的安全后果。此外，使用私有API的应用程序可以绕过App Store，使用“苹果的企业/开发者证书”进行分发。这对iOS生态系统构成了重大威胁。到目前为止，还没有正式的研究来了解这些应用程序以及私有API是如何封装的。我们将这些使用企业证书向公众发布的iOS应用程序称为“enpublic”应用程序。在本文中，我们介绍了iAnalytics的设计和实现，它可以自动分析“enpublic”应用程序的私有API用法和漏洞。使用iAnalytics，我们抓取并分析了1408个enpublic iOS应用程序。我们发现:1408个应用程序中有844个(60%)使用私有API，14个(1%)应用程序包含URL方案漏洞，901个(64%)公共应用程序通过未加密通道传输敏感信息或将信息以纯文本形式存储在手机上。此外，我们总结了25个在iOS 6/7/8上至关重要和安全敏感的私有API，并为iOS设备提交了一份CVE(常见漏洞和暴露)。",
        "title_zh": "ENPUBLIC应用：使用iOS企业和开发人员证书的安全威胁",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2015.html",
        "conf_title": "10th AsiaCCS 2015: Singapore",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2714576",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2714576.2714638",
        "title": "Bittersweet ADB: Attacks and Defenses",
        "authors": "Sungjae Hwang, Sungho Lee, Yongdae Kim, Sukyoung Ryu",
        "abstract": "Android devices and applications become prevalent and ask for unanticipated capabilities thanks to the increased interests in smartphones and web applications. As a way to use the capabilities not directly available to ordinary users, applications have used Android Debug Bridge (ADB), a command line tool to communicate with Android devices for debugging purposes. While ADB provides powerful features that require permissions to use critical system resources, it opens a gate to adversaries. To understand the ADB capabilities and their possible risks, we present various types of attacks that are not easily identifiable using ADB capabilities and device-specific functions. We show that applications using ADB capabilities can modify installed applications, leak private user data, and track phone calls, among other things only with the INTERNET permission on the same device. To protect Android devices from such attacks, we present several mitigation mechanisms including a static analysis tool that analyzes Android applications to detect possible attacks using ADB capabilities. Such a tool can aid application markets such as Google Play to check third-party applications for possible attacks.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "由于对智能手机和网络应用程序的兴趣增加，Android设备和应用程序变得普遍，并要求意想不到的功能。作为使用普通用户无法直接获得的功能的一种方式，应用程序使用Android Debug Bridge (ADB ),这是一种命令行工具，用于与Android设备通信以进行调试。虽然ADB提供了需要权限才能使用关键系统资源的强大功能，但它也为对手打开了大门。为了了解ADB功能及其可能的风险，我们介绍了使用ADB功能和设备特定功能不易识别的各种类型的攻击。我们展示了使用ADB功能的应用程序可以修改已安装的应用程序，泄露私人用户数据，跟踪电话，以及其他只有在同一设备上具有互联网权限的事情。为了保护Android设备免受此类攻击，我们提出了几种缓解机制，包括一个静态分析工具，该工具使用ADB功能分析Android应用程序以检测可能的攻击。这种工具可以帮助Google Play等应用市场检查第三方应用程序是否可能受到攻击。",
        "title_zh": "苦乐参半的ADB：攻击和防御",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2015.html",
        "conf_title": "10th AsiaCCS 2015: Singapore",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2714576",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2714576.2714604",
        "title": "Android Implicit Information Flow Demystified",
        "authors": "Wei You, Bin Liang, Jingzhe Li, Wenchang Shi, Xiangyu Zhang",
        "abstract": "In this paper, a comprehensive analysis of implicit information flow (IIF) on the Android bytecode is presented to identify all potential IIF forms, determine their exploitability, and mitigate the potential threat. By applying control-transfer-oriented semantic analysis of the bytecode language, we identify five IIF forms, some of which are not studied by existing IIF literature. We develop proof-of-concepts (PoCs) for each IIF form to demonstrate their exploitability. The experimental results show that all these PoCs can effectively and efficiently transmit sensitive data, as well as successfully evade the detection of a state-of-the-art privacy monitor TaintDroid. To mitigate the threat of IIF, we propose a solution to defending against IIF leveraging a special control dependence tracking technique and implement a prototype system. The evaluation shows that the prototype can effectively detect information leak by all the identified IIF forms and also real-world malware with an acceptable overhead. In summary, our study gives in-depth insight into Android IIF from both offensive and defensive perspectives, and provides a foundation for further research on Android IIF.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "本文对Android字节码上的隐式信息流(IIF)进行了全面的分析，以识别所有潜在的IIF形式，确定它们的可利用性，并减轻潜在的威胁。通过应用字节码语言的面向控制转移的语义分析，我们确定了五种IIF形式，其中一些没有被现有的IIF文献研究。我们为每个IIF表单开发了概念证明(POC ),以展示它们的可利用性。实验结果表明，所有这些PoCs都能够有效地传输敏感数据，并成功地规避了最先进的隐私监视器TaintDroid的检测。为了减轻IIF的威胁，我们提出了一个利用特殊的控制依赖跟踪技术来防御IIF的解决方案，并实现了一个原型系统。评估表明，该原型可以有效地检测所有已识别的IIF形式的信息泄漏以及真实世界的恶意软件，并且具有可接受的开销。总之，我们的研究从攻击和防御两个角度对Android IIF进行了深入的分析，为进一步研究Android IIF提供了基础。",
        "title_zh": "Android隐式信息流揭开神秘",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2015.html",
        "conf_title": "10th AsiaCCS 2015: Singapore",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2714576",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2714576.2714583",
        "title": "Automatically Detecting SSL Error-Handling Vulnerabilities in Hybrid Mobile Web Apps",
        "authors": "Chaoshun Zuo, Jianliang Wu, Shanqing Guo",
        "abstract": "Today, there are many hybrid apps in which both native Android app UI and WebView UI are used. To protect the security and privacy of the communications, these hybrid apps all use HTTPS by WebView, a key component in modern web browser. In this paper, we show there is another type of SSL vulnerability that stems from the error-handling code in the hybrid mobile web apps. At a high level, this error-handling code should have stopped the communication but it still proceeds regardless of certificate errors, thereby leading to the MITM attacks. To automatically identify these vulnerable apps, we present a hybrid approach that combines both static analysis and dynamic analysis. We have implemented our approach and evaluated with 13,820 real world mobile web apps from a third party market, of which 645 are confirmed truly vulnerable, with an average overhead of 60.8 seconds per app.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "如今，有许多混合应用程序同时使用了原生Android应用程序UI和WebView UI。为了保护通信的安全和隐私，这些混合应用程序都使用了WebView的HTTPS，这是现代web浏览器的一个关键组件。在本文中，我们展示了另一种类型的SSL漏洞，它源于混合移动web应用程序中的错误处理代码。在高层次上，这个错误处理代码应该已经停止了通信，但是不管证书错误，它仍然继续进行，从而导致MITM攻击。为了自动识别这些易受攻击的应用程序，我们提出了一种结合静态分析和动态分析的混合方法。我们已经实施了我们的方法，并对来自第三方市场的13，820个真实世界的移动web应用进行了评估，其中645个被确认为真正易受攻击，每个应用的平均开销为60.8秒。",
        "title_zh": "自动检测混合移动网络应用中的SSL错误处理漏洞",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2015.html",
        "conf_title": "10th AsiaCCS 2015: Singapore",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2714576",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2714576.2714650",
        "title": "TouchSignatures: Identification of User Touch Actions based on Mobile Sensors via JavaScript",
        "authors": "Maryam Mehrnezhad, Ehsan Toreini, Siamak Fayyaz Shahandashti, Feng Hao",
        "abstract": "Conforming to the recent W3C specifications (www.w3.org/TR/orientation-event), modern mobile web browsers generally allow JavaScript code in a web page to access motion and orientation sensor data without the user's permission. The associated risks to user privacy are however not considered in W3C specifications. In this work, for the first time, we show how user privacy can be compromised using device motion and orientation sensor data available in-browser, despite the fact that the data rate is 5 to 10 times slower than what is attainable in-app. We examine different browsers on the Android and iOS platforms and study their policies in granting permissions to JavaScript code with respect to access to motion and orientation sensor data and identify multiple vulnerabilities. Based on our findings, we propose TouchSignatures, implementation of an attack in which malicious JavaScript code on an inactive tab listens to such sensor data measurements. Based on these streams, TouchSignatures is able to distinguish the user's touch actions (e.g., tap, scroll, hold, and zoom) on an active tab, allowing the remote website to learn the client-side user activities. Finally, we demonstrate the practicality of this attack by collecting real-world user data and reporting high success rates using our proof-of-concept implementation.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "符合最近的W3C规范(www . w3 . org/TR/orientation-event)，现代移动网络浏览器通常允许网页中的JavaScript代码在没有用户许可的情况下访问运动和方向传感器数据。然而，W3C规范中没有考虑用户隐私的相关风险。在这项工作中，我们首次展示了如何使用浏览器中可用的设备运动和方向传感器数据来损害用户隐私，尽管数据速率比应用程序中可获得的数据速率慢5至10倍。我们检查了Android和iOS平台上的不同浏览器，研究了它们在授予JavaScript代码访问运动和方向传感器数据的权限方面的策略，并确定了多个漏洞。基于我们的发现，我们提出了TouchSignatures，一种攻击的实现，其中在非活动标签上的恶意JavaScript代码侦听这样的传感器数据测量。基于这些流，TouchSignatures能够区分用户在活动标签上的触摸动作(例如，轻击、滚动、保持和缩放)，从而允许远程网站了解客户端用户活动。最后，我们通过收集真实世界的用户数据并使用我们的概念验证实现报告高成功率来展示这种攻击的实用性。",
        "title_zh": "触摸签名：通过JavaScript根据移动传感器识别用户触摸操作",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2015.html",
        "conf_title": "10th AsiaCCS 2015: Singapore",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2714576",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3052973.3052990",
        "title": "To Update or Not to Update: Insights From a Two-Year Study of Android App Evolution",
        "authors": "Vincent F. Taylor, Ivan Martinovic",
        "abstract": "Although there are over 1,900,000 third-party Android apps in the Google Play Store, little is understood about how their security and privacy characteristics, such as dangerous permission usage and the vulnerabilities they contain, have evolved over time. Our research is two-fold: we take quarterly snapshots of the Google Play Store over a two-year period to understand how permission usage by apps has changed; and we analyse 30,000 apps to understand how their security and privacy characteristics have changed over the same two-year period. Extrapolating our findings, we estimate that over 35,000 apps in the Google Play Store ask for additional dangerous permissions every three months. Our statistically significant observations suggest that free apps and popular apps are more likely to ask for additional dangerous permissions when they are updated. Worryingly, we discover that Android apps are not getting safer as they are updated. In many cases, app updates serve to increase the number of distinct vulnerabilities contained within apps, especially for popular apps. We conclude with recommendations to stakeholders for improving the security of the Android ecosystem.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "虽然谷歌Play商店有超过190万个第三方Android应用程序，但对它们的安全和隐私特征(如危险的权限使用和它们包含的漏洞)是如何随着时间的推移而演变的却知之甚少。我们的研究有两个方面:我们对谷歌Play商店进行了为期两年的季度快照，以了解应用程序的权限使用是如何变化的；我们分析了30，000个应用程序，以了解它们的安全和隐私特征在同一两年期间发生了怎样的变化。推断我们的发现，我们估计谷歌Play商店有超过35，000个应用程序每三个月请求额外的危险权限。我们的统计显著性观察表明，免费应用和流行应用在更新时更有可能要求额外的危险权限。令人担忧的是，我们发现Android应用程序在更新时并没有变得更安全。在许多情况下，应用程序更新会增加应用程序中包含的不同漏洞的数量，特别是对于流行的应用程序。最后，我们向利益相关者提出了改善Android生态系统安全性的建议。",
        "title_zh": "更新或不更新：对Android应用程序Evolution进行两年研究的见解",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2017.html",
        "conf_title": "12th AsiaCCS 2017: Abu Dhabi, United Arab Emirates",
        "conf_url": "https://doi.org/10.1145/3052973",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3052973.3053004",
        "title": "Collusive Data Leak and More: Large-scale Threat Analysis of Inter-app Communications",
        "authors": "Amiangshu Bosu, Fang Liu, Danfeng (Daphne) Yao, Gang Wang",
        "abstract": "Inter-Component Communication (ICC) provides a message passing mechanism for data exchange between Android applications. It has been long believed that inter-app ICCs can be abused by malware writers to launch collusion attacks using two or more apps. However, because of the complexity of performing pairwise program analysis on apps, the scale of existing analyses is too small (e.g., up to several hundred) to produce concrete security evidence. In this paper, we report our findings in the first large-scale detection of collusive and vulnerable apps, based on inter-app ICC data flows among 110,150 real-world apps. Our system design aims to balance the accuracy of static ICC resolution/data-flow analysis and run-time scalability. This large-scale analysis provides real-world evidence and deep insights on various types of inter-app ICC abuse. Besides the empirical findings, we make several technical contributions, including a new open-source ICC resolution tool with improved accuracy over the state-of-the-art, and a large database of inter-app ICCs and their attributes.",
        "files": {
            "openAccessPdf": "http://dl.acm.org/ft_gateway.cfm?id=3053004&type=pdf"
        },
        "abstract_zh": "组件间通信(ICC)为Android应用程序之间的数据交换提供了一种消息传递机制。长期以来，人们一直认为恶意软件编写者可以滥用应用间ICC来使用两个或更多应用发起共谋攻击。然而，由于在应用上执行成对程序分析的复杂性，现有分析的规模太小(例如，多达几百个)而不能产生具体的安全证据。在本文中，我们基于110，150个真实应用中的应用间ICC数据流，报告了我们在首次大规模检测合谋和易受攻击应用中的发现。我们的系统设计旨在平衡静态ICC分辨率/数据流分析的准确性和运行时可扩展性。这项大规模分析提供了关于各种类型的应用程序间ICC滥用的真实证据和深刻见解。除了实证研究结果之外，我们还做出了一些技术贡献，包括一个新的开源ICC解析工具，它比最先进的工具具有更高的准确性，以及一个应用程序间ICC及其属性的大型数据库。",
        "title_zh": "辅助数据泄漏等：大规模的应用间通信威胁分析",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2017.html",
        "conf_title": "12th AsiaCCS 2017: Abu Dhabi, United Arab Emirates",
        "conf_url": "https://doi.org/10.1145/3052973",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3052973.3053018",
        "title": "Breaking Ad-hoc Runtime Integrity Protection Mechanisms in Android Financial Apps",
        "authors": "Taehun Kim, Hyeonmin Ha, Seoyoon Choi, Jaeyeon Jung, Byung-Gon Chun",
        "abstract": "To protect customers' sensitive information, many mobile financial applications include steps to probe the runtime environment and abort their execution if the environment is deemed to have been tampered with. This paper investigates the security of such self-defense mechanisms used in 76 popular financial Android apps in the Republic of Korea. Our investigation found that existing tools fail to analyze these Android apps effectively because of their highly obfuscated code and complex, non-traditional control flows. We overcome this challenge by extracting a call graph with a self-defense mechanism, from a detailed runtime trace record of a target app's execution. To generate the call graph, we identify the causality between the system APIs (Android APIs and system calls) used to check device rooting and app integrity, and those used to stop an app's execution. Our analysis of 76 apps shows that we can pinpoint methods to bypass a self-defense mechanism using a causality graph in most cases. We successfully bypassed self-defense mechanisms in 67 out of 73 apps that check device rooting and 39 out of 44 apps that check app integrity. While analyzing the self-defense mechanisms, we found that many apps rely on third-party security libraries for their self-defense mechanisms. Thus we present in-depth studies of the top five security libraries. Our results demonstrate the necessity of a platform-level solution for integrity checks.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "为了保护客户的敏感信息，许多移动金融应用程序包括探测运行时环境的步骤，并且如果环境被认为已经被篡改，则中止它们的执行。本文调查了韩国76个流行的Android金融应用程序中使用的这种自我防御机制的安全性。我们的调查发现，现有的工具无法有效地分析这些Android应用程序，因为它们的代码高度混乱，控制流复杂，非传统。我们通过从目标应用执行的详细运行时跟踪记录中提取具有自我防御机制的调用图来克服这一挑战。为了生成调用图，我们确定了用于检查设备寻根和应用完整性的系统API(Android API和系统调用)与用于停止应用执行的系统API之间的因果关系。我们对76个应用程序的分析表明，在大多数情况下，我们可以使用因果图来找出绕过自我防御机制的方法。我们在73个检查设备寻根的应用程序中的67个和44个检查应用程序完整性的应用程序中的39个中成功绕过了自我防御机制。在分析自我防御机制时，我们发现许多应用程序的自我防御机制依赖于第三方安全库。因此，我们对五大安全库进行了深入研究。我们的结果证明了平台级完整性检查解决方案的必要性。",
        "title_zh": "破坏Android财务应用中的临时运行时完整性保护机制",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2017.html",
        "conf_title": "12th AsiaCCS 2017: Abu Dhabi, United Arab Emirates",
        "conf_url": "https://doi.org/10.1145/3052973",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3052973.3052989",
        "title": "Boosting the Guessing Attack Performance on Android Lock Patterns with Smudge Attacks",
        "authors": "Seunghun Cha, Sungsu Kwag, Hyoungshick Kim, Jun Ho Huh",
        "abstract": "Android allows 20 consecutive fail attempts on unlocking a device. This makes it difficult for pure guessing attacks to crack user patterns on a stolen device before it permanently locks itself. We investigate the effectiveness of combining Markov model-based guessing attacks with smudge attacks on unlocking Android devices within 20 attempts. Detected smudges are used to pre-compute all the possible segments and patterns, significantly reducing the pattern space that needs to be brute-forced. Our Markov-model was trained using 70% of a real-world pattern dataset that consists of 312 patterns. We recruited 12 participants to draw the remaining 30% on Samsung Galaxy S4, and used smudges they left behind to analyze the performance of the combined attack. Our results show that this combined method can significantly improve the performance of pure guessing attacks, cracking 74.17% of patterns compared to just 13.33% when the Markov model-based guessing attack was performed alone---those results were collected from a naive usage scenario where the participants were merely asked to unlock a given device. Even under a more complex scenario that asked the participants to use the Facebook app for a few minutes---obscuring smudges were added as a result---our combined attack, at 31.94%, still outperformed the pure guessing attack at 13.33%. Obscuring smudges can significantly affect the performance of smudge-based attacks. Based on this finding, we recommend that a mitigation technique should be designed to help users add obscurity, e.g., by asking users to draw a second random pattern upon unlocking a device.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android允许连续20次解锁失败。这使得纯粹的猜测攻击很难在被盗设备永久锁定自己之前破解其用户模式。我们调查了在20次尝试内将基于马尔可夫模型的猜测攻击与涂抹攻击结合起来解锁Android设备的有效性。检测到的污迹用于预先计算所有可能的片段和图案，显著地减少了需要暴力破解的图案空间。我们的马尔可夫模型是使用由312个模式组成的真实世界模式数据集的70%来训练的。我们招募了12名参与者在三星Galaxy S4上画出剩余的30%，并使用他们留下的污迹来分析组合攻击的表现。我们的结果表明，这种组合方法可以显著提高纯猜测攻击的性能，破解74.17%的模式，相比之下，当单独执行基于马尔可夫模型的猜测攻击时，只有13.33%的模式被破解——这些结果是从简单的使用场景中收集的，在该场景中，参与者仅被要求解锁给定的设备。即使在一个更复杂的场景下，要求参与者使用脸书应用程序几分钟——结果添加了模糊污迹——我们的综合攻击率为31.94%，仍然超过了13.33%的纯猜测攻击。模糊污迹会显著影响基于污迹的攻击的性能。基于这一发现，我们建议设计一种缓解技术来帮助用户增加模糊性，例如，在解锁设备时要求用户绘制第二个随机图案。",
        "title_zh": "通过污迹攻击，提高对Android锁定模式的猜测攻击性能",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2017.html",
        "conf_title": "12th AsiaCCS 2017: Abu Dhabi, United Arab Emirates",
        "conf_url": "https://doi.org/10.1145/3052973",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3052973.3052980",
        "title": "Secure Wallet-Assisted Offline Bitcoin Payments with Double-Spender Revocation",
        "authors": "Alexandra Dmitrienko, David Noack, Moti Yung",
        "abstract": "Bitcoin seems to be the most successful cryptocurrency so far given the growing real life deployment and popularity. While Bitcoin requires clients to be online to perform transactions and a certain amount of time to verify them, there are many real life scenarios that demand for offline and immediate payments (e.g., mobile ticketing, vending machines, etc). However, offline payments in Bitcoin raise non-trivial security challenges, as the payee has no means to verify the received coins without having access to the Bitcoin network. Moreover, even online immediate payments are shown to be vulnerable to double-spending attacks. In this paper, we propose the first solution for Bitcoin payments, which enables secure payments with Bitcoin in offline settings and in scenarios where payments need to be immediately accepted. Our approach relies on an offline wallet and deploys several novel security mechanisms to prevent double-spending and to verify the coin validity in offline setting. These mechanisms achieve probabilistic security to guarantee that the attack probability is lower than the desired threshold. We provide a security and risk analysis as well as model security parameters for various adversaries. We further eliminate remaining risks by detection of misbehaving wallets and their revocation. We implemented our solution for mobile Android clients and instantiated an offline wallet using a microSD security card. Our implementation demonstrates that smooth integration over a very prevalent platform (Android) is possible, and that offline and online payments can practically co-exist. We also discuss alternative deployment approach for the offline wallet which does not leverage secure hardware, but instead relies on a deposit system managed by the Bitcoin network.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "鉴于现实生活中日益增长的部署和普及，比特币似乎是迄今为止最成功的加密货币。虽然比特币要求客户在线执行交易，并需要一定时间来验证交易，但现实生活中有许多场景要求离线和即时支付(例如，移动售票、自动售货机等)。然而，比特币的离线支付带来了不小的安全挑战，因为收款人无法在无法访问比特币网络的情况下验证收到的硬币。此外，即使是在线即时支付也容易受到重复消费攻击。在本文中，我们提出了第一个比特币支付解决方案，该解决方案可以在离线设置和需要立即接受支付的场景中使用比特币进行安全支付。我们的方法依赖于离线钱包，并部署了几个新颖的安全机制来防止重复消费，并在离线设置中验证硬币的有效性。这些机制实现了概率安全以保证攻击概率低于期望的阈值。我们提供安全和风险分析，以及针对各种对手的模型安全参数。我们通过检测行为不当的钱包并撤销它们来进一步消除剩余的风险。我们为移动Android客户端实现了我们的解决方案，并使用microSD安全卡实例化了一个离线钱包。我们的实现表明，在一个非常流行的平台(Android)上的平滑集成是可能的，离线和在线支付实际上可以共存。我们还讨论了离线钱包的替代部署方法，该方法不利用安全硬件，而是依赖于由比特币网络管理的存款系统。",
        "title_zh": "安全钱包辅助脱机比特币支付，并带有双层撤销",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2017.html",
        "conf_title": "12th AsiaCCS 2017: Abu Dhabi, United Arab Emirates",
        "conf_url": "https://doi.org/10.1145/3052973",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3052973.3052991",
        "title": "SPOKE: Scalable Knowledge Collection and Attack Surface Analysis of Access Control Policy for Security Enhanced Android",
        "authors": "Ruowen Wang, Ahmed M. Azab, William Enck, Ninghui Li, Peng Ning, Xun Chen, Wenbo Shen, Yueqiang Cheng",
        "abstract": "SEAndroid is a mandatory access control (MAC) framework that can confine faulty applications on Android. Nevertheless, the effectiveness of SEAndroid enforcement depends on the employed policy. The growing complexity of Android makes it difficult for policy engineers to have complete domain knowledge on every system functionality. As a result, policy engineers sometimes craft over-permissive and ineffective policy rules, which unfortunately increased the attack surface of the Android system and have allowed multiple real-world privilege escalation attacks. We propose SPOKE, an SEAndroid Policy Knowledge Engine, that systematically extracts domain knowledge from rich-semantic functional tests and further uses the knowledge for characterizing the attack surface of SEAndroid policy rules. Our attack surface analysis is achieved by two steps: 1) It reveals policy rules that cannot be justified by the collected domain knowledge. 2) It identifies potentially over-permissive access patterns allowed by those unjustified rules as the attack surface. We evaluate SPOKE using 665 functional tests targeting 28 different categories of functionalities developed by Samsung Android Team. SPOKE successfully collected 12,491 access patterns for the 28 categories as domain knowledge, and used the knowledge to reveal 320 unjustified policy rules and 210 over-permissive access patterns defined by those rules, including one related to the notorious libstagefright vulnerability. These findings have been confirmed by policy engineers.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "SEAndroid是一个强制访问控制(MAC)框架，可以限制Android上的错误应用程序。然而，SEAndroid实施的有效性取决于所采用的策略。Android日益增长的复杂性使得策略工程师很难对每个系统功能拥有完整的领域知识。因此，策略工程师有时会制定过度许可和无效的策略规则，这不幸地增加了Android系统的攻击面，并允许多个真实世界的权限提升攻击。我们提出了SEAndroid策略知识引擎SPOKE，它从丰富语义的功能测试中系统地提取领域知识，并进一步使用这些知识来描述SEAndroid策略规则的攻击面。我们的攻击面分析是通过两个步骤实现的:1)它揭示了无法通过收集的领域知识来证明的策略规则。2)它将那些不合理的规则所允许的潜在过度许可的访问模式识别为攻击面。我们使用三星Android团队开发的针对28种不同功能类别的665项功能测试来评估SPOKE。SPOKE成功收集了28个类别的12，491个访问模式作为领域知识，并使用这些知识揭示了320个不合理的策略规则和210个由这些规则定义的过度许可的访问模式，包括一个与臭名昭著的libstagefright漏洞有关的访问模式。这些发现已经得到政策工程师的证实。",
        "title_zh": "讲话：可扩展的知识收集和攻击表面分析访问控制策略的安全性增强了Android",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2017.html",
        "conf_title": "12th AsiaCCS 2017: Abu Dhabi, United Arab Emirates",
        "conf_url": "https://doi.org/10.1145/3052973",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3052973.3052994",
        "title": "Android Database Attacks Revisited",
        "authors": "Behnaz Hassanshahi, Roland H. C. Yap",
        "abstract": "Many Android apps (applications) employ databases for managing sensitive data, thus, security of their databases is a concern. In this paper, we systematically study attacks targeting databases in benign Android apps. In addition to studying database vulnerabilities accessed from content providers, we define and study a new class of database vulnerabilities. We propose an analysis framework to find such vulnerabilities with a proof-of-concept exploit. Our analysis combines static dataflow analysis, symbolic execution with models for handling complex objects such as URIs and dynamic testing. We evaluate our analysis on popular Android apps, successfully finding many database vulnerabilities. Surprisingly, our analyzer finds new ways to exploit previously reported and fixed vulnerabilities. Finally, we propose a fine-grained protection mechanism extending the manifest to protect against database attacks.",
        "files": {
            "openAccessPdf": "http://dl.acm.org/ft_gateway.cfm?id=3052994&type=pdf"
        },
        "abstract_zh": "许多Android应用程序使用数据库来管理敏感数据，因此，数据库的安全性是一个问题。在本文中，我们系统地研究了针对良性Android应用中数据库的攻击。除了研究从内容提供商处获取的数据库漏洞，我们还定义并研究了一类新的数据库漏洞。我们提出了一个分析框架，通过一个概念验证的利用来发现这样的漏洞。我们的分析结合了静态数据流分析、符号执行和处理复杂对象的模型，如URIs和动态测试。我们评估了我们对流行的Android应用程序的分析，成功地发现了许多数据库漏洞。令人惊讶的是，我们的分析器发现了利用以前报告和修复的漏洞的新方法。最后，我们提出了一个细粒度的保护机制，它扩展了清单以防止数据库攻击。",
        "title_zh": "重新审视Android数据库攻击",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2017.html",
        "conf_title": "12th AsiaCCS 2017: Abu Dhabi, United Arab Emirates",
        "conf_url": "https://doi.org/10.1145/3052973",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3052973.3053001",
        "title": "TriFlow: Triaging Android Applications using Speculative Information Flows",
        "authors": "Omid Mirzaei, Guillermo Suarez-Tangil, Juan E. Tapiador, José María de Fuentes",
        "abstract": "Information flows in Android can be effectively used to give an informative summary of an application's behavior, showing how and for what purpose apps use specific pieces of information. This has been shown to be extremely useful to characterize risky behaviors and, ultimately, to identify unwanted or malicious applications in Android. However, identifying information flows in an application is computationally highly expensive and, with more than one million apps in the Google Play market, it is critical to prioritize applications that are likely to pose a risk. In this work, we develop a triage mechanism to rank applications considering their potential risk. Our approach, called TriFlow, relies on static features that are quick to obtain. TriFlow combines a probabilistic model to predict the existence of information flows with a metric of how significant a flow is in benign and malicious apps. Based on this, TriFlow provides a score for each application that can be used to prioritize analysis. TriFlow also provides an explanatory report of the associated risk. We evaluate our tool with a representative dataset of benign and malicious Android apps. Our results show that it can predict the presence of information flows very accurately and that the overall triage mechanism enables significant resource saving.",
        "files": {
            "openAccessPdf": "https://e-archivo.uc3m.es/bitstream/10016/26107/2/triflow_asiaccs_2017_ps.pdf"
        },
        "abstract_zh": "Android中的信息流可以有效地用于给出应用程序行为的信息摘要，显示应用程序如何以及出于什么目的使用特定的信息。事实证明，这对于描述危险行为，并最终识别Android中不需要的或恶意的应用程序非常有用。然而，识别应用程序中的信息流在计算上是非常昂贵的，并且由于Google Play市场上有超过一百万个应用程序，因此对可能造成风险的应用程序进行优先排序是至关重要的。在这项工作中，我们开发了一种考虑潜在风险的分类机制来对应用程序进行排序。我们的方法称为TriFlow，依赖于快速获得的静态特征。TriFlow将预测信息流存在的概率模型与良性和恶意应用程序中信息流的重要程度相结合。基于此，TriFlow为每个应用程序提供了一个分数，可用于确定分析的优先级。TriFlow还提供了相关风险的解释性报告。我们使用良性和恶意Android应用的代表性数据集来评估我们的工具。我们的结果表明，它可以非常准确地预测信息流的存在，并且整体分流机制能够显著节省资源。",
        "title_zh": "Triflow：使用投机性信息流进行分式Android应用",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2017.html",
        "conf_title": "12th AsiaCCS 2017: Abu Dhabi, United Arab Emirates",
        "conf_url": "https://doi.org/10.1145/3052973",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3052973.3052998",
        "title": "Secure Integration of Web Content and Applications on Commodity Mobile Operating Systems",
        "authors": "Drew Davidson, Yaohui Chen, Franklin George, Long Lu, Somesh Jha",
        "abstract": "A majority of today's mobile apps integrate web content of various kinds. Unfortunately, the interactions between app code and web content expose new attack vectors: a malicious app can subvert its embedded web content to steal user secrets; on the other hand, malicious web content can use the privileges of its embedding app to exfiltrate sensitive information such as the user's location and contacts. In this paper, we discuss security weaknesses of the interface between app code and web content through attacks, then introduce defenses that can be deployed without modifying the OS. Our defenses feature WIREframe, a service that securely embeds and renders external web content in Android apps, and in turn, prevents attacks between em- bedded web and host apps. WIREframe fully mediates the interface between app code and embedded web content. Un- like the existing web-embedding mechanisms, WIREframe allows both apps and embedded web content to define simple access policies to protect their own resources. These policies recognize fine-grained security principals, such as origins, and control all interactions between apps and the web. We also introduce WIRE (Web Isolation Rewriting Engine), an offline app rewriting tool that allows app users to inject WIREframe protections into existing apps. Our evaluation, based on 7166 popular apps and 20 specially selected apps, shows these techniques work on complex apps and incur acceptable end-to-end performance overhead.",
        "files": {
            "openAccessPdf": "http://dl.acm.org/ft_gateway.cfm?id=3052998&type=pdf"
        },
        "abstract_zh": "今天的大多数移动应用集成了各种网络内容。不幸的是，应用程序代码和web内容之间的交互暴露了新的攻击载体:恶意应用程序可以颠覆其嵌入的web内容来窃取用户机密；另一方面，恶意网页内容可以利用其嵌入应用程序的特权来泄露敏感信息，如用户的位置和联系人。在本文中，我们讨论了应用程序代码和web内容之间接口的安全弱点，然后介绍了无需修改操作系统即可部署的防御措施。我们的防御以线框为特色，这是一种在Android应用程序中安全嵌入和呈现外部web内容的服务，反过来，可以防止嵌入式web和主机应用程序之间的攻击。线框完全协调应用程序代码和嵌入式web内容之间的接口。与现有的网络嵌入机制不同，线框允许应用程序和嵌入的网络内容定义简单的访问策略来保护它们自己的资源。这些策略识别细粒度的安全原则，如来源，并控制应用程序和web之间的所有交互。我们还推出了WIRE(Web Isolation Rewriting Engine)，这是一款离线应用重写工具，允许应用用户在现有应用中注入线框保护。我们的评估基于7166个流行应用和20个特别选择的应用，表明这些技术可以在复杂应用上工作，并产生可接受的端到端性能开销。",
        "title_zh": "在商品移动操作系统上安全集成Web内容和应用程序",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2017.html",
        "conf_title": "12th AsiaCCS 2017: Abu Dhabi, United Arab Emirates",
        "conf_url": "https://doi.org/10.1145/3052973",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3052973.3052984",
        "title": "DroidForensics: Accurate Reconstruction of Android Attacks via Multi-layer Forensic Logging",
        "authors": "Xingzi Yuan, Omid Setayeshfar, Hongfei Yan, Pranav Panage, Xuetao Wei, Kyu Hyung Lee",
        "abstract": "The goal of cyber attack investigation is to fully reconstruct the details of an attack, so we can trace back to its origin, and recover the system from the damage caused by the attack. However, it is often difficult and requires tremendous manual efforts because attack events occurred days or even weeks before the investigation and detailed information we need is not available anymore. Consequently, forensic logging is significantly important for cyber attack investigation. In this paper, we present DroidForensics, a multi-layer forensic logging technique for Android. Our goal is to provide the user with detailed information about attack behaviors that can enable accurate post-mortem investigation of Android attacks. DroidForensics consists of three logging modules. API logger captures Android API calls that contain high-level semantics of an application. Binder logger records interactions between applications to identify causal relations between processes, and system call logger efficiently monitors low-level system events. We also provide the user interface that the user can compose SQL-like queries to inspect an attack. Our experiments show that Droid Forensics has low runtime overhead (2.9% on average) and low space overhead (105 ~ 169 MByte during 24 hours) on real Android devices. It is effective in the reconstruction of realworld Android attacks we have studied.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "网络攻击调查的目标是全面重建攻击的细节，以便我们可以追溯到攻击的起源，并从攻击造成的损害中恢复系统。但是，这通常很困难，需要大量的手动工作，因为攻击事件发生在调查前几天甚至几周，而我们需要的详细信息不再可用。因此，取证日志对于网络攻击调查非常重要。在本文中，我们介绍了DroidForensics，一种用于Android的多层取证日志技术。我们的目标是为用户提供有关攻击行为的详细信息，以便对Android攻击进行准确的事后调查。DroidForensics由三个日志模块组成。API logger捕获包含应用程序高级语义的Android API调用。Binder logger记录应用程序之间的交互，以确定进程之间的因果关系，system call logger有效地监控低级系统事件。我们还提供了用户界面，用户可以编写类似SQL的查询来检查攻击。我们的实验表明，Droid Forensics在真实的Android设备上具有较低的运行时开销(平均2.9%)和较低的空间开销(24小时内105 ~ 169 MByte)。在我们研究过的真实世界Android攻击的重构中是有效的。",
        "title_zh": "DROIDFOROMENS：通过多层法医记录准确重建Android攻击",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2017.html",
        "conf_title": "12th AsiaCCS 2017: Abu Dhabi, United Arab Emirates",
        "conf_url": "https://doi.org/10.1145/3052973",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3052973.3052986",
        "title": "DroidPill: Pwn Your Daily-Use Apps",
        "authors": "Chaoting Xuan, Gong Chen, Erich Stuntebeck",
        "abstract": "Nowadays, attacking and defending Android apps has be- come an arms race between black hats and white hats. In this paper, we explore a new hacking technique called the App Confusion Attack, which allows hackers to take full control of benign apps and their resources without device root- ing or privilege escalation. Conceptually, an App Confusion Attack hijacks the launching process of each benign app, and forces it to run in a virtual execution context controlled by hackers, instead of the native one provided by the Android Application Framework. This attack is furtive but lethal. When a user clicks on a benign app, the malicious alternative can be loaded and executed with an indistinguishable user interface. As a result, hackers can manipulate the communication between the benign app and the OS, including kernel and system services, and manipulate the code and data at will. To address this issue, we build DroidPill, a framework for malware creation that employs the app virtualization technique and the design flaws in Android to achieve such attacks with free apps. Our evaluation results and case studies show that DroidPill is practical and effective. Lastly, we conclude this work with several possible countermeasures to the App Confusion Attack.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "如今，攻击和防御Android应用已经成为黑帽子和白帽子之间的军备竞赛。在本文中，我们探索了一种新的黑客技术，称为应用混淆攻击，它允许黑客完全控制良性应用及其资源，而无需设备根或权限提升。从概念上讲，应用混淆攻击劫持了每个良性应用的启动进程，并强制其在黑客控制的虚拟执行上下文中运行，而不是Android应用框架提供的原生执行上下文。这次袭击是秘密的，但却是致命的。当用户点击一个良性的应用程序时，恶意的替代程序可以被加载并在一个不可区分的用户界面中执行。因此，黑客可以操纵良性应用程序和操作系统之间的通信，包括内核和系统服务，并随意操纵代码和数据。为了解决这个问题，我们建立了DroidPill，这是一个用于恶意软件创建的框架，它采用应用虚拟化技术和Android中的设计缺陷，通过免费应用来实现这种攻击。评估结果和案例分析表明DroidPill是实用有效的。最后，我们总结了针对应用混淆攻击的几种可能的对策。",
        "title_zh": "DroidPill：PWN您的日常使用应用程序",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2017.html",
        "conf_title": "12th AsiaCCS 2017: Abu Dhabi, United Arab Emirates",
        "conf_url": "https://doi.org/10.1145/3052973",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3052973.3053028",
        "title": "Hit by the Bus: QoS Degradation Attack on Android",
        "authors": "Mehmet Sinan Inci, Thomas Eisenbarth, Berk Sunar",
        "abstract": "Mobile apps need optimal performance and responsiveness to rise amongst numerous rivals on the market. Further, some apps like media streaming or gaming apps cannot even function properly with a performance below a certain threshold. In this work, we present the first performance degradation attack on Android OS that can target rival apps using a combination of logical channel leakages and low-level architectural bottlenecks in the underlying hardware. To show the viability of the attack, we design a proof-of-concept app and test it on various mobile platforms. The attack runs covertly and brings the target to the level of unresponsiveness. With less than 10% CPU time in the worst case, it requires minimal computational effort to run as a background service, and requires only the UsageStats permission from the user. We quantify the impact of our attack using 11 popular benchmark apps, running 44 different tests.} The measured QoS degradation varies across platforms and applications, reaching a maximum of 90\\% in some cases. The attack combines the leakage from logical channels with low-level architectural bottlenecks to design a malicious app that can covertly degrade Quality of Service (QoS) of any targeted app. Furthermore, our attack code has a small footprint and is not detected by the Android system as malicious. Finally, our app can pass the Google Play Store malware scanner, Google Bouncer, as well as the top malware scanners in the Play Store.",
        "files": {
            "openAccessPdf": "http://dl.acm.org/ft_gateway.cfm?id=3053028&type=pdf"
        },
        "abstract_zh": "移动应用需要最佳的性能和响应能力，才能在市场上众多竞争对手中脱颖而出。此外，一些应用程序，如媒体流或游戏应用程序，甚至无法在性能低于特定阈值时正常运行。在这项工作中，我们提出了第一个针对Android操作系统的性能降级攻击，该攻击可以使用逻辑通道泄漏和底层硬件中的低级架构瓶颈的组合来针对竞争对手的应用。为了展示攻击的可行性，我们设计了一个概念验证应用程序，并在各种移动平台上进行测试。攻击秘密进行，并使目标毫无反应。在最坏的情况下，不到10%的CPU时间，它需要最少的计算工作来作为后台服务运行，并且只需要用户的UsageStats许可。我们使用11个流行的基准应用程序，运行44个不同的测试，来量化我们攻击的影响。}测量到的QoS下降因平台和应用程序而异，在某些情况下最高可达90\\%。这种攻击将逻辑通道的泄漏与低级架构瓶颈结合起来，设计一种恶意应用程序，可以暗中降低任何目标应用程序的服务质量(QoS)。此外，我们的攻击代码占用空间小，不会被Android系统检测为恶意代码。最后，我们的应用程序可以通过谷歌Play商店恶意软件扫描器，谷歌Bouncer，以及Play Store中顶级的恶意软件扫描器。",
        "title_zh": "被公共汽车撞到：QoS降解对Android的攻击",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2017.html",
        "conf_title": "12th AsiaCCS 2017: Abu Dhabi, United Arab Emirates",
        "conf_url": "https://doi.org/10.1145/3052973",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3052973.3055156",
        "title": "BRIDEMAID: An Hybrid Tool for Accurate Detection of Android Malware",
        "authors": "Fabio Martinelli, Francesco Mercaldo, Andrea Saracino",
        "abstract": "This paper presents BRIDEMAID, a framework which exploits an approach static and dynamic for accurate detection of Android malware. The static analysis is based on n-grams matching, whilst the dynamic analysis is based on multi-level monitoring of device, app and user behavior. The framework has been tested against 2794 malicious apps reporting a detection accuracy of 99,7% and a negligible false positive rate, tested on a set of 10k genuine apps.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "本文介绍了BRIDEMAID，这是一个利用静态和动态方法来准确检测Android恶意软件的框架。静态分析基于n元语法匹配，而动态分析基于对设备、应用和用户行为的多级监控。该框架已经针对2794个恶意应用进行了测试，报告的检测准确率为99.7%，误报率可以忽略不计，并在一组10k个正版应用上进行测试。",
        "title_zh": "伴娘：精确检测Android恶意软件的混合工具",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2017.html",
        "conf_title": "12th AsiaCCS 2017: Abu Dhabi, United Arab Emirates",
        "conf_url": "https://doi.org/10.1145/3052973",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3052973.3055157",
        "title": "How Discover a Malware using Model Checking",
        "authors": "Fabio Martinelli, Francesco Mercaldo, Vittoria Nardone, Antonella Santone",
        "abstract": "Android operating system is constantly overwhelmed by new sophisticated threats and new zero-day attacks. While aggressive malware, for instance malicious behaviors able to cipher data files or lock the GUI, are not worried to circumvention users by infection (that can try to disinfect the device), there exist malware with the aim to perform malicious actions stealthy, i.e., trying to not manifest their presence to the users. This kind of malware is less recognizable, because users are not aware of their presence. In this paper we propose FormalDroid, a tool able to detect silent malicious beaviours and to localize the malicious payload in Android application. Evaluating real-world malware samples we obtain an accuracy equal to 0.94.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android操作系统不断被新的复杂威胁和新的零日攻击淹没。虽然攻击性恶意软件，例如能够加密数据文件或锁定GUI的恶意行为，并不担心通过感染来绕过用户(其可以尝试给设备杀毒)，但是存在恶意软件，其目的是秘密地执行恶意动作，即，试图不向用户表明它们的存在。这种恶意软件不太容易识别，因为用户没有意识到它们的存在。在这篇文章中，我们提出了FormalDroid，一种能够检测静默恶意行为并定位Android应用程序中恶意负载的工具。评估真实世界的恶意软件样本，我们获得了等于0.94的准确度。",
        "title_zh": "如何使用模型检查发现恶意软件",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2017.html",
        "conf_title": "12th AsiaCCS 2017: Abu Dhabi, United Arab Emirates",
        "conf_url": "https://doi.org/10.1145/3052973",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3052973.3055163",
        "title": "Detecting Inter-App Information Leakage Paths",
        "authors": "Shweta Bhandari, Frédéric Herbreteau, Vijay Laxmi, Akka Zemmari, Partha S. Roop, Manoj Singh Gaur",
        "abstract": "Sensitive (private) information can escape from one app to another using one of the multiple communication methods provided by Android for inter-app communication. This leakage can be malicious. In such a scenario, individual benign app, in collusion with other conspiring apps, if present, can leak the private information. In this work in progress, we present, a new model-checking based approach for inter-app collusion detection. The proposed technique takes into account simultaneous analysis of multiple apps. We are able to identify any set of conspiring apps involved in the collusion. To evaluate the efficacy of our tool, we developed Android apps that exhibit collusion through inter-app communication. Eight demonstrative sets of apps have been contributed to widely used test dataset named DroidBench. Our experiments show that proposed technique can accurately detect the presence/absence of collusion among apps. To the best of our knowledge, our proposal has improved detection capability than other techniques.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "使用Android为应用程序间通信提供的多种通信方法之一，敏感(私人)信息可以从一个应用程序泄漏到另一个应用程序。这种泄漏可能是恶意的。在这种情况下，个别良性应用程序与其他阴谋应用程序(如果存在)勾结，可能会泄漏隐私信息。在这项正在进行的工作中，我们提出了一种新的基于模型检测的应用间共谋检测方法。所提出的技术考虑了多个应用的同时分析。我们能够识别参与共谋的任何一组共谋应用程序。为了评估我们工具的功效，我们开发了通过应用间通信表现出共谋的Android应用。八个应用程序的演示集已被贡献给广泛使用的测试数据集DroidBench。我们的实验表明，所提出的技术可以准确地检测出应用之间是否存在共谋。据我们所知，我们的建议比其他技术提高了检测能力。",
        "title_zh": "检测应用间信息泄漏路径",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2017.html",
        "conf_title": "12th AsiaCCS 2017: Abu Dhabi, United Arab Emirates",
        "conf_url": "https://doi.org/10.1145/3052973",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3052973.3055162",
        "title": "Detection of Information Leaks via Reflection in Android Apps",
        "authors": "Jyoti Gajrani, Li Li, Vijay Laxmi, Meenakshi Tripathi, Manoj Singh Gaur, Mauro Conti",
        "abstract": "Reflection is a language feature which allows to analyze and transform the behavior of classes at the runtime. Reflection is used for software debugging and testing. Malware authors can leverage reflection to subvert the malware detection by static analyzers. Reflection initializes the class, invokes any method of class, or accesses any field of class. But, instead of utilizing usual programming language syntax, reflection passes classes/methods etc. as parameters to reflective APIs. As a consequence, these parameters can be constructed dynamically or can be encrypted by malware. These cannot be detected by state-of-the-art static tools. We propose EspyDroid, a system that combines dynamic analysis with code instrumentation for a more precise and automated detection of malware employing reflection. We evaluate EspyDroid on 28 benchmark apps employing major reflection categories. Our technique show improved results over FlowDroid via detection of additional undetected flows. These flows have potential to leak sensitive and private information of the users, through various sinks.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "反射是一种语言特性，它允许在运行时分析和转换类的行为。反射用于软件调试和测试。恶意软件作者可以利用反射来破坏静态分析器对恶意软件的检测。反射初始化类，调用类的任何方法，或者访问类的任何字段。但是，反射传递类/方法等，而不是利用通常的编程语言语法。作为反射API的参数。因此，这些参数可以动态构建，也可以被恶意软件加密。这些是最先进的静态工具无法检测到的。我们提出了EspyDroid，这是一个结合了动态分析和代码插装的系统，可以更精确和自动地检测采用反射的恶意软件。我们在28个采用主要反射类别的基准应用上评估了EspyDroid。我们的技术通过检测额外的未检测到的流，显示出优于FlowDroid的改进结果。这些流量有可能通过各种接收器泄露用户的敏感和隐私信息。",
        "title_zh": "通过Android应用中的反射检测信息泄漏",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2017.html",
        "conf_title": "12th AsiaCCS 2017: Abu Dhabi, United Arab Emirates",
        "conf_url": "https://doi.org/10.1145/3052973",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3052973.3055160",
        "title": "A Behavioral Biometric Authentication Framework on Smartphones",
        "authors": "Ahmed Mahfouz, Tarek M. Mahmoud, Ahmed Sharaf Eldin",
        "abstract": "To protect smartphones from unauthorized access, the user has the option to activate authentication mechanisms : PIN, Password, or Pattern. Unfortunately, these mechanisms are vulnerable to shoulder-surfing, smudge and snooping attacks. Even the traditional biometric based systems such as fingerprint or face, also could be bypassed. In order to protect smartphones data against these sort of attacks, we propose a behavioral biometric authentication framework that leverages the user's behavioral patterns such as touchscreen actions, keystroke, application used and sensor data to authenticate smartphone users. To evaluate the framework, we conducted a field study in which we instrumented the Android OS and collected data from 52 participants during 30-day period. We present the prototype of our framework and we are working on its components to select the best features set that can be used to build different modalities to authenticate users on different contexts. To this end, we developed only one modality, a gesture authentication modality, which authenticate smartphone users based on touch gesture. We evaluated this authentication modality on about 3 million gesture samples based on two schemes, classification scheme with EER~0.004, and anomaly detection scheme with EER~0.10.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "为了保护智能手机免受未经授权的访问，用户可以选择激活身份验证机制:PIN、密码或模式。不幸的是，这些机制容易受到肩窥、涂抹和窥探攻击。甚至传统的基于生物特征的系统，如指纹或人脸，也可以被绕过。为了保护智能手机数据免受此类攻击，我们提出了一个行为生物认证框架，该框架利用用户的行为模式，如触摸屏动作、按键、使用的应用程序和传感器数据来认证智能手机用户。为了评估该框架，我们进行了一项实地研究，在30天的时间里，我们对Android操作系统进行了测试，并从52名参与者那里收集了数据。我们展示了我们的框架的原型，我们正在研究它的组件，以选择可用于构建不同模式的最佳功能集，从而在不同的上下文中对用户进行身份验证。为此，我们只开发了一种模式，即手势认证模式，它基于触摸手势来认证智能手机用户。我们基于两种方案在大约300万个手势样本上评估了这种认证模式，EER约为0.004的分类方案和EER约为0.10的异常检测方案。",
        "title_zh": "智能手机上的行为生物识别验证框架",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2017.html",
        "conf_title": "12th AsiaCCS 2017: Abu Dhabi, United Arab Emirates",
        "conf_url": "https://doi.org/10.1145/3052973",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3196494.3196509",
        "title": "DeWiCam: Detecting Hidden Wireless Cameras via Smartphones",
        "authors": "Yushi Cheng, Xiaoyu Ji, Tianyang Lu, Wenyuan Xu",
        "abstract": "Wireless cameras are widely deployed in surveillance systems for security guarding. However, the privacy concerns associated with unauthorized videotaping, are drawing an increasing attention recently. Existing detection methods for unauthorized wireless cameras are either limited by their detection accuracy or requiring dedicated devices. In this paper, we propose DeWiCam, a lightweight and effective detection mechanism using smartphones. The basic idea of DeWiCam is to utilize the intrinsic traffic patterns of flows from wireless cameras. Compared with traditional traffic pattern analysis, DeWiCam is more challenging because it cannot access the encrypted information in the data packets. Yet, DeWiCam overcomes the difficulty and can detect nearby wireless cameras reliably. To further identify whether a camera is in an interested room, we propose a human-assisted identification model. We implement DeWiCam on the Android platform and evaluate it with extensive experiments on 20 cameras. The evaluation results show that DeWiCam can detect cameras with an accuracy of 99% within 2.7 s.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "无线摄像机广泛应用于监控系统中，用于安全防范。然而，与未经授权的录像相关的隐私问题最近引起了越来越多的关注。用于未经授权的无线摄像机的现有检测方法要么受到其检测精度的限制，要么需要专用设备。在本文中，我们提出了DeWiCam，一种使用智能手机的轻量级和有效的检测机制。DeWiCam的基本思想是利用来自无线摄像机的固有流量模式。与传统的流量模式分析相比，DeWiCam更具挑战性，因为它无法访问数据包中的加密信息。然而，DeWiCam克服了这一困难，可以可靠地检测附近的无线摄像头。为了进一步识别摄像头是否在感兴趣的房间，我们提出了一个人辅助识别模型。我们在Android平台上实现了DeWiCam，并在20台相机上进行了大量实验。评测结果显示，DeWiCam可以在2.7 s内以99%的准确率检测摄像头。",
        "title_zh": "Dewicam：通过智能手机检测隐藏的无线摄像机",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2018.html",
        "conf_title": "13th AsiaCCS 2018: Incheon, Republic of Korea",
        "conf_url": "https://doi.org/10.1145/3196494",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3196494.3196538",
        "title": "Source Attribution of Cryptographic API Misuse in Android Applications",
        "authors": "Ildar Muslukhov, Yazan Boshmaf, Konstantin Beznosov",
        "abstract": "Recent research suggests that 88% of Android applications that use Java cryptographic APIs make at least one mistake, which results in an insecure implementation. It is unclear, however, if these mistakes originate from code written by application or third-party library developers. Understanding the responsible party for a misuse case is important for vulnerability disclosure. In this paper, we bridge this knowledge gap and introduce source attribution to the analysis of cryptographic API misuse. We developed BinSight, a static program analyzer that supports source attribution, and we analyzed 132K Android applications collected in years 2012, 2015, and 2016. Our results suggest that third-party libraries are the main source of cryptographic API misuse. In particular, 90% of the violating applications, which contain at least one call-site to Java cryptographic API, originate from libraries. When compared to 2012, we found the use of ECB mode for symmetric ciphers has significantly decreased in 2016, for both application and third-party library code. Unlike application code, however, third-party libraries have significantly increased their reliance on static encryption keys for symmetric ciphers and static IVs for CBC mode ciphers. Finally, we found that the insecure RC4 and DES ciphers were the second and the third most used ciphers in 2016.",
        "files": {
            "openAccessPdf": "https://zenodo.org/record/3264740/files/binsight-asiaccs-2018.pdf"
        },
        "abstract_zh": "最近的研究表明，88%使用Java加密API的Android应用程序至少犯了一个错误，这导致了不安全的实现。然而，尚不清楚这些错误是否源于应用程序或第三方库开发人员编写的代码。了解误用案例的责任方对于漏洞披露非常重要。在本文中，我们填补了这一知识空白，并将来源归因引入到加密API误用的分析中。我们开发了BinSight，这是一个支持源代码归属的静态程序分析器，我们分析了2012年、2015年和2016年收集的132K Android应用程序。我们的结果表明，第三方库是加密API误用的主要来源。特别是，90%的违规应用程序(包含至少一个对Java加密API的调用点)源自库。与2012年相比，我们发现2016年应用程序和第三方库代码使用对称密码的ECB模式显著减少。然而，与应用程序代码不同，第三方库显著增加了对对称密码的静态加密密钥和CBC模式密码的静态iv的依赖。最后，我们发现不安全的RC4和DES密码是2016年第二和第三大使用密码。",
        "title_zh": "加密API滥用Android应用中的源归因",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2018.html",
        "conf_title": "13th AsiaCCS 2018: Incheon, Republic of Korea",
        "conf_url": "https://doi.org/10.1145/3196494",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3196494.3196554",
        "title": "Don't throw me away: Threats Caused by the Abandoned Internet Resources Used by Android Apps",
        "authors": "Elkana Pariwono, Daiki Chiba, Mitsuaki Akiyama, Tatsuya Mori",
        "abstract": "This study aims to understand the threats caused by abandoned Internet resources used by Android apps. By abandoned, we mean Internet resources that support apps that were published and are still available on the mobile app marketplace, but have not been maintained and hence are at risk for abuse by an outsider. Internet resources include domain names and hard-coded IP addresses, which could be used for nefarious purposes, e.g., stealing sensitive private information, scamming and phishing, click fraud, and injecting malware distribution URL. As a result of the analysis of 1.1 M Android apps published in the official marketplace, we uncovered 3,628 of abandoned Internet resources associated with 7,331 available mobile apps. These resources are subject to hijack by outsiders. Of these apps, 13 apps have been installed more than a million of times, a measure of the breadth of the threat. Based on the findings of empirical experiments, we discuss potential threats caused by abandoned Internet resources and propose countermeasures against these threats.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "这项研究旨在了解Android应用程序使用的废弃互联网资源所造成的威胁。所谓废弃，我们指的是支持已发布的应用程序的互联网资源，这些应用程序仍然可以在移动应用程序市场上使用，但没有得到维护，因此有被外人滥用的风险。互联网资源包括域名和硬编码的IP地址，它们可能被用于各种目的，例如窃取敏感的私人信息、诈骗和网络钓鱼、点击欺诈以及注入恶意软件分发URL。通过对官方市场上发布的110万个安卓应用的分析，我们发现了3628个废弃的互联网资源，与7331个可用的移动应用相关联。这些资源容易被外人劫持。在这些应用程序中，有13个应用程序的安装次数超过了100万次，这反映了威胁的广度。基于实证研究的结果，我们讨论了废弃互联网资源所带来的潜在威胁，并提出了应对这些威胁的对策。",
        "title_zh": "不要把我丢掉：由Android应用程序使用的废弃互联网资源造成的威胁",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2018.html",
        "conf_title": "13th AsiaCCS 2018: Incheon, Republic of Korea",
        "conf_url": "https://doi.org/10.1145/3196494",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3196494.3196510",
        "title": "ProcHarvester: Fully Automated Analysis of Procfs Side-Channel Leaks on Android",
        "authors": "Raphael Spreitzer, Felix Kirchengast, Daniel Gruss, Stefan Mangard",
        "abstract": "The procfs has been identified as a viable source of side-channel information leaks on mobile devices. Starting with Android M (Android 6), access to the procfs has been continuously restricted in order to cope with these attacks. Yet, more recent papers demonstrated that even if access to process-specific information is restricted within the procfs, global statistics can still be exploited. However, with state-of-the-art techniques, the search for procfs information leaks requires a significant amount of manual work. This makes an exhaustive analysis of existing and newly introduced procfs resources in terms of information leaks impractical. We introduce ProcHarvester, a systematic and fully automated technique to assess procfs information leaks. ProcHarvester automatically triggers events of interest and later on applies machine learning techniques to identify procfs information leaks. We demonstrate the power of ProcHarvester by identifying information leaks to infer app starts from a set of 100 apps with an accuracy of 96% on Android N (Android 7). Thereby, we outperform the most accurate app inference attack by about 10 percentage points. We also demonstrate the ease of applicability of ProcHarvester by showing how to profile other events such as website launches as well as keyboard gestures, and we identify the first procfs side channels on Android O (Android 8). ProcHarvester advances investigations of procfs information leaks to the next level and will hopefully help to reduce the attack surface of side-channel attacks.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "procfs已被确定为移动设备上侧信道信息泄漏的一个可行来源。从Android M (Android 6)开始，为了应对这些攻击，对procfs的访问一直受到限制。然而，最近的论文表明，即使在procfs中对特定于流程的信息的访问受到限制，仍然可以利用全局统计信息。但是，使用最先进的技术，搜索procfs信息泄漏需要大量的人工工作。这使得从信息泄露的角度对现有的和新引进的procfs资源进行详尽的分析变得不切实际。我们引入了ProcHarvester，这是一种评估procfs信息泄漏的系统化全自动技术。ProcHarvester自动触发感兴趣的事件，然后应用机器学习技术来识别procfs信息泄漏。我们通过识别信息泄漏来展示ProcHarvester的强大功能，以在Android N (Android 7)上从100个应用中推断应用启动，准确率为96%。因此，我们比最准确的应用程序推断攻击高出约10个百分点。我们还通过展示如何分析其他事件(如网站启动以及键盘手势)来展示ProcHarvester的易用性，并且我们确定了Android O (Android 8)上的第一个procfs侧通道。ProcHarvester将procfs信息泄漏的调查推进到了一个新的水平，并有望帮助减少侧信道攻击的攻击面。",
        "title_zh": "ProCharvester：对Android上的侧渠道泄漏的全自动分析",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2018.html",
        "conf_title": "13th AsiaCCS 2018: Incheon, Republic of Korea",
        "conf_url": "https://doi.org/10.1145/3196494",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3196494.3196533",
        "title": "Droid M+: Developer Support for Imbibing Android's New Permission Model",
        "authors": "Ioannis Gasparis, Azeem Aqil, Zhiyun Qian, Chengyu Song, Srikanth V. Krishnamurthy, Rajiv Gupta, Edward Colbert",
        "abstract": "In Android 6.0, Google revamped its long criticized permission model to prompt the user during runtime, and allow her to dynamically revoke granted permissions. Towards steering developers to this new model and improve user experience, Google also provides guidelines on (a) how permission requests should be formulated (b) how to educate users on why a permission is needed and (c) how to provide feedback when a permission is denied. In this paper we perform, to the best of our knowledge, the first measurement study on the adoption of Android's new model on recently updated apps from the official Google Play Store. We find that, unfortunately, (1) most apps have not been migrated to this new model and (2) for those that do support the model, many do not adhere to Google's guidelines. We attribute this unsatisfying status quo to the lack of automated transformation tools that can help developers refactor their code; via an IRB approved study we find that developers felt that there was a non-trivial effort involved in migrating their apps to the new model. Towards solving this problem, we develop Droid M+, a system that helps developers to easily retrofit their legacy code to support the new permission model and adhere to Google's guidelines. We believe that Droid M+ offers a significant step in preserving user privacy and improving user experience.",
        "files": {
            "openAccessPdf": "https://dl.acm.org/doi/pdf/10.1145/3196494.3196533"
        },
        "abstract_zh": "在Android 6.0中，谷歌修改了其长期受到批评的权限模型，以在运行时提示用户，并允许她动态撤销授予的权限。为了指导开发人员使用这种新模式并改善用户体验，Google还提供了以下指导方针:( a)如何制定权限请求;( b)如何教育用户为什么需要权限;( c)当权限被拒绝时如何提供反馈。据我们所知，在本文中，我们对谷歌Play商店官方最近更新的应用程序采用Android新模式的情况进行了首次测量研究。我们发现，不幸的是，(1)大多数应用程序还没有迁移到这种新模式，以及(2)对于那些支持这种模式的应用程序，许多并没有遵守谷歌的指导方针。我们将这种不令人满意的现状归因于缺乏可以帮助开发人员重构代码的自动化转换工具；通过IRB批准的一项研究，我们发现开发人员认为将他们的应用程序迁移到新模型需要付出巨大的努力。为了解决这个问题，我们开发了Droid M+，这是一个帮助开发人员轻松改造其遗留代码的系统，以支持新的权限模型并遵守Google的指导方针。我们相信Droid M+在保护用户隐私和改善用户体验方面迈出了重要的一步。",
        "title_zh": "Droid M+：开发人员支持Android的新许可模型",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2018.html",
        "conf_title": "13th AsiaCCS 2018: Incheon, Republic of Korea",
        "conf_url": "https://doi.org/10.1145/3196494",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3196494.3196549",
        "title": "Dazed Droids: A Longitudinal Study of Android Inter-App Vulnerabilities",
        "authors": "Ryan Johnson, Mohamed Elsabagh, Angelos Stavrou, Jeff Offutt",
        "abstract": "Android devices are an integral part of modern life from phone to media boxes to smart home appliances and cameras. With 38.9% of market share, Android is now the most used operating system not just in terms of mobile devices but considering all OSes. As applications' complexity and features increased, Android relied more heavily on code and data sharing among apps for faster response times and richer user experience. To achieve that, Android apps reuse functionality and data by means of inter-app message passing where each app defines the messages it expects to receive. In this paper, we analyze the proliferation of exploitable inter-app communication vulnerabilities using a rich corpus of 1) a representative sample of 32 Android devices, 2) 59 official Google Android versions, and 3) the top 18,583 apps from 2016 to 2017. This corpus covers $91$ Android builds from version 4.4 to present. To the best of our knowledge, ours is the first longitudinal study looking into the propagation of vulnerabilities across AOSP builds, between AOSP and a diverse set of devices, and across app versions over a period of 13 months. To identify inter-app vulnerabilities, we developed Daze as a swift and fully-automated framework for extracting app components and fuzzing all app interfaces. Daze needs only about three hours for full-device analysis or two minutes per app on average. We identified 14,413 vulnerabilities and quantified their exposure time and the number of versions affected. Our findings revealed that $51.7%$ of Android devices and $49%$ of the top $300$ apps on Google Play contained at least one critical inter-app vulnerability. We found that about $15%$ of fixed vulnerabilities lived for more than $100$ days before being patched, more than $20%$ of unpatched vulnerabilities have existed for at least $180$ days, and $45%$ of unpatched vulnerabilities persisted through the latest two to four consecutive app versions in our dataset.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "从手机到媒体盒，再到智能家电和相机，Android设备是现代生活不可或缺的一部分。Android拥有38.9%的市场份额，不仅在移动设备方面，而且在所有操作系统方面都是最常用的操作系统。随着应用程序的复杂性和功能的增加，Android更加依赖于应用程序之间的代码和数据共享，以获得更快的响应时间和更丰富的用户体验。为了实现这一点，Android应用程序通过应用程序间的消息传递来重用功能和数据，其中每个应用程序定义它期望接收的消息。在本文中，我们使用丰富的语料库分析了可利用的应用程序间通信漏洞的扩散，这些语料库包括1)32个Android设备的代表性样本，2) 59个谷歌Android官方版本，以及3)2016年至2017年的18，583个应用程序。这个语料库涵盖了从版本4.4到现在的$91$ Android构建。据我们所知，我们的研究是第一项纵向研究，旨在调查漏洞在13个月内跨AOSP版本、AOSP和各种设备以及跨应用版本的传播情况。为了识别应用程序间的漏洞，我们开发了Daze作为一个快速和全自动的框架，用于提取应用程序组件和模糊所有应用程序接口。Daze只需要大约三个小时进行全设备分析，平均每个应用程序只需要两分钟。我们发现了14，413个漏洞，并量化了它们的暴露时间和受影响的版本数量。我们的调查结果显示，Google Play上51.7%的Android设备和49%的前300美元应用程序包含至少一个关键的应用程序间漏洞。我们发现，大约15%$的已修复漏洞在被修补之前存在了超过$100$天，超过$20%$的未修补漏洞存在了至少$180$天，并且在我们的数据集中，有$45%$的未修补漏洞在最近两到四个连续的应用程序版本中持续存在。",
        "title_zh": "昏昏欲睡的机器人：Android Inter-App漏洞的纵向研究",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/asiaccs2018.html",
        "conf_title": "13th AsiaCCS 2018: Incheon, Republic of Korea",
        "conf_url": "https://doi.org/10.1145/3196494",
        "keywords": [
            "AOSP",
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3579856.3582812",
        "title": "Symbolic modelling of remote attestation protocols for device and app integrity on Android",
        "authors": "Abdulla Aldoseri, Tom Chothia, José Moreira, David F. Oswald",
        "abstract": "Ensuring the integrity of a remote app or device is one of the most challenging concerns for the Android ecosystem. Software-based solutions provide limited protection and can usually be circumvented by repacking the mobile app or rooting the device. Newer protocols use trusted hardware to provide stronger remote attestation guarantees, e.g., Google SafetyNet, Samsung Knox (V2 and V3 attestation), and Android Key Attestation. So far, the protocols used by these systems have received relatively little attention. In this paper, we formally model these platforms using the Tamarin Prover and verify their security properties in the symbolic model of cryptography, revealing two vulnerabilities: we found a relay attack against Samsung Knox V2 that allows a malicious app to masquerade as an honest app, and an error in the recommended use case for Android Key Attestation that means that old—possibly out of date—attestations can be replayed. We employed our findings and the modelled platforms to tackle one of the most challenging problems in Android security, namely code protection, proposing and formally modelling a code protection scheme that ensures source code protection for mobile apps using a hardware root of trust.",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "Android设备和应用完整性远程证明协议的符号建模",
        "abstract_zh": "确保远程应用或设备的完整性是Android生态系统最具挑战性的问题之一。基于软件的解决方案提供有限的保护，通常可以通过重新打包移动应用程序或找到设备来规避。较新的协议使用可信硬件来提供更强的远程证明保证，例如Google SafetyNet、Samsung Knox (V2和V3证明)和Android密钥证明。到目前为止，这些系统使用的协议受到的关注相对较少。在本文中，我们使用Tamarin证明者对这些平台进行了正式建模，并在密码学的符号模型中验证了它们的安全属性，揭示了两个漏洞:我们发现了一个针对三星Knox V2的中继攻击，该攻击允许恶意应用伪装成诚实的应用，以及Android密钥证明的推荐使用案例中的一个错误，这意味着旧的(可能过期的)证明可以被重播。我们利用我们的发现和建模平台来解决Android安全中最具挑战性的问题之一，即代码保护，提出并正式建模了一个代码保护方案，该方案使用硬件信任根来确保移动应用程序的源代码保护。",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/asiaccs/asiaccs2023.html",
        "conf_title": "18th AsiaCCS 2023:\nMelbourne, VIC, Australia",
        "conf_url": "https://doi.org/10.1145/3579856",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3579856.3582834",
        "title": "Security Properties of Virtual Remotes and SPOOKing their violations",
        "authors": "Joshua David Oetting Majors, Edgardo Barsallo Yi, Amiya Maji, Darren Wu, Saurabh Bagchi, Aravind Machiry",
        "abstract": "As Smart TV devices become more prevalent in our lives, it becomes increasingly important to evaluate the security of these devices. In addition to a smart and connected ecosystem through apps, Smart TV devices expose a WiFi remote protocol, that provides a virtual remote capability and allows a WiFi enabled device (e.g., a Smartphone) to control the Smart TV. The WiFi remote protocol might pose certain security risks that are not present in traditional TVs. In this paper, we assess the security of WiFi remote protocols by first identifying the desired security properties so that we achieve the same level of security as in traditional TVs. Our analysis of four popular Smart TV platforms, Android TV, Amazon FireOS, Roku OS, and WebOS (for LG TVs), revealed that all these platforms violate one or more of the identified security properties. To demonstrate the impact of these flaws, we develop Spook, which uses one of the commonly violated properties of a secure WiFi remote protocol to pair an Android mobile as a software remote to an Android TV. Subsequently, we hijack the Android TV device through the device debugger, enabling complete remote control of the device. All our findings have been communicated to the corresponding vendors. Google acknowledged our findings as a security vulnerability, assigned it a CVE, and released patches to the Android TV OS to partially mitigate the attack. We argue that these patches provide a stopgap solution without ensuring that WiFi remote protocol has all the desired security properties. We design and implement a WiFi remote protocol in the Android ecosystem using ARM TrustZone. Our evaluation shows that the proposed defense satisfies all the security properties and ensures that we have the flexibility of virtual remote without compromising security.",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "虚拟遥控器的安全属性及其违规行为",
        "abstract_zh": "随着智能电视设备在我们生活中变得越来越普遍，评估这些设备的安全性变得越来越重要。除了通过应用程序实现智能和互联生态系统之外，智能电视设备还提供WiFi远程协议，该协议提供虚拟远程功能，并允许支持WiFi的设备(例如，智能手机)控制智能电视。WiFi远程协议可能会带来某些传统电视不存在的安全风险。在本文中，我们通过首先确定所需的安全属性来评估WiFi远程协议的安全性，以便我们实现与传统电视相同的安全级别。我们对四个流行的智能电视平台(Android TV、Amazon FireOS、Roku OS和WebOS(适用于LG电视))的分析显示，所有这些平台都违反了一项或多项已确定的安全属性。为了展示这些缺陷的影响，我们开发了Spook，它使用安全WiFi远程协议的一个常见违规属性来将Android手机作为软件遥控器与Android电视配对。随后，我们通过设备调试器劫持了Android TV设备，实现了对设备的完全远程控制。我们所有的调查结果都已传达给相应的供应商。谷歌承认我们的发现是一个安全漏洞，给它分配了一个CVE，并发布了Android TV操作系统的补丁，以部分缓解攻击。我们认为，这些补丁提供了一个权宜之计，不能确保WiFi远程协议具有所有期望的安全属性。我们使用ARM TrustZone在Android生态系统中设计并实现了一个WiFi远程协议。我们的评估表明，建议的防御满足所有安全属性，并确保我们在不牺牲安全性的情况下拥有虚拟远程的灵活性。",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/asiaccs/asiaccs2023.html",
        "conf_title": "18th AsiaCCS 2023:\nMelbourne, VIC, Australia",
        "conf_url": "https://doi.org/10.1145/3579856",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3579856.3582832",
        "title": "CryptoShield - Automatic On-Device Mitigation for Crypto API Misuse in Android Applications",
        "authors": "Florian Draschbacher, Johannes Feichtner",
        "abstract": "Misuse of cryptographic APIs remains one of the most common flaws in Android applications. The complexity of cryptographic APIs frequently overwhelms developers. This can lead to mistakes that leak sensitive user data to trivial attacks. Despite herculean efforts by platform provider Google, countermeasures introduced so far were not successful in preventing these flaws. Users remain at risk until an effective systemic mitigation has been found. In this paper, we propose a practical solution that mitigates crypto API misuse in compiled Android applications. It enables users to protect themselves against misuse exploitation until the research community has identified an effective long-term solution. CryptoShield consists of generic mitigation procedures for the most critical crypto API misuse scenarios and an implementation that autonomously extends protection onto all applications on an unrooted Android device. Our on-device CryptoShield Agent injects an instrumentation module into application packages, where it can intercept crypto API calls for detecting misuse and applying mitigations. Our solution was designed for real-world applicability. It retains the update flow through Google Play and can be integrated into existing MDM infrastructure. As a demonstration of CryptoShield’s efficiency and efficacy, we conduct automated (1604 apps) and manual (99 apps) analyses on the most popular applications from Google Play, as well as measurements on synthetic benchmarks. Our solution mitigates crypto API misuse in 96 % of all vulnerable apps, while retaining full functionality for 92 % of all apps. On-device instrumentation takes roughly 11 seconds per application package on average, with minimal impact on package size (5 %) and negligible runtime overhead (571 ms on average app launches, 101 ms worst-case mitigation overhead per crypto API call).",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "CryptoShield -自动在设备上缓解Android应用程序中的加密API误用",
        "abstract_zh": "误用加密API仍然是Android应用程序中最常见的缺陷之一。加密API的复杂性经常让开发人员不知所措。这可能导致错误，将敏感的用户数据泄露给无关紧要的攻击。尽管平台提供商谷歌做出了巨大努力，但迄今为止推出的对策并未成功防止这些缺陷。在找到有效的系统性缓解措施之前，用户仍然面临风险。在本文中，我们提出了一个实用的解决方案，以减轻编译的Android应用程序中的加密API滥用。它使用户能够保护自己不被滥用，直到研究界找到一个有效的长期解决方案。CryptoShield包括针对最关键的crypto API误用场景的通用缓解程序，以及自动将保护扩展到非root Android设备上的所有应用程序的实现。我们的设备上CryptoShield代理在应用程序包中注入了一个工具模块，它可以拦截加密API调用，以检测误用并应用缓解措施。我们的解决方案是为现实世界的适用性而设计的。它保留了通过Google Play的更新流程，并且可以集成到现有的MDM基础设施中。为了展示CryptoShield的效率和功效，我们对Google Play中最受欢迎的应用程序进行了自动(1604个应用程序)和手动(99个应用程序)分析，并对合成基准进行了测量。我们的解决方案减少了96 %的易受攻击应用程序中的加密API误用，同时保留了92 %的应用程序的全部功能。每个应用程序包的设备上插装平均需要大约11秒，对包大小的影响极小(5 %)，运行时开销可以忽略不计(平均应用程序启动时间为571毫秒，每个加密API调用的最坏情况缓解开销为101毫秒)。",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/asiaccs/asiaccs2023.html",
        "conf_title": "18th AsiaCCS 2023:\nMelbourne, VIC, Australia",
        "conf_url": "https://doi.org/10.1145/3579856",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3579856.3595806",
        "title": "Uncovering Vulnerabilities of Bluetooth Low Energy IoT from Companion Mobile Apps with Ble-Guuide",
        "authors": "Pallavi Sivakumaran, Chaoshun Zuo, Zhiqiang Lin, Jorge Blasco",
        "abstract": "Increasingly, with embedded intelligence and control, IoT devices are being adopted faster than ever. However, the IoT landscape and its security implications are not yet fully understood. This paper seeks to shed light on this by focusing on a particular type of IoT devices, namely the ones using Bluetooth Low Energy (BLE). Our contributions are two-fold: First, we present Ble-Guuide, a framework for performing mobile app-centric security issue identification. We exploit Universally Unique Identifiers (UUIDs), which underpin data transmissions in BLE, to glean rich information regarding device functionality and the underlying security issues. We combine this with information from app descriptions and BLE libraries, to identify the corresponding security vulnerabilities in BLE devices and determine the security or privacy impact they could have depending on the device functionality. Second, we present a large-scale analysis of 17,243 free, BLE-enabled Android APKs, systematically crawled from the official Google Play store. By applying Ble-Guuide to this dataset, we uncover that more than 70% of these APKs contain at least one security vulnerability. We also obtain insights into the identified security vulnerabilities and their impact.",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "利用Ble-guguide从配套移动应用中发现蓝牙低能耗物联网漏洞",
        "abstract_zh": "随着嵌入式智能和控制的发展，物联网设备的应用速度越来越快。然而，物联网的前景及其安全影响尚未得到充分理解。本文旨在通过关注一种特殊类型的物联网设备来揭示这一点，即使用蓝牙低能耗(BLE)的设备。我们的贡献是双重的:首先，我们提出了Ble-guguide，一个用于执行以移动应用为中心的安全问题识别的框架。我们利用支持BLE数据传输的通用唯一标识符(UUIDs)来收集有关设备功能和潜在安全问题的丰富信息。我们将此与应用描述和BLE库中的信息相结合，以识别BLE设备中相应的安全漏洞，并根据设备功能确定它们可能对安全或隐私造成的影响。其次，我们对17，243个免费的、支持BLE的Android APKs进行了大规模分析，这些apk是从官方Google Play商店系统抓取的。通过将Ble-guguide应用于该数据集，我们发现超过70%的apk包含至少一个安全漏洞。我们还深入了解已识别的安全漏洞及其影响。",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/asiaccs/asiaccs2023.html",
        "conf_title": "18th AsiaCCS 2023:\nMelbourne, VIC, Australia",
        "conf_url": "https://doi.org/10.1145/3579856",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/soups2021/presentation/cho",
        "title": "Towards Usable and Secure Location-based Smartphone Authentication",
        "authors": "Geumhwan Cho, Sungsu Kwag, Jun Ho Huh, Bedeuro Kim, Choong-Hoon Lee, Hyoungshick Kim",
        "abstract": "The concept of using location information to implicitly unlock smartphones is being widely commercialized on Android phones: once a user registers a location that she is willing to trust, her phone would unlock automatically when the user physically moves to that trusted location. To date, however, security risks associated with misuse of locations to unlock phones (e.g., people registering unsafe locations) have not been studied before. To bridge this gap, we conducted an interview study with 18 participants to study users’ perceptions on the location-based smartphone authentication, and identified key design requirements such as the need to support fine-grained indoor location registration. We then conducted a field study with 29 participants to study real-world usage behaviors with a fully working application that we implemented. Our findings suggest that people often register non-private (potentially unsafe) locations as trusted locations, and select large (phone unlock) coverage areas without considering security implications. As for usability benefits, however, the participants were able to reduce about 37% of manual unlock attempts on average by using our location-based implicit authentication service.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "使用位置信息隐式解锁智能手机的概念正在Android手机上广泛商业化:一旦用户注册了她愿意信任的位置，当用户实际移动到该可信位置时，她的手机会自动解锁。然而，迄今为止，与滥用位置来解锁电话(例如，人们注册不安全的位置)相关联的安全风险以前没有被研究过。为了弥合这一差距，我们对18名参与者进行了采访研究，以研究用户对基于位置的智能手机身份认证的看法，并确定了关键的设计要求，如支持细粒度室内位置注册的需求。然后，我们对29名参与者进行了一项现场研究，以研究我们实现的完全正常工作的应用程序的真实使用行为。我们的发现表明，人们经常将非隐私(潜在不安全)的位置注册为可信位置，并选择大的(电话解锁)覆盖区域，而不考虑安全影响。然而，就可用性而言，参与者通过使用我们基于位置的隐式身份验证服务，平均能够减少约37%的手动解锁尝试。",
        "title_zh": "走向可用和安全的基于位置的智能手机认证",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/soups/soups2021.html",
        "conf_title": "17th SOUPS @ USENIX Security Symposium 2021",
        "conf_url": "https://www.usenix.org/conference/soups2021",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/soups2021/presentation/munyendo",
        "title": "Using a Blocklist to Improve the Security of User Selection of Android Patterns",
        "authors": "Collins W. Munyendo, Miles Grant, Philipp Markert, Timothy J. Forman, Adam J. Aviv",
        "abstract": "Android patterns remain a popular method for unlocking smartphones, despite evidence suggesting that many users choose easily guessable patterns. In this paper, we explore the usage of blocklists to improve the security of user-chosen patterns by disallowing common patterns, a feature currently unavailable on Android but used by Apple during PIN selection. In a user study run on participants’ smartphones (n = 1006), we tested 5 different blocklist sizes and compared them to a control treatment. We find that even the smallest blocklist (12 patterns) had benefits, reducing a simulated attacker’s success rate after 30 guesses from 24 % to 20 %. The largest blocklist (581 patterns) reduced the percentage of correctly guessed patterns after 30 attempts down to only 2 %. In terms of usability, blocklists had limited negative impact on shortterm recall rates and entry times, with reported SUS values indicating reasonable usability when selecting patterns in the presence of a blocklist. Based on our simulated attacker performance results for different blocklist sizes, we recommend blocking 100 patterns for a good balance between usability and security.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android模式仍然是解锁智能手机的一种流行方法，尽管有证据表明许多用户选择容易猜测的模式。在本文中，我们探讨了通过禁止常见模式来使用阻止列表来提高用户选择的模式的安全性，该功能目前在Android上不可用，但在PIN选择期间由Apple使用。在参与者智能手机上运行的用户研究(n = 1006)中，我们测试了5种不同的阻止列表大小，并将它们与控制处理进行了比较。我们发现，即使是最小的黑名单(12种模式)也有好处，在30次猜测后，模拟攻击者的成功率从24 %降至20 %。最大的阻止列表(581个模式)将30次尝试后正确猜测模式的百分比降低到仅2 %。就可用性而言，阻止列表对短期召回率和进入时间的负面影响有限，报告的SUS值表明在阻止列表存在的情况下选择模式时具有合理的可用性。根据我们针对不同阻止列表大小的模拟攻击者性能结果，我们建议阻止100种模式，以便在可用性和安全性之间取得良好的平衡。",
        "title_zh": "使用阻止列表提高用户选择Android模式的安全性",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/soups/soups2021.html",
        "conf_title": "17th SOUPS @ USENIX Security Symposium 2021",
        "conf_url": "https://www.usenix.org/conference/soups2021",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/soups2021/presentation/abrokwa",
        "title": "Comparing Security and Privacy Attitudes Among U.S. Users of Different Smartphone and Smart-Speaker Platforms",
        "authors": "Desiree Abrokwa, Shruti Das, Omer Akgul, Michelle L. Mazurek",
        "abstract": "Many studies of mobile security and privacy are, for simplicity, limited to either only Android users or only iOS users. However, it is not clear whether there are systematic differences in the privacy and security knowledge or preferences of users who select these two platforms. Understanding these differences could provide important context about the generalizability of research results. This paper reports on a survey (n=493) with a demographically diverse sample of U.S. Android and iOS users. We compare users of these platforms using validated privacy and security scales (IUIPC-8 and SA-6) as well as previously deployed attitudinal and knowledge questions from the Pew Research Center. As a secondary analysis, we also investigate potential differences among users of different smart-speaker platforms, including Amazon Echo and Google Home. We ﬁnd no signiﬁcant differences in privacy attitudes of different platform users, but we do ﬁnd that Android users have more technology knowledge than iOS users. In addition, we ﬁnd evidence (via comparison with Pew data) that Proliﬁc participants have more technology knowledge than the general U.S. population.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "为了简单起见，许多关于移动安全和隐私的研究要么仅限于Android用户，要么仅限于iOS用户。然而，尚不清楚选择这两个平台的用户在隐私和安全知识或偏好方面是否存在系统性差异。理解这些差异可以为研究结果的普遍性提供重要的背景。本文报告了一项调查(n=493)，调查对象为美国Android和iOS用户的人口统计学差异样本。我们使用经过验证的隐私和安全等级(IUIPC-8和SA-6)以及皮尤研究中心之前部署的态度和知识问题来比较这些平台的用户。作为辅助分析，我们还调查了不同智能扬声器平台用户之间的潜在差异，包括亚马逊Echo和谷歌Home。我们发现不同平台用户的隐私态度没有显著差异，但我们确实发现Android用户比iOS用户拥有更多的技术知识。此外，我们发现证据(通过与皮尤数据的比较)表明，长期参与者比普通美国人拥有更多的技术知识。",
        "title_zh": "比较不同智能手机和智能音箱平台的美国用户对安全和隐私的态度",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/soups/soups2021.html",
        "conf_title": "17th SOUPS @ USENIX Security Symposium 2021",
        "conf_url": "https://www.usenix.org/conference/soups2021",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/soups2021/presentation/kollnig",
        "title": "A Fait Accompli? An Empirical Study into the Absence of Consent to Third-Party Tracking in Android Apps",
        "authors": "Konrad Kollnig, Pierre Dewitte, Max Van Kleek, Ge Wang, Daniel Omeiza, Helena Webb, Nigel Shadbolt",
        "abstract": "Third-party tracking allows companies to collect users’ behavioural data and track their activity across digital devices. This can put deep insights into users’ private lives into the hands of strangers, and often happens without users’ awareness or explicit consent. EU and UK data protection law, however, requires consent, both 1) to access and store information on users’ devices and 2) to legitimate the processing of personal data as part of third-party tracking, as we analyse in this paper. This paper further investigates whether and to what extent consent is implemented in mobile apps. First, we analyse a representative sample of apps from the Google Play Store. We find that most apps engage in third-party tracking, but few obtained consent before doing so, indicating potentially widespread violations of EU and UK privacy law. Second, we examine the most common third-party tracking libraries in detail. While most acknowledge that they rely on app developers to obtain consent on their behalf, they typically fail to put in place robust measures to ensure this: disclosure of consent requirements is limited; default consent implementations are lacking; and compliance guidance is difficult to find, hard to read, and poorly maintained.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "第三方追踪允许企业收集用户的行为数据，并追踪他们在各种数字设备上的活动。这可以将对用户私人生活的深刻见解交给陌生人，并且经常在用户不知情或没有明确同意的情况下发生。然而，欧盟和英国的数据保护法要求征得同意，这既是为了1)访问和存储用户设备上的信息，也是为了2)作为第三方跟踪的一部分，合法处理个人数据，正如我们在本文中分析的那样。本文进一步调查了移动应用程序中是否以及在多大程度上实现了同意。首先，我们分析来自谷歌Play商店的应用程序的代表性样本。我们发现大多数应用程序都参与第三方跟踪，但很少在这样做之前获得同意，这表明可能普遍违反欧盟和英国的隐私法。其次，我们详细研究最常见的第三方跟踪库。虽然大多数人承认他们依赖应用程序开发者代表他们获得同意，但他们通常无法采取强有力的措施来确保这一点:同意要求的披露是有限的；缺少默认同意实现；而且法规遵从性指南很难找到、很难阅读，也很难维护。",
        "title_zh": "既成事实？Android应用程序中第三方追踪许可缺失的实证研究",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/soups/soups2021.html",
        "conf_title": "17th SOUPS @ USENIX Security Symposium 2021",
        "conf_url": "https://www.usenix.org/conference/soups2021",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/soups2020/presentation/samuel",
        "title": "Knock, Knock. Who's There? On the Security of LG's Knock Codes",
        "authors": "Raina Samuel, Philipp Markert, Adam J. Aviv, Iulian Neamtiu",
        "abstract": "Knock Codes are a knowledge-based unlock authentication scheme used on LG smartphones where a user enters a code by tapping or \"knocking\" a sequence on a 2x2 grid. While a lesser used authentication method, as compared to PINs or Android patterns, there is likely a large number of Knock Code users; we estimate, 700,000--2,500,000 in the US alone. In this paper, we studied Knock Codes security asking participants to select codes on mobile devices in three settings: a control treatment, a blocklist treatment, and a treatment with a larger, 2x3 grid. We find that Knock Codes are significantly weaker than other deployed authentication, e.g., PINs or Android patterns. In a simulated attacker setting, 2x3 grids offered no additional security, but blocklisting was more beneficial, making Knock Codes' security similar to Android patterns. Participants expressed positive perceptions of Knock Codes, but usability was challenged. SUS values were \"marginal\" or \"ok\" across treatments. Based on these findings, we recommend deploying blacklists for selecting a Knock Code because it improves security but has limited impact on usability perceptions.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Knock Codes是LG智能手机上使用的一种基于知识的解锁认证方案，用户通过点击或“敲击”2x2网格上的序列来输入代码。虽然与pin或Android模式相比，这是一种较少使用的身份验证方法，但可能有大量的敲门码用户；我们估计，仅在美国就有70万到250万人。在本文中，我们研究了Knock Codes安全性，要求参与者在三种设置下在移动设备上选择代码:控制处理、阻止列表处理和具有更大的2×3网格的处理。我们发现，敲门代码明显弱于其他部署的认证，例如pin或Android模式。在模拟攻击者设置中，2x3网格没有提供额外的安全性，但阻止列表更有益，使敲门代码的安全性类似于Android模式。参与者表达了对Knock代码的积极看法，但可用性受到了挑战。在所有治疗中，SUS值为“边缘”或“正常”。基于这些发现，我们建议部署黑名单来选择敲门代码，因为它提高了安全性，但对可用性感知的影响有限。",
        "title_zh": "敲门敲门。谁在那里？关于LG的敲码的安全性",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/soups/soups2020.html",
        "conf_title": "16th SOUPS @ USENIX Security Symposium 2020",
        "conf_url": "https://www.usenix.org/conference/soups2020",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/soups2016/workshop-program/wpi/presentation/rajivan",
        "title": "Influence of Privacy Attitude and Privacy Cue Framing on Android App Choices",
        "authors": "Prashanth Rajivan, L. Jean Camp",
        "abstract": "Transmission of personally identifiable information from smartphone apps has become ubiquitous as smartphones themselves. Privacy controls provided in the form of permissions warnings falls insu cient especially for communicating risk during app installation. Presenting easy to understand privacy risk icons/cues would help people make low risk app choices. However, the human factor requirements for designing such privacy risk icons are largely unknown. Towards this, we conducted a user experiment with 480 participants who made a series of app choices with/without privacy priming and with/without privacy risk communicating icons. Overall, presenting risk communicating icons along with app benefit icons had a significant e ect on user app choices in terms of riskbenefit trade-o . We found that one type of privacy icon framing led to mediocre app choices under particular conditions. We found that priming for privacy led to increased concern while choosing apps but did not have an augmenting e ect on final app choices when combined with certain type of privacy framing. We conclude by proposing human factor based recommendations for designing privacy risk communicating icons.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "从智能手机应用程序传输个人身份信息已经变得和智能手机本身一样无处不在。以权限警告形式提供的隐私控制是不够的，尤其是在应用程序安装期间传达风险。展示易于理解的隐私风险图标/提示将有助于人们做出低风险的应用选择。然而，设计这种隐私风险图标的人为因素要求在很大程度上是未知的。为此，我们对480名参与者进行了一项用户实验，他们做出了一系列带有/不带有隐私启动和带有/不带有隐私风险沟通图标的应用选择。总体而言，将风险传达图标与应用收益图标一起展示，在风险收益权衡方面对用户应用选择有重要影响。我们发现，在特定条件下，一种类型的隐私图标框架会导致平庸的应用选择。我们发现隐私启动在选择应用程序时会导致更多的关注，但当与某种类型的隐私框架结合时，对最终的应用程序选择没有增加影响。最后，我们提出了基于人为因素的隐私风险传达图标设计建议。",
        "title_zh": "隐私态度和隐私线索框架对Android应用选择的影响",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/soups/wpi2016.html",
        "conf_title": "WPI@SOUPS 2016: Denver, CO, USA",
        "conf_url": "https://www.usenix.org/conference/soups2016/workshop-program/wpi",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/soups2016/workshop-program/way2016/presentation/scindia",
        "title": "Exploring Games for Improved Touchscreen Authentication on Mobile Devices",
        "authors": "Padmaja Scindia, Jonathan Voris",
        "abstract": "Mobile device theft is a growing problem. Yet due to usability issues and other concerns, people frequently choose not to use an authentication mechanism to protect their devices, putting the sensitive information that they store at risk. In order to provide mobile device owners with more usable authentication, we propose the study and development of mechanisms for authenticating users to mobile devices by modeling the manner in which they interact with games. We conducted an preliminary IRB approved study in which 12 users were asked to play 3 of the most popular games available in the Google Play Store on an Android device while their touchscreen interactions were logged. We then applied a Support Vector Machine to classify users based on 19 extracted touchscreen usage features. We were successfully able to classify over 90% of the samples for each game with a false reject rate of less than 1%. These results indicate that utilizing gameplay elements to encourage unique behavioral touchscreen features may be a promising direction of future research.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "移动设备盗窃是一个日益严重的问题。然而，由于可用性问题和其他问题，人们经常选择不使用身份验证机制来保护他们的设备，从而将他们存储的敏感信息置于风险之中。为了向移动设备所有者提供更有用的认证，我们提出通过模拟用户与游戏交互的方式来研究和开发向移动设备认证用户的机制。我们进行了一项IRB批准的初步研究，其中要求12名用户在Android设备上玩谷歌play商店最受欢迎的3款游戏，同时记录他们的触摸屏交互。然后，我们应用支持向量机，根据19个提取的触摸屏使用特征对用户进行分类。我们成功地对每个游戏的90%以上的样本进行了分类，错误拒绝率低于1%。这些结果表明，利用游戏元素来鼓励独特的行为触摸屏功能可能是未来研究的一个有前途的方向。",
        "title_zh": "探索游戏以改进移动设备上的触摸屏认证",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/soups/way2016.html",
        "conf_title": "WAY@SOUPS 2016: Denver, CO, USA",
        "conf_url": "https://www.usenix.org/conference/soups2016/workshop-program/way2016",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/soups2016/workshop-program/way2016/presentation/aviv",
        "title": "Position Paper: Measuring the Impact of Alphabet and Culture on Graphical Passwords",
        "authors": "Adam J. Aviv, Markus Dürmuth, Payas Gupta",
        "abstract": "1. OUR POSITION Android’s graphical password scheme (sometimes referred to as the “password pattern”) is perhaps the most widely used and most studied graphical password system to date. With its launch, Android’s only authentication/unlock mechanism was the graphical password; however, other authentication systems are allowed today, such as PINs and text-based passwords. Despite the added authentication choices, the graphical password option remains a very popular choice among Android users [6, 7, 14].",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "1.我们的立场Android的图形密码方案(有时称为“密码模式”)可能是迄今为止使用最广泛、研究最多的图形密码系统。随着它的推出，Android唯一的认证/解锁机制是图形密码；然而，今天也允许使用其他认证系统，比如pin和基于文本的密码。尽管增加了认证选项，图形密码选项仍然是Android用户中非常受欢迎的选择[6，7，14]。",
        "title_zh": "立场文件:测量字母和文化对图形密码的影响",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/soups/way2016.html",
        "conf_title": "WAY@SOUPS 2016: Denver, CO, USA",
        "conf_url": "https://www.usenix.org/conference/soups2016/workshop-program/way2016",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/soups2016/workshop-program/way2016/presentation/qiu",
        "title": "Advancing the Understanding of Android Unlocking and Usage",
        "authors": "Lina Qiu, Ildar Muslukhov, Konstantin Beznosov",
        "abstract": "1. PROBLEM MOTIVATION Given the fact that personal mobile devices provide access to and/or store a great deal of personal and sensitive data, including passwords, contacts, files, emails, etc., it is not surprising that unauthorized access to the device is one of the highest security risks for smartphone users. To protect such data and services from unauthorized access, some smartphone users lock their phones using PIN, password, biometrics and DAP (“draw a pattern”). Yet, others don’t, risking the data and online services accessible through their devices, mainly because of the inconvenience of unlocking, lack of motivation and awareness. One way to improve user behaviour is to offer them more usable unlocking mechanisms, without sacrificing the security. It remains an open problem, however, how to optimize both security and usability for smartphone unlocking mechanisms. Thus, it is important for researchers to understand the interplay between security and usability of unlocking mechanisms in situ. To this end, we are preparing a longitudinal field study, in the course of which our monitoring app installed on the participants’ Android smartphones will collect detailed relevant data.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "1.问题动机鉴于个人移动设备提供对大量个人和敏感数据的访问和/或存储，包括密码、联系人、文件、电子邮件等。对于智能手机用户来说，未经授权访问设备是最高的安全风险之一，这不足为奇。为了保护这些数据和服务免受未经授权的访问，一些智能手机用户使用PIN、密码、生物识别和DAP(“绘制图案”)来锁定他们的手机。然而，其他人没有，冒着通过他们的设备访问数据和在线服务的风险，主要是因为解锁不方便，缺乏动力和意识。改善用户行为的一个方法是在不牺牲安全性的情况下，为他们提供更有用的解锁机制。然而，如何优化智能手机解锁机制的安全性和可用性仍然是一个悬而未决的问题。因此，对于研究人员来说，理解原位解锁机制的安全性和可用性之间的相互作用是很重要的。为此，我们正在准备一项纵向实地研究，在此过程中，我们安装在参与者Android智能手机上的监测应用程序将收集详细的相关数据。",
        "title_zh": "加深对Android解锁和使用的理解",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/soups/way2016.html",
        "conf_title": "WAY@SOUPS 2016: Denver, CO, USA",
        "conf_url": "https://www.usenix.org/conference/soups2016/workshop-program/way2016",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/soups2016/workshop-program/way2016/presentation/lu",
        "title": "Examining Visual-Spatial Paths for Mobile Authentication",
        "authors": "David Lu, Taehoon Lee, Sauvik Das, Jason I. Hong",
        "abstract": "by people's strong memory for visual-spatial paths (e.g., commuting paths), we present in this paper an introductory exploration of the use of these paths for memorable, strong mobile authentication. In a preliminary study, we evaluated several low- fidelity representations for encoding relatively strong (~20 bit) secrets as visual-spatial paths: a 2D birds-eye view, a 3D third- person view, and 3D immersed view. We found that the 3D immersed view worked best for memorability, and used this initial study to inspire the design for a novel mobile authentication application: the Memory Palace. We ran a within-subjects experiment to evaluate our Memory Palace authentication concept against Android's 9-dot Patternlock along two dimensions: memorability and resilience to shoulder surfing. Results from our experiment suggest people have significantly higher memorability for visual-spatial secrets encoded in the Memory Palace which were also significantly more resilient against shoulder surfing. We conclude with directions for further work: specifically, creating sharable paths for more socially compatible authentication and segmenting secret paths for simple, non-binary access control.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "根据人们对视觉空间路径(例如，通勤路径)的强烈记忆，我们在本文中介绍了使用这些路径进行令人难忘的强移动认证的初步探索。在一项初步研究中，我们评估了几种将相对较强的(~20位)秘密编码为视觉空间路径的低保真度表示:2D鸟瞰视图、3D第三人称视图和3D沉浸视图。我们发现3D沉浸式视图最适合于记忆，并使用这一初步研究来启发一种新颖的移动认证应用程序的设计:记忆宫殿。我们进行了一项受试者内部实验，从两个方面评估我们的记忆宫殿认证概念与Android的9点模式锁:可记忆性和对肩部冲浪的弹性。我们的实验结果表明，人们对编码在记忆宫殿中的视觉空间秘密有明显更高的记忆能力，这也明显更能抵抗肩窥。我们总结了进一步工作的方向:特别是，为更具社会兼容性的身份验证创建可共享路径，为简单的非二进制访问控制分割秘密路径。",
        "title_zh": "检查移动认证的视觉空间路径",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/soups/way2016.html",
        "conf_title": "WAY@SOUPS 2016: Denver, CO, USA",
        "conf_url": "https://www.usenix.org/conference/soups2016/workshop-program/way2016",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/soups2016/technical-sessions/presentation/liu",
        "title": "Follow My Recommendations: A Personalized Privacy Assistant for Mobile App Permissions",
        "authors": "Bin Liu, Mads Schaarup Andersen, Florian Schaub, Hazim Almuhimedi, Shikun Zhang, Norman M. Sadeh, Yuvraj Agarwal, Alessandro Acquisti",
        "abstract": "Modernsmartphoneplatformshavemillionsofapps, manyofwhich request permissions to access private data and resources, like user accounts or location. While these smartphone platforms provide varying degrees of control over these permissions, the sheer number of decisions that users are expected to manage has been shown to be unrealistically high. Prior research has shown that users are often unaware of, if not uncomfortable with, many of their permission settings. Prior work also suggests that it is theoretically possible to predict many of the privacy settings a user would want by asking the user a small number of questions. However, this approach has neither been operationalized nor evaluated with actual users before. We report on a field study (n=72) in which we implemented and evaluated a Personalized Privacy Assistant (PPA) with participants using their own Android devices. The results of our study are encouraging. We find that 78.7% of the recommendations made by the PPA were adopted by users. Following initial recommendations on permission settings, participants were motivated to further review and modify their settings with daily “privacy nudges.” Despite showing substantial engagement with these nudges, participants only changed 5.1% of the settings previously adopted based on the PPA’s recommendations. The PPA and its recommendations were perceived as useful and usable. We discuss the implications of our results for mobile permission management and the design of personalized privacy assistant solutions.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "modernsmartphoneplatforms有数百万个应用程序，其中许多应用程序请求访问私人数据和资源的权限，如用户帐户或位置。虽然这些智能手机平台对这些权限提供了不同程度的控制，但用户需要管理的决策数量已经被证明高得不切实际。先前的研究表明，用户经常不知道他们的许多权限设置，如果不是不舒服的话。先前的工作还表明，理论上可以通过向用户询问少量问题来预测用户想要的许多隐私设置。然而，这种方法既没有付诸实施，也没有经过实际用户的评估。我们报告了一项实地研究(n=72)，其中我们实施并评估了一个个性化的隐私助手(PPA)，参与者使用自己的Android设备。我们的研究结果令人鼓舞。我们发现PPA提出的建议有78.7%被用户采纳。根据最初的权限设置建议，参与者被鼓励通过日常的“隐私推动”来进一步检查和修改他们的设置。尽管参与者对这些建议表现出实质性的参与，但他们只改变了之前根据PPA建议采用的设置的5.1%。PPA及其建议被认为是有用和可用的。我们讨论了我们的结果对移动许可管理和个性化隐私助手解决方案的设计的影响。",
        "title_zh": "遵循我的建议:移动应用权限的个性化隐私助手",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/soups/soups2016.html",
        "conf_title": "12th SOUPS 2016: Denver, CO, USA",
        "conf_url": "https://www.usenix.org/conference/soups2016",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/soups2017/technical-sessions/presentation/tsai",
        "title": "Turtle Guard: Helping Android Users Apply Contextual Privacy Preferences",
        "authors": "Lynn Tsai, Primal Wijesekera, Joel Reardon, Irwin Reyes, Serge Egelman, David A. Wagner, Nathan Good, Jung-Wei Chen",
        "abstract": "Current mobile platforms provide privacy management interfaces to regulate how applications access sensitive data. Prior research has shown how these interfaces are insufficient from a usability standpoint: they do not account for context. In allowing for more contextual decisions, machine-learning techniques have shown great promise for designing systems that automatically make privacy decisions on behalf of the user. However, if such decisions are made automatically, then feedback mechanisms are needed to empower users to both audit those decisions and correct any errors. In this paper, we describe our user-centered approach towards designing a fully functional privacy feedback interface for the Android platform. We performed two large-scale user studies to research the usability of our design. Our second, 580-person validation study showed that users of our new interface were significantly more likely to both understand and control the selected set of circumstances under which applications could access sensitive data when compared to the default Android privacy settings interface.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "当前的移动平台提供隐私管理接口来规范应用程序访问敏感数据的方式。先前的研究表明，从可用性的角度来看，这些界面是不够的:它们没有考虑上下文。在允许更多上下文决策的情况下，机器学习技术为设计代表用户自动做出隐私决策的系统展示了巨大的前景。但是，如果这些决策是自动做出的，那么就需要反馈机制来授权用户审核这些决策并纠正任何错误。在本文中，我们描述了我们以用户为中心的方法，为Android平台设计一个功能齐全的隐私反馈界面。我们进行了两次大规模的用户研究来研究我们设计的可用性。我们的第二项580人验证研究表明，与默认的Android隐私设置界面相比，我们的新界面用户更有可能理解和控制应用程序可以访问敏感数据的特定环境。",
        "title_zh": "海龟卫士:帮助Android用户应用上下文隐私偏好",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/soups/soups2017.html",
        "conf_title": "13th SOUPS 2017: Santa Clara, CA, USA",
        "conf_url": "https://www.usenix.org/conference/soups2017",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/soups2017/technical-sessions/presentation/mathur",
        "title": "Impact of User Characteristics on Attitudes Towards Automatic Mobile Application Updates",
        "authors": "Arunesh Mathur, Marshini Chetty",
        "abstract": "To keep mobile devices secure, experts recommend turning on auto-updates for applications, but recent research has suggested that users often avoid auto-updating because updates can lead to undesirable consequences such as user interface changes or compatibility issues. Understanding whether there are commonalities amongst users who avoid auto-updates can help us create better mobile application updating interfaces. However, little is known about how users’ characteristics associate with their attitudes towards auto-updating their mobile applications, or how we can leverage these characteristics to encourage users to auto-update these applications to improve security. In this paper, by surveying Android users, we establish how users’ past experiences with software updating, and users’ psychometric traits differentiate those users who avoid application auto-updates from those who do them, as well as users’ preferences towards auto-updating their applications. Our findings reveal that users who avoid application auto-updates are more likely to have had past negative experiences with software updating, tend to take fewer risks, and display greater proactive security awareness. Users’ perceived level of trust with mobile applications also determined how comfortable they are auto-updating these applications. Based on these findings, we recommend how Android can improve the design of application update systems to encourage users to auto-update and keep their devices secure.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "为了确保移动设备的安全，专家建议打开应用程序的自动更新，但最近的研究表明，用户通常会避免自动更新，因为更新可能会导致不良后果，如用户界面变化或兼容性问题。了解避免自动更新的用户之间是否存在共性可以帮助我们创建更好的移动应用程序更新界面。然而，很少有人知道用户的特征如何与他们对自动更新他们的移动应用程序的态度相关联，或者我们如何利用这些特征来鼓励用户自动更新这些应用程序以提高安全性。在本文中，通过调查Android用户，我们确定了用户过去的软件更新经验，用户的心理特征如何区分那些避免应用程序自动更新的用户和那些进行应用程序自动更新的用户，以及用户对自动更新应用程序的偏好。我们的发现表明，避免应用程序自动更新的用户更有可能有过软件更新的负面经历，倾向于承担更少的风险，并表现出更强的主动安全意识。用户对移动应用程序的信任程度也决定了他们自动更新这些应用程序的舒适程度。基于这些发现，我们建议Android如何改进应用程序更新系统的设计，以鼓励用户自动更新并确保他们的设备安全。",
        "title_zh": "用户特征对移动应用自动更新态度的影响",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/soups/soups2017.html",
        "conf_title": "13th SOUPS 2017: Santa Clara, CA, USA",
        "conf_url": "https://www.usenix.org/conference/soups2017",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/soups2017/technical-sessions/presentation/bonne",
        "title": "Exploring decision making with Android's runtime permission dialogs using in-context surveys",
        "authors": "Bram Bonné, Sai Teja Peddinti, Igor Bilogrevic, Nina Taft",
        "abstract": "A great deal of research on the management of user data on smartphones via permission systems has revealed significant levels of user discomfort, lack of understanding, and lack of attention. The majority of these studies were conducted on Android devices before runtime permission dialogs were widely deployed. In this paper we explore how users make decisions with runtime dialogs on smartphones with Android 6.0 or higher. We employ an experience sampling methodology in order to ask users the reasons inuencing their decisions immediately after they decide. We conducted a longitudinal survey with 157 participants over a 6 week period. \n \nWe explore the grant and denial rates of permissions, overall and on a per permission type basis. Overall, our participants accepted 84% of the permission requests. We observe differences in the denial rates across permissions types; these vary from 23% (for microphone) to 10% (calendar). We find that one of the main reasons for granting or denying a permission request depends on users' expectation on whether or not an app should need a permission. A common reason for denying permissions is because users know they can change them later. Among the permissions granted, our participants said they were comfortable with 90% of those decisions - indicating that for 10% of grant decisions users may be consenting reluctantly. Interestingly, we found that women deny permissions twice as often as men.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "大量关于通过许可系统管理智能手机上的用户数据的研究表明，用户感到非常不舒服，缺乏理解和关注。这些研究中的大部分是在运行时权限对话框被广泛部署之前在Android设备上进行的。在本文中，我们探讨了用户如何在Android 6.0或更高版本的智能手机上通过运行时对话框做出决策。我们采用经验抽样方法，以便在用户做出决定后立即询问影响他们决定的原因。我们对157名参与者进行了为期6周的纵向调查。\n\n我们研究了权限的授予率和拒绝率，总体上和基于每个权限类型。总的来说，我们的参与者接受了84%的许可请求。我们观察到不同权限类型的拒绝率存在差异；这些变化从23%(麦克风)到10%(日历)。我们发现，批准或拒绝权限请求的一个主要原因取决于用户对应用程序是否需要权限的预期。拒绝权限的一个常见原因是，用户知道他们以后可以更改权限。在授予的权限中，我们的参与者说他们对90%的决定感到满意——这表明对于10%的授权决定，用户可能是不情愿地同意的。有趣的是，我们发现女性拒绝权限的频率是男性的两倍。",
        "title_zh": "使用上下文调查探索Android运行时权限对话框的决策制定",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/soups/soups2017.html",
        "conf_title": "13th SOUPS 2017: Santa Clara, CA, USA",
        "conf_url": "https://www.usenix.org/conference/soups2017",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/soups2015/proceedings/presentation/watanabe",
        "title": "Understanding the Inconsistencies between Text Descriptions and the Use of Privacy-sensitive Resources of Mobile Apps",
        "authors": "Takuya Watanabe, Mitsuaki Akiyama, Tetsuya Sakai, Tatsuya Mori",
        "abstract": "Permission warnings and privacy policy enforcement are widely used to inform mobile app users of privacy threats. These mechanisms disclose information about use of privacy-sensitive resources such as user location or contact list. However, it has been reported that very few users pay attention to these mechanisms during installation. Instead, a user may focus on a more user-friendly source of information: text description, which is written by a developer who has an incentive to attract user attention. When a user searches for an app in a marketplace, his/her query keywords are generally searched on text descriptions of mobile apps. Then, users review the search results, often by reading the text descriptions; i.e., text descriptions are associated with user expectation. Given these observations, this paper aims to address the following research question: What are the primary reasons that text descriptions of mobile apps fail to refer to the use of privacy-sensitive resources? To answer the research question, we performed empirical large-scale study using a huge volume of apps with our ACODE (Analyzing COde and DEscription) framework, which combines static code analysis and text analysis. We developed light-weight techniques so that we can handle hundred of thousands of distinct text descriptions. We note that our text analysis technique does not require manually labeled descriptions; hence, it enables us to conduct a large-scale measurement study without requiring expensive labeling tasks. Our analysis of 200,000 apps and multilingual text descriptions collected from official and third-party Android marketplaces revealed four primary factors that are associated with the inconsistencies between text descriptions and the use of privacy-sensitive resources: (1) existence of app building services/frameworks that tend to add API permissions/code unnecessarily, (2) existence of prolific developers who publish many ap",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "权限警告和隐私政策执行被广泛用于通知移动应用用户隐私威胁。这些机制会泄露有关使用隐私敏感资源的信息，如用户位置或联系人列表。然而，据报道，很少有用户在安装过程中注意到这些机制。取而代之的是，用户可能会关注一个更加用户友好的信息源:文本描述，它是由一个有动机吸引用户注意力的开发人员编写的。当用户在市场中搜索应用程序时，他/她的查询关键词通常是在移动应用程序的文本描述上搜索的。然后，用户通常通过阅读文本描述来查看搜索结果；即文本描述与用户期望相关联。鉴于这些观察，本文旨在解决以下研究问题:移动应用程序的文本描述未提及隐私敏感资源的使用的主要原因是什么？为了回答这个研究问题，我们使用大量应用程序和我们的ACODE(分析代码和描述)框架进行了实证性的大规模研究，该框架结合了静态代码分析和文本分析。我们开发了轻量级技术，这样我们就可以处理成千上万个不同的文本描述。我们注意到我们的文本分析技术不需要手工标注的描述；因此，它使我们能够进行大规模的测量研究，而不需要昂贵的标记任务。我们对从官方和第三方Android市场收集的200，000个应用和多语言文本描述进行了分析，发现了与文本描述和隐私敏感资源使用之间的不一致相关的四个主要因素:(1)存在倾向于不必要地添加API权限/代码的应用构建服务/框架，(2)存在发布许多应用的多产开发人员",
        "title_zh": "理解文本描述和使用移动应用程序的隐私敏感资源之间的不一致性",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/soups/soups2015.html",
        "conf_title": "11th SOUPS 2015: Ottawa, Canada",
        "conf_url": "https://www.usenix.org/conference/soups2015",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/soups2018/presentation/votipka",
        "title": "User Comfort with Android Background Resource Accesses in Different Contexts",
        "authors": "Daniel Votipka, Seth M. Rabin, Kristopher K. Micinski, Thomas Gilray, Michelle L. Mazurek, Jeffrey S. Foster",
        "abstract": "Android apps ask users to allow or deny access to sensitive resources the first time the app needs them. Prior work has shown that users decide whether to grant these requests based on the context. In this work, we investigate user comfort level with resource accesses that happen in a background context, meaning they occur when there is no visual indication of a resource use. For example, accessing the device location after a related button click would be considered an interactive access, and accessing location whenever it changes would be considered a background access. We conducted a 2,198-participant fractional-factorial vignette study, showing each participant a resource-access scenario in one of two mock apps, varying what event triggers the access (when) and how the collected data is used (why). Our results show that both when and why a resource is accessed are important to users’ comfort. In particular, we identify multiple meaningfully different classes of accesses for each these factors, showing that not all background accesses are regarded equally. Based on these results, we make recommendations for how designers of mobile-privacy systems can take these nuanced distinctions into account.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android应用程序要求用户在应用程序第一次需要敏感资源时允许或拒绝访问它们。先前的工作表明，用户根据上下文来决定是否同意这些请求。在这项工作中，我们调查了在后台环境中发生的资源访问的用户舒适度，这意味着它们发生在没有资源使用的视觉指示时。例如，在点击相关按钮之后访问设备位置将被认为是交互式访问，而在位置改变时访问位置将被认为是后台访问。我们进行了一项2198名参与者的部分因子vignette研究，向每个参与者展示了两个模拟应用程序中的一个资源访问场景，改变了触发访问的事件(何时)以及如何使用收集的数据(为什么)。我们的结果表明，访问资源的时间和原因对用户的舒适度都很重要。特别是，我们为这些因素中的每一个确定了多个有意义的不同访问类别，表明并非所有后台访问都被同等对待。基于这些结果，我们对移动隐私系统的设计者如何考虑这些细微差别提出了建议。",
        "title_zh": "不同环境下Android后台资源访问的用户舒适度",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/soups/soups2018.html",
        "conf_title": "14th SOUPS @ USENIX Security Symposium 2018: Baltimore, MD, USA",
        "conf_url": "https://www.usenix.org/conference/soups2018",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3507657.3528537",
        "title": "Automating the Quantitative Analysis of Reproducibility for Build Artifacts derived from the Android Open Source Project",
        "authors": "Manuel Pöll, Michael Roland",
        "abstract": "This work proposes a modular automation toolchain to analyze current state and over-time changes of reproducibility of build artifacts derived from the Android Open Source Project (AOSP). While perfect bit-by-bit equality of binary artifacts would be a desirable goal to permit independent verification if binary build artifacts really are the result of building a specific state of source code, this form of reproducibility is often not (yet) achievable in practice. Certain complexities in the Android ecosystem make assessment of production firmware images particularly difficult. To overcome this, we introduce \"accountable builds\" as a form of reproducibility that allows for legitimate deviations from 100 percent bit-by-bit equality. Using our framework that builds AOSP in its native build system, automatically compares artifacts, and computes difference scores, we perform a detailed analysis of differences, identify typical accountable changes, and analyze current major issues leading to non-reproducibility and non-accountability. We find that pure AOSP itself builds mostly reproducible and that Project Treble helped through its separation of concerns. However, we also discover that Google's published firmware images deviate from the claimed codebase (partially due to side-effects of Project Mainline).",
        "files": {
            "openAccessPdf": "https://dl.acm.org/doi/pdf/10.1145/3507657.3528537"
        },
        "abstract_zh": "这项工作提出了一个模块化的自动化工具链，以分析Android开源项目(AOSP)产生的构建工件的可再现性的当前状态和随时间的变化。如果二进制构建工件确实是构建源代码的特定状态的结果，那么二进制工件的完全逐位相等将是允许独立验证的理想目标，但是这种形式的可再现性在实践中通常(还)不可实现。Android生态系统中的某些复杂性使得评估生产固件映像特别困难。为了克服这一点，我们引入了“可问责的构建”作为一种可再现性的形式，允许合法地偏离100%的逐位平等。使用我们的框架，在原生构建系统中构建AOSP，自动比较工件，并计算差异分数，我们执行差异的详细分析，识别典型的可问责的变更，并分析导致不可再现性和不可问责性的当前主要问题。我们发现纯AOSP本身的建设大多是可复制的，而项目Treble有助于通过其关注点的分离。然而，我们也发现Google发布的固件镜像偏离了声称的代码库(部分是由于项目主线的副作用)。",
        "title_zh": "自动对Android开源项目中产生的构建工件的可重复性进行定量分析",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2022.html",
        "conf_title": "15th WISEC 2022: San Antonio, TX, USA",
        "conf_url": "https://doi.org/10.1145/3507657",
        "keywords": [
            "AOSP",
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3507657.3528555",
        "title": "PITracker: Detecting Android PendingIntent Vulnerabilities through Intent Flow Analysis",
        "authors": "Chennan Zhang, Shuang Li, Wenrui Diao, Shanqing Guo",
        "abstract": "Intent is an essential inter-component communication mechanism of Android OS, which can be used to request an action from another app component. The security of its design and implementation attracts lots of attention. However, the security of PendingIntent, a kind of delayed-triggered Intent, was neglected by most previous research, and the related analysis techniques are still imperfect. In this paper, we design a novel automated tool, PITracker, to detect the PendingIntent vulnerabilities in Android apps. It achieves the Intent flow tracking technique proposed by us, figuring out how an Intent is created and where it goes. In the real-world evaluations, PITracker discovered 2,939 potential threats in 10,000 third-party apps and 214 in 1,412 pre-installed apps. Among them, 11 exploitable vulnerabilities have been confirmed and acknowledged by the corresponding vendors.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "意图是Android OS的一个基本组件间通信机制，可用于请求另一个应用程序组件的操作。其设计和实现的安全性引起了广泛关注。然而，PendingIntent是一种延迟触发的意图，其安全性被大多数先前的研究所忽略，相关的分析技术还不完善。在本文中，我们设计了一个新颖的自动化工具PITracker来检测Android应用程序中的挂起内容漏洞。它实现了我们提出的意图流跟踪技术，计算出一个意图是如何产生的以及它去了哪里。在真实世界的评估中，PITracker在10，000个第三方应用程序中发现了2，939个潜在威胁，在1，412个预装应用程序中发现了214个潜在威胁。其中，11个可利用的漏洞已经得到相应厂商的确认和承认。",
        "title_zh": "PITracker:通过意图流分析检测Android挂起内容漏洞",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2022.html",
        "conf_title": "15th WISEC 2022: San Antonio, TX, USA",
        "conf_url": "https://doi.org/10.1145/3507657",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3507657.3528546",
        "title": "AirGuard - Protecting Android Users from Stalking Attacks by Apple Find My Devices",
        "authors": "Alexander Heinrich, Niklas Bittner, Matthias Hollick",
        "abstract": "Finder networks in general, and Apple's Find My network in particular, can pose a grave threat to users' privacy and even health if these networks are abused for stalking. Apple's release of the AirTag-a very affordable tracker covered by the nearly ubiquitous Find My network-amplified this issue. While Apple provides a stalking detection feature within its ecosystem, billions of Android users are still left in the dark. Apple recently released the Android app \"Tracker Detect,\" which does not deliver a convincing feature set for stalking protection. We reverse engineer Apple's tracking protection in iOS and discuss its features regarding stalking detection. We design \"AirGuard\" and release it as an Android app to protect against abuse by Apple tracking devices. We compare the performance of our solution with the Apple-provided one in iOS and study the use of AirGuard in the wild over multiple weeks using data contributed by tens of thousands of active users.",
        "files": {
            "openAccessPdf": "http://arxiv.org/pdf/2202.11813"
        },
        "abstract_zh": "一般来说，Finder网络，特别是苹果的Find My network，如果这些网络被滥用于跟踪，可能会对用户的隐私甚至健康构成严重威胁。苹果发布的AirTag——一款几乎无处不在的Find My network覆盖的非常实惠的追踪器——放大了这个问题。虽然苹果在其生态系统中提供了跟踪检测功能，但数十亿安卓用户仍被蒙在鼓里。苹果最近发布了Android应用程序“Tracker Detect”，它没有提供令人信服的跟踪保护功能集。我们对苹果在iOS中的跟踪保护进行逆向工程，并讨论其关于跟踪检测的功能。我们设计了“AirGuard”并将其作为Android应用程序发布，以防止被苹果跟踪设备滥用。我们将我们的解决方案与苹果在iOS中提供的解决方案进行了比较，并使用数万名活跃用户提供的数据研究了AirGuard在野外的使用情况。",
        "title_zh": "AirGuard -保护Android用户免受苹果Find My Devices的跟踪攻击",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2022.html",
        "conf_title": "15th WISEC 2022: San Antonio, TX, USA",
        "conf_url": "https://doi.org/10.1145/3507657",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3507657.3528543",
        "title": "PAcT: Detecting and Classifying Privacy Behavior of Android Applications",
        "authors": "Vijayanta Jain, Sanonda Datta Gupta, Sepideh Ghanavati, Sai Teja Peddinti, Collin McMillan",
        "abstract": "Interpreting and describing mobile applications' privacy behaviors to ensure creating consistent and accurate privacy notices is a challenging task for developers. Traditional approaches to creating privacy notices are based on predefined templates or questionnaires and do not rely on any traceable behaviors in code which may result in inconsistent and inaccurate notices. In this paper, we present an automated approach to detect privacy behaviors in code of Android applications. We develop Privacy Action Taxonomy (PAcT), which includes labels for Practice (i.e. how applications use personal information) and Purpose (i.e. why). We annotate ~5,200 code segments based on the labels and create a multi-label multi-class dataset with ~14,000 labels. We develop and train deep learning models to classify code segments. We achieve the highest F-1 scores across all label types of 79.62% and 79.02% for Practice and Purpose.",
        "files": {
            "openAccessPdf": "https://dl.acm.org/doi/pdf/10.1145/3507657.3528543"
        },
        "abstract_zh": "解释和描述移动应用程序的隐私行为以确保创建一致和准确的隐私声明对于开发人员来说是一项具有挑战性的任务。创建隐私声明的传统方法基于预定义的模板或问卷，并且不依赖于代码中的任何可追踪行为，这可能导致不一致和不准确的声明。本文提出了一种自动检测Android应用程序代码中隐私行为的方法。我们开发了隐私行动分类法(PAcT)，其中包括实践(即应用程序如何使用个人信息)和目的(即为什么)的标签。我们根据标签注释了大约5，200个代码段，并创建了一个包含大约14，000个标签的多标签多类数据集。我们开发和训练深度学习模型来分类代码段。我们在所有标签类型中获得了最高的F-1分数，实践和目的分别为79.62%和79.02%。",
        "title_zh": "PAcT:检测和分类Android应用程序的隐私行为",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2022.html",
        "conf_title": "15th WISEC 2022: San Antonio, TX, USA",
        "conf_url": "https://doi.org/10.1145/3507657",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3507657.3528548",
        "title": "On the Robustness of Wi-Fi Deauthentication Countermeasures",
        "authors": "Domien Schepers, Aanjhan Ranganathan, Mathy Vanhoef",
        "abstract": "With the introduction of WPA3 and Wi-Fi 6, an increased usage of Wi-Fi Management Frame Protection (MFP) is expected. Wi-Fi MFP, defined in IEEE 802.11w, protects robust management frames by providing data confidentiality, integrity, origin authenticity, and replay protection. One of its key goals is to prevent deauthentication attacks in which an adversary forcibly disconnects a client from the network. In this paper, we inspect the standard and its implementations for their robustness and protection against deauthentication attacks. In our standard analysis, we inspect the rules for processing robust management frames on their completeness, consistency, and security, leading to the discovery of unspecified cases, contradictory rules, and revealed insecure rules that lead to new denial-of-service vulnerabilities. We then inspect implementations and identify vulnerabilities in clients and access points running on the latest versions of the Linux kernel, hostap, IWD, Apple (i.e., macOS, iOS, iPadOS), Windows, and Android. Altogether, these vulnerabilities allow an adversary to disconnect any client from personal and enterprise networks despite the usage of MFP. Our work highlights that management frame protection is insufficient to prevent deauthentication attacks, and therefore more care is needed to mitigate attacks of this kind. In order to address the identified shortcomings, we worked with industry partners to propose updates to the IEEE 802.11 standard.",
        "files": {
            "openAccessPdf": "https://lirias.kuleuven.be/bitstream/20.500.12942/697745/2/wisec2022.pdf"
        },
        "abstract_zh": "随着WPA3和Wi-Fi 6的推出，预计Wi-Fi管理帧保护(MFP)的使用将会增加。IEEE 802.11w中定义的Wi-Fi MFP通过提供数据机密性、完整性、来源真实性和重放保护来保护健壮的管理帧。它的主要目标之一是防止身份验证攻击，在这种攻击中，对手会强行断开客户端与网络的连接。在本文中，我们检查了该标准及其实现的健壮性和对解除认证攻击的保护。在我们的标准分析中，我们检查用于处理健壮管理帧的规则的完整性、一致性和安全性，从而发现未指定的情况、矛盾的规则以及导致新的拒绝服务漏洞的不安全规则。然后，我们检查实施情况，并识别在最新版本的Linux内核、hostap、IWD、苹果(即macOS、iOS、iPadOS)、Windows和Android上运行的客户端和接入点中的漏洞。总之，尽管使用了MFP，这些漏洞仍允许对手断开任何客户端与个人和企业网络的连接。我们的工作强调了管理帧保护不足以防止去认证攻击，因此需要更加小心来减轻这种攻击。为了解决已确定的缺点，我们与行业合作伙伴一起提出了IEEE 802.11标准的更新。",
        "title_zh": "Wi-Fi认证对抗措施的鲁棒性研究",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2022.html",
        "conf_title": "15th WISEC 2022: San Antonio, TX, USA",
        "conf_url": "https://doi.org/10.1145/3507657",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3507657.3529655",
        "title": "OpenHaystack Mobile - Tracking Custom Find My Accessories on Smartphones",
        "authors": "Lukas Burg, Max Granzow, Alexander Heinrich, Matthias Hollick",
        "abstract": "In 2021 OpenHaystack on macOS was the first step into liberating Apple's Find My technology to be integrated into any Bluetooth-capable device. By using custom firmware for microchips like the ESP32, it was possible to build custom trackable accessories similar to an Apple AirTag in size and functionality. OpenHaystack Mobile is a cross-platform mobile application that runs on Android and iOS. It extends previous work, which was tied to macOS, to be available to more users. It provides BLE-based location tracking functionality based on Apple's Find My network. Our app is built cross-platform capable by using the Flutter framework for the user interface and the cryptographic operations. The user experience is improved compared to a desktop-based app because it allows tracking lost valuables anywhere. Furthermore, the app allows to directly route users to lost devices with smartphone navigation apps like Google Maps.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "2021年，macOS上的OpenHaystack迈出了第一步，将苹果的Find My技术集成到任何支持蓝牙的设备中。通过为像ESP32这样的微芯片使用定制固件，有可能建立在大小和功能上类似于苹果AirTag的定制可跟踪附件。OpenHaystack Mobile是一款跨平台的移动应用，可以在Android和iOS上运行。它扩展了之前与macOS相关的工作，让更多用户可以使用。它基于苹果的“查找我的网络”提供基于BLE的位置跟踪功能。我们的应用程序是通过使用Flutter框架为用户界面和加密操作构建的跨平台能力。与基于桌面的应用程序相比，用户体验得到了改善，因为它允许在任何地方跟踪丢失的贵重物品。此外，该应用程序允许使用智能手机导航应用程序(如谷歌地图)直接将用户指引到丢失的设备。",
        "title_zh": "OpenHaystack Mobile -在智能手机上跟踪自定义查找我的配件",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2022.html",
        "conf_title": "15th WISEC 2022: San Antonio, TX, USA",
        "conf_url": "https://doi.org/10.1145/3507657",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3522783.3529523",
        "title": "Can You Hear It?: Backdoor Attacks via Ultrasonic Triggers",
        "authors": "Stefanos Koffas, Jing Xu, Mauro Conti, Stjepan Picek",
        "abstract": "This work explores backdoor attacks for automatic speech recognition systems where we inject inaudible triggers. By doing so, we make the backdoor attack challenging to detect for legitimate users and, consequently, potentially more dangerous. We conduct experiments on two versions of a speech dataset and three neural networks and explore the performance of our attack concerning the duration, position, and type of the trigger. Our results indicate that less than 1% of poisoned data is sufficient to deploy a backdoor attack and reach a 100% attack success rate. We observed that short, non-continuous triggers result in highly successful attacks. Still, since our trigger is inaudible, it can be as long as possible without raising any suspicions making the attack more effective. Finally, we conduct our attack on actual hardware and saw that an adversary could manipulate inference in an Android application by playing the inaudible trigger over the air.",
        "files": {
            "openAccessPdf": "https://dl.acm.org/doi/pdf/10.1145/3522783.3529523"
        },
        "abstract_zh": "这项工作探讨了自动语音识别系统的后门攻击，我们注入听不见的触发器。通过这样做，我们使得合法用户很难检测到后门攻击，因此，潜在的危险更大。我们在两个版本的语音数据集和三个神经网络上进行实验，并探索我们的攻击在持续时间、位置和触发类型方面的性能。我们的结果表明，不到1%的中毒数据就足以部署后门攻击，并达到100%的攻击成功率。我们观察到，短暂、非连续的触发会导致非常成功的攻击。尽管如此，由于我们的触发器是听不见的，它可以尽可能长，而不引起任何怀疑，使攻击更有效。最后，我们在实际硬件上进行攻击，发现对手可以通过无线播放听不见的触发器来操纵Android应用程序中的推理。",
        "title_zh": "你能听到吗？:通过超声波触发器的后门攻击",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wiseml2022.html",
        "conf_title": "WiseML@WiSec 2022: San Antonio, TX, USA",
        "conf_url": "https://doi.org/10.1145/3522783",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3395351.3399366",
        "title": "Hacksaw: biometric-free non-stop web authentication in an emerging world of wearables",
        "authors": "Prakash Shrestha, Nitesh Saxena",
        "abstract": "The currently deployed web authentication model, involving only entry-point authentication of users, does not do anything to protect against account takeover attacks. Once the attacker has compromised the entry-point authentication method, such as by learning a user's password or even two-factor authentication credentials via widely exploited mechanisms such as phishing and password database breaches, or has hijacked a login session, he can fully access and abuse the user's account and associated services. To respond to this critical vulnerability, we introduce the notion of non-stop post-entry authentication, to be integrated with any entry-point authentication method, using which the web service can proactively authenticate the user throughout the login session invisibly in the background without explicit user involvement and without the need for storing user-specific templates (like in biometric systems) thereby preserving user privacy. We design a transparent and privacy-preserving non-stop authentication system, called Hacksaw, using a wrist-worn personal wearable device that authenticates the user continually by correlating the input events on the website (e.g., keyboard and mouse activities) with the user's corresponding hand movements captured via the device's motion sensors. Specifically, at its core, Hacksaw's correlation algorithm computes the cosine similarity of the hand gesture with the stored generic (i.e., non user-specific) templates of input gestures. We build an instance of Hacksaw's implementation on an Android smartwatch as the wearable and desktops/laptops as the client terminals, and comprehensively evaluate it under benign and adversarial settings. Our results suggest that Hacksaw can keep the legitimate users logged into their accounts for long durations, while promptly detecting or automatically deauthenticating remote and proximity attackers attempting to take over the users' account following the compromise of the initial login credentials or hijacking of the login session. Given that wrist-worn wearable devices are already increasingly used in many domains of daily lives (including security applications), we believe that Hacksaw can be incorporated to the current web authentication model, especially to sensitive web services such as banking or e-commerce, to significantly improve its security against online fraud, without additional effort from the users and without degrading user privacy.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "当前部署的web身份验证模型只涉及用户的入口点身份验证，并不做任何事情来防止帐户接管攻击。一旦攻击者破坏了入口点身份验证方法，例如通过广泛利用的机制(如网络钓鱼和密码数据库泄露)了解用户的密码甚至双因素身份验证凭据，或者劫持了登录会话，他就可以完全访问并滥用用户的帐户和相关服务。为了应对这一严重漏洞，我们引入了不间断的登录后身份验证的概念，将其与任何入口点身份验证方法相集成，使用这种方法，web服务可以在整个登录会话中主动地在后台对用户进行身份验证，而无需明确的用户参与，也无需存储用户特定的模板(如在生物识别系统中)，从而保护用户隐私。我们设计了一个透明且保护隐私的不间断认证系统，称为Hacksaw，使用一个手腕佩戴的个人可穿戴设备，通过将网站上的输入事件(例如，键盘和鼠标活动)与设备的运动传感器捕捉到的用户相应的手部运动相关联，来持续认证用户。具体地，在其核心，Hacksaw的相关算法计算手势与输入手势的存储的通用(即，非用户特定的)模板的余弦相似性。我们以Android智能手表作为可穿戴设备，以台式机/笔记本电脑作为客户端，构建了一个Hacksaw的实现实例，并在良性和对抗性环境下对其进行了综合评估。我们的结果表明，Hacksaw可以让合法用户长时间登录到他们的帐户，同时在初始登录凭据受损或登录会话被劫持后，迅速检测或自动取消对试图接管用户帐户的远程和邻近攻击者的身份验证。鉴于腕戴式可穿戴设备已经越来越多地用于日常生活的许多领域(包括安全应用)，我们相信Hacksaw可以整合到当前的web身份验证模型中，特别是银行或电子商务等敏感的web服务中，以显著提高其防止在线欺诈的安全性，而无需用户付出额外的努力，也不会降低用户隐私。",
        "title_zh": "钢锯:新兴可穿戴设备世界中的无生物识别不间断网络认证",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2020.html",
        "conf_title": "13th WISEC 2020: Linz, Austria",
        "conf_url": "https://doi.org/10.1145/3395351",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3395351.3399436",
        "title": "ivPair: context-based fast intra-vehicle device pairing for secure wireless connectivity",
        "authors": "Kyuin Lee, Neil Klingensmith, Dong He, Suman Banerjee, Younghyun Kim",
        "abstract": "The emergence of advanced in-vehicle infotainment (IVI) systems, such as Apple CarPlay and Android Auto, calls for fast and intuitive device pairing mechanisms to discover newly introduced devices and make or break a secure, high-bandwidth wireless connection. Current pairing schemes are tedious and lengthy as they typically require users to go through pairing and verification procedures by manually entering a predetermined or randomly generated pin on both devices. This inconvenience usually results in prolonged usage of old pins, significantly degrading the security of network connections. To address this challenge, we propose ivPair, a secure and usable device pairing protocol that extracts an identical pairing pin or fingerprint from vehicle's vibration response caused by various factors such as driver's driving pattern, vehicle type, and road conditions. Using ivPair, users can pair a mobile device equipped with an accelerometer with the vehicle's IVI system or other mobile devices by simply holding it against the vehicle's interior frame. Under realistic driving experiments with various types of vehicles and road conditions, we demonstrate that all passenger-owned devices can expect a high pairing success rate with a short pairing time, while effectively rejecting proximate adversaries attempting to pair with the target vehicle.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "高级车载信息娱乐(IVI)系统的出现，如Apple CarPlay和Android Auto，需要快速直观的设备配对机制来发现新引入的设备，并建立或中断安全的高带宽无线连接。当前的配对方案冗长乏味，因为它们通常需要用户通过在两个设备上手动输入预定或随机生成的pin来完成配对和验证过程。这种不便通常会导致旧pin的长期使用，从而大大降低网络连接的安全性。为了应对这一挑战，我们提出了ivPair，这是一种安全且可用的设备配对协议，可以从由各种因素(如驾驶员的驾驶模式、车辆类型和路况)引起的车辆振动响应中提取相同的配对pin或指纹。使用ivPair，用户只需将装有加速度计的移动设备与车辆的IVI系统或其他移动设备进行配对，只需将它放在车辆的内部框架上。在各种类型的车辆和道路条件下的实际驾驶实验中，我们证明了所有乘客拥有的设备都可以在短时间内获得高配对成功率，同时有效地拒绝试图与目标车辆配对的邻近对手。",
        "title_zh": "ivPair:用于安全无线连接的基于上下文的快速车内设备配对",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2020.html",
        "conf_title": "13th WISEC 2020: Linz, Austria",
        "conf_url": "https://doi.org/10.1145/3395351",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3395351.3399420",
        "title": "Acoustic integrity codes: secure device pairing using short-range acoustic communication",
        "authors": "Florentin Putz, Flor Álvarez, Jiska Classen",
        "abstract": "Secure Device Pairing (SDP) relies on an out-of-band channel to authenticate devices. This requires a common hardware interface, which limits the use of existing SDP systems. We propose to use short-range acoustic communication for the initial pairing. Audio hardware is commonly available on existing off-the-shelf devices and can be accessed from user space without requiring firmware or hardware modifications. We improve upon previous approaches by designing Acoustic Integrity Codes (AICs): a modulation scheme that provides message authentication on the acoustic physical layer. We analyze their security and demonstrate that we can defend against signal cancellation attacks by designing signals with low autocorrelation. Our system can detect overshadowing attacks using a ternary decision function with a threshold. In our evaluation of this SDP scheme's security and robustness, we achieve a bit error ratio below 0.1% for a net bit rate of 100 bps with a signal-to-noise ratio (SNR) of 14 dB. Using our open-source proof-of-concept implementation on Android smartphones, we demonstrate pairing between different smartphone models.",
        "files": {
            "openAccessPdf": "http://arxiv.org/pdf/2005.08572"
        },
        "abstract_zh": "安全设备配对(SDP)依靠带外通道来验证设备。这需要一个通用的硬件接口，这限制了现有SDP系统的使用。我们建议使用短程声学通信进行初始配对。音频硬件通常在现有的现成设备上可用，并且可以从用户空间访问，而不需要修改固件或硬件。我们通过设计声学完整性代码(AICs)来改进以前的方法:一种在声学物理层上提供消息认证的调制方案。我们分析了它们的安全性，并证明我们可以通过设计低自相关的信号来抵御信号抵消攻击。我们的系统可以使用带有阈值的三元决策函数来检测遮蔽攻击。在我们对该SDP方案的安全性和鲁棒性的评估中，我们实现了100 bps净比特率和14 dB信噪比(SNR)下的误码率低于0.1%。使用我们在Android智能手机上的开源概念验证实现，我们演示了不同智能手机型号之间的配对。",
        "title_zh": "声学完整性代码:使用短程声学通信的安全设备配对",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2020.html",
        "conf_title": "13th WISEC 2020: Linz, Austria",
        "conf_url": "https://doi.org/10.1145/3395351",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3395351.3399346",
        "title": "An empirical study of potentially malicious third-party libraries in Android apps",
        "authors": "Zicheng Zhang, Wenrui Diao, Chengyu Hu, Shanqing Guo, Chaoshun Zuo, Li Li",
        "abstract": "The rapid development of Android apps primarily benefits from third-party libraries that provide well-encapsulated functionalities. On the other hand, more and more malicious libraries are discovered in the wild, which brings new security challenges. Despite some previous studies focusing on the malicious libraries, however, most of them only study specific types of libraries or individual cases. The security community still lacks a comprehensive understanding of potentially malicious libraries (PMLs) in the wild. In this paper, we systematically study the PMLs based on a large-scale APK dataset (over 500K samples), including extraction, identification, and comprehensive analysis. On the high-level, we conducted a two-stage study. In the first stage, to collect enough analyzing samples, we designed an automatic tool to extract libraries and identify PMLs. In the second stage, we conducted a comprehensive study of the obtained PMLs. Notably, we analyzed four representative aspects of PMLs: library repackaging, exposed behaviors, permissions, and developer connections. Several interesting facts were discovered. We believe our study will provide new knowledge of malicious libraries and help design targets defense solutions to mitigate the corresponding security risks.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android应用的快速发展主要得益于提供良好封装功能的第三方库。另一方面，越来越多的恶意库在野外被发现，带来了新的安全挑战。尽管以前的一些研究集中在恶意库上，但是，大多数研究只针对特定类型的库或个别案例。安全社区仍然缺乏对潜在恶意库(PML)的全面了解。本文基于大规模APK数据集(超过50万个样本)系统地研究了PMLs，包括提取、识别和综合分析。在高层次上，我们进行了两个阶段的研究。在第一阶段，为了收集足够的分析样本，我们设计了一个自动提取文库和识别PML的工具。在第二阶段，我们对获得的PML进行了全面的研究。值得注意的是，我们分析了PML的四个代表性方面:库重新打包、公开的行为、权限和开发人员连接。发现了几个有趣的事实。我们相信，我们的研究将提供恶意库的新知识，并帮助设计目标防御解决方案，以减轻相应的安全风险。",
        "title_zh": "Android应用中潜在恶意第三方库的实证研究",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2020.html",
        "conf_title": "13th WISEC 2020: Linz, Austria",
        "conf_url": "https://doi.org/10.1145/3395351",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3395351.3399341",
        "title": "iRyP: a purely edge-based visual privacy-respecting system for mobile cameras",
        "authors": "Yuanyi Sun, Shiqing Chen, Sencun Zhu, Yu Chen",
        "abstract": "With the growing popularity of mobile devices that have built-in cameras, capturing images has become a trivial job for ordinary people, who share the images with their friends or the public online. However, such digital images are often taken without the consent of some photographed persons, hence leading to privacy concerns. In this paper, we propose iRyP, a purely edge-based privacy-respecting system for mobile cameras. In order to meet the requirements of efficiency and usability, we propose to piggyback privacy policies in the advertising messages of Bluetooth Low Energy (BLE), which has been widely deployed in most mobile devices. As such, privacy policies of people in a photo view can be delivered timely and automatically. Moreover, we propose to use a perceptual hashing algorithm for fast face matching. To improve detection accuracy, we also design several new techniques for face-related image processing. We implement and evaluate a prototype system purely based on the Android platform. Our experiments show that iRyP can meet our design requirements and is practical and ready to use.",
        "files": {
            "openAccessPdf": "https://scholarsphere.psu.edu/resources/7bee2289-660a-4dc2-8ac6-a06ae38e8515/downloads/22055"
        },
        "abstract_zh": "随着内置摄像头的移动设备越来越受欢迎，捕捉图像已经成为普通人的一项琐碎工作，他们在网上与朋友或公众分享图像。然而，这种数字图像通常是在未经一些被拍摄者同意的情况下拍摄的，因此导致隐私问题。在本文中，我们提出了iRyP，一个纯粹基于边缘的隐私尊重系统的移动相机。为了满足效率和可用性的要求，我们提出在已经广泛部署在大多数移动设备中的蓝牙低能量(BLE)的广告消息中搭载隐私策略。这样，照片视图中的人的隐私策略可以被及时和自动地传递。此外，我们建议使用感知哈希算法进行快速人脸匹配。为了提高检测精度，我们还设计了几种新的人脸相关图像处理技术。我们实现并评估了一个完全基于Android平台的原型系统。实验表明，iRyP能够满足我们的设计要求，具有实用性和易用性。",
        "title_zh": "iRyP:一个完全基于边缘的视觉隐私保护系统",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2020.html",
        "conf_title": "13th WISEC 2020: Linz, Austria",
        "conf_url": "https://doi.org/10.1145/3395351",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3395351.3399347",
        "title": "Paging storm attacks against 4G/LTE networks from regional Android botnets: rationale, practicality, and implications",
        "authors": "Kaiming Fang, Guanhua Yan",
        "abstract": "Although the impact of mobile botnet attacks against cellular networks has been studied in a number of previous works, little attention has been paid to regional botnets, where bot-infected mobile devices are geographically concentrated at local areas. In this work we investigate a new type of threats called paging storm attacks, which can be launched from a regional botnet to exhaust the limited paging capacity of cells in a 4G/LTE (Long-Term Evolution) network. As paging storm attacks can delay paging requests for legitimate time-critical voice or video calls in a target area, their real-life implications include user annoyance, distortion of call center analytics, and loss of productivity. To demonstrate the feasibility of such attacks, we design and implement a proof-of-concept Android botnet that can coordinate bot activities to create pulsating paging requests within a short period of time. We mathematically analyze the probability that normal paging requests are delayed due to a botnet attack. Experimental results observed from a high-fidelity emulation testbed reveal that paging storm attacks launched from a regional botnet can create repetitive surges of paging requests in the target LTE network, thereby delaying time-critical voice/video calls by several seconds.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "虽然移动僵尸网络攻击对蜂窝网络的影响已经在许多以前的工作中进行了研究，但很少关注区域僵尸网络，其中受僵尸网络感染的移动设备在地理上集中在本地区域。在这项工作中，我们研究了一种称为寻呼风暴攻击的新型威胁，这种攻击可以从区域性僵尸网络中发起，以耗尽4G/LTE(长期演进)网络中小区的有限寻呼容量。由于寻呼风暴攻击可以延迟目标区域中合法的时间关键的语音或视频呼叫的寻呼请求，因此它们在现实生活中的影响包括用户烦恼、呼叫中心分析失真和生产力损失。为了证明这种攻击的可行性，我们设计并实现了一个概念验证的Android僵尸网络，它可以协调僵尸活动，在短时间内创建脉动的寻呼请求。我们从数学上分析了正常寻呼请求因僵尸网络攻击而延迟的概率。从高保真仿真测试床观察到的实验结果显示，从区域性僵尸网络发起的寻呼风暴攻击可以在目标LTE网络中创建重复的寻呼请求激增，从而将时间关键的语音/视频呼叫延迟几秒钟。",
        "title_zh": "来自区域性Android僵尸网络的针对4G/LTE网络的寻呼风暴攻击:原理、实用性和影响",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2020.html",
        "conf_title": "13th WISEC 2020: Linz, Austria",
        "conf_url": "https://doi.org/10.1145/3395351",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3448300.3467824",
        "title": "No need to ask the Android: bluetooth-low-energy scanning without the location permission",
        "authors": "Vincent Toubiana, Mathieu Cunche",
        "abstract": "Bluetooth-Low-Energy (BLE) scanning can be misused by applications to determine a device location. In order to prevent unconsented location tracking by applications, Android conditions the use of some BLE functions to the prior obtention of the location permission and the activation of the location setting. In this paper, we detail a vulnerability that allows applications to perform BLE scans without the location permission. We present another flaw allowing to bypass the active location requirement. Together those flaws allow an application to fully circumvent the location restrictions applying to BLE scanning. The presented vulnerability affects devices running Android 6 up to 11 and could be misused by application developers to track the location of users. This vulnerability has been disclosed to Google and assigned the CVE-2021-0328.",
        "files": {
            "openAccessPdf": "https://hal.inria.fr/hal-03265556/file/Android_SCAN_permission_author_version.pdf"
        },
        "abstract_zh": "蓝牙-低能量(BLE)扫描可能被应用程序滥用来确定设备位置。为了防止应用程序未经同意的位置跟踪，Android将一些BLE功能的使用限制为事先获得位置许可和激活位置设置。在本文中，我们详细介绍了一个漏洞，该漏洞允许应用程序在没有位置权限的情况下执行BLE扫描。我们提出了另一个允许绕过主动定位要求的缺陷。这些缺陷使得应用程序可以完全避开BLE扫描的位置限制。该漏洞会影响运行Android 6到11的设备，并可能被应用程序开发人员滥用来跟踪用户的位置。已向Google披露了此漏洞，并分配了CVE-2021-0328。",
        "title_zh": "无需询问Android:蓝牙-无需位置许可的低能量扫描",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2021.html",
        "conf_title": "14th WISEC 2021: Abu Dhabi, United Arab Emirates",
        "conf_url": "https://doi.org/10.1145/3448300",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3448300.3468288",
        "title": "RIP StrandHogg: a practical StrandHogg attack detection method on Android",
        "authors": "Jasper Stang, Alexandra Dmitrienko, Sascha Roth",
        "abstract": "StrandHogg vulnerabilities affect Android's multitasking system and threaten up to 90% of Android platforms, which translates to millions of affected users. Existing countermeasures require modification of the OS, have usability drawbacks, or are limited to the detection of certain attack versions. In this work, we aim to develop a generic, efficient, and usability-friendly attack detection method, which does not require OS modifications and can be employed by apps installed on any vulnerable Android platform. To achieve our goal, we analyze StrandHogg attack techniques and develop two countermeasures, one using Machine Learning and the other one using ActivityCounter - a reliable attack indicator, which we could synthetically engineer. Our first approach achieves an average F1 score of 92% across all attack variations, while ActivityCounter shows superior performance and efficiently detects all attack versions without false positives. ActivityCounter is the first solution without practical limitations, which can be easily deployed in practice and protect millions of affected users.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "StrandHogg漏洞影响Android的多任务系统，并威胁到高达90%的Android平台，这意味着数百万受影响的用户。现有的对策需要修改操作系统，具有可用性缺陷，或者限于检测某些攻击版本。在这项工作中，我们的目标是开发一种通用、高效、易用的攻击检测方法，它不需要修改操作系统，可以被安装在任何易受攻击的Android平台上的应用程序所采用。为了实现我们的目标，我们分析了StrandHogg攻击技术并开发了两种对策，一种使用机器学习，另一种使用ActivityCounter -一种可靠的攻击指标，我们可以综合设计。我们的第一种方法在所有攻击变体上实现了92%的平均F1分数，而ActivityCounter表现出了卓越的性能，并且可以有效地检测所有攻击版本，而不会出现误报。ActivityCounter是第一个没有实际限制的解决方案，可以在实践中轻松部署，保护数百万受影响的用户。",
        "title_zh": "RIP StrandHogg:一种实用的Android strand hogg攻击检测方法",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2021.html",
        "conf_title": "14th WISEC 2021: Abu Dhabi, United Arab Emirates",
        "conf_url": "https://doi.org/10.1145/3448300",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3317549.3319721",
        "title": "Protecting mobile devices from physical memory attacks with targeted encryption",
        "authors": "Le Guan, Chen Cao, Sencun Zhu, Jingqiang Lin, Peng Liu, Yubin Xia, Bo Luo",
        "abstract": "Sensitive data in a process could be scattered over the memory of a computer system for a prolonged period of time. Unfortunately, DRAM chips were proven insecure in previous studies. The problem becomes worse in the mobile environment, in which users' smartphones are easily lost or stolen. The powered-on phones may contain sensitive data in the vulnerable DRAM chips. In this paper, we propose MemVault, a mechanism to protect sensitive data in Android devices against physical memory attacks. MemVault keeps track of the propagation of well-marked sensitive data sources, and selectively encrypts tainted sensitive memory contents in the DRAM chip. When a tainted object is accessed, MemVault redirects the access to the internal RAM (iRAM), where the cipher-text object is decrypted transparently. iRAM is a system-on-chip (SoC) component which is by nature immune to physical memory exploits. We have implemented a MemVault prototype system, and have evaluated it with extensive experiments. Our results validate that MemVault effectively eliminates the occurrences of clear-text sensitive objects in DRAM chips, and imposes acceptable overheads.",
        "files": {
            "openAccessPdf": "https://dl.acm.org/doi/pdf/10.1145/3317549.3319721"
        },
        "abstract_zh": "进程中的敏感数据可能会长时间分散在计算机系统的内存中。不幸的是，DRAM芯片在以前的研究中被证明是不安全的。在移动环境中，这个问题变得更加严重，因为用户的智能手机很容易丢失或被盗。开机的手机可能在易受攻击的DRAM芯片中包含敏感数据。在本文中，我们提出了MemVault，这是一种保护Android设备中的敏感数据免受物理内存攻击的机制。MemVault跟踪标记良好的敏感数据源的传播，并选择性地加密DRAM芯片中受感染的敏感内存内容。当被感染的对象被访问时，MemVault将访问重定向到内部RAM (iRAM ),在那里密文对象被透明地解密。iRAM是片上系统(SoC)组件，其本质上不受物理存储器利用的影响。我们已经实现了一个MemVault原型系统，并通过大量实验对其进行了评估。我们的结果验证了MemVault有效地消除了DRAM芯片中明文敏感对象的出现，并施加了可接受的开销。",
        "title_zh": "通过有针对性的加密保护移动设备免受物理内存攻击",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2019.html",
        "conf_title": "12th WISEC 2019: Miami, Florida, USA",
        "conf_url": "https://doi.org/10.1145/3317549",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3317549.3319725",
        "title": "ARF: identifying re-delegation vulnerabilities in Android system services",
        "authors": "Sigmund Albert Gorski III, William Enck",
        "abstract": "Over the past decade, the security of the Android platform has undergone significant scrutiny by both academic and industrial researchers. This scrutiny has been largely directed towards third-party applications and a few critical system interfaces, leaving much of Android's middleware unstudied. Building upon recent efforts to more rigorously analyze authorization logic in Android's system services, we revisit the problem of permission re-delegation, but in the context of system service entry points. In this paper, we propose the Android Re-delegation Finder (ARF) analysis framework for helping security analysts identify permission re-delegation vulnerabilities within Android's system services. ARF analyzes an interconnected graph of entry points in system services, deriving calling dependencies, annotating permission checks, and identifying potentially vulnerable deputies that improperly expose information or functionality to third-party applications. We apply ARF to Android AOSP version 8.1.0 and find that it refines the set of 15,483 paths between entry points down to a manageable set of 490 paths. Upon manual inspection, we found that 170 paths improperly exposed information or functionality, consisting of 86 vulnerable deputies. Through this effort, we demonstrate the need for continued investigation of automated tools to analyze the authorization logic within the Android middleware.",
        "files": {
            "openAccessPdf": "https://dl.acm.org/doi/pdf/10.1145/3317549.3319725"
        },
        "abstract_zh": "在过去的十年里，Android平台的安全性受到了学术界和工业界研究人员的密切关注。这种审查主要针对第三方应用程序和一些关键的系统界面，对Android的许多中间件没有进行研究。在最近更严格地分析Android系统服务中的授权逻辑的基础上，我们重新审视了权限再委托的问题，但是是在系统服务入口点的上下文中。在本文中，我们提出了Android再授权查找器(ARF)分析框架，用于帮助安全分析师识别Android系统服务中的权限再授权漏洞。ARF分析系统服务中入口点的互连图，导出调用依赖关系，注释权限检查，并识别不恰当地向第三方应用程序公开信息或功能的潜在易受攻击的代理。我们将ARF应用于Android AOSP版本8.1.0，发现它将入口点之间的15，483条路径精简为可管理的490条路径。通过手动检查，我们发现有170条路径不适当地公开了信息或功能，包括86个易受攻击的代理。通过这一努力，我们证明了继续研究自动化工具以分析Android中间件中的授权逻辑的必要性。",
        "title_zh": "ARF:识别Android系统服务中的重新授权漏洞",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2019.html",
        "conf_title": "12th WISEC 2019: Miami, Florida, USA",
        "conf_url": "https://doi.org/10.1145/3317549",
        "keywords": [
            "AOSP",
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3317549.3323412",
        "title": "Factors influencing users to use unsecured wi-fi networks: evidence in the wild",
        "authors": "Nissy Sombatruang, Lucky Onwuzurike, M. Angela Sasse, Michelle Baddeley",
        "abstract": "Security experts often question why some users take actions that could expose them to security and privacy risks. Using unsecured Wi-Fi networks is one common example. Even though mobile data is now a more secure means to connect to the Internet, and is becoming faster and more affordable, many users continue to use unsecured Wi-Fi. To identify risk mitigating strategies, the research community first needs to understand the underlying factors driving users' decisions. Previous studies examined stated preferences --- what people said they have done or think they would do --- but that may not truly reflect real-life behavior. This study is the first to examine revealed preferences --- what people actually do in naturalistic settings. Specifically, we investigated how users' desire to save mobile data and battery power influenced their decisions at the time when they connected to open unsecured Wi-Fi in the wild. We also examined whether the decision to use unsecured Wi-Fi networks could be driven by demographic factors and the user's perception of the risk associated with using these networks. We recruited 71 participants in the UK to install My Wi-Fi Choices, our own Android app, on their mobile device, and run it for three months in the background. The app captured details of mobile data allowance and battery power on participants' devices whenever they used open unsecured Wi-Fi networks. We found that depleting mobile data significantly drove participants to use these networks, especially when their remaining allowance reached approximately 30%. Battery level, however, did not play a significant role. The perceived risks of unsecured Wi-Fi did not affect the decision-making either. Age, education, and income level were also correlated with increased use of unsecured Wi-Fi.",
        "files": {
            "openAccessPdf": "https://opus.lib.uts.edu.au/bitstream/10453/139924/1/3317549.3323412.pdf"
        },
        "abstract_zh": "安全专家经常质疑为什么一些用户会采取可能使他们面临安全和隐私风险的行动。使用不安全的Wi-Fi网络是一个常见的例子。尽管移动数据现在是一种更安全的连接互联网的方式，并且变得更快、更实惠，但许多用户仍继续使用不安全的Wi-Fi。为了确定风险缓解策略，研究界首先需要了解驱动用户决策的潜在因素。之前的研究调查了陈述的偏好——人们说他们已经做了什么或者认为他们会做什么——但这可能并不真正反映现实生活中的行为。这项研究第一次调查了人们在自然环境中的真实偏好。具体来说，我们调查了当用户在野外连接到不安全的Wi-Fi时，他们节省移动数据和电池电量的愿望如何影响他们的决策。我们还研究了使用不安全Wi-Fi网络的决定是否会受到人口因素和用户对使用这些网络相关风险的认知的影响。我们在英国招募了71名参与者，在他们的移动设备上安装我的Wi-Fi Choices，我们自己的Android应用程序，并在后台运行三个月。每当参与者使用开放的不安全Wi-Fi网络时，该应用程序都会捕捉到他们设备上的移动数据限额和电池电量的详细信息。我们发现，耗尽移动数据极大地推动了参与者使用这些网络，尤其是当他们的剩余配额达到大约30%时。然而，电池电量并没有起到重要作用。感知到的不安全Wi-Fi的风险也没有影响决策。年龄、教育和收入水平也与不安全Wi-Fi使用的增加相关。",
        "title_zh": "影响用户使用不安全wi-fi网络的因素:野外证据",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2019.html",
        "conf_title": "12th WISEC 2019: Miami, Florida, USA",
        "conf_url": "https://doi.org/10.1145/3317549",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3212480.3212501",
        "title": "Listening Watch: Wearable Two-Factor Authentication using Speech Signals Resilient to Near-Far Attacks",
        "authors": "Prakash Shrestha, Nitesh Saxena",
        "abstract": "Reducing the level of user effort involved in traditional two-factor authentication (TFA) constitutes an important research topic. A recent effort in this direction leverages ambient sounds to detect the proximity between the second factor device (phone) and the login terminal (browser), and eliminates the need for the user to transfer PIN codes. This approach is highly usable, but is completely vulnerable against far-near attackers, i.e., ones who are remotely located and can guess the victim's audio environment or make the phone create predictable sounds (e.g., ringers), and those who are in physical proximity of the user. In this paper, we propose Listening-Watch, a new TFA mechanism based on a wearable device (watch/bracelet) and active browser-generated random speech sounds. As the user attempts to login, the browser populates a short random code encoded into speech, and the login succeeds if the watch's audio recording contains this code (decoded using speech recognition), and is similar enough to the browser's audio recording. The remote attacker, who has guessed the user's environment or created predictable phone/watch sounds, will be defeated since authentication success relies upon the presence of the random code in watch's recordings. The proximity attacker will also be defeated unless it is extremely close to the watch, since the wearable microphones are usually designed to be only capable of picking up nearby sounds (e.g., voice commands). Furthermore, due to the use of a wearable second factor device, Listening-Watch naturally enables two-factor security even when logging in from a mobile phone. Our contributions are three-fold. First, we introduce the idea of strong and low-effort TFA based on wearable devices, active speech sounds and speech recognition, giving rise to the Listening-Watch system that is secure against both remote and proximity attackers. Second, we design and implement Listening-Watch for an Android smartwatch (and companion smartphone) and the Chrome browser, without the need for any browser plugins. Third, we evaluate Listening-Watch for authentication errors in both benign and adversarial settings. Our results show that Listening-Watch can result in minimal errors in both settings based on appropriate thresholdization and speaker volume levels.",
        "files": {
            "openAccessPdf": "https://dl.acm.org/doi/pdf/10.1145/3212480.3212501"
        },
        "abstract_zh": "降低传统双因素身份认证(TFA)中涉及的用户工作量是一个重要的研究课题。最近在这个方向上的努力利用环境声音来检测第二因素设备(电话)和登录终端(浏览器)之间的接近度，并且消除了用户传输PIN码的需要。这种方法是高度可用的，但是对于远近攻击者来说是完全易受攻击的，即，那些位于远处并且能够猜测受害者的音频环境或者使电话产生可预测的声音的攻击者(例如，铃声)，以及那些在用户的物理附近的攻击者。在本文中，我们提出了Listening-Watch，这是一种基于可穿戴设备(手表/手镯)和主动浏览器生成的随机语音的新TFA机制。当用户试图登录时，浏览器会填充一个编码到语音中的短随机代码，如果手表的音频记录包含此代码(使用语音识别解码)，并且与浏览器的音频记录足够相似，则登录成功。已经猜到用户环境或制造了可预测的电话/手表声音的远程攻击者将被击败，因为认证成功依赖于手表录音中随机代码的存在。接近攻击者也将被击败，除非它非常接近手表，因为可佩戴麦克风通常被设计为只能拾取附近的声音(例如，语音命令)。此外，由于使用了可穿戴的第二因素设备，Listening-Watch自然能够实现双重安全，即使是从移动电话登录。我们的贡献有三个方面。首先，我们引入了基于可穿戴设备、主动语音和语音识别的强而省力的TFA的概念，从而产生了可以抵御远程和近距离攻击者的监听监视系统。其次，我们为Android智能手表(和配套的智能手机)和Chrome浏览器设计并实现了Listening-Watch，不需要任何浏览器插件。第三，我们评估良性和对抗性设置中的认证错误监听监视。我们的结果表明，基于适当的阈值和扬声器音量水平，听-看可以在两种设置中产生最小的误差。",
        "title_zh": "监听手表:使用语音信号的可穿戴双因素认证，可抵御远近攻击",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2018.html",
        "conf_title": "11th WISEC 2018: Stockholm, Sweden",
        "conf_url": "https://doi.org/10.1145/3212480",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3212480.3212504",
        "title": "Towards Dynamically Monitoring Android Applications on Non-rooted Devices in the Wild",
        "authors": "Xiaoxiao Tang, Yan Lin, Daoyuan Wu, Debin Gao",
        "abstract": "Dynamic analysis is an important technique to reveal sensitive behavior of Android apps. Current works require access to the code-level and system-level events (e.g., API calls and system calls) triggered by the running apps and consequently they can only be conducted on in-lab running environments (e.g., emulators and modified OS). The strict requirement of running environment hinders their deployment in scale and makes them vulnerable to anti-analysis techniques. Furthermore, current dynamic analysis of Android apps exploits input generators to invoke app behavior, which, however, cannot provide sufficient code coverage. We propose to dynamically analyze app behavior on non-rooted devices used by the public so that it is possible to analyze dynamically in scale without input generators. By doing so, we also maximize the code coverage since the app behavior is invoked by real users of the apps. To achieve such a goal, we build UpDroid, a system for detecting sensitive behavior without modifying Android OS, rooting the device, or leveraging emulators. UpDroid detects sensitive events by monitoring the changing of public resources on the device, instead of accessing low-level events that require rooting or system modification. To identify the apps that trigger the detected events, UpDroid formulates the identification as a ranking problem and adopts learning to rank technique to solve it. Our experimental results demonstrate that UpDroid can successfully detect the use of 15 out of 26 permissions that are labeled dangerous in the official Android documentation. We also compare UpDroid with API hooking which can theoretically capture all sensitive behavior but requires root permission and system modifications. Results show that UpDroid can still achieve 70% coverage of API hooking even without root permission or any system modifications.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "动态分析是揭示Android应用程序敏感行为的重要技术。当前的工作需要访问由运行的应用程序触发的代码级和系统级事件(例如，API调用和系统调用)，因此它们只能在实验室运行环境中进行(例如，仿真器和修改的操作系统)。对运行环境的严格要求阻碍了它们的大规模部署，并使它们容易受到反分析技术的攻击。此外，当前Android应用程序的动态分析利用输入生成器来调用应用程序行为，然而，这不能提供足够的代码覆盖。我们建议动态分析公众使用的非根设备上的应用程序行为，以便在没有输入生成器的情况下进行大规模动态分析。通过这样做，我们还最大化了代码覆盖率，因为应用行为是由应用的真实用户调用的。为了实现这样的目标，我们构建了UpDroid，这是一个用于检测敏感行为的系统，无需修改Android操作系统、为设备找根或利用仿真器。UpDroid通过监控设备上公共资源的变化来检测敏感事件，而不是访问需要寻根或系统修改的低级事件。为了识别触发检测到的事件的应用，UpDroid将识别公式化为排序问题，并采用学习排序技术来解决它。我们的实验结果表明，UpDroid可以成功地检测出在官方Android文档中被标记为危险的26种权限中的15种。我们还比较了UpDroid和API挂钩，后者理论上可以捕获所有敏感行为，但需要root权限和系统修改。结果表明，即使没有root权限或任何系统修改，UpDroid仍然可以实现70%的API挂钩覆盖率。",
        "title_zh": "在野外动态监控非根设备上的Android应用",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2018.html",
        "conf_title": "11th WISEC 2018: Stockholm, Sweden",
        "conf_url": "https://doi.org/10.1145/3212480",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3212480.3212506",
        "title": "SCAnDroid: Automated Side-Channel Analysis of Android APIs",
        "authors": "Raphael Spreitzer, Gerald Palfinger, Stefan Mangard",
        "abstract": "Although the Android system has been continuously hardened against side-channel attacks, there are still plenty of APIs available that can be exploited. However, most side-channel analyses in the literature consider specifically chosen APIs (or resources) in the Android framework, after a manual analysis of APIs for possible information leaks has been performed. Such a manual analysis is a tedious, time consuming, and error-prone task, meaning that information leaks tend to be overlooked. To overcome this tedious task, we introduce SCANDROID, a framework that automatically profiles the Java-based Android API for possible information leaks. Events of interest, such as website launches, Google Maps queries, or application starts, are triggered automatically, and while these events are being triggered, the Java-based Android API is analyzed for possible information leaks that allow inferring these events later on. To assess the Android API for information leaks, SCANDROID relies on dynamic time warping. By applying SCANDROID on Android 8 (Android Oreo), we identified several Android APIs that allow inferring website launches, Google Maps queries, and application starts. The triggered events are by no means exhaustive but have been chosen to demonstrate the broad applicability of SCANDROID. Among the automatically identified information leaks are, for example, the java.io.File API, the android.os.storage.StorageManager API, and several methods within the android.net. Traffics tats API. Thereby, we identify the first side-channel leaks in the Android API on Android 8 (Android Oreo).",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "尽管Android系统已经不断加强了对旁路攻击的防范，但仍有大量API可供利用。然而，在针对可能的信息泄漏对API进行了手动分析之后，文献中的大多数旁门左道分析考虑了Android框架中特别选择的API(或资源)。这种手动分析是一项繁琐、耗时且容易出错的任务，这意味着信息泄漏往往会被忽略。为了克服这一繁琐的任务，我们引入了SCANDROID，这是一个自动分析基于Java的Android API以发现可能的信息泄漏的框架。感兴趣的事件，如网站启动、谷歌地图查询或应用程序启动，会自动触发，当这些事件被触发时，基于Java的Android API会分析可能的信息泄漏，以便稍后推断这些事件。为了评估Android API的信息泄露，SCANDROID依赖于动态时间扭曲。通过在Android 8 (Android Oreo)上应用SCANDROID，我们发现了几个允许推断网站启动、谷歌地图查询和应用程序启动的Android APIs。触发的事件绝非详尽无遗，而是为了展示SCANDROID的广泛适用性。例如，自动识别的信息泄漏包括java.io.File API、Android . OS . storage . storage manager API和android.net中的几个方法。交通状态API。因此，我们确定了Android 8 (Android Oreo)上的Android API中的第一个旁路泄漏。",
        "title_zh": "scan droid:Android API的自动旁路分析",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2018.html",
        "conf_title": "11th WISEC 2018: Stockholm, Sweden",
        "conf_url": "https://doi.org/10.1145/3212480",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3212480.3212503",
        "title": "Android STAR: An Efficient Interaction-Preserving Record-Replay System For Messenger App Usage Surveillance",
        "authors": "Lun-Pin Yuan, Peng Liu, Sencun Zhu",
        "abstract": "Messenger apps on smart phones are widely used for easy communication in a collaborative workplace. However, the use of messengers increases risks to both the organization and the collaborators. For example, an employee may receive proprietary information from one app and then accidentally leak it with another app, but neither the employer nor the employee can effectively prove or disprove what has happened inside messengers. To prove mental elements in a lawsuit, the capability of inspecting the use of messengers in a workplace is desirable to both parties: one can prove misconduct and the other can prove innocence. Yet, guilty intention is subtle if not literally described, and how to prove whether there was a guilty intention has not yet been resolved. To provide new kind of evidence, we propose Android STAR, an inspection-purposed record-and-replay service that replays conversation histories and user interactions with apps. We assume that the employer has obtained consents of employees, and the employees have installed Android STAR in their company devices. The challenge to app-usage inspection includes app variety and evidence veracity. We evaluate STAR with 10 popular messenger apps (including Telegram, LINE, and WeChat). Our results show that while STAR can replay in high-fidelity, it only introduces small performance overhead.",
        "files": {
            "openAccessPdf": "https://dl.acm.org/doi/pdf/10.1145/3212480.3212503"
        },
        "abstract_zh": "智能手机上的Messenger应用程序被广泛用于在协作工作场所轻松交流。然而，使用信使增加了组织和合作者的风险。例如，员工可能从一个应用程序接收专有信息，然后意外地用另一个应用程序泄露这些信息，但雇主和员工都无法有效地证明或反驳messengers内部发生的事情。为了在诉讼中证明精神因素，检查工作场所信使使用的能力对双方都是可取的:一方可以证明不当行为，另一方可以证明无辜。然而，如果不从字面上描述，犯罪意图是微妙的，如何证明是否有犯罪意图尚未解决。为了提供新的证据，我们提出了Android STAR，这是一种以检查为目的的记录和重放服务，可以重放对话历史和用户与应用程序的交互。我们假设雇主已经获得员工的同意，并且员工已经在其公司设备中安装了Android STAR。应用程序使用检查的挑战包括应用程序的多样性和证据的准确性。我们用10个流行的messenger应用程序(包括Telegram、LINE和微信)来评估STAR。我们的结果表明，虽然STAR可以高保真地重放，但它只引入很小的性能开销。",
        "title_zh": "Android STAR:一个高效的交互保持记录回放系统，用于监控Messenger应用程序的使用情况",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2018.html",
        "conf_title": "11th WISEC 2018: Stockholm, Sweden",
        "conf_url": "https://doi.org/10.1145/3212480",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3212480.3212502",
        "title": "My Magnetometer Is Telling You Where I've Been?: A Mobile Device Permissionless Location Attack",
        "authors": "Kenneth Block, Guevara Noubir",
        "abstract": "Although privacy compromises remain an issue among users and advocacy groups, identification of user location has emerged as another point of concern. Techniques using GPS, Wi-Fi, NFC, Bluetooth tracking and cell tower triangulation are well known. These can typically identify location accurately with meter resolution. Another technique, inferring routes via sensor exploitation, may place a user within a few hundred meters of a general location. Acoustic beacons such as those placed in malls may have more finely grained resolution yet are limited by the sensitivity of the device's microphone to ultrasonic signals and directionality. In this paper we are able to discern user location within commercial GPS resolution by leveraging the ability of mobile device magnetometers to detect externally generated signals in a permissionless attack. We are able to achieve an aggregate location identification success rate of 86% with a bit error rate of 1.5% which is only ten times the stationary error rate. We accomplish this with a signal that is a fraction of the Earth's magnetic field strength. We designed, prototyped, and experimentally evaluated a system where a location ID is transmitted via low power magnetic coil(s) and received by permissionless apps. The system can be located at ingresses and kiosks situated in malls, stores, transportation hubs and other public locations including crosswalks using a location ID that is mapped to the GPS coordinates of the facility hosting the system. We demonstrate that using Android phone magnetometers, we can correctly detect and identify the when and the where of a device when the victim walks at a comfortable pace while their device has all the aforementioned services disabled. In order to address the substantial signal fading effects due to mobility in a very-low power magnetic near field, we developed signal processing and coding techniques and evaluated the prototype on six android devices in an IRB-approved study with six participants.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "尽管用户和倡导团体之间的隐私妥协仍然是一个问题，但用户位置的识别已经成为另一个关注点。使用GPS、Wi-Fi、NFC、蓝牙跟踪和蜂窝塔三角测量的技术是众所周知的。这些通常能够以米分辨率精确地识别位置。另一种技术是利用传感器推断路线，这种技术可以将用户定位在某个大概位置的几百米范围内。放置在商场中的声学信标可能具有更精细的分辨率，但受到设备麦克风对超声波信号和方向性的灵敏度的限制。在本文中，我们能够利用移动设备磁力计在未经许可的攻击中检测外部生成的信号的能力，在商业GPS分辨率内辨别用户位置。我们能够以1.5%的误码率实现86%的总位置识别成功率，这仅仅是固定误码率的十倍。我们用一个地球磁场强度的一小部分信号来实现这一点。我们设计了一个系统，制作了原型，并对其进行了实验性评估，在该系统中，位置ID通过低功率磁线圈传输，并由未经许可的应用程序接收。该系统可以位于位于购物中心、商店、交通枢纽和包括人行横道在内的其他公共场所的入口和售货亭，使用映射到托管该系统的设施的GPS坐标的位置ID。我们证明，使用Android手机磁力计，当受害者以舒适的速度行走，而他们的设备禁用了上述所有服务时，我们可以正确地检测和识别设备的时间和位置。为了解决极低功率磁近场中移动性造成的严重信号衰减效应，我们开发了信号处理和编码技术，并在IRB批准的六名参与者的研究中，在六台android设备上评估了原型。",
        "title_zh": "我的磁力计告诉你我去过哪里？:移动设备未经许可的位置攻击",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2018.html",
        "conf_title": "11th WISEC 2018: Stockholm, Sweden",
        "conf_url": "https://doi.org/10.1145/3212480",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3212480.3226106",
        "title": "Android Escalation Paths: Building Attack-Graphs from SEAndroid Policies",
        "authors": "Grant Hernandez, Kevin R. B. Butler",
        "abstract": "Smartphones are a critical device in modern society. With the amount of personal data present on many smartphones, protecting their integrity is crucial. The Android operating system employs multiple layers of security to ensure that the system is resistant to local and remote threats. To achieve this it uses a combination of discretionary and mandatory access control policies. Attackers when attempting to escalate to a higher privilege level must operate within these policies and potentially exploit their flaws. The flow an attacker (and conversely a defender) follows can be modeled as attack graph. In this paper, we explore how attack graphs could be automatically generated from SEAndroid policy files to aid defenders and attackers with auditing system security posture.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "智能手机是现代社会的重要设备。随着大量个人数据出现在许多智能手机上，保护其完整性至关重要。Android操作系统采用多层安全措施来确保系统能够抵御本地和远程威胁。为了实现这一点，它使用了自主和强制访问控制策略的组合。攻击者在试图提升到更高的权限级别时，必须在这些策略范围内操作，并可能利用它们的缺陷。攻击者(以及相反的防御者)遵循的流程可以建模为攻击图。在本文中，我们探讨了如何从SEAndroid策略文件中自动生成攻击图，以帮助防御者和攻击者审计系统安全状况。",
        "title_zh": "Android升级路径:从SEAndroid策略构建攻击图",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2018.html",
        "conf_title": "11th WISEC 2018: Stockholm, Sweden",
        "conf_url": "https://doi.org/10.1145/3212480",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2939918.2939922",
        "title": "Exploiting Data-Usage Statistics for Website Fingerprinting Attacks on Android",
        "authors": "Raphael Spreitzer, Simone Griesmayr, Thomas Korak, Stefan Mangard",
        "abstract": "The browsing behavior of a user allows to infer personal details, such as health status, political interests, sexual orientation, etc. In order to protect this sensitive information and to cope with possible privacy threats, defense mechanisms like SSH tunnels and anonymity networks (e.g., Tor) have been established. A known shortcoming of these defenses is that website fingerprinting attacks allow to infer a user's browsing behavior based on traffic analysis techniques. However, website fingerprinting typically assumes access to the client's network or to a router near the client, which restricts the applicability of these attacks. In this work, we show that this rather strong assumption is not required for website fingerprinting attacks. Our client-side attack overcomes several limitations and assumptions of network-based fingerprinting attacks, e.g., network conditions and traffic noise, disabled browser caches, expensive training phases, etc. Thereby, we eliminate assumptions used for academic purposes and present a practical attack that can be implemented easily and deployed on a large scale. Eventually, we show that an unprivileged application can infer the browsing behavior by exploiting the unprotected access to the Android data-usage statistics. More specifically, we are able to infer 97% of 2,500 page visits out of a set of 500 monitored pages correctly. Even if the traffic is routed through Tor by using the Orbot proxy in combination with the Orweb browser, we can infer 95% of 500 page visits out of a set of 100 monitored pages correctly. Thus, the READ_HISTORY_BOOKMARKS permission, which is supposed to protect the browsing behavior, does not provide protection.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "用户的浏览行为允许推断个人细节，例如健康状况、政治兴趣、性取向等。为了保护这些敏感信息并应对可能的隐私威胁，已经建立了像SSH隧道和匿名网络(例如Tor)这样的防御机制。这些防御措施的一个已知缺点是网站指纹攻击允许根据流量分析技术推断用户的浏览行为。然而，网站指纹通常假设访问客户端网络或客户端附近的路由器，这限制了这些攻击的适用性。在这项工作中，我们表明，这个相当强的假设并不需要网站指纹攻击。我们的客户端攻击克服了基于网络的指纹攻击的几个限制和假设，例如，网络条件和流量噪声、禁用的浏览器缓存、昂贵的训练阶段等。因此，我们排除了用于学术目的的假设，并提出了一种易于实施和大规模部署的实际攻击。最后，我们展示了一个无特权的应用程序可以通过利用对Android数据使用统计的无保护访问来推断浏览行为。更具体地说，我们能够从一组500个受监控页面中正确推断出2500个页面访问的97%。即使使用Orbot代理和Orweb浏览器通过Tor路由流量，我们也可以从一组100个受监控页面中推断出95%的500次页面访问。因此，READ_HISTORY_BOOKMARKS权限本应保护浏览行为，但并不提供保护。",
        "title_zh": "利用数据使用统计对Android进行网站指纹攻击",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2016.html",
        "conf_title": "9. WISEC 2016: Darmstadt, Germany",
        "conf_url": "https://doi.org/10.1145/2939918",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2939918.2939929",
        "title": "Can Android Applications Be Identified Using Only TCP/IP Headers of Their Launch Time Traffic?",
        "authors": "Hasan Faik Alan, Jasleen Kaur",
        "abstract": "The ability to identify mobile apps in network traffic has significant implications in many domains, including traffic management, malware detection, and maintaining user privacy. App identification methods in the literature typically use deep packet inspection (DPI) and analyze HTTP headers to extract app fingerprints. However, these methods cannot be used if HTTP traffic is encrypted. We investigate whether Android apps can be identified from their launch-time network traffic using only TCP/IP headers. We first capture network traffic of 86,109 app launches by repeatedly running 1,595 apps on 4 distinct Android devices. We then use supervised learning methods used previously in the web page identification literature, to identify the apps that generated the traffic. We find that: (i) popular Android apps can be identified with 88% accuracy, by using the packet sizes of the first 64 packets they generate, when the learning methods are trained and tested on the data collected from same device; (ii) when the data from an unseen device (but similar operating system/vendor) is used for testing, the apps can be identified with 67% accuracy; (iii) the app identification accuracy does not drop significantly even if the training data are stale by several days, and (iv) the accuracy does drop quite significantly if the operating system/vendor is very different. We discuss the implications of our findings as well as open issues.",
        "files": {
            "openAccessPdf": "http://dl.acm.org/ft_gateway.cfm?id=2939929&type=pdf"
        },
        "abstract_zh": "在网络流量中识别移动应用的能力在许多领域都有重要意义，包括流量管理、恶意软件检测和维护用户隐私。文献中的应用程序识别方法通常使用深度数据包检测(DPI)并分析HTTP报头来提取应用程序指纹。但是，如果HTTP流量被加密，则不能使用这些方法。我们研究了仅使用TCP/IP报头是否可以从Android应用的启动时网络流量中识别出这些应用。我们首先通过在4个不同的Android设备上重复运行1，595个应用程序来捕获86，109个应用程序启动的网络流量。然后，我们使用之前在网页识别文献中使用的监督学习方法，来识别产生流量的应用程序。我们发现:(I)当在从相同设备收集的数据上训练和测试学习方法时，通过使用它们生成的前64个包的包大小，可以以88%的准确度识别流行的Android应用；(ii)当来自看不见的设备(但类似的操作系统/供应商)的数据用于测试时，可以以67%的准确度识别应用；(iii)即使训练数据过期几天，应用识别准确度也不会显著下降，以及(iv)如果操作系统/供应商非常不同，准确度会显著下降。我们讨论了我们的发现的含义以及开放的问题。",
        "title_zh": "仅使用启动时流量的TCP/IP报头可以识别Android应用程序吗？",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2016.html",
        "conf_title": "9. WISEC 2016: Darmstadt, Germany",
        "conf_url": "https://doi.org/10.1145/2939918",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2939918.2939924",
        "title": "Slogger: Smashing Motion-based Touchstroke Logging with Transparent System Noise",
        "authors": "Prakash Shrestha, Manar Mohamed, Nitesh Saxena",
        "abstract": "Recent research shows that it is possible to infer a user's touchscreen inputs (e.g., passwords) on Android devices based on inertial (motion/position) sensors, currently freely-accessible by any Android app. Given the high accuracies of such touchstroke logging attacks, they are now considered a significant threat to user privacy. Consequently, the security community has started exploring defenses to such side channel attacks, but the suggested solutions are either not effective (e.g., those based on vibrational noise) and/or may significantly undermine system usability (e.g., those based on keyboard layout randomization). In this paper, we introduce a novel and practical defense to motion-based touchstroke leakage based on system-generated, fully automated and user-oblivious sensory noise. Our defense leverages a recently developed framework, SMASheD, that takes advantage of the Android's ADB functionality and can programmatically inject noise to various inertial sensors. Although SMASheD was originally advertised as a malicious app by its authors, we use it to build a defense mechanism, called Slogger (\"Smashing the logger\"), for defeating sensor-based touchstroke logging attacks. Slogger transparently inserts noisy sensor readings in the background as the user provides sensitive touchscreen input (e.g., password, PIN or credit card info) in order to obfuscate the original sensor readings. It can be installed in the user space without the need to root the device and to change the device's OS or kernel. Our contributions are three-fold. First, we introduce Slogger, identifying a novel, benign use case of SMASheD that can defeat touchstroke logging attacks. Second, we design and implement the Slogger app system that can be used to protect sensitive touchscreen input from leaking away. Third, we comprehensively evaluate Slogger against state-of-the-art touchstroke detection and inference attacks. Our results show that Slogger can significantly reduce the level of touchstroke leakage to the extent these attacks may become unworkable in practice, without affecting other benign apps. We also show that the leakage can be minimized even when attacks utilize a fusion of multiple motion-position sensors.",
        "files": {
            "openAccessPdf": "http://dl.acm.org/ft_gateway.cfm?id=2939924&type=pdf"
        },
        "abstract_zh": "最近的研究表明，可以根据惯性(运动/位置)传感器推断用户在Android设备上的触摸屏输入(如密码)，目前任何Android应用程序都可以免费访问这些传感器。鉴于这种触摸笔记录攻击的高准确性，它们现在被认为是对用户隐私的重大威胁。因此，安全团体已经开始探索对这种旁道攻击的防御，但是所建议的解决方案或者是无效的(例如，基于振动噪声的解决方案)和/或可能显著破坏系统可用性(例如，基于键盘布局随机化的解决方案)。在本文中，我们介绍了一种新的和实用的防御基于运动的触摸泄漏的方法，该方法基于系统生成的、全自动的和用户不注意的感觉噪声。我们的防御利用了最近开发的框架SMASheD，该框架利用了Android的ADB功能，可以通过编程向各种惯性传感器注入噪声。虽然SMASheD最初被其作者宣传为恶意应用程序，但我们使用它来建立一种防御机制，称为s logger(“Smashing the logger”)，用于击败基于传感器的触摸日志攻击。当用户提供敏感的触摸屏输入(例如，密码、PIN或信用卡信息)时，Slogger会在后台透明地插入有噪声的传感器读数，以便混淆原始传感器读数。它可以安装在用户空间中，无需对设备进行根操作和更改设备的操作系统或内核。我们的贡献有三个方面。首先，我们介绍了Slogger，它是一个新颖的良性的SMASheD用例，可以战胜touchstroke日志攻击。其次，我们设计并实现了Slogger应用系统，它可以用来保护敏感的触摸屏输入不被泄露。第三，我们全面评估Slogger对最先进的触摸检测和推理攻击。我们的结果表明，Slogger可以显著降低触摸泄露的水平，使这些攻击在实践中变得不可行，而不会影响其他良性应用。我们还表明，即使当攻击利用多个运动位置传感器的融合时，泄漏也可以最小化。",
        "title_zh": "Slogger:用透明的系统噪音粉碎基于动作的触摸记录",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2016.html",
        "conf_title": "9. WISEC 2016: Darmstadt, Germany",
        "conf_url": "https://doi.org/10.1145/2939918",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2939918.2939927",
        "title": "Don't Touch that Column: Portable, Fine-Grained Access Control for Android's Native Content Providers",
        "authors": "Aisha I. Ali-Gombe, Golden G. Richard III, Irfan Ahmed, Vassil Roussev",
        "abstract": "Android applications access native SQLite databases through their Universal Resource Identifiers (URIs), exposed by the Content provider library. By design, the SQLite engine used in the Android system does not enforce access restrictions on database content nor does it log database accesses. Instead, Android enforces read and write permissions on the native providers through which databases are accessed via the mandatory applications permissions system. This system is very coarse grained, however, and can allow applications far greater access to sensitive data than a user might intend. In this paper, we present a novel technique called priVy that merges static bytecode weaving and database query rewriting to achieve low-level access control for Android native providers at the application level. priVy defines access control for both database schema and entities and does not require any modifications to the underlying operating system and/or framework code. Instead, it provides a new Controller stub which is statically woven into the target application and a Controller interface for setting access levels, thus making it accessible and easily adoptable by average users. We provide an evaluation in terms of the resilience of applications to instrumentation as well as static and runtime instrumentation overhead. In our testing, priVy incurs an average of 1032 additional method calls or joinpoints created and it takes an average of 15 seconds to recompile an app and imposes virtually no runtime overhead.",
        "files": {
            "openAccessPdf": "http://dl.acm.org/ft_gateway.cfm?id=2939927&type=pdf"
        },
        "abstract_zh": "Android应用程序通过内容提供商库公开的统一资源标识符(URIs)访问本地SQLite数据库。按照设计，Android系统中使用的SQLite引擎不会对数据库内容实施访问限制，也不会记录数据库访问。相反，Android在本地提供程序上强制执行读写权限，通过强制应用程序权限系统访问数据库。然而，这个系统是非常粗粒度的，可以允许应用程序比用户预期的更多地访问敏感数据。在本文中，我们提出了一种称为priVy的新技术，该技术融合了静态字节码编织和数据库查询重写，以在应用程序级别实现对Android原生提供者的低级访问控制。priVy为数据库模式和实体定义了访问控制，并且不需要对底层操作系统和/或框架代码进行任何修改。相反，它提供了一个新的控制器存根(stub ),它被静态地编织到目标应用程序和一个用于设置访问级别的控制器接口中，从而使它可以被普通用户访问和轻松采用。我们从应用对插装的弹性以及静态和运行时插装开销方面进行了评估。在我们的测试中，priVy平均会产生1032个额外的方法调用或连接点，重新编译一个应用程序平均需要15秒，并且几乎没有运行时开销。",
        "title_zh": "不要碰那篇专栏文章:面向Android本地内容提供商的可移植的细粒度访问控制",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2016.html",
        "conf_title": "9. WISEC 2016: Darmstadt, Germany",
        "conf_url": "https://doi.org/10.1145/2939918",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2939918.2939932",
        "title": "Shatter: Using Threshold Cryptography to Protect Single Users with Multiple Devices",
        "authors": "Erinn Atwater, Urs Hengartner",
        "abstract": "The average computer user is no longer restricted to one device. They may have several devices and expect their applications to work on all of them. A challenge arises when these applications need the cryptographic private key of the devices' owner. Here the device owner typically has to manage keys manually with a \"keychain\" app, which leads to private keys being transferred insecurely between devices -- or even to other people. Even with intuitive synchronization mechanisms, theft and malware still pose a major risk to keys. Phones and watches are frequently removed or set down, and a single compromised device leads to the loss of the owner's private key, a catastrophic failure that can be quite difficult to recover from. We introduce Shatter, an open-source framework that runs on desktops, Android, and Android Wear, and performs key distribution on a user's behalf. Shatter uses threshold cryptography to turn the security weakness of having multiple devices into a strength. Apps that delegate cryptographic operations to Shatter have their keys compromised only when a threshold number of devices are compromised by the same attacker. We demonstrate how our framework operates with two popular Android apps (protecting identity keys for a messaging app, and encryption keys for a note-taking app) in a backwards-compatible manner: only Shatter users need to move to a Shatter-aware version of the app. Shatter has minimal impact on app performance, with signatures and decryption being calculated in 0.5s and security proofs in 14s.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "普通计算机用户不再局限于一台设备。他们可能有几台设备，并希望他们的应用程序能在所有设备上运行。当这些应用程序需要设备所有者的加密私钥时，就会出现挑战。在这种情况下，设备所有者通常必须使用“钥匙串”应用程序手动管理密钥，这导致私钥在设备之间不安全地传输，甚至传输给其他人。即使有了直观的同步机制，盗窃和恶意软件仍然会给密钥带来重大风险。手机和手表经常被移除或放下，一个受损的设备就会导致所有者的私钥丢失，这是一个灾难性的故障，很难恢复。我们引入了Shatter，这是一个运行在桌面、Android和Android Wear上的开源框架，它代表用户执行密钥分发。Shatter使用阈值加密技术将拥有多个设备的安全弱点转化为优势。只有当同一攻击者破坏了一定数量的设备时，那些将加密操作委托给Shatter的应用程序的密钥才会被破坏。我们展示了我们的框架如何以向后兼容的方式与两个流行的Android应用程序(保护消息应用程序的身份密钥和笔记应用程序的加密密钥)一起运行:只有Shatter用户需要移动到Shatter感知版本的应用程序。Shatter对app性能的影响微乎其微，签名和解密在0.5s内计算，安全证明在14s内。",
        "title_zh": "Shatter:使用门限加密技术保护拥有多台设备的单个用户",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2016.html",
        "conf_title": "9. WISEC 2016: Darmstadt, Germany",
        "conf_url": "https://doi.org/10.1145/2939918",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2939918.2939931",
        "title": "More Semantics More Robust: Improving Android Malware Classifiers",
        "authors": "Wei Chen, David Aspinall, Andrew D. Gordon, Charles Sutton, Igor Muttik",
        "abstract": "Automatic malware classifiers often perform badly on the detection of new malware, i.e., their robustness is poor. We study the machine-learning-based mobile malware classifiers and reveal one reason: the input features used by these classifiers can't capture general behavioural patterns of malware instances. We extract the best-performing syntax-based features like permissions and API calls, and some semantics-based features like happen-befores and unwanted behaviours, and train classifiers using popular supervised and semi-supervised learning methods. By comparing their classification performance on industrial datasets collected across several years, we demonstrate that using semantics-based features can dramatically improve robustness of malware classifiers.",
        "files": {
            "openAccessPdf": "https://www.pure.ed.ac.uk/ws/files/25498607/paper.pdf"
        },
        "abstract_zh": "自动恶意软件分类器通常在检测新恶意软件时表现不佳，即它们的鲁棒性差。我们研究了基于机器学习的移动恶意软件分类器，揭示了一个原因:这些分类器使用的输入特征不能捕获恶意软件实例的一般行为模式。我们提取性能最好的基于语法的特征，如权限和API调用，以及一些基于语义的特征，如之前发生和不想要的行为，并使用流行的监督和半监督学习方法训练分类器。通过比较它们在几年收集的工业数据集上的分类性能，我们证明了使用基于语义的特征可以显著提高恶意软件分类器的鲁棒性。",
        "title_zh": "更多语义更健壮:改进Android恶意软件分类器",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2016.html",
        "conf_title": "9. WISEC 2016: Darmstadt, Germany",
        "conf_url": "https://doi.org/10.1145/2939918",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2939918.2939926",
        "title": "Evading Android Runtime Analysis Through Detecting Programmed Interactions",
        "authors": "Wenrui Diao, Xiangyu Liu, Zhou Li, Kehuan Zhang",
        "abstract": "Dynamic analysis technique has been widely used in Android malware detection. Previous works on evading dynamic analysis focus on discovering the fingerprints of emulators. However, such method has been challenged since the introduction of real devices in recent works. In this paper, we propose a new approach to evade automated runtime analysis through detecting programmed interactions. This approach, in essence, tries to tell the identity of the current app controller (human user or automated exploration tool), by finding intrinsic differences between human user and machine tester in interaction patterns. The effectiveness of our approach has been demonstrated through evaluation against 11 real-world online dynamic analysis services.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "动态分析技术已经广泛应用于Android恶意软件检测。以前逃避动态分析的工作集中于发现仿真器的指纹。然而，这种方法已经受到了挑战，因为在最近的作品中引入了真实的设备。在本文中，我们提出了一种新的方法，通过检测程序交互来规避自动运行时分析。本质上，这种方法试图通过发现人类用户和机器测试人员在交互模式上的内在差异来辨别当前应用程序控制者的身份(人类用户或自动化探索工具)。通过对11个真实世界的在线动态分析服务的评估，我们的方法的有效性已经被证明。",
        "title_zh": "通过检测编程的交互来规避Android运行时分析",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2016.html",
        "conf_title": "9. WISEC 2016: Darmstadt, Germany",
        "conf_url": "https://doi.org/10.1145/2939918",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2939918.2942416",
        "title": "DEMO: Far Away and Yet Nearby - A Framework for Practical Distance Fraud on Proximity Services for Mobile Devices",
        "authors": "Tobias Schultes, Markus Grau, Daniel Steinmetzer, Matthias Hollick",
        "abstract": "Proximity services are widely used in mobile applications for fast and easy data transfer and control of various systems within a defined range. Authorization is achieved by proximity detection mechanisms that surrogate extensive pairing processes. In this work, we present our Nearby Distance Fraud Framework (NeDiFF) to investigate distance fraud on various proximity services. NeDiFF cheats on proximity checks in services as Google Nearby Messages, Chromecast guest mode and Android device location. Our results emphasize that proximity services currently used for mobile devices are prone to relay attacks and should not be used in security-sensitive applications.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "邻近服务在移动应用中广泛使用，用于在定义的范围内快速和容易的数据传输和各种系统的控制。授权是通过替代大量配对过程的邻近检测机制来实现的。在这项工作中，我们提出了邻近距离欺诈框架(NeDiFF)来调查各种邻近服务上的距离欺诈。NeDiFF在谷歌附近信息、Chromecast访客模式和Android设备定位等服务的邻近性检查中作弊。我们的结果强调，目前用于移动设备的邻近服务容易受到中继攻击，不应该用于安全敏感的应用。",
        "title_zh": "演示:遥远而又近——移动设备近距离服务的实用距离欺诈框架",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2016.html",
        "conf_title": "9. WISEC 2016: Darmstadt, Germany",
        "conf_url": "https://doi.org/10.1145/2939918",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3098243.3098262",
        "title": "User authentication and identification from user interface interactions on touch-enabled devices",
        "authors": "Vaibhav Sharma, Richard J. Enbody",
        "abstract": "We investigate if a mobile application running on a touch-enabled device can continuously and unobtrusively authenticate and identify its users based only on their interactions with the user interface of the application. A unique advantage that this modality provides over other implicit modalities on mobile devices is that every user who uses the mobile application is automatically enrolled into the classification system via the touch-based interface, thereby guaranteeing that an attacker cannot avoid the classification system. Using different types of input controls available on the Android platform, we collected interactions from 42 users in five sessions. We created base classifiers from each type of input control and combined them into an ensemble classifier to authenticate and identify users. We found that a Support Vector Machine-based ensemble classifier achieves a mean equal error rate of 7% for user authentication and a median accuracy of 93% for user identification. We found that Support Vector Machine-based ensemble classifiers outperform other techniques in both cases. While the ensemble classifier performance for authentication and identification is not found to be sufficient for it to replace current primary authentication mechanisms used in mobile applications, its truly continuous nature provides motivation for it to be used in conjunction with primary authentication mechanisms. UI interaction-based authentication and identification is independent of swipe gesture-based and keystroke-based authentication, allowing it to be combined with those modalities, while remaining resilient to attacks against those modalities.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "我们研究了在支持触摸的设备上运行的移动应用程序是否能够仅基于用户与应用程序用户界面的交互来持续、低调地验证和识别其用户。这种形态提供的优于移动设备上的其他隐含形态的独特优势在于，使用移动应用的每个用户都通过基于触摸的界面自动登记到分类系统中，从而保证攻击者不能避开分类系统。使用Android平台上不同类型的输入控件，我们在五个会话中收集了42个用户的交互。我们从每种类型的输入控件中创建基本分类器，并将它们组合成一个集成分类器来认证和识别用户。我们发现，基于支持向量机的集成分类器对于用户认证实现了7%的平均等错误率，对于用户识别实现了93%的中值准确度。我们发现基于支持向量机的集成分类器在这两种情况下都优于其他技术。虽然发现用于认证和识别的集成分类器性能不足以取代当前在移动应用中使用的主要认证机制，但是其真正连续的性质为其与主要认证机制结合使用提供了动机。基于UI交互的身份验证和识别独立于基于滑动手势和基于击键的身份验证，允许它与这些模式相结合，同时对针对这些模式的攻击保持弹性。",
        "title_zh": "通过支持触摸的设备上的用户界面交互进行用户验证和识别",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2017.html",
        "conf_title": "10. WISEC 2017: Boston, MA, USA",
        "conf_url": "https://doi.org/10.1145/3098243",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3098243.3098246",
        "title": "Using hover to compromise the confidentiality of user input on Android",
        "authors": "Enis Ulqinaku, Luka Malisa, Julinda Stefa, Alessandro Mei, Srdjan Capkun",
        "abstract": "We show that the new hover (floating touch) technology, available in a number of today's smartphone models, can be abused by malicious Android applications to record all touchscreen input into applications system-wide. Leveraging this attack, a malicious application running on the system is able to capture sensitive input such as passwords and PINs, record all user's social interactions, as well as profile user's behavior. To evaluate our attack we implemented Hoover, a proof-of-concept malicious application that runs in the background and records all input to all foreground applications. We evaluated Hoover with 20 users, across two different Android devices and two input methods, stylus and finger. In the case of touchscreen input by finger, Hoover estimated the positions of users' clicks within an error of 100 pixels and keyboard input with an accuracy of 79%. Hoover captured users' input by stylus even more accurately, estimating users' clicks within 2 pixels and keyboard input with an accuracy of 98%. Differently from existing well-known side channel attacks, this is the first work that proves the security implications of the hover technology and its potential to steal all user inputs with high granularity. We discuss ways of mitigating this attack and show that this cannot be done by simply restricting access to permissions or imposing additional cognitive load on the users since this would significantly constrain the intended use of the hover technology.",
        "files": {
            "openAccessPdf": "http://wwwusers.di.uniroma1.it/~stefa/webpage/Publications_files/ulqinaku-wisec17.pdf"
        },
        "abstract_zh": "我们表明，在当今许多智能手机型号中可用的新hover(浮动触摸)技术可以被恶意的Android应用程序滥用，以记录应用程序系统范围内的所有触摸屏输入。利用这种攻击，系统上运行的恶意应用程序能够捕获敏感输入，如密码和pin，记录所有用户的社交互动，以及分析用户的行为。为了评估我们的攻击，我们实现了Hoover，这是一个概念验证的恶意应用程序，它在后台运行并记录所有前台应用程序的所有输入。我们对胡佛进行了评估，共有20名用户，使用了两种不同的Android设备和两种输入方法，即手写笔和手指。在通过手指进行触摸屏输入的情况下，胡佛估计用户点击位置的误差在100像素以内，键盘输入的准确度为79%。胡佛甚至更准确地捕捉到了用户通过触控笔输入的信息，估计用户的点击量在2个像素以内，键盘输入的准确率为98%。与现有的众所周知的侧信道攻击不同，这是第一个证明悬停技术的安全含义及其以高粒度窃取所有用户输入的潜力的工作。我们讨论了减轻这种攻击的方法，并表明这不能通过简单地限制访问权限或对用户施加额外的认知负荷来实现，因为这将极大地限制悬停技术的预期用途。",
        "title_zh": "使用悬停危及Android上用户输入的机密性",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2017.html",
        "conf_title": "10. WISEC 2017: Boston, MA, USA",
        "conf_url": "https://doi.org/10.1145/3098243",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3098243.3098247",
        "title": "UiRef: analysis of sensitive user inputs in Android applications",
        "authors": "Benjamin Andow, Akhil Acharya, Dengfeng Li, William Enck, Kapil Singh, Tao Xie",
        "abstract": "Mobile applications frequently request sensitive data. While prior work has focused on analyzing sensitive-data uses originating from well-defined API calls in the system, the security and privacy implications of inputs requested via application user interfaces have been widely unexplored. In this paper, our goal is to understand the broad implications of such requests in terms of the type of sensitive data being requested by applications. To this end, we propose UiRef (User Input REsolution Framework), an automated approach for resolving the semantics of user inputs requested by mobile applications. UiRef's design includes a number of novel techniques for extracting and resolving user interface labels and addressing ambiguity in semantics, resulting in significant improvements over prior work. We apply UiRef to 50,162 Android applications from Google Play and use outlier analysis to triage applications with questionable input requests. We identify concerning developer practices, including insecure exposure of account passwords and non-consensual input disclosures to third parties. These findings demonstrate the importance of user-input semantics when protecting end users.",
        "files": {
            "openAccessPdf": "https://dl.acm.org/doi/pdf/10.1145/3098243.3098247"
        },
        "abstract_zh": "移动应用程序经常请求敏感数据。虽然先前的工作集中在分析源自系统中明确定义的API调用的敏感数据使用，但是通过应用程序用户界面请求的输入的安全性和隐私含义还没有被广泛探索。在本文中，我们的目标是从应用程序所请求的敏感数据类型的角度来理解此类请求的广泛含义。为此，我们提出了UiRef(User Input REsolution Framework)，一种自动解析移动应用程序请求的用户输入语义的方法。UiRef的设计包括许多新颖的技术，用于提取和解析用户界面标签，并解决语义上的歧义，从而在先前的工作基础上实现了显著的改进。我们将UiRef应用于来自Google Play的50，162个Android应用程序，并使用异常值分析来筛选具有可疑输入请求的应用程序。我们发现了一些与开发人员相关的做法，包括不安全地暴露帐户密码和向第三方泄露未经同意的输入。这些发现证明了用户输入语义在保护最终用户时的重要性。",
        "title_zh": "UiRef:Android应用中敏感用户输入的分析",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2017.html",
        "conf_title": "10. WISEC 2017: Boston, MA, USA",
        "conf_url": "https://doi.org/10.1145/3098243",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3098243.3098251",
        "title": "HanGuard: SDN-driven protection of smart home WiFi devices from malicious mobile apps",
        "authors": "Soteris Demetriou, Nan Zhang, Yeonjoon Lee, XiaoFeng Wang, Carl A. Gunter, Xiao-yong Zhou, Michael Grace",
        "abstract": "A new development of smart-home systems is to use mobile apps to control IoT devices across a Home Area Network (HAN). As verified in our study, those systems tend to rely on the Wi-Fi router to authenticate other devices. This treatment exposes them to the attack from malicious apps, particularly those running on authorized phones, which the router does not have information to control. Mitigating this threat cannot solely rely on IoT manufacturers, which may need to change the hardware on the devices to support encryption, increasing the cost of the device, or software developers who we need to trust to implement security correctly. In this work, we present a new technique to control the communication between the IoT devices and their apps in a unified, backward-compatible way. Our approach, called HanGuard, does not require any changes to the IoT devices themselves, the IoT apps or the OS of the participating phones. HanGuard uses an SDN-like approach to offer fine-grained protection: each phone runs a non-system userspace Monitor app to identify the party that attempts to access the protected IoT device and inform the router through a control plane of its access decision; the router enforces the decision on the data plane after verifying whether the phone should be allowed to talk to the device. We implemented our design over both Android and iOS (> 95% of mobile OS market share) and a popular router. Our study shows that HanGuard is both efficient and effective in practice.",
        "files": {
            "openAccessPdf": "https://dl.acm.org/doi/pdf/10.1145/3098243.3098251"
        },
        "abstract_zh": "智能家居系统的一个新发展是使用移动应用程序通过家庭局域网(HAN)控制物联网设备。正如我们的研究所证实的，这些系统往往依赖Wi-Fi路由器来验证其他设备。这种处理使他们暴露在恶意应用程序的攻击之下，特别是那些在授权手机上运行的应用程序，路由器没有控制这些应用程序的信息。减轻这种威胁不能仅仅依靠物联网制造商，他们可能需要改变设备上的硬件以支持加密，从而增加设备的成本，或者我们需要信任的软件开发人员来正确实施安全性。在这项工作中，我们提出了一种新的技术，以统一、向后兼容的方式控制物联网设备及其应用程序之间的通信。我们的方法名为HanGuard，不需要对物联网设备本身、物联网应用程序或参与手机的操作系统进行任何更改。HanGuard使用类似SDN的方法来提供细粒度的保护:每部手机都运行一个非系统用户空间监视器应用程序，以识别试图访问受保护的物联网设备的一方，并通过控制平面通知路由器其访问决定；路由器在验证是否应该允许电话与设备通话后，在数据平面上执行决定。我们在Android和iOS(超过95%的移动操作系统市场份额)以及一个流行的路由器上实现了我们的设计。我们的研究表明HanGuard在实践中是有效的。",
        "title_zh": "HanGuard: SDN驱动的保护智能家庭WiFi设备免受恶意移动应用的攻击",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2017.html",
        "conf_title": "10. WISEC 2017: Boston, MA, USA",
        "conf_url": "https://doi.org/10.1145/3098243",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3098243.3098250",
        "title": "An autonomic and permissionless Android covert channel",
        "authors": "Kenneth Block, Sashank Narain, Guevara Noubir",
        "abstract": "Demand for mobile devices continues to experience worldwide growth. Within the U.S., there is a significant shift away from broadband usage towards Smartphones as the primary Internet entry point for consumers. Although technological advancements have helped fuel demand for greater features and functionality to enhance the user experience, they have also drawn attention from malicious actors seeking to access and exfiltrate increasingly available sensitive and content rich personalized information. In traditional Android based exfiltration channels, the application engaged in information acquisition is granted permission to execute off-board communications. This tactic increases the possibility of detection by applications designed to identify this form of behavior. In this paper, we sever the acquisition / exfiltration bundling by assigning independent responsibilities to two apps communicating via a stealthy, permissionless, self-configuring and self-optimizing ultrasonic bridge. We present a framework for analyzing channel feasibility and performance, and apply it to 28 popular mobile devices. We demonstrate basic channel capability on 13 devices, achieving in certain cases, Bit Error Rates lower than 10−4 and Shannon capacity approaching 14 bps. We further demonstrate two performance boosting solutions that build on these results: a multichannel implementation which improves performance by nearly 80% and; a single channel Amplitude Shift Keying solution that increases capacity three-fold.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "全球范围内对移动设备的需求持续增长。在美国，从宽带使用到智能手机作为消费者的主要互联网入口的重大转变。虽然技术进步有助于推动对更大特性和功能的需求以增强用户体验，但它们也引起了恶意行为者的注意，这些恶意行为者试图访问和渗透日益可用的敏感和内容丰富的个性化信息。在传统的基于Android的渗透渠道中，参与信息获取的应用程序被授予执行板外通信的权限。这种策略增加了应用程序检测到这种行为的可能性。在本文中，我们通过向两个应用程序分配独立的职责来切断采集/渗透捆绑，这两个应用程序通过一个隐蔽、无权限、自我配置和自我优化的超声波桥进行通信。我们提出了一个分析信道可行性和性能的框架，并将其应用于28个流行的移动设备。我们展示了13种器件的基本信道能力，在某些情况下，误码率低于104，香农容量接近14 bps。我们进一步展示了基于这些结果的两种性能提升解决方案:一种多通道实施方案，可将性能提升近80%;一种单通道幅移键控解决方案，将容量提高了三倍。",
        "title_zh": "一个自主的、无权限的Android秘密通道",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2017.html",
        "conf_title": "10. WISEC 2017: Boston, MA, USA",
        "conf_url": "https://doi.org/10.1145/3098243",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3098243.3098266",
        "title": "There are many apps for that: quantifying the availability of privacy-preserving apps",
        "authors": "Vincent F. Taylor, Alastair R. Beresford, Ivan Martinovic",
        "abstract": "The adage \"there's an app for that\" holds true in modern app stores. Indeed, app stores usually go further and provide multiple apps with very similar functionality; examples range from flashlight apps to alarm clocks. We call these functionally-similar apps. When searching for these apps, users are often presented with a vast array of choices, but no distinction is made in the user interface to highlight the relative privacy risks inherent in choosing one app over another. Yet the availability of many functionally-similar apps raises the question of whether some apps are significantly less invasive than others. In this paper, we take several steps toward answering this question. We begin by enumerating 2 500 groups of functionally-similar apps in the Google Play Store. Within groups of apps, we use static analysis to understand the real-world risks coming from apps with aggressive permission usage. By leveraging an established ranking system, and combining it with real-world data from over 28 000 Android devices, we quantify the improvements that can be made if users installed apps with privacy in mind. We observe that at least 25.6% of apps contain libraries that gratuitously exploit available permissions and find that 43.5% of apps could be swapped for comparable alternatives that require fewer permissions. Permissions saved may deliver important privacy and security improvements, including preventing access to the calendar (in 24% of cases), sending text messages (12%) and recording audio (8%). This is particularly important for apps which embed third-party libraries, since library code executes with the same permissions as the app itself.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "谚语“有一个应用程序”适用于现代应用程序商店。的确，应用商店通常会更进一步，提供多个功能非常相似的应用；例子从手电筒应用程序到闹钟。我们称这些功能相似的应用程序。当搜索这些应用程序时，用户通常会有大量的选择，但在用户界面中没有进行区分，以突出选择一个应用程序而不是另一个应用程序所固有的相对隐私风险。然而，许多功能相似的应用程序的可用性提出了一个问题，即一些应用程序是否比其他应用程序的侵入性小得多。在本文中，我们采取了几个步骤来回答这个问题。我们从列举谷歌Play商店2 500组功能相似的应用程序开始。在应用程序组中，我们使用静态分析来了解来自积极使用权限的应用程序的真实风险。通过利用一个已建立的排名系统，并将其与来自28 000多台Android设备的真实数据相结合，我们量化了如果用户在安装应用时考虑到隐私，可以实现的改进。我们观察到，至少25.6%的应用程序包含免费利用可用权限的库，并发现43.5%的应用程序可以被替换为需要更少权限的类似应用程序。保存的权限可能会带来重要的隐私和安全改进，包括阻止访问日历(在24%的情况下)，发送短信(12%)和录制音频(8%)。这对于嵌入第三方库的应用程序尤其重要，因为库代码的执行权限与应用程序本身相同。",
        "title_zh": "有很多这样的应用:量化隐私保护应用的可用性",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2017.html",
        "conf_title": "10. WISEC 2017: Boston, MA, USA",
        "conf_url": "https://doi.org/10.1145/3098243",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3098243.3106018",
        "title": "CrowdZen privacy: poster",
        "authors": "Joshua Joy, Martin Verde, Keshav Tadimeti, Tyler Lindberg, Mario Gerla",
        "abstract": "In this paper we introduce the concept of CrowdZen Privacy. CrowdZen Privacy privately publishes the activity levels of places of interest (e.g., dining halls, libraries, gyms) and leverages the randomness of the crowd and variance of the estimation to satisfy differential privacy while preserving accuracy. We define the CrowdZen privacy mechanism and have implemented the system on iOS and Android mobile devices.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "本文引入了CrowdZen隐私的概念。CrowdZen Privacy会私下发布感兴趣地点(如餐厅、图书馆、健身房)的活动水平，并利用人群的随机性和估计的方差来满足差异隐私，同时保持准确性。我们定义了CrowdZen隐私机制，并在iOS和Android移动设备上实现了该系统。",
        "title_zh": "克劳森隐私:海报",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2017.html",
        "conf_title": "10. WISEC 2017: Boston, MA, USA",
        "conf_url": "https://doi.org/10.1145/3098243",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3098243.3106022",
        "title": "Demonstrating reactive smartphone-based jamming: demo",
        "authors": "Matthias Schulz, Efstathios Deligeorgopoulos, Matthias Hollick, Francesco Gringoli",
        "abstract": "Reactive Wi-Fi jammers on off-the-shelf hardware that may facilitate mobile friendly jamming applications have only been shown recently. Until now, no demonstrators existed to reproduce the results obtained with these systems, hence, inhibiting re-use for further research or educational applications. In this work, we present an Android app that allows to create advanced jamming scenarios with four Nexus 5 smartphones. We use two of them to inject Wi-Fi frames with UDP payload, one to receive frames and analyze if they were corrupted and one that acts as a reactive jammer that selectively jams according to a UDP port. The user can choose between a simple reactive jammer and an acknowledging jammer. All jammers are implemented as Wi-Fi firmware patches by using the Nexmon framework. During the demonstration, users may adjust parameters of transmitted frames and observe the throughputs of correct and corrupted frames as bar graphs at the receiver. At the jamming node, users may design an arbitrary jamming signal in the frequency domain and adjust the jamming power, the target UDP port and the jammer type. The MAC addresses used during the experiments are hard coded to hinder users from simply abusing the app in other setups. Overall, the demonstration proofs that highly sophisticated Wi-Fi jammers can run on smartphones.",
        "files": {
            "openAccessPdf": "https://download.hrz.tu-darmstadt.de/media/FB20/Dekanat/Publikationen/SEEMOO/wisec2017_massive_reactive_jamming_demo.pdf"
        },
        "abstract_zh": "最近才展示了现成硬件上的反应式Wi-Fi干扰器，它可能有助于移动友好干扰应用。直到现在，还没有演示者能够复制这些系统获得的结果，因此，抑制了进一步研究或教育应用的重复使用。在这项工作中，我们展示了一个Android应用程序，它允许用四台Nexus 5智能手机创建高级干扰场景。我们使用其中两个将UDP有效载荷注入Wi-Fi帧，一个接收帧并分析它们是否损坏，另一个充当反应式干扰机，根据UDP端口选择性地干扰。用户可以在简单的反应式干扰机和确认式干扰机之间进行选择。通过使用Nexmon框架，所有干扰器都被实现为Wi-Fi固件补丁。在演示过程中，用户可以调整传输帧的参数，并在接收端以条形图的形式观察正确帧和损坏帧的吞吐量。在干扰节点，用户可以在频域设计任意干扰信号，并调整干扰功率、目标UDP端口和干扰机类型。实验中使用的MAC地址是硬编码的，以防止用户在其他设置中简单地滥用该应用程序。总的来说，演示证明了高度复杂的Wi-Fi干扰器可以在智能手机上运行。",
        "title_zh": "演示基于智能手机的反应式干扰:演示",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2017.html",
        "conf_title": "10. WISEC 2017: Boston, MA, USA",
        "conf_url": "https://doi.org/10.1145/3098243",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2766498.2766507",
        "title": "DroidJust: automated functionality-aware privacy leakage analysis for Android applications",
        "authors": "Xin Chen, Sencun Zhu",
        "abstract": "Android applications (apps for short) can send out users' sensitive information against users' intention. Based on the stats from Genome and Mobile-Sandboxing, 55.8% and 59.7% Android malware families feature privacy leakage. Prior approaches to detecting privacy leakage on smartphones primarily focused on the discovery of sensitive information flows. However, Android apps also send out users' sensitive information for legitimate functions. Due to the fuzzy nature of the privacy leakage detection problem, we formulate it as a justification problem, which aims to justify if a sensitive information transmission in an app serves any purpose, either for intended functions of the app itself or for other related functions. This formulation makes the problem more distinct and objective, and therefore more feasible to solve than before. We propose DroidJust, an automated approach to justifying an app's sensitive information transmission by bridging the gap between the sensitive information transmission and application functions. We also implement a prototype of DroidJust and evaluate it with over 6000 Google Play apps and over 300 known malware collected from VirusTotal. Our experiments show that our tool can effectively and efficiently analyze Android apps w.r.t their sensitive information flows and functionalities, and can greatly assist in detecting privacy leakage.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android应用程序(简称apps)可以违背用户的意图发送用户的敏感信息。根据基因组和移动沙盒的统计，55.8%和59.7%的Android恶意软件家族具有隐私泄露的特征。以前检测智能手机隐私泄露的方法主要集中在敏感信息流的发现上。然而，Android应用程序也会为合法功能发送用户的敏感信息。由于隐私泄露检测问题的模糊性质，我们将其公式化为一个证明问题，旨在证明应用程序中的敏感信息传输是否服务于任何目的，无论是应用程序本身的预期功能还是其他相关功能。这种表述使问题更加清晰和客观，因此比以前更容易解决。我们提出了DroidJust，一种通过弥合敏感信息传输和应用程序功能之间的差距来证明应用程序敏感信息传输的自动化方法。我们还实现了一个DroidJust原型，并用从VirusTotal收集的6000多个Google Play应用程序和300多个已知恶意软件对其进行了评估。我们的实验表明，我们的工具可以有效地分析Android应用程序的敏感信息流和功能，并可以极大地帮助检测隐私泄露。",
        "title_zh": "DroidJust:Android应用程序的自动化功能感知隐私泄漏分析",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2015.html",
        "conf_title": "8. WISEC 2015: New York, NY, USA",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2766498",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2766498.2766518",
        "title": "CICC: a fine-grained, semantic-aware, and transparent approach to preventing permission leaks for Android permission managers",
        "authors": "Daibin Wang, Haixia Yao, Yingjiu Li, Hai Jin, Deqing Zou, Robert H. Deng",
        "abstract": "Android's permission system offers an all-or-nothing installation choice for users. To make it more flexible, users may choose a popular app tool, called permission manager, to selectively grant or revoke an app's permissions at runtime. A fundamental requirement for such permission manager is that the granted or revoked permissions should be enforced faithfully. However, we discover that none of existing permission managers meet this requirement due to permission leaks. To address this problem, we propose CICC, a fine-grained, semantic-aware, and transparent approach for any permission managers to defend against the permission leaks. Compared to existing solutions, CICC is fine-grained because it detects the permission leaks using call-chain information at the component instance level, instead of at the app level or component level. The fine-grained feature enables it to generate a minimal impact on the usability of running apps. CICC is semantic-aware in a sense that it manages call-chains in the whole lifecycle of each component instance. CICC is transparent to users and app developers, and it requires minor modification to permission managers. Our evaluation shows that CICC incurs relatively low performance overhead and power consumption.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android的许可系统为用户提供了要么全有要么全无的安装选择。为了更加灵活，用户可以选择一个流行的应用程序工具，称为权限管理器，在运行时选择性地授予或撤销应用程序的权限。对这种权限管理器的一个基本要求是，应该忠实地执行授予或撤销的权限。然而，我们发现由于权限泄漏，现有的权限管理器没有一个满足这个要求。为了解决这个问题，我们提出了CICC，这是一种细粒度的、语义感知的、透明的方法，允许任何权限管理器防御权限泄漏。与现有的解决方案相比，CICC是细粒度的，因为它在组件实例级使用调用链信息检测权限泄漏，而不是在应用程序级或组件级。精细的特性使其对运行中的应用程序的可用性产生最小的影响。在某种意义上，CICC是语义感知的，它在每个组件实例的整个生命周期中管理调用链。CICC对用户和应用程序开发人员是透明的，它只需要对权限管理器做很小的修改。我们的评估显示，CICC的性能开销和功耗相对较低。",
        "title_zh": "CICC:一种细粒度的、语义感知的、透明的方法来防止Android权限管理器的权限泄露",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2015.html",
        "conf_title": "8. WISEC 2015: New York, NY, USA",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2766498",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2766498.2766508",
        "title": "DroidEagle: seamless detection of visually similar Android apps",
        "authors": "Mingshen Sun, Mengmeng Li, John C. S. Lui",
        "abstract": "Repackaged malware and phishing malware consist 86% [35] of all Android malware, and they significantly affect the Android ecosystem. Previous work use disassembled Dalvik bytecode and hashing approaches to detect repackaged malware, but these approaches are vulnerable to obfuscation attacks and they demand large computational resources on mobile devices. In this work, we propose a novel methodology which uses the layout resources within an app to detect apps which are \"visually similar\", a common characteristic in repackaged apps and phishing malware. To detect visually similar apps, we design and implement DroidEagle which consists of two sub-systems: RepoEagle and HostEagle. RepoEagle is to perform large scale detection on apps repositories (e.g., apps markets), and HostEagle is a lightweight mobile app which can help users to quickly detect visually similar Android app upon download. We demonstrate the high accuracy and efficiency of DroidEagle: Within 3 hours RepoEagle can detect 1298 visually similar apps from 99 626 apps in a repository. In less than one second, HostEagle can help an Android user to determine whether a downloaded mobile app is a repackaged apps or a phishing malware. This is the first work which provides both speed and scalability in discovering repackaged apps and phishing malware in Android system.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "重新包装的恶意软件和网络钓鱼恶意软件占所有Android恶意软件的86% [35]，它们严重影响了Android生态系统。以前的工作使用反汇编的Dalvik字节码和哈希方法来检测重新打包的恶意软件，但是这些方法容易受到混淆攻击，并且它们需要移动设备上的大量计算资源。在这项工作中，我们提出了一种新的方法，使用应用程序中的布局资源来检测“视觉相似”的应用程序，这是重新打包的应用程序和钓鱼恶意软件的一个常见特征。为了检测视觉上相似的应用，我们设计并实现了DroidEagle，它由两个子系统组成:RepoEagle和HostEagle。RepoEagle将对应用程序存储库(如应用程序市场)进行大规模检测，HostEagle是一款轻量级移动应用程序，可以帮助用户在下载时快速检测视觉上相似的Android应用程序。我们展示了DroidEagle的高准确性和高效率:RepoEagle可以在3小时内从存储库中的99 626个应用中检测出1298个视觉上相似的应用。在不到一秒钟的时间内，HostEagle可以帮助Android用户确定下载的移动应用程序是重新打包的应用程序还是钓鱼恶意软件。这是第一个在Android系统中发现重新打包的应用程序和钓鱼恶意软件时提供速度和可扩展性的工作。",
        "title_zh": "DroidEagle:无缝检测视觉相似的Android应用程序",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2015.html",
        "conf_title": "8. WISEC 2015: New York, NY, USA",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2766498",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2766498.2766506",
        "title": "Securacy: an empirical investigation of Android applications' network usage, privacy and security",
        "authors": "Denzil Ferreira, Vassilis Kostakos, Alastair R. Beresford, Janne Lindqvist, Anind K. Dey",
        "abstract": "Smartphone users do not fully know what their apps do. For example, an applications' network usage and underlying security configuration is invisible to users. In this paper we introduce Securacy, a mobile app that explores users' privacy and security concerns with Android apps. Securacy takes a reactive, personalized approach, highlighting app permission settings that the user has previously stated are concerning, and provides feedback on the use of secure and insecure network communication for each app. We began our design of Securacy by conducting a literature review and in-depth interviews with 30 participants to understand their concerns. We used this knowledge to build Securacy and evaluated its use by another set of 218 anonymous participants who installed the application from the Google Play store. Our results show that access to address book information is by far the biggest privacy concern. Over half (56.4%) of the connections made by apps are insecure, and the destination of the majority of network traffic is North America, regardless of the location of the user. Our app provides unprecedented insight into Android applications' communications behavior globally, indicating that the majority of apps currently use insecure network connections.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "智能手机用户并不完全知道他们的应用程序在做什么。例如，应用程序的网络使用和底层安全配置对用户是不可见的。在本文中，我们介绍了Securacy，这是一款移动应用程序，它探索了用户对Android应用程序的隐私和安全问题。Securacy采用了一种反应式的个性化方法，突出显示用户之前声明关注的应用程序权限设置，并为每个应用程序提供关于安全和不安全网络通信使用情况的反馈。我们通过对30名参与者进行文献回顾和深入访谈来了解他们的关注点，从而开始了我们的Securacy设计。我们利用这一知识构建了Securacy，并评估了另一组218名匿名参与者的使用情况，他们从Google Play商店安装了该应用程序。我们的结果表明，访问地址簿信息是目前最大的隐私问题。超过一半(56.4%)的应用程序连接是不安全的，大多数网络流量的目的地是北美，无论用户在哪里。我们的应用程序对全球Android应用程序的通信行为提供了前所未有的洞察力，表明大多数应用程序目前使用不安全的网络连接。",
        "title_zh": "Securacy:对Android应用程序的网络使用、隐私和安全性的实证调查",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2015.html",
        "conf_title": "8. WISEC 2015: New York, NY, USA",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2766498",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2766498.2766519",
        "title": "Security and system architecture: comparison of Android customizations",
        "authors": "Roberto Gallo, Patricia Hongo, Ricardo Dahab, Luiz C. Navarro, Henrique Kawakami, Kaio Galvão, Glauco Barroso Junquera, Luander Ribeiro",
        "abstract": "Smartphone manufacturers frequently customize Android distributions so as to create competitive advantages by adding, removing and modifying packages and configurations. In this paper we show that such modifications have deep architectural implications for security. We analysed five different distributions: Google Nexus 4, Google Nexus 5, Sony Z1, Samsung Galaxy S4 and Samsung Galaxy S5, all running OS versions 4.4.X (except for Samsung S4 running version 4.3). Our conclusions indicate that serious security issues such as expanded attack surface and poorer permission control grow sharply with the level of customization.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "智能手机制造商经常定制Android发行版，以便通过添加、删除和修改软件包和配置来创造竞争优势。在本文中，我们展示了这种修改对安全性具有深刻的架构含义。我们分析了五种不同的发行版:谷歌Nexus 4、谷歌Nexus 5、索尼Z1、三星Galaxy s 4和三星Galaxy S5，它们都运行4.4.X版本的操作系统(除了三星S4运行4.3版本)。我们的结论表明，严重的安全问题，如扩大攻击面和较差的权限控制急剧增长的定制水平。",
        "title_zh": "安全性和系统架构:Android定制的比较",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2015.html",
        "conf_title": "8. WISEC 2015: New York, NY, USA",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2766498",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2766498.2766522",
        "title": "Danger is my middle name: experimenting with SSL vulnerabilities in Android apps",
        "authors": "Lucky Onwuzurike, Emiliano De Cristofaro",
        "abstract": "This paper presents a measurement study of information leakage and SSL vulnerabilities in popular Android apps. We perform static and dynamic analysis on 100 apps, downloaded at least 10M times, that request full network access. Our experiments show that, although prior work has drawn a lot of attention to SSL implementations on mobile platforms, several popular apps (32/100) accept all certificates and all hostnames, and four actually transmit sensitive data unencrypted. We set up an experimental testbed simulating man-in-the-middle attacks and find that many apps (up to 91% when the adversary has a certificate installed on the victim's device) are vulnerable, allowing the attacker to access sensitive information, including credentials, files, personal details, and credit card numbers. Finally, we provide a few recommendations to app developers and highlight several open research problems.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "本文对流行的Android应用程序中的信息泄漏和SSL漏洞进行了测量研究。我们对100个应用程序进行静态和动态分析，这些应用程序被下载了至少1000万次，要求完全的网络访问。我们的实验表明，尽管之前的工作已经吸引了大量注意力来关注移动平台上的SSL实现，但一些流行的应用程序(32/100)接受所有证书和所有主机名，并且有四个应用程序实际上在不加密的情况下传输敏感数据。我们建立了一个模拟中间人攻击的实验测试床，并发现许多应用程序(当对手在受害者的设备上安装了证书时，高达91%)容易受到攻击，允许攻击者访问敏感信息，包括凭据、文件、个人详细信息和信用卡号码。最后，我们向应用程序开发人员提供了一些建议，并强调了几个开放的研究问题。",
        "title_zh": "危险是我的中间名:在Android应用程序中试验SSL漏洞",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2015.html",
        "conf_title": "8. WISEC 2015: New York, NY, USA",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2766498",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2766498.2766501",
        "title": "How far removed are you?: scalable privacy-preserving estimation of social path length with Social PaL",
        "authors": "Marcin Nagy, Thanh Bui, Emiliano De Cristofaro, N. Asokan, Jörg Ott, Ahmad-Reza Sadeghi",
        "abstract": "Social relationships are a natural basis on which humans make trust decisions. Online Social Networks (OSNs) are increasingly often used to let users base trust decisions on the existence and the strength of social relationships. While most OSNs allow users to discover the length of the social path to other users, they do so in a centralized way, thus requiring them to rely on the service provider and reveal their interest in each other. This paper presents Social PaL, a system supporting the privacy-preserving discovery of arbitrary-length social paths between any two social network users. We overcome the bootstrapping problem encountered in all related prior work, demonstrating that Social PaL allows its users to find all paths of length two and to discover a significant fraction of longer paths, even when only a small fraction of OSN users is in the Social PaL system -- e.g., discovering 70% of all paths with only 40% of the users. We implement Social PaL using a scalable server-side architecture and a modular Android client library, allowing developers to seamlessly integrate it into their apps.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "社会关系是人类做出信任决定的自然基础。在线社交网络(osn)越来越多地被用来让用户根据社交关系的存在和强度做出信任决定。虽然大多数osn允许用户发现与其他用户的社交路径的长度，但它们是以集中的方式进行的，因此需要用户依赖服务提供商，并透露他们对彼此的兴趣。本文介绍了Social PaL，一个支持任意两个社交网络用户之间任意长度社交路径的隐私保护发现的系统。我们克服了在所有相关的现有工作中遇到的自举问题，证明了社交PaL允许其用户找到长度为2的所有路径，并且发现更长路径的重要部分，即使只有一小部分OSN用户在社交PaL系统中，例如，仅40%的用户发现70%的所有路径。我们使用可扩展的服务器端架构和模块化的Android客户端库来实现Social PaL，允许开发人员将其无缝集成到他们的应用程序中。",
        "title_zh": "你离这里有多远？:利用社交PaL的社交路径长度的可扩展隐私保护估计",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2015.html",
        "conf_title": "8. WISEC 2015: New York, NY, USA",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2766498",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2766498.2766499",
        "title": "Harvesting developer credentials in Android apps",
        "authors": "Yajin Zhou, Lei Wu, Zhi Wang, Xuxian Jiang",
        "abstract": "Developers often integrate third-party services into their apps. To access a service, an app must authenticate itself to the service with a credential. However, credentials in apps are often not properly or adequately protected, and might be easily extracted by attackers. A leaked credential could pose serious privacy and security threats to both the app developer and app users. In this paper, we propose CredMiner to systematically study the prevalence of unsafe developer credential uses in Android apps. CredMiner can programmatically identify and recover (obfuscated) developer credentials unsafely embedded in Android apps. Specifically, it leverages data flow analysis to identify the raw form of the embedded credential, and selectively executes the part of the program that builds the credential to recover it. We applied CredMiner to 36,561 apps collected from various Android markets to study the use of free email services and Amazon AWS. There were 237 and 196 apps that used these two services, respectively. CredMiner discovered that 51.5% (121/237) and 67.3% (132/196) of them were vulnerable. In total, CredMiner recovered 302 unique email login credentials and 58 unique Amazon AWS credentials, and verified that 252 and 28 of these credentials were still valid at the time of the experiments, respectively.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "开发者经常将第三方服务集成到他们的应用中。要访问服务，应用程序必须使用凭据向服务验证自身。然而，应用程序中的凭证通常没有得到适当或充分的保护，并且可能很容易被攻击者提取。泄露的凭据可能会给应用程序开发人员和应用程序用户带来严重的隐私和安全威胁。在本文中，我们提出CredMiner来系统地研究Android应用程序中不安全的开发者凭据使用的普遍性。CredMiner可以以编程方式识别和恢复(混淆)不安全地嵌入Android应用程序中的开发人员凭据。具体来说，它利用数据流分析来识别嵌入凭据的原始形式，并有选择地执行构建凭据的程序部分来恢复它。我们将CredMiner应用于从各种Android市场收集的36561个应用程序，以研究免费电子邮件服务和亚马逊AWS的使用情况。分别有237个和196个应用程序使用了这两种服务。CredMiner发现他们中的51.5% (121/237)和67.3% (132/196)是脆弱的。CredMiner总共恢复了302个唯一的电子邮件登录凭据和58个唯一的亚马逊AWS凭据，并验证了其中252个和28个凭据在实验时仍然有效。",
        "title_zh": "在Android应用中收集开发者证书",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2015.html",
        "conf_title": "8. WISEC 2015: New York, NY, USA",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2766498",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2766498.2766509",
        "title": "WeChecker: efficient and precise detection of privilege escalation vulnerabilities in Android apps",
        "authors": "Xingmin Cui, Jingxuan Wang, Lucas Chi Kwong Hui, Zhongwei Xie, Tian Zeng, Siu-Ming Yiu",
        "abstract": "Due to the rapid increase of Android apps and their wide usage to handle personal data, a precise and large-scaling checker is in need to validate the apps' permission flow before they are listed on the market. Several tools have been proposed to detect sensitive data leaks in Android apps. But these tools are not applicable to large-scale analysis since they fail to deal with the arbitrary execution orders of different event handlers smartly. Event handlers are invoked by the framework based on the system state, therefore we cannot pre-determine their order of execution. Besides, since all exported components can be invoked by an external app, the execution orders of these components are also arbitrary. A naive way to simulate these two types of arbitrary execution orders yields a permutation of all event handlers in an app. The time complexity is O(n!) where n is the number of event handlers in an app. This leads to a high analysis overhead when n is big. To give an illustration, CHEX [10] found 50.73 entry points of 44 unique class types in an app on average. In this paper we propose an improved static taint analysis to deal with the challenge brought by the arbitrary execution orders without sacrificing the high precision. Our analysis does not need to make permutations and achieves a polynomial time complexity. We also propose to unify the array and map access with object reference by propagating access paths to reduce the number of false positives due to field-insensitivity and over approximation of array access and map access. We implement a tool, WeChecker, to detect privilege escalation vulnerabilities [7] in Android apps. WeChecker achieves 96% precision and 96% recall in the state-of-the-art test suite DriodBench (for compairson, the precision and recall of FlowDroid [1] are 86% and 93%, respectively). The evaluation of WeChecker on real apps shows that it is efficient (average analysis time of each app: 29.985s) and fits for large-scale checking.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "由于Android应用程序的快速增长及其在处理个人数据方面的广泛使用，在应用程序上市之前，需要一个精确的大规模检查器来验证应用程序的权限流。已经提出了几种工具来检测Android应用程序中的敏感数据泄漏。但是这些工具不适用于大规模分析，因为它们不能灵活地处理不同事件处理程序的任意执行顺序。框架基于系统状态调用事件处理程序，因此我们无法预先确定它们的执行顺序。此外，由于所有导出的组件都可以由外部应用程序调用，因此这些组件的执行顺序也是任意的。一种模拟这两种任意执行顺序的简单方法会产生一个应用程序中所有事件处理程序的排列。时间复杂度为O(n！)其中n是应用程序中事件处理程序的数量。当n较大时，这会导致较高的分析开销。举例来说，CHEX [10]在一个应用程序中平均找到44个独特类类型的50.73个入口点。本文提出了一种改进的静态污点分析方法，在不牺牲高精度的前提下，处理任意执行命令带来的挑战。我们的分析不需要进行置换，并且实现了多项式时间复杂度。我们还建议通过传播访问路径来统一具有对象引用的数组和映射访问，以减少由于字段不敏感和数组访问和映射访问的过度近似而导致的假阳性的数量。我们实现了一个工具，WeChecker，来检测Android应用中的权限提升漏洞[7]。WeChecker在最先进的测试套件DriodBench上实现了96%的准确率和96%的召回率(对于compairson，FlowDroid [1]的准确率和召回率分别为86%和93%)。在真实app上对WeChecker的评测表明，它是高效的(每个app的平均分析时间:29.985s)，适合大规模检查。",
        "title_zh": "WeChecker:高效精确地检测Android应用中的权限提升漏洞",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2015.html",
        "conf_title": "8. WISEC 2015: New York, NY, USA",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2766498",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2766498.2774984",
        "title": "NFCGate: an NFC relay application for Android",
        "authors": "Max Maass, Uwe Müller, Tom Schons, Daniel Wegemer, Matthias Schulz",
        "abstract": "Near Field Communication (NFC) is a technology widely used for security-critical applications like access control or payment systems. Many of these systems rely on the security assumption that the card has to be in close proximity to communicate with the reader. We developed NFCGate, an Android application capable of relaying NFC communication between card and reader using two rooted but otherwise unmodified Android phones. This enables us to increase the distance between card and reader, eavesdrop on, and even modify the exchanged data. The application should work for any system built on top of ISO 14443-3 that is not hardened against relay attacks, and was successfully tested with a popular contactless card payment system and an electronic passport document.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "近场通信(NFC)是一种广泛用于门禁控制或支付系统等安全关键应用的技术。这些系统中的许多依赖于安全假设，即卡必须非常接近才能与读卡器通信。我们开发了NFCGate，这是一个Android应用程序，能够使用两个根但未经修改的Android手机中继卡和读卡器之间的NFC通信。这使我们能够增加卡和读卡器之间的距离，窃听，甚至修改交换的数据。该应用程序应该适用于任何建立在ISO 14443-3之上的系统，该系统没有针对中继攻击进行加固，并通过了一个流行的非接触式卡支付系统和一个电子护照文档的成功测试。",
        "title_zh": "NFC gate:Android的NFC中继应用程序",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2015.html",
        "conf_title": "8. WISEC 2015: New York, NY, USA",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2766498",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2766498.2774987",
        "title": "A hybrid approach for mobile security threat analysis",
        "authors": "Wanqing You, Kai Qian, Minzhe Guo, Prabir Bhattacharya, Ying Qian, Lixin Tao",
        "abstract": "Research on effective and efficient mobile threat analysis becomes an emerging and important topic in cybersecurity research area. Static analysis and dynamic analysis constitute two of the most popular types of techniques for security analysis and evaluation; nevertheless, each of them has its strengths and weaknesses. To leverage the benefits of both approaches, we propose a hybrid approach that integrates the static and dynamic analysis for detecting security threats in mobile applications. The key of this approach is the unification of data states and software execution on critical test paths. The approach consists of two phases. In the first phase, a pilot static analysis is conducted to identify potential critical attack paths based on Android APIs and existing attack patterns. In the second phase, a dynamic analysis follows the identified critical paths to execute the program in a limited and focused manner. Attacks shall be detected by checking the conformance of the detected paths with existing attack patterns. The method will report the types of detected attack scenarios based on types of sensitive data that may be compromised, such as web browser cookie.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "研究高效的移动威胁分析成为网络安全研究领域的一个新兴的重要课题。静态分析和动态分析构成了安全性分析和评估的两种最流行的技术类型；然而，每一种都有其长处和短处。为了利用这两种方法的优势，我们提出了一种混合方法，该方法集成了静态和动态分析，用于检测移动应用中的安全威胁。这种方法的关键是关键测试路径上数据状态和软件执行的统一。该方法包括两个阶段。在第一阶段，进行试点静态分析，根据Android APIs和现有攻击模式识别潜在的关键攻击路径。在第二阶段，动态分析遵循确定的关键路径，以有限和集中的方式执行计划。应通过检查检测到的路径与现有攻击模式的一致性来检测攻击。该方法将根据可能受到危害的敏感数据类型(如web浏览器cookie)来报告检测到的攻击场景类型。",
        "title_zh": "一种混合的移动安全威胁分析方法",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2015.html",
        "conf_title": "8. WISEC 2015: New York, NY, USA",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2766498",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2766498.2774989",
        "title": "Study of compliance of Android location APIs with Geopriv",
        "authors": "Pradeep Podiyan, Sergey Butakov, Pavol Zavarsky",
        "abstract": "This paper carefully examines the location APIs of Android OS as well as the Geopriv standard architecture to study measures that are being taken by Android OS to protect the location privacy of a user. Android offers various location APIs in its architecture for the app developers to work on location based services (LBS). The results of this evaluation will be compared with Geopriv standard architecture and its ways to enhance location information privacy on mobile platforms. The review of functionality of location APIs shows that Android has limited features such as Geofencing to have some extent of location privacy for a typical user. Only few of the recommendation in distribution segment of Geopriv with slightly different approach are similar to the protection mechanisms offered by location APIs in Android. The paper proposes general steps that can be taken to address location privacy issues on mobile devices.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "本文仔细研究了Android操作系统的位置API以及Geopriv标准架构，以研究Android操作系统为保护用户的位置隐私所采取的措施。Android在其架构中提供了各种位置API，供应用程序开发人员使用基于位置的服务(LBS)。该评估的结果将与Geopriv标准架构及其在移动平台上增强位置信息隐私的方式进行比较。对位置API功能的审查表明，Android具有有限的功能，如地理围栏，以便为典型用户提供一定程度的位置隐私。在Geopriv的发行版中，只有少数建议与Android中位置API提供的保护机制相似，只是方法略有不同。本文提出了解决移动设备位置隐私问题的一般步骤。",
        "title_zh": "Android位置API与Geopriv的兼容性研究",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2015.html",
        "conf_title": "8. WISEC 2015: New York, NY, USA",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2766498",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2766498.2774991",
        "title": "SVM-based malware detection for Android applications",
        "authors": "Guqian Dai, Jigang Ge, Minghang Cai, Daoqian Xu, Wenjia Li",
        "abstract": "In this paper, we study a SVM-based malware detection scheme for Android application, which integrates both risky permission combinations and vulnerable API calls and use them as features in the SVM algorithm. Preliminary experiments have validated the proposed malware detection scheme.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "在本文中，我们研究了一种基于SVM的Android应用恶意软件检测方案，该方案集成了有风险的权限组合和易受攻击的API调用，并将它们作为SVM算法中的特征。初步实验验证了所提出的恶意软件检测方案。",
        "title_zh": "基于SVM的Android应用恶意软件检测",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2015.html",
        "conf_title": "8. WISEC 2015: New York, NY, USA",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2766498",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2766498.2774992",
        "title": "Device analyzer: a privacy-aware platform to support research on the Android ecosystem",
        "authors": "Daniel T. Wagner, Daniel R. Thomas, Alastair R. Beresford, Andrew C. Rice",
        "abstract": "Device Analyzer is an Android app available from the Google Play store. It is designed to collect a large range of data from the handset and, with agreement from our contributors, share it with researchers around the world. Researchers can access the data collected, and can also use the platform to support their own user studies. In this paper we provide an overview of the privacy-enhancing techniques used in Device Analzyer, including transparency, consent, purpose, access, withdrawal, and accountability. We also demonstrate the utility of our platform by assessing the security of the Android ecosystem to privilege escalation attacks and determine that 88% of Android devices are, on average, vulnerable to one or more of these type of attacks.",
        "files": {
            "openAccessPdf": "https://strathprints.strath.ac.uk/71005/1/Wagner_etal_WISEC2015_Device_analyzer_privacy_aware_platform_support_research_Android_ecosystem.pdf"
        },
        "abstract_zh": "Device Analyzer是一款Android应用，可从Google Play商店获得。它旨在从手机上收集大量数据，并在我们的贡献者同意的情况下，与世界各地的研究人员分享这些数据。研究人员可以访问收集的数据，也可以使用该平台来支持他们自己的用户研究。在本文中，我们概述了设备分析器中使用的隐私增强技术，包括透明度、同意、目的、访问、撤销和责任。我们还通过评估Android生态系统对特权提升攻击的安全性来展示我们平台的效用，并确定平均88%的Android设备容易受到一种或多种此类攻击。",
        "title_zh": "设备分析器:一个支持Android生态系统研究的隐私感知平台",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2015.html",
        "conf_title": "8. WISEC 2015: New York, NY, USA",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2766498",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3558482.3581775",
        "title": "Android OS Privacy Under the Loupe - A Tale from the East",
        "authors": "Haoyu Liu, Douglas J. Leith, Paul Patras",
        "abstract": "China is currently the country with the largest number of Android smartphone users. We use a combination of static and dynamic code analysis techniques to study the data transmitted by the preinstalled system apps on Android smartphones from three of the most popular vendors in China. We find that an alarming number of preinstalled system, vendor and third-party apps are granted dangerous privileges. Through traffic analysis, we find these packages transmit to many third-party domains privacy sensitive information related to the user's device (persistent identifiers), geolocation (GPS coordinates, network-related identifiers), user profile (phone number, app usage) and social relationships (e.g., call history), without consent or even notification. This poses serious deanonymization and tracking risks that extend outside China when the user leaves the country, and calls for a more rigorous enforcement of the recently adopted data privacy legislation.",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "放大镜下的安卓操作系统隐私——来自东方的故事",
        "abstract_zh": "中国目前是安卓智能手机用户最多的国家。我们结合使用静态和动态代码分析技术来研究中国三家最受欢迎的供应商的Android智能手机上预装的系统应用程序传输的数据。我们发现，数量惊人的预装系统、供应商和第三方应用程序被授予危险的特权。通过流量分析，我们发现这些包在未经同意甚至没有通知的情况下，向许多第三方域传输与用户设备(永久标识符)、地理位置(GPS坐标、网络相关标识符)、用户配置文件(电话号码、应用程序使用)和社交关系(例如通话记录)相关的隐私敏感信息。这造成了严重的去匿名化和跟踪风险，当用户离开中国时，这些风险会延伸到中国境外，并要求更严格地执行最近通过的数据隐私立法。",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2023.html",
        "conf_title": "16th WISEC 2023:\nGuildford, UK",
        "conf_url": "https://doi.org/10.1145/3558482",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3558482.3590176",
        "title": "E-Spoofer: Attacking and Defending Xiaomi Electric Scooter Ecosystem",
        "authors": "Marco Casagrande, Riccardo Cestaro, Eleonora Losiouk, Mauro Conti, Daniele Antonioli",
        "abstract": "Xiaomi is the market leader in the electric scooter (e-scooter) segment, with millions of active users. It provides several e-scooter models and Mi Home, a mobile application for Android and iOS to manage and control an e-scooter. Mi Home and the e-scooter interact via Bluetooth Low Energy (BLE). No prior research evaluated the security of this communication channel, as it employs security protocols proprietary to Xiaomi. Exploiting these protocols results in severe security, privacy, and safety issues, e.g., an attacker could steal an e-scooter or prevent the owner from controlling it. In this work, we fill this research gap by performing the first security evaluation on all proprietary wireless protocols deployed to Xiaomi e-scooters from 2016 to 2021. We identify and reverse-engineer four of them, each having ad-hoc Pairing and Session phases. We develop four attacks exploiting these protocols at the architectural level, and we call them Malicious Pairing (MP) and Session Downgrade (SD). Both attacks can be performed from proximity, if the attacker's machine is within BLE range of the target e-scooter, or remotely, via a malicious application co-located with Mi Home. An adversary can utilize MP and SD to steal a password-protected and software-locked e-scooter, or to prevent a victim from accessing it via Mi Home. We isolate six attack root causes, including the lack of authentication while pairing, and the improper enforcement of the e-scooter password. We open-source the E-Spoofer toolkit. Our toolkit automates the MP and SD attacks, and includes a reverse-engineering module for future research. We empirically confirm the effectiveness of our attacks by exploiting three e-scooters (i.e., M365, Essential, and Mi 3), embedding five BLE subsystem boards and eight BLE firmware versions that support all four Xiaomi protocols. We design and evaluate two practical countermeasures that address our impactful attacks and their root causes, and we release them as part of E-Spoofer. We responsibly disclosed our findings to Xiaomi.",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "E-Spoofer:小米电动滑板车生态系统的攻防",
        "abstract_zh": "小米是电动滑板车(e-scooter)领域的市场领导者，拥有数百万活跃用户。它提供了几个电动滑板车模型和Mi Home，这是一个用于Android和iOS的移动应用程序，用于管理和控制电动滑板车。小米之家和电动滑板车通过蓝牙低能耗(BLE)进行交互。之前没有研究评估这种通信渠道的安全性，因为它采用了小米专有的安全协议。利用这些协议会导致严重的安全性、隐私和安全问题，例如，攻击者可以窃取电动滑板车或阻止所有者控制它。在这项工作中，我们通过对2016年至2021年部署到小米电动滑板车的所有专有无线协议进行首次安全评估，填补了这一研究空白。我们识别并逆向工程其中的四个，每个都有特定的配对和会话阶段。我们在架构级别开发了四种利用这些协议的攻击，我们称之为恶意配对(MP)和会话降级(SD)。如果攻击者的机器在目标电动滑板车的BLE范围内，这两种攻击都可以从附近执行，或者通过与Mi Home位于同一位置的恶意应用程序远程执行。对手可以利用MP和SD来窃取受密码保护和软件锁定的电动滑板车，或者阻止受害者通过Mi Home访问它。我们隔离了六个攻击根源，包括配对时缺乏身份验证，以及电子滑板车密码的不正确实施。我们开源了电子欺骗工具包。我们的工具包自动执行MP和SD攻击，并包括一个用于未来研究的逆向工程模块。我们通过利用三个e-scooter(即M365、Essential和Mi 3)，嵌入五个BLE子系统板和八个支持所有四个小米协议的BLE固件版本，从经验上确认了我们攻击的有效性。我们设计并评估了两种实用的对策，以解决我们的有效攻击及其根本原因，并将其作为电子欺骗器的一部分发布。我们负责任地向小米披露了我们的发现。",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2023.html",
        "conf_title": "16th WISEC 2023:\nGuildford, UK",
        "conf_url": "https://doi.org/10.1145/3558482",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3558482.3590199",
        "title": "The Devil is in the Details: Hidden Problems of Client-Side Enterprise Wi-Fi Configurators",
        "authors": "Ka Lok Wu, Man Hong Hue, Ka Fun Tang, Sze Yiu Chau",
        "abstract": "In the context of connecting to enterprise Wi-Fi, previous works show that relying on human users to manually configure or enforce server authentication often leads to insecure outcomes. Consequently, many user credentials can potentially be stolen by the so-called \"Evil-Twin'' (ET) attack. To ease the burden of human users, various easy-to-use Wi-Fi configurators have been released and deployed. In this work, we investigate whether such configurators can indeed protect users from variants of the ET attack. To our surprise, the results of our investigation show that all configurators considered in the study suffer from certain weaknesses due to their design, implementation, or deployment practices. Notable findings include a series of design flaws in the new trust-on-first-use (TOFU) configurator on Android (available since version 12), which can be exploited in tandem to achieve a stealthy ET attack. Moreover, we found that 2 open-source Android Wi-Fi configurators fail to properly enforce server authentication under specific situations. The cause of these could be partly attributed to the complexity stemmed from certificate name matching as well as the limitations of the Android API. Last but not least, we found that a commercial configurator not only allows insecure Wi-Fi configurations to be deployed, but also the covert injection of certificates on the user device to facilitate interception of other TLS traffic, posing yet another hidden security and privacy threat to its users. All in all, this study shows that despite years of research on the topic, developing a user-friendly yet reliable Wi-Fi configurator remains an elusive goal, and thus the threat of ET attacks continues to be relevant. As such, it is time to rethink whether the complexity of the standard certificate chain validation is actually good for enterprise Wi-Fi.",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "细节是魔鬼:客户端企业Wi-Fi配置器的隐藏问题",
        "abstract_zh": "在连接到企业Wi-Fi的情况下，以前的工作表明，依靠人类用户手动配置或实施服务器认证通常会导致不安全的结果。因此，许多用户凭证可能会被所谓的“邪恶双胞胎”(ET)攻击窃取。为了减轻人类用户的负担，已经发布和部署了各种易于使用的Wi-Fi配置器。在这项工作中，我们调查这样的配置器是否真的可以保护用户免受ET攻击的变种。令我们惊讶的是，我们的调查结果显示，研究中考虑的所有配置器都存在某些弱点，这是由于它们的设计、实现或部署实践。值得注意的发现包括Android上新的首次使用时信任(豆腐)配置器(自版本12起可用)中的一系列设计缺陷，这些缺陷可以被串联利用来实现隐形ET攻击。此外，我们发现2个开源Android Wi-Fi配置器在特定情况下无法正确执行服务器认证。造成这些问题的部分原因可能是证书名称匹配带来的复杂性以及Android API的局限性。最后但并非最不重要的是，我们发现商业配置器不仅允许部署不安全的Wi-Fi配置，还允许在用户设备上秘密注入证书，以方便拦截其他TLS流量，这对其用户构成了另一个隐藏的安全和隐私威胁。总之，这项研究表明，尽管对该主题进行了多年的研究，开发一个用户友好而可靠的Wi-Fi配置器仍然是一个难以实现的目标，因此et攻击的威胁仍然存在。因此，是时候重新思考标准证书链验证的复杂性是否真的对企业Wi-Fi有益了。",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wisec/wisec2023.html",
        "conf_title": "16th WISEC 2023:\nGuildford, UK",
        "conf_url": "https://doi.org/10.1145/3558482",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1049/iet-ifs.2019.0418",
        "title": "Improved real-time permission based malware detection and clustering approach using model independent pruning",
        "authors": "Janani Thiyagarajan, A. Akash, Brindha Murugan",
        "abstract": "The popularity of Android prompts cyber-criminals to create malicious apps that can compromise security and confidentiality of the mobile systems. Analysing the permissions requested by an app is one of the methods to detect if it is malware or not. However, taking all the permissions available in the Android system into account can result in a model with increased complexity. To tackle this, a malware detection system is needed as both efficient and employable for real-time usage. In this study, a preprocessing module has been developed that comprises of five different data reduction techniques to identify the minimal set of permission. The preprocessing resulted in a ten-dimensional vector in place of 113 permissions. It is also observed that the performance of a decision tree trained just with these ten dimensions is as the one trained with all 113 permissions. The proposed malware detection system achieves an accuracy of 94.3% on unknown malware samples. The system outperforms others in terms of recall attributed to lower false negative prediction. Further, it categorises the malware samples into 45 families using a clustering approach. An android application has also been developed using a built model for real-time usage.",
        "files": {
            "openAccessPdf": "https://onlinelibrary.wiley.com/doi/pdfdirect/10.1049/iet-ifs.2019.0418"
        },
        "abstract_zh": "Android的流行促使网络罪犯创建恶意应用程序，危及移动系统的安全性和保密性。分析应用程序请求的权限是检测它是否是恶意软件的方法之一。然而，考虑Android系统中所有可用的权限可能会导致模型的复杂性增加。为了解决这个问题，需要一种高效且可实时使用的恶意软件检测系统。在这项研究中，开发了一个预处理模块，该模块由五种不同的数据简化技术组成，用于识别最小权限集。预处理产生了一个十维向量来代替113个权限。还观察到，仅用这十个维度训练的决策树的性能与用所有113个权限训练的决策树的性能一样。该恶意软件检测系统对未知恶意软件样本的准确率达到94.3%。由于较低的假阴性预测，该系统在召回率方面优于其他系统。此外，它使用聚类方法将恶意软件样本分为45个家族。还开发了一个android应用程序，使用一个内置的实时使用模型。",
        "title_zh": "改进的基于实时许可的恶意软件检测和聚类方法",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/iet-ifs/iet-ifs14.html",
        "conf_title": "IET Information Security, Volume 14",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1049/ise2.12082",
        "title": "DeepCatra: Learning flow- and graph-based behaviours for Android malware detection",
        "authors": "Yafei Wu, Jian Shi, Peicheng Wang, Dongrui Zeng, Cong Sun",
        "abstract": "As Android malware is growing and evolving, deep learning has been introduced into malware detection, resulting in great effectiveness. Recent work is considering hybrid models and multi-view learning. However, they use only simple features, limiting the accuracy of these approaches in practice. In this paper, we propose DeepCatra, a multi-view learning approach for Android malware detection, whose model consists of a bidirectional LSTM (BiLSTM) and a graph neural network (GNN) as subnets. The two subnets rely on features extracted from statically computed call traces leading to critical APIs derived from public vulnerabilities. For each Android app, DeepCatra first constructs its call graph and computes call traces reaching critical APIs. Then, temporal opcode features used by the BiLSTM subnet are extracted from the call traces, while flow graph features used by the GNN subnet are constructed from all the call traces and inter-component communications. We evaluate the effectiveness of DeepCatra by comparing it with several state-of-the-art detection approaches. Experimental results on over 18,000 real-world apps and prevalent malware show that DeepCatra achieves considerable improvement, e.g., 2.7% to 14.6% on F1-measure, which demonstrates the feasibility of DeepCatra in practice.",
        "files": {
            "openAccessPdf": "https://onlinelibrary.wiley.com/doi/pdfdirect/10.1049/ise2.12082"
        },
        "abstract_zh": "随着Android恶意软件的不断增长和演变，深度学习被引入到恶意软件检测中，取得了很好的效果。最近的工作是考虑混合模型和多视图学习。然而，它们仅使用简单的特征，在实践中限制了这些方法的准确性。本文提出了一种用于Android恶意软件检测的多视图学习方法DeepCatra，其模型由双向LSTM (BiLSTM)和图神经网络(GNN)组成子网。这两个子网依赖于从静态计算的调用跟踪中提取的特征，这些特征导致从公共漏洞中导出的关键API。对于每个Android应用程序，DeepCatra首先构建其调用图，并计算到达关键API的调用跟踪。然后，从调用跟踪中提取BiLSTM子网使用的临时操作码特征，而从所有调用跟踪和组件间通信中构建GNN子网使用的流图特征。我们通过与几种最先进的检测方法进行比较来评估DeepCatra的有效性。在超过18，000个真实世界的应用和流行的恶意软件上的实验结果表明，DeepCatra实现了相当大的改进，例如，在F1-measure上提高了2.7%到14.6%，这证明了DeepCatra在实践中的可行性。",
        "title_zh": "DeepCatra:学习基于流和图的Android恶意软件检测行为",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/iet-ifs/iet-ifs17.html",
        "conf_title": "IET Information Security, Volume 17",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1049/ise2.12117",
        "title": "CryptoEval: Evaluating the risk of cryptographic misuses in Android apps with data-flow analysis",
        "authors": "Cong Sun, Xinpeng Xu, Yafei Wu, Dongrui Zeng, Gang Tan, Siqi Ma, Peicheng Wang",
        "abstract": "The misunderstanding and incorrect configurations of cryptographic primitives have exposed severe security vulnerabilities to attackers. Due to the pervasiveness and diversity of cryptographic misuses, a comprehensive and accurate understanding of how cryptographic misuses can undermine the security of an Android app is critical to the subsequent mitigation strategies but also challenging. Although various approaches have been proposed to detect cryptographic misuse in Android apps, studies have yet to focus on estimating the security risks of cryptographic misuse. To address this problem, we present an extensible framework for deciding the threat level of cryptographic misuse in Android apps. Firstly, we propose a general and unified specification for representing cryptographic misuses to make our framework extensible and develop adapters to unify the detection results of the state-of-the-art cryptographic misuse detectors, resulting in an adapter-based detection tool chain for a more comprehensive list of cryptographic misuses. Secondly, we employ a misuse-originating data-flow analysis to connect each cryptographic misuse to a set of data-flow sinks in an app, based on which we propose a quantitative data-flow-driven metric for assessing the overall risk of the app introduced by cryptographic misuses. To make the per-app assessment more useful for app vetting at the app-store level, we apply unsupervised learning to predict and classify the top risky threats to guide more efficient subsequent mitigation. In the experiments on an instantiated implementation of the framework, we evaluate the accuracy of our detection and the effect of data-flow-driven risk assessment of our framework. Our empirical study on over 40,000 apps and the analysis of popular apps reveal important security observations on the real threats of cryptographic misuse in Android apps.",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "CryptoEval:通过数据流分析评估Android应用程序中密码滥用的风险",
        "abstract_zh": "对密码原语的误解和错误配置已经向攻击者暴露了严重的安全漏洞。由于加密滥用的普遍性和多样性，全面准确地了解加密滥用如何破坏Android应用的安全性对于后续的缓解策略至关重要，但也具有挑战性。尽管已经提出了各种方法来检测Android应用程序中的加密滥用，但研究尚未专注于估计加密滥用的安全风险。为了解决这个问题，我们提出了一个可扩展的框架，用于确定Android应用程序中加密滥用的威胁级别。首先，我们提出了一个通用的、统一的描述密码误用的规范，以使我们的框架具有可扩展性，并开发适配器来统一当前最先进的密码误用检测器的检测结果，从而产生一个基于适配器的检测工具链，用于更全面的密码误用列表。其次，我们采用误用源数据流分析将每个加密误用连接到应用程序中的一组数据流接收器，在此基础上，我们提出了一个量化的数据流驱动的指标，用于评估加密误用引入的应用程序的整体风险。为了使每个应用的评估对应用商店级别的应用审查更有用，我们应用无监督学习来预测和分类最大的风险威胁，以指导更有效的后续缓解。在对该框架的实例化实现的实验中，我们评估了我们的检测的准确性以及我们的框架的数据流驱动的风险评估的效果。我们对超过40，000个应用程序的实证研究和对流行应用程序的分析揭示了Android应用程序中加密滥用的真实威胁的重要安全观察。",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/iet-ifs/iet-ifs17.html",
        "conf_title": "IET Information Security, Volume 17",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1049/ise2.12030",
        "title": "Feature selection-based android malware adversarial sample generation and detection method",
        "authors": "Xiangjun Li, Ke Kong, Su Xu, Pengtao Qin, Daojing He",
        "abstract": "Funding information National Natural Science Foundation of China, Grant/Award Numbers: 61862042, 61762062, 61601215, U1936120, U1636216, 2017YFB0802805, 2017YFB0801701; Science and Technology Innovation Platform Project of Jiangxi Province, Grant/Award Number: 20181BCD40005; Fok Ying Tung Education Foundation of China, Grant/Award Number: 171058; Major Discipline Academic and Technical Leader Training Plan Project of Jiangxi Province, Grant/Award Numbers: 20172BCB22030, 20192BBE50075, 20181ACE50033; Jiangxi Province Natural Science Foundation of China, Grant/Award Number: 20192BAB207019, 20192BAB207020; Graduate Innovation Fund Project of Jiangxi Province, Grant/Award Number: YC2019‐S100, YC2019‐S048; Practice innovation training programme of Jiangxi Province for college students, Grant/Award Number: 20190403041, 2020CX160; National Natural Science Foundation of China China; Natural Science Foundation of Jiangxi Province China Abstract With the popularisation of Android smartphones, the value of mobile application security research has increased. The emergence of adversarial technology makes it possible for malware to evade detection. Therefore, research is conducted on Android malicious applications of adversarial attack. To clarify the process and theory of adversarial sample generation, an adversarial sample generation algorithm is proposed that filters features based on feature spatial distribution and definition. These features are modified on real malicious samples to form adversarial samples. In addition, to enhance the robustness of adversarial sample classification detection, a multiple feature set detection algorithm is designed and implemented. Using the frequency differential enhancement feature selection algorithm to perform feature screening, the algorithm forms two different feature sets and establishes two different training sets to train different classification algorithms. Prediction results obtained by the two classification algorithms are integrated based on certain rules. Experimental results on the VirusShare dataset show that both algorithms are effective. The detection results in an actual environment also prove the effectiveness of the multiple feature set detection algorithm.",
        "files": {
            "openAccessPdf": "https://onlinelibrary.wiley.com/doi/pdfdirect/10.1049/ise2.12030"
        },
        "abstract_zh": "资助信息国家自然科学基金，资助/获奖编号:61862042，61762062，61601215，U1936120，U1636216，2017YFB0802805，2017YFB0801701江西省科技创新平台项目，资助/奖励号:20181BCD40005中国霍英东教育基金会，资助/获奖编号:171058；江西省重点学科学术技术带头人培养计划项目，资助/获奖编号:20172BCB22030，20192BBE50075，20181ACE50033江西省自然科学基金，资助/奖励号:20192BAB207019，20192BAB207020江西省研究生创新基金项目，资助/获奖编号:YC2019‐S100，YC 2019‐S048；江西省大学生实践创新训练计划，资助/奖励号:20190403041，2020CX160国家自然科学基金委员会；随着Android智能手机的普及，移动应用安全研究的价值越来越大。对抗技术的出现使得恶意软件逃避检测成为可能。因此，针对Android恶意应用程序的对抗性攻击进行研究。为了阐明对立样本生成的过程和理论，提出了一种基于特征空间分布和定义过滤特征的对立样本生成算法。这些特征在真实的恶意样本上被修改以形成对抗样本。此外，为了提高对立样本分类检测的鲁棒性，设计并实现了一种多特征集检测算法。该算法利用频差增强特征选择算法进行特征筛选，形成两个不同的特征集，建立两个不同的训练集来训练不同的分类算法。通过两种分类算法获得的预测结果基于一定的规则被整合。在VirusShare数据集上的实验结果表明，两种算法都是有效的。实际环境中的检测结果也证明了多特征集检测算法的有效性。",
        "title_zh": "基于特征选择的android恶意软件敌对样本生成和检测方法",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/iet-ifs/iet-ifs15.html",
        "conf_title": "IET Information Security, Volume 15",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1049/iet-ifs.2018.5316",
        "title": "Analysis of dynamic code updating in Android with security perspective",
        "authors": "Ahmet Ilhan Aysan, Fatih Sakiz, Sevil Sen",
        "abstract": "Attackers have been searching for security vulnerabilities to exploit in Android applications. Such security vulnerabilities include Android applications that could load code at runtime which helps attackers avoid detection by static analysis tools. In this study, an extensive analysis is conducted in order to see how attackers employ updating techniques to exploit such vulnerabilities and to assess the security risks of applications in the marketplace using these techniques. A comprehensive analysis was carried out on nearly 30,000 applications collected from three different Android markets and two malware datasets. Static, dynamic and permission-based analyses were employed in order to monitor malicious activities in such applications, and new malicious applications using updating techniques were discovered in Google Play. The results show that applications employing code updating techniques are on the rise. It is believed that this is the first study of its kind to monitor updating behaviours of applications during their execution. This analysis allows us to deeply analyse suspicious applications and thereby develop better security solutions.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "攻击者一直在搜索Android应用程序中的安全漏洞。此类安全漏洞包括可以在运行时加载代码的Android应用程序，这有助于攻击者避免被静态分析工具检测到。在这项研究中，进行了广泛的分析，以了解攻击者如何利用更新技术来利用这些漏洞，并评估市场上使用这些技术的应用程序的安全风险。对从三个不同的Android市场和两个恶意软件数据集收集的近30，000个应用程序进行了全面的分析。采用静态、动态和基于权限的分析来监控此类应用程序中的恶意活动，并在Google Play中发现了使用更新技术的新恶意应用程序。结果表明，采用代码更新技术的应用程序正在增加。据信，这是同类研究中首次监测应用程序执行期间的更新行为。这种分析使我们能够深入分析可疑的应用程序，从而开发更好的安全解决方案。",
        "title_zh": "安全视角下的Android动态代码更新分析",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/iet-ifs/iet-ifs13.html",
        "conf_title": "IET Information Security, Volume 13",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1049/iet-ifs.2015.0211",
        "title": "Back-propagation neural network on Markov chains from system call sequences: a new approach for detecting Android malware with system call sequences",
        "authors": "Xi Xiao, Zhenlong Wang, Qing Li, Shu-Tao Xia, Yong Jiang",
        "abstract": "Android has become the most prevalent mobile system, but in the meanwhile malware on this platform is widespread. System call sequences are studied to detect malware. However, malware detection with these approaches relies on common system-call-subsequences. It is not so efficient because it is difficult to decide the appropriate length of the common subsequences. To address this issue, the authors propose a new approach, back-propagation neural network on Markov chains from system call sequences (BMSCS). It treats one system call sequence as a homogeneous stationary Markov chain and applies back-propagation neural network (BPNN) to detect malware by comparing transition probabilities in the chain. Since transition probabilities from one system call to another in malware are significantly different from those in benign applications, BMSCS can efficiently detect malware by capturing the anomaly in state transitions with the help of BPNN. The authors evaluate the performance of BMSCS by experiments with real application samples. The experiment results show that the F \n-score of BMSCS achieves up to 0.982773, which is higher than the other methods in the literature.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android已经成为最流行的移动系统，但同时这个平台上的恶意软件也很普遍。研究系统调用序列来检测恶意软件。然而，这些方法的恶意软件检测依赖于公共的系统调用子序列。它不是很有效，因为很难决定公共子序列的适当长度。为了解决这个问题，作者提出了一种新的方法，基于系统调用序列的马尔可夫链的反向传播神经网络。它将一个系统调用序列视为齐次平稳马尔可夫链，并应用反向传播神经网络(BPNN)通过比较链中的转移概率来检测恶意软件。由于恶意软件中从一个系统调用到另一个系统调用的转移概率与良性应用程序中的转移概率显著不同，BMSCS可以通过在BPNN的帮助下捕获状态转移中的异常来有效地检测恶意软件。作者通过实际应用样本的实验来评估BMSCS的性能。实验结果表明，F\nBMSCS的得分高达0.982773，高于文献中的其他方法。",
        "title_zh": "基于系统调用序列马尔可夫链的反向传播神经网络:一种利用系统调用序列检测Android恶意软件的新方法",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/iet-ifs/iet-ifs11.html",
        "conf_title": "IET Information Security, Volume 11",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1049/iet-ifs.2017.0460",
        "title": "Anomaly-based exploratory analysis and detection of exploits in android mediaserver",
        "authors": "Guillermo Suarez-Tangil, Santanu Kumar Dash, Pedro García-Teodoro, José Camacho, Lorenzo Cavallaro",
        "abstract": "Smartphone platforms are becoming increasingly complex, which gives way to software vulnerabilities difficult to identify and that might allow malware developers to gain unauthorised privileges through technical exploitation. However, the authors maintain that these types of attacks indirectly renders a number of unexpected behaviours in the system that can be profiled. In this work, the authors present CoME\n, an anomaly-based methodology aiming at detecting software exploitation in Android systems. CoME\n models the normal behaviour of a given software component or service and it is capable of identifying any unanticipated behaviour. To this end, they first monitor the normal operation of a given exploitable component through lightweight virtual introspection. Then, they use a multivariate analysis approach to estimate the normality model and detect anomalies. They evaluate their system against one of the most critical vulnerable and widely exploited services in Android, i.e. the mediaserver. Results show that the proposed approach can not only provide a meaningful explanatory of discriminant features for illegitimate activities, but can also be used to accurately detect malicious software exploitations at runtime.",
        "files": {
            "openAccessPdf": "https://kclpure.kcl.ac.uk/portal/files/96769406/2018iet_exploits.pdf"
        },
        "abstract_zh": "智能手机平台正变得越来越复杂，这使得软件漏洞难以识别，并可能允许恶意软件开发者通过技术开发获得未经授权的权限。然而，作者认为，这些类型的攻击会间接导致系统中出现许多可以分析的意外行为。在这部作品中，在场的作者来了\n，一种基于异常的方法，旨在检测Android系统中的软件利用。来\n模拟给定软件组件或服务的正常行为，它能够识别任何意外行为。为此，他们首先通过轻量级虚拟自省来监控给定可利用组件的正常操作。然后，他们使用多元分析方法来估计正态模型并检测异常。他们根据Android中最关键的易受攻击和被广泛利用的服务之一(即mediaserver)来评估他们的系统。结果表明，该方法不仅能为非法活动提供有意义的判别特征解释，而且能在运行时准确检测恶意软件利用。",
        "title_zh": "基于异常的android mediaserver漏洞探索性分析与检测",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/iet-ifs/iet-ifs12.html",
        "conf_title": "IET Information Security, Volume 12",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1049/iet-ifs.2014.0099",
        "title": "High accuracy android malware detection using ensemble learning",
        "authors": "Suleiman Y. Yerima, Sakir Sezer, Igor Muttik",
        "abstract": "With over 50 billion downloads and more than 1.3 million apps in Google's official market, Android has continued to gain popularity among smartphone users worldwide. At the same time there has been a rise in malware targeting the platform, with more recent strains employing highly sophisticated detection avoidance techniques. As traditional signature-based methods become less potent in detecting unknown malware, alternatives are needed for timely zero-day discovery. Thus, this study proposes an approach that utilises ensemble learning for Android malware detection. It combines advantages of static analysis with the efficiency and performance of ensemble machine learning to improve Android malware detection accuracy. The machine learning models are built using a large repository of malware samples and benign apps from a leading antivirus vendor. Experimental results and analysis presented shows that the proposed method which uses a large feature space to leverage the power of ensemble learning is capable of 97.3-99% detection accuracy with very low false positive rates.",
        "files": {
            "openAccessPdf": "https://pureadmin.qub.ac.uk/ws/files/16644110/CSIT3IETIFS2015.pdf"
        },
        "abstract_zh": "随着谷歌官方市场超过500亿次下载和超过130万个应用程序，Android在全球智能手机用户中继续受到欢迎。与此同时，针对该平台的恶意软件有所增加，最近的菌株采用了高度复杂的检测规避技术。随着传统的基于签名的方法在检测未知恶意软件方面变得不那么有效，需要替代方法来及时实现零日发现。因此，这项研究提出了一种利用集成学习进行Android恶意软件检测的方法。它结合了静态分析的优势和集成机器学习的效率和性能，以提高Android恶意软件检测的准确性。机器学习模型是使用领先的反病毒供应商的恶意软件样本和良性应用程序的大型存储库构建的。给出的实验结果和分析表明，所提出的方法使用大的特征空间来利用集成学习的能力，能够以非常低的假阳性率获得97.3-99%的检测准确度。",
        "title_zh": "基于集成学习的高精度android恶意软件检测",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/iet-ifs/iet-ifs9.html",
        "conf_title": "IET Information Security, Volume 9",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2022.102622",
        "title": "EfficientNet convolutional neural networks-based Android malware detection",
        "authors": "Pooja Yadav, Neeraj Menon, Vinayakumar Ravi, Sowmya Viswanathan, Tuan D. Pham",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "基于EfficientNet卷积神经网络的Android恶意软件检测",
        "abstract_zh": "",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec115.html",
        "conf_title": "Computers & Security, Volume 115",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2022.102670",
        "title": "Robust deep learning early alarm prediction model based on the behavioural smell for android malware",
        "authors": "Eslam Amer, Shaker H. Ali El-Sappagh",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "基于android恶意软件行为气味的鲁棒深度学习预警预测模型",
        "abstract_zh": "",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec116.html",
        "conf_title": "Computers & Security, Volume 116",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2022.102729",
        "title": "SBTDDL: A novel framework for sensor-based threats detection on Android smartphones using deep learning",
        "authors": "S. Manimaran, V. N. Sastry, N. P. Gopalan",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "SBTDDL:基于深度学习的Android智能手机传感器威胁检测新框架",
        "abstract_zh": "",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec118.html",
        "conf_title": "Computers & Security, Volume 118",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2022.102757",
        "title": "Concept drift and cross-device behavior: Challenges and implications for effective android malware detection",
        "authors": "Alejandro Guerra-Manzanares, Marcin Luckner, Hayretdin Bahsi",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "概念漂移和跨设备行为:有效android恶意软件检测的挑战和启示",
        "abstract_zh": "",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec120.html",
        "conf_title": "Computers & Security, Volume 120",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2022.102825",
        "title": "Android malware detection as a Bi-level problem",
        "authors": "Manel Jerbi, Zaineb Chelly Dagdia, Slim Bechikh, Lamjed Ben Said",
        "abstract": "",
        "files": {
            "openAccessPdf": "https://hal.uvsq.fr/hal-03715292/file/BMD__Final.pdf"
        },
        "title_zh": "Android恶意软件检测是一个双重问题",
        "abstract_zh": "",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec121.html",
        "conf_title": "Computers & Security, Volume 121",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2022.102833",
        "title": "An in-depth review of machine learning based Android malware detection",
        "authors": "Ali Muzaffar, Hani Ragab Hassen, Michael A. Lones, Hind Zantout",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "基于机器学习的Android恶意软件检测研究综述",
        "abstract_zh": "",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec121.html",
        "conf_title": "Computers & Security, Volume 121",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2021.102513",
        "title": "S3Feature: A static sensitive subgraph-based feature for android malware detection",
        "authors": "Fan Ou, Jian Xu",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "S3Feature:基于静态敏感子图的android恶意软件检测功能",
        "abstract_zh": "",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec112.html",
        "conf_title": "Computers & Security, Volume 112",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2021.102514",
        "title": "FCSCNN: Feature centralized Siamese CNN-based android malware identification",
        "authors": "Ke Kong, Zhichao Zhang, Ziyuan Yang, Zhaoxin Zhang",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "FCSCNN:功能集中暹罗CNN为基础的android恶意软件识别",
        "abstract_zh": "",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec112.html",
        "conf_title": "Computers & Security, Volume 112",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2022.102835",
        "title": "On the relativity of time: Implications and challenges of data drift on long-term effective android malware detection",
        "authors": "Alejandro Guerra-Manzanares, Hayretdin Bahsi",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "时间的相对性:数据漂移对长期有效的android恶意软件检测的影响和挑战",
        "abstract_zh": "",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec122.html",
        "conf_title": "Computers & Security, Volume 122",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2022.102915",
        "title": "An Android Malware Detection and Classification Approach Based on Contrastive Lerning",
        "authors": "Shaojie Yang, Yongjun Wang, Haoran Xu, Fangliang Xu, Mantun Chen",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "基于对比学习的Android恶意软件检测和分类方法",
        "abstract_zh": "",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec123.html",
        "conf_title": "Computers & Security, Volume 123",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2021.102264",
        "title": "GDroid: Android malware detection and classification with graph convolutional network",
        "authors": "Han Gao, Shaoyin Cheng, Weiming Zhang",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "GDroid:基于图卷积网络的Android恶意软件检测和分类",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec106.html",
        "conf_title": "Computers & Security, Volume 106",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2021.102181",
        "title": "You Shall not Repackage! Demystifying Anti-Repackaging on Android",
        "authors": "Alessio Merlo, Antonio Ruggia, Luigi Sciolla, Luca Verderame",
        "abstract": "",
        "files": {
            "openAccessPdf": "https://iris.unige.it/bitstream/11567/1046379/1/1-s2.0-S0167404821000055-main.pdf"
        },
        "abstract_zh": "",
        "title_zh": "你不能重新打包！揭开安卓反重新打包的神秘面纱",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec103.html",
        "conf_title": "Computers & Security, Volume 103",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2020.102161",
        "title": "An efficient approach for taint analysis of android applications",
        "authors": "Jie Zhang, Cong Tian, Zhenhua Duan",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "一种有效的android应用污点分析方法",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec104.html",
        "conf_title": "Computers & Security, Volume 104",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2021.102386",
        "title": "Android malware detection via an app similarity graph",
        "authors": "Tatiana Frenklach, Dvir Cohen, Asaf Shabtai, Rami Puzis",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "通过应用相似度图检测Android恶意软件",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec109.html",
        "conf_title": "Computers & Security, Volume 109",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2021.102395",
        "title": "Vulnerabilities in Android webview objects: Still not the end!",
        "authors": "Mohamed A. El-Zawawy, Eleonora Losiouk, Mauro Conti",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "Android webview对象中的漏洞:仍未结束！",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec109.html",
        "conf_title": "Computers & Security, Volume 109",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2021.102228",
        "title": "Dropping malware through sound injection: A comparative analysis on Android operating systems",
        "authors": "George Stergiopoulos, Dimitris Gritzalis, Efstratios Vasilellis, Argiro Anagnostopoulou",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "通过声音注入消除恶意软件:Android操作系统的比较分析",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec105.html",
        "conf_title": "Computers & Security, Volume 105",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2021.102399",
        "title": "KronoDroid: Time-based Hybrid-featured Dataset for Effective Android Malware Detection and Characterization",
        "authors": "Alejandro Guerra-Manzanares, Hayretdin Bahsi, Sven Nõmm",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "KronoDroid:基于时间的混合特征数据集，用于有效的Android恶意软件检测和特征描述",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec110.html",
        "conf_title": "Computers & Security, Volume 110",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2021.102468",
        "title": "On Android's activity hijacking prevention",
        "authors": "Christos Lyvas, Costas Lambrinoudakis, Dimitris Geneiatakis",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "论Android的活动劫持防范",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec111.html",
        "conf_title": "Computers & Security, Volume 111",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2020.102086",
        "title": "JOWMDroid: Android malware detection based on feature weighting with joint optimization of weight-mapping and classifier parameters",
        "authors": "Lingru Cai, Yao Li, Zhi Xiong",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "JOWMDroid:基于特征加权和权重映射及分类器参数联合优化的Android恶意软件检测",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec100.html",
        "conf_title": "Computers & Security, Volume 100",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2020.102087",
        "title": "Android security assessment: A review, taxonomy and research gap study",
        "authors": "Shivi Garg, Niyati Baliyan",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "Android安全评估:综述、分类和研究差距研究",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec100.html",
        "conf_title": "Computers & Security, Volume 100",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2020.101932",
        "title": "Scalable and robust unsupervised Android malware fingerprinting using community-based network partitioning",
        "authors": "ElMouatez Billah Karbab, Mourad Debbabi, Abdelouahid Derhab, Djedjiga Mouheb",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "使用基于社区的网络划分的可扩展且健壮的无监督Android恶意软件指纹识别",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec96.html",
        "conf_title": "Computers & Security, Volume 96",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2020.101965",
        "title": "Scalable and robust unsupervised android malware fingerprinting using community-based network partitioning",
        "authors": "ElMouatez Billah Karbab, Mourad Debbabi, Abdelouahid Derhab, Djedjiga Mouheb",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "使用基于社区的网络划分的可扩展且健壮的无监督android恶意软件指纹识别",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec97.html",
        "conf_title": "Computers & Security, Volume 97",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2019.101650",
        "title": "The Android Forensics Automator (AnForA): A tool for the Automated Forensic Analysis of Android Applications",
        "authors": "Cosimo Anglano, Massimo Canonico, Marco Guazzone",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "Android Forensics Automator(an fora):一个自动分析Android应用程序的工具",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec88.html",
        "conf_title": "Computers & Security, Volume 88",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2019.101663",
        "title": "DL-Droid: Deep learning based android malware detection using real devices",
        "authors": "Mohammed K. Alzaylaee, Suleiman Y. Yerima, Sakir Sezer",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "DL-Droid:使用真实设备基于深度学习的android恶意软件检测",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec89.html",
        "conf_title": "Computers & Security, Volume 89",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2020.102011",
        "title": "Detecting personally identifiable information transmission in android applications using light-weight static analysis",
        "authors": "Nattanon Wongwiwatchai, Phannawhat Pongkham, Kunwadee Sripanidkulchai",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "使用轻量级静态分析检测android应用程序中的个人身份信息传输",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec99.html",
        "conf_title": "Computers & Security, Volume 99",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2019.101688",
        "title": "EspyDroid+: Precise reflection analysis of android apps",
        "authors": "Jyoti Gajrani, Umang Agarwal, Vijay Laxmi, Bruhadeshwar Bezawada, Manoj Singh Gaur, Meenakshi Tripathi, Akka Zemmari",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "EspyDroid+:Android应用的精确反射分析",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec90.html",
        "conf_title": "Computers & Security, Volume 90",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2020.101743",
        "title": "On the use of artificial malicious patterns for android malware detection",
        "authors": "Manel Jerbi, Zaineb Chelly Dagdia, Slim Bechikh, Lamjed Ben Said",
        "abstract": "",
        "files": {
            "openAccessPdf": "http://manuscript.elsevier.com/S0167404818309994/pdf/S0167404818309994.pdf"
        },
        "abstract_zh": "",
        "title_zh": "人工恶意模式在android恶意软件检测中的应用",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec92.html",
        "conf_title": "Computers & Security, Volume 92",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2020.101791",
        "title": "PHRiMA: A permission-based hybrid risk management framework for android apps",
        "authors": "Xinwen Hu, Yi Zhuang",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "PHRiMA:基于权限的android应用混合风险管理框架",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec94.html",
        "conf_title": "Computers & Security, Volume 94",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2020.101821",
        "title": "Compile-time code virtualization for android applications",
        "authors": "Yujie Zhao, Zhanyong Tang, Guixin Ye, Dongxu Peng, Dingyi Fang, Xiaojiang Chen, Zheng Wang",
        "abstract": "",
        "files": {
            "openAccessPdf": "https://eprints.whiterose.ac.uk/160627/7/Dex2VM.pdf"
        },
        "abstract_zh": "",
        "title_zh": "android应用的编译时代码虚拟化",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec94.html",
        "conf_title": "Computers & Security, Volume 94",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2020.101833",
        "title": "What's really 'Happning'? A forensic analysis of Android and iOS Happn dating apps",
        "authors": "Shawn Knox, Steven Moghadam, Kenny Patrick, Anh Phan, Kim-Kwang Raymond Choo",
        "abstract": "",
        "files": {
            "openAccessPdf": "https://europepmc.org/articles/pmc7252105?pdf=render"
        },
        "abstract_zh": "",
        "title_zh": "真正的“发生”是什么？Android和iOS Happn约会应用的取证分析",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec94.html",
        "conf_title": "Computers & Security, Volume 94",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2022.103090",
        "title": "A permission-carrying security policy and static enforcement for information flows in Android programs",
        "authors": "Xiaojian Liu, Kehong Liu",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "Android程序信息流的许可携带安全策略和静态实施",
        "abstract_zh": "",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec126.html",
        "conf_title": "Computers & Security, Volume 126",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2023.103126",
        "title": "DroidRL: Feature selection for android malware detection with reinforcement learning",
        "authors": "Yinwei Wu, Meijin Li, Qi Zeng, Tao Yang, Junfeng Wang, Zhiyang Fang, Luyu Cheng",
        "abstract": "",
        "files": {
            "openAccessPdf": "https://arxiv.org/pdf/2203.02719"
        },
        "title_zh": "DroidRL:基于强化学习的android恶意软件检测特征选择",
        "abstract_zh": "",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec128.html",
        "conf_title": "Computers & Security, Volume 128",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2023.103186",
        "title": "Android static taint analysis based on multi branch search association",
        "authors": "Chenghua Tang, Zheng Du, Mengmeng Yang, Baohua Qiang",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "基于多分支搜索关联的Android静态污点分析",
        "abstract_zh": "",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec129.html",
        "conf_title": "Computers & Security, Volume 129",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2023.103262",
        "title": "Automated GDPR compliance assessment for cross-border personal data transfers in android applications",
        "authors": "Danny S. Guamán, David Rodríguez Torrado, José M. del Álamo, Jose M. Such",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "android应用中跨境个人数据传输的自动化GDPR合规性评估",
        "abstract_zh": "",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec130.html",
        "conf_title": "Computers & Security, Volume 130",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2023.103277",
        "title": "A system call-based android malware detection approach with homogeneous & heterogeneous ensemble machine learning",
        "authors": "Parnika Bhat, Sunny Behal, Kamlesh Dutta",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "基于系统调用的同构/异构集成机器学习的android恶意软件检测方法",
        "abstract_zh": "",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec130.html",
        "conf_title": "Computers & Security, Volume 130",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2023.103282",
        "title": "Using multi-audio feature fusion for android malware detection",
        "authors": "Paul Tarwireyi, Alfredo Terzoli, Matthew O. Adigun",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "基于多音频特征融合的android恶意软件检测",
        "abstract_zh": "",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec131.html",
        "conf_title": "Computers & Security, Volume 131",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2023.103311",
        "title": "Assessing the security of inter-app communications in android through reinforcement learning",
        "authors": "Andrea Romdhana, Alessio Merlo, Mariano Ceccato, Paolo Tonella",
        "abstract": "",
        "files": {
            "openAccessPdf": "https://www.techrxiv.org/articles/preprint/Assessing_the_Security_of_Inter-App_Communications_in_Android_through_Reinforcement_Learning/21310770/1/files/37812864.pdf"
        },
        "title_zh": "通过强化学习评估android应用程序间通信的安全性",
        "abstract_zh": "",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec131.html",
        "conf_title": "Computers & Security, Volume 131",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2023.103359",
        "title": "GenDroid: A query-efficient black-box android adversarial attack framework",
        "authors": "Guangquan Xu, Hongfei Shao, Jingyi Cui, Hongpeng Bai, Jiliang Li, Guangdong Bai, Shaoying Liu, Weizhi Meng, Xi Zheng",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "GenDroid:一个高效查询的android对抗攻击黑盒框架",
        "abstract_zh": "",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec132.html",
        "conf_title": "Computers & Security, Volume 132",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2022.102996",
        "title": "Towards a fair comparison and realistic evaluation framework of android malware detectors based on static analysis and machine learning",
        "authors": "Borja Molina-Coronado, Usue Mori, Alexander Mendiburu, José Miguel-Alonso",
        "abstract": "",
        "files": {
            "openAccessPdf": "https://arxiv.org/pdf/2205.12569"
        },
        "title_zh": "基于静态分析和机器学习的android恶意软件检测器公平比较和现实评估框架",
        "abstract_zh": "",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec124.html",
        "conf_title": "Computers & Security, Volume 124",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2022.102998",
        "title": "Corrigendum to Concept drift and cross-device behavior: Challenges and implications for effective android malware detection Computers & Security, Volume 120, 102757",
        "authors": "Alejandro Guerra-Manzanares, Marcin Luckner, Hayretdin Bahsi",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "概念漂移和跨设备行为勘误表:有效的android恶意软件检测的挑战和影响计算机与安全，第120卷，102757",
        "abstract_zh": "",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec124.html",
        "conf_title": "Computers & Security, Volume 124",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2019.101573",
        "title": "Android Fragmentation in Malware Detection",
        "authors": "Long Nguyen-Vu, Jinung Ahn, Souhwan Jung",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "恶意软件检测中的Android碎片",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec87.html",
        "conf_title": "Computers & Security, Volume 87",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2018.10.001",
        "title": "A scalable and extensible framework for android malware detection and family attribution",
        "authors": "Li Zhang, Vrizlynn L. L. Thing, Yao Cheng",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "一个可扩展的android恶意软件检测和家族归属框架",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec80.html",
        "conf_title": "Computers & Security, Volume 80",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2018.07.024",
        "title": "Securing android applications via edge assistant third-party library detection",
        "authors": "Zhushou Tang, Minhui Xue, Guozhu Meng, Chengguo Ying, Yugeng Liu, Jianan He, Haojin Zhu, Yang Liu",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "通过edge assistant第三方库检测保护android应用",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec80.html",
        "conf_title": "Computers & Security, Volume 80",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2018.12.010",
        "title": "(In)Secure Android Debugging: Security analysis and lessons learned",
        "authors": "Krzysztof Opasiak, Wojciech Mazurczyk",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "安全Android调试:安全分析和经验教训",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec82.html",
        "conf_title": "Computers & Security, Volume 82",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2019.04.004",
        "title": "CENDroid - A cluster-ensemble classifier for detecting malicious Android applications",
        "authors": "Shikha Badhani, Sunil Kumar Muttoo",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "cen droid——一个用于检测恶意Android应用程序的聚类集成分类器",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec85.html",
        "conf_title": "Computers & Security, Volume 85",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2019.06.004",
        "title": "On the effectiveness of system API-related information for Android ransomware detection",
        "authors": "Michele Scalas, Davide Maiorca, Francesco Mercaldo, Corrado Aaron Visaggio, Fabio Martinelli, Giorgio Giacinto",
        "abstract": "",
        "files": {
            "openAccessPdf": "http://arxiv.org/pdf/1805.09563"
        },
        "abstract_zh": "",
        "title_zh": "系统API相关信息对Android勒索软件检测的有效性研究",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec86.html",
        "conf_title": "Computers & Security, Volume 86",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2017.09.006",
        "title": "TinyVisor: An extensible secure framework on android platforms",
        "authors": "Dong Shen, Zhoujun Li, Xiaojing Su, Jinxin Ma, Robert Huijie Deng",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "tiny visor:Android平台上的可扩展安全框架",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec72.html",
        "conf_title": "Computers & Security, Volume 72",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2017.10.004",
        "title": "The performance cost of software obfuscation for Android applications",
        "authors": "Yan Zhuang",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "Android应用软件混淆的性能成本",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec73.html",
        "conf_title": "Computers & Security, Volume 73",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2017.11.006",
        "title": "Toward a more dependable hybrid analysis of android malware using aspect-oriented programming",
        "authors": "Aisha I. Ali-Gombe, Brendan Saltaformaggio, J. Ramanujam, Dongyan Xu, Golden G. Richard III",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "使用面向方面编程实现更加可靠的android恶意软件混合分析",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec73.html",
        "conf_title": "Computers & Security, Volume 73",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2018.02.003",
        "title": "A security framework for mHealth apps on Android platform",
        "authors": "Muzammil Hussain, Ahmed Al-Haiqi, A. A. Zaidan, B. B. Zaidan, Miss Laiha Mat Kiah, Salman Iqbal, Shaukat Iqbal, Mohamed Abdulnabi",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "Android平台上移动健康应用的安全框架",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec75.html",
        "conf_title": "Computers & Security, Volume 75",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2018.02.019",
        "title": "A survey of Android exploits in the wild",
        "authors": "Huasong Meng, Vrizlynn L. L. Thing, Yao Cheng, Zhongmin Dai, Li Zhang",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "Android在野外的应用调查",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec76.html",
        "conf_title": "Computers & Security, Volume 76",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2018.05.007",
        "title": "Dypermin: Dynamic permission mining framework for android platform",
        "authors": "Christos Lyvas, Costas Lambrinoudakis, Dimitris Geneiatakis",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "dypermin:Android平台的动态权限挖掘框架",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec77.html",
        "conf_title": "Computers & Security, Volume 77",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2018.07.005",
        "title": "CDroid: practically implementation a formal-analyzed CIFC model on Android",
        "authors": "Zezhi Wu, Xingyuan Chen, Xuehui Du, Zhi Yang",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "CDroid:在Android上实际实现一个形式化分析的CIFC模型",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec78.html",
        "conf_title": "Computers & Security, Volume 78",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2018.07.013",
        "title": "Leveraging ontologies and machine-learning techniques for malware analysis into Android permissions ecosystems",
        "authors": "Luiz C. Navarro, Alexandre K. W. Navarro, André Grégio, Anderson Rocha, Ricardo Dahab",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "利用本体和机器学习技术对Android权限生态系统进行恶意软件分析",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec78.html",
        "conf_title": "Computers & Security, Volume 78",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2016.11.006",
        "title": "Android resource usage risk assessment using hidden Markov model and online learning",
        "authors": "Bahman Rashidi, Carol J. Fung, Elisa Bertino",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "基于隐马尔可夫模型和在线学习的Android资源使用风险评估",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec65.html",
        "conf_title": "Computers & Security, Volume 65",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2016.11.007",
        "title": "AndroDialysis: Analysis of Android Intent Effectiveness in Malware Detection",
        "authors": "Ali Feizollah, Nor Badrul Anuar, Rosli Salleh, Guillermo Suarez-Tangil, Steven Furnell",
        "abstract": "",
        "files": {
            "openAccessPdf": "https://nottingham-repository.worktribe.com/preview/4902526/AndroDialysis--_Analysis_of_Android_Intent_Effectiveness_in_Malware_Detection.pdf"
        },
        "abstract_zh": "",
        "title_zh": "Android透析:Android意图在恶意软件检测中的有效性分析",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec65.html",
        "conf_title": "Computers & Security, Volume 65",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2016.11.011",
        "title": "DroidNative: Automating and optimizing detection of Android native code malware variants",
        "authors": "Shahid Alam, Zhengyang Qu, Ryan D. Riley, Yan Chen, Vaibhav Rastogi",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "机器人:自动化和优化检测机器人本地代码恶意软件变种",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec65.html",
        "conf_title": "Computers & Security, Volume 65",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2017.03.011",
        "title": "PIndroid: A novel Android malware detection system using ensemble learning methods",
        "authors": "Fauzia Idrees, Muttukrishnan Rajarajan, Mauro Conti, Thomas M. Chen, Yogachandran Rahulamathavan",
        "abstract": "",
        "files": {
            "openAccessPdf": "https://openaccess.city.ac.uk/id/eprint/17316/1/Computersecurity.pdf"
        },
        "abstract_zh": "",
        "title_zh": "PIndroid:一种采用集成学习方法的新型Android恶意软件检测系统",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec68.html",
        "conf_title": "Computers & Security, Volume 68",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2017.04.002",
        "title": "RoppDroid: Robust permission re-delegation prevention in Android inter-component communication",
        "authors": "Ting Dai, Xiaolei Li, Behnaz Hassanshahi, Roland H. C. Yap, Zhenkai Liang",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "ropp droid:Android组件间通信中健壮的权限再委托预防",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec68.html",
        "conf_title": "Computers & Security, Volume 68",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2017.06.001",
        "title": "DroidInjector: A process injection-based dynamic tracking system for runtime behaviors of Android applications",
        "authors": "Wenhao Fan, Yaohui Sang, Daishuai Zhang, Ran Sun, Yuan'an Liu",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "DroidInjector:基于进程注入的Android应用运行时行为动态跟踪系统",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec70.html",
        "conf_title": "Computers & Security, Volume 70",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2017.07.002",
        "title": "Android inter-app communication threats and detection techniques",
        "authors": "Shweta Bhandari, Wafa Ben Jaballah, Vineeta Jain, Vijay Laxmi, Akka Zemmari, Manoj Singh Gaur, Mohamed Mosbah, Mauro Conti",
        "abstract": "",
        "files": {
            "openAccessPdf": "http://arxiv.org/pdf/1611.10076"
        },
        "abstract_zh": "",
        "title_zh": "Android应用间通信威胁及检测技术",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec70.html",
        "conf_title": "Computers & Security, Volume 70",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2017.07.011",
        "title": "Breaking into the vault: Privacy, security and forensic analysis of Android vault applications",
        "authors": "Xiaolu Zhang, Ibrahim M. Baggili, Frank Breitinger",
        "abstract": "",
        "files": {
            "openAccessPdf": "https://digitalcommons.newhaven.edu/cgi/viewcontent.cgi?article=1074&context=electricalcomputerengineering-facpubs"
        },
        "abstract_zh": "",
        "title_zh": "闯入保险库:Android保险库应用程序的隐私、安全和取证分析",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec70.html",
        "conf_title": "Computers & Security, Volume 70",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2017.07.013",
        "title": "A pragmatic android malware detection procedure",
        "authors": "Paolo Palumbo, Luiza Sayfullina, Dmitriy Komashinskiy, Emil Eirola, Juha Karhunen",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "一个实用的android恶意软件检测程序",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec70.html",
        "conf_title": "Computers & Security, Volume 70",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2016.01.008",
        "title": "Dexteroid: Detecting malicious behaviors in Android apps using reverse-engineered life cycle models",
        "authors": "Mohsin Junaid, Donggang Liu, David Chenho Kung",
        "abstract": "",
        "files": {
            "openAccessPdf": "http://arxiv.org/pdf/1506.05217"
        },
        "abstract_zh": "",
        "title_zh": "Dexteroid:使用逆向工程生命周期模型检测Android应用程序中的恶意行为",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec59.html",
        "conf_title": "Computers & Security, Volume 59",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2016.04.009",
        "title": "An HMM and structural entropy based detector for Android malware: An empirical study",
        "authors": "Gerardo Canfora, Francesco Mercaldo, Corrado Aaron Visaggio",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "基于HMM和结构熵的Android恶意软件检测器的实证研究",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec61.html",
        "conf_title": "Computers & Security, Volume 61",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2016.05.003",
        "title": "Control flow obfuscation for Android applications",
        "authors": "Vivek Balachandran, Sufatrio, Darell J. J. Tan, Vrizlynn L. L. Thing",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "Android应用程序的控制流混淆",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec61.html",
        "conf_title": "Computers & Security, Volume 61",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2016.07.005",
        "title": "A privacy enforcing framework for Android applications",
        "authors": "Ricardo Neisse, Gary Steri, Dimitris Geneiatakis, Igor Nai Fovino",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "Android应用的隐私保护框架",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec62.html",
        "conf_title": "Computers & Security, Volume 62",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2014.10.005",
        "title": "A Permission verification approach for android mobile applications",
        "authors": "Dimitris Geneiatakis, Igor Nai Fovino, Ioannis Kounelis, Pasquale Stirparo",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "一种android移动应用的权限验证方法",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec49.html",
        "conf_title": "Computers & Security, Volume 49",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2014.11.001",
        "title": "Profiling user-trigger dependence for Android malware detection",
        "authors": "Karim O. Elish, Xiaokui Shu, Danfeng (Daphne) Yao, Barbara G. Ryder, Xuxian Jiang",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "面向Android恶意软件检测的用户触发相关性分析",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec49.html",
        "conf_title": "Computers & Security, Volume 49",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2015.02.007",
        "title": "Stealth attacks: An extended insight into the obfuscation effects on Android malware",
        "authors": "Davide Maiorca, Davide Ariu, Igino Corona, Marco Aresu, Giorgio Giacinto",
        "abstract": "",
        "files": {
            "openAccessPdf": "https://iris.unica.it/bitstream/11584/107948/6/CoSeAntivirus_final.pdf"
        },
        "abstract_zh": "",
        "title_zh": "隐形攻击:对Android恶意软件混淆效果的扩展洞察",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec51.html",
        "conf_title": "Computers & Security, Volume 51",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2015.04.004",
        "title": "Styx: Privacy risk communication for the Android smartphone platform based on apps' data-access behavior patterns",
        "authors": "Gökhan Bal, Kai Rannenberg, Jason I. Hong",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "Styx:基于应用程序数据访问行为模式的Android智能手机平台隐私风险沟通",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec53.html",
        "conf_title": "Computers & Security, Volume 53",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2015.05.001",
        "title": "A game of Droid and Mouse: The threat of split-personality malware on Android",
        "authors": "Dominik Christian Maier, Mykola Protsenko, Tilo Müller",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "机器人和鼠标的游戏:Android上人格分裂恶意软件的威胁",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec54.html",
        "conf_title": "Computers & Security, Volume 54",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.cose.2014.10.016",
        "title": "Exfiltrating data from Android devices",
        "authors": "Quang Do, Ben Martini, Kim-Kwang Raymond Choo",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "从Android设备中过滤数据",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/compsec/compsec48.html",
        "conf_title": "Computers & Security, Volume 48",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-031-16815-4_27",
        "title": "Instrumentation Blueprints: Towards Combining Several Android Instrumentation Tools",
        "authors": "Arthur van der Staaij, Olga Gadyatskaya",
        "abstract": "",
        "files": {
            "openAccessPdf": "https://scholarlypublications.universiteitleiden.nl/access/item%3A3503901/view"
        },
        "abstract_zh": "",
        "title_zh": "仪器蓝图:结合几个Android仪器工具",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acns/acns2022w.html",
        "conf_title": "20th ACNS 2022: Rome, Italy - Workshops",
        "conf_url": "https://doi.org/10.1007/978-3-031-16815-4",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-031-16815-4_31",
        "title": "Android Malware Detection Using BERT",
        "authors": "Badr Souani, Ahmed Khanfir, Alexandre Bartel, Kevin Allix, Yves Le Traon",
        "abstract": "",
        "files": {
            "openAccessPdf": "https://orbilu.uni.lu/bitstream/10993/52627/1/BERT_Manifest_Article.pdf"
        },
        "abstract_zh": "",
        "title_zh": "使用BERT检测Android恶意软件",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acns/acns2022w.html",
        "conf_title": "20th ACNS 2022: Rome, Italy - Workshops",
        "conf_url": "https://doi.org/10.1007/978-3-031-16815-4",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-030-61638-0_26",
        "title": "DaVinci: Android App Analysis Beyond Frida via Dynamic System Call Instrumentation",
        "authors": "Alexander Druffel, Kris Heid",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "达芬奇:通过动态系统调用工具超越Frida的Android应用程序分析",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acns/acns2020w.html",
        "conf_title": "18th ACNS 2020: Rome, Italy - Workshops",
        "conf_url": "https://doi.org/10.1007/978-3-030-61638-0",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-030-61638-0_29",
        "title": "On the Evolution of Security Issues in Android App Versions",
        "authors": "Anatoli Kalysch, Joschua Schilling, Tilo Müller",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "Android应用版本中安全问题的演变",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acns/acns2020w.html",
        "conf_title": "18th ACNS 2020: Rome, Italy - Workshops",
        "conf_url": "https://doi.org/10.1007/978-3-030-61638-0",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-39555-5_11",
        "title": "Why Software DoS Is Hard to Fix: Denying Access in Embedded Android Platforms",
        "authors": "Ryan Johnson, Mohamed Elsabagh, Angelos Stavrou",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "为什么软件DoS很难修复:拒绝嵌入式Android平台的访问",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acns/acns2016.html",
        "conf_title": "14th ACNS 2016: Guildford, UK",
        "conf_url": "https://doi.org/10.1007/978-3-319-39555-5",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-031-33491-7_26",
        "title": "An Empirical Analysis of Security and Privacy Risks in Android Cryptocurrency Wallet Apps",
        "authors": "I Wayan Budi Sentana, Muhammad Ikram, Mohamed Ali Kâafar",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "Android加密货币钱包应用的安全和隐私风险实证分析",
        "abstract_zh": "",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acns/acns2023.html",
        "conf_title": "21st ACNS 2023: Kyoto, Japan - Part II",
        "conf_url": "https://doi.org/10.1007/978-3-031-33491-7",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/woot20/presentation/busch",
        "title": "Unearthing the TrustedCore: A Critical Review on Huawei's Trusted Execution Environment",
        "authors": "Marcel Busch, Johannes Westphal, Tilo Müller",
        "abstract": "Trusted Execution Environments (TEEs) are an essential building block in the security architecture of modern mobile devices. In this paper, we review a TEE implementation, called TrustedCore (TC), that has been used on Huawei phones for several years. We unveil multiple severe design and implementation flaws in the software stack of this TEE, which affect devices including the popular Huawei P9 Lite, released in 2016, and partially the more recent Huawei P20 Lite, released in 2018. First, we reverse-engineer TC’s components, their interconnections, and their integration with the Android system, focusing on security aspects. Second, we examine the Trusted Application (TA) loader of the TC platform and reveal multiple design flaws. These flaws allow us to decrypt any TA found on our target devices and, thus, break code confidentiality. Third, we describe the design of Huawei’s keystore system, the heart of all services using hardware-backed cryptography. We found severe vulnerabilities in this keystore system and demonstrate the leakage of export-protected keys from the TEE, which considerably weakens full-disk encryption. Fourth, along with these findings, we additionally discovered an exploitable memory corruption within Huawei’s keymaster TA, enabling us to execute arbitrary code within the ARM TrustZone at the highest privilege level. The exploit requires us to bypass several mitigation techniques such as stack canaries and Address Space Layout Randomization (ASLR), which are all flawed in this TEE’s design. We reported our findings to Huawei in a responsible disclosure procedure and publicly discuss our analyses for the first time in this paper.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "可信执行环境(tee)是现代移动设备安全架构中的重要组成部分。在本文中，我们回顾了一个名为TrustedCore (TC)的TEE实现，它已经在华为手机上使用了几年。我们揭示了这款t恤软件堆栈中的多个严重设计和实现缺陷，这些缺陷影响了包括2016年发布的广受欢迎的华为P9 Lite在内的设备，以及2018年发布的部分更新的华为P20 Lite。首先，我们对TC的组件、它们的互连以及它们与Android系统的集成进行逆向工程，重点关注安全方面。其次，我们检查了TC平台的可信应用程序(TA)加载器，并揭示了多个设计缺陷。这些缺陷允许我们解密在目标设备上发现的任何TA，从而破坏代码的机密性。第三，我们描述了华为密钥库系统的设计，它是所有使用硬件支持的加密技术的服务的核心。我们在这个密钥库系统中发现了严重的漏洞，并证明了受导出保护的密钥从TEE中泄漏，这大大削弱了全磁盘加密。第四，除了这些发现，我们还在华为的keymaster TA中发现了一个可利用的内存损坏，使我们能够在ARM TrustZone中以最高权限级别执行任意代码。该漏洞需要我们绕过几种缓解技术，如堆栈加那利和地址空间布局随机化(ASLR)，这些技术在该TEE的设计中都有缺陷。我们以负责任的披露程序向华为报告了我们的发现，并在本文中首次公开讨论了我们的分析。",
        "title_zh": "挖掘可信核心:对华为可信执行环境的评论",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/woot/woot2020.html",
        "conf_title": "14th WOOT @ USENIX Security Symposium 2020",
        "conf_url": "https://www.usenix.org/conference/woot20",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/woot20/presentation/klee",
        "title": "NFCGate: Opening the Door for NFC Security Research with a Smartphone-Based Toolkit",
        "authors": "Steffen Klee, Alexandros Roussos, Max Maass, Matthias Hollick",
        "abstract": "Near-Field Communication (NFC) is being used in a variety of security-critical applications, from access control to payment systems. However, NFC protocol analysis typically requires expensive or conspicuous dedicated hardware, or is severely limited on smartphones. In 2015, the NFCGate proof of concept aimed at solving this issue by providing capabilities for NFC analysis employing off-the-shelf Android smartphones. \nIn this paper, we present an extended and improved NFC toolkit based on the functionally limited original open-source codebase. With in-flight traffic analysis and modification, relay, and replay features this toolkit turns an off-the-shelf smartphone into a powerful NFC research tool. To support the development of countermeasures against relay attacks, we investigate the latency incurred by NFCGate in different configurations. \nOur newly implemented features and improvements enable the case study of an award-winning, enterprise-level NFC lock from a well-known European lock vendor, which would otherwise require dedicated hardware. The analysis of the lock reveals several security issues, which were disclosed to the vendor.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "从门禁控制到支付系统，近场通信(NFC)正被用于各种安全关键应用中。然而，NFC协议分析通常需要昂贵或显眼的专用硬件，或者在智能手机上受到严重限制。2015年，NFCGate概念验证旨在通过使用现成的Android智能手机提供NFC分析功能来解决这一问题。\n在本文中，我们提出了一个基于功能有限的原始开源代码库的扩展和改进的NFC工具包。凭借飞行中的流量分析和修改、中继和回放功能，该工具包将现成的智能手机变成了一个强大的NFC研究工具。为了支持针对中继攻击的对策的开发，我们研究了NFCGate在不同配置中引起的延迟。\n我们新实施的功能和改进实现了来自欧洲知名锁供应商的获奖企业级NFC锁的案例研究，否则将需要专用硬件。对锁的分析揭示了几个安全问题，这些问题已向供应商披露。",
        "title_zh": "NFCGate:用基于智能手机的工具包打开NFC安全研究的大门",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/woot/woot2020.html",
        "conf_title": "14th WOOT @ USENIX Security Symposium 2020",
        "conf_url": "https://www.usenix.org/conference/woot20",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/woot20/presentation/wu",
        "title": "BLESA: Spoofing Attacks against Reconnections in Bluetooth Low Energy",
        "authors": "Jianliang Wu, Yuhong Nan, Vireshwar Kumar, Dave (Jing) Tian, Antonio Bianchi, Mathias Payer, Dongyan Xu",
        "abstract": "The Bluetooth Low Energy (BLE) protocol ubiquitously enables energy-efficient wireless communication among resource-constrained devices. To ease its adoption, BLE requires limited or no user interaction to establish a connection between two devices. Unfortunately, this simplicity is the root cause of several security issues. In this paper, we analyze the security of the BLE link-layer, focusing on the scenario in which two previously-connected devices reconnect. Based on a formal analysis of the reconnection procedure defined by the BLE specification, we highlight two critical security weaknesses in the specification. As a result, even a device implementing the BLE protocol correctly may be vulnerable to spoofing attacks. To demonstrate these design weaknesses, and further study their security implications, we develop BLE Spoofing Attacks (BLESA). These attacks enable an attacker to impersonate a BLE device and to provide spoofed data to another previouslypaired device. BLESA can be easily carried out against some implementations of the BLE protocol, such as the one used in Linux. Additionally, for the BLE stack implementations used by Android and iOS, we found a logic bug enabling BLESA. We reported this security issue to the affected parties (Google and Apple), and they acknowledged our findings.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "蓝牙低能耗(BLE)协议无处不在地支持资源受限设备间的节能无线通信。为了便于采用，BLE需要有限的用户交互或者不需要用户交互来在两个设备之间建立连接。不幸的是，这种简单性是几个安全问题的根源。在本文中，我们分析了BLE链路层的安全性，重点是两个先前连接的设备重新连接的情况。基于对BLE规范定义的重连过程的正式分析，我们强调了规范中的两个关键安全弱点。因此，即使正确实现了BLE协议的设备也可能容易受到欺骗攻击。为了展示这些设计弱点，并进一步研究它们的安全含义，我们开发了BLE欺骗攻击(BLESA)。这些攻击使攻击者能够冒充ble设备，并向另一台先前配对的设备提供欺骗数据。BLESA可以很容易地针对BLE协议的一些实现来执行，例如Linux中使用的实现。此外，对于Android和iOS使用的BLE堆栈实现，我们发现了一个启用BLESA的逻辑错误。我们向受影响的各方(谷歌和苹果)报告了这个安全问题，他们承认了我们的发现。",
        "title_zh": "BLESA:针对蓝牙低能量重连的欺骗攻击",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/woot/woot2020.html",
        "conf_title": "14th WOOT @ USENIX Security Symposium 2020",
        "conf_url": "https://www.usenix.org/conference/woot20",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/soups2020/presentation/samuel",
        "title": "Knock, Knock. Who's There? On the Security of LG's Knock Codes",
        "authors": "Raina Samuel, Philipp Markert, Adam J. Aviv, Iulian Neamtiu",
        "abstract": "Knock Codes are a knowledge-based unlock authentication scheme used on LG smartphones where a user enters a code by tapping or \"knocking\" a sequence on a 2x2 grid. While a lesser used authentication method, as compared to PINs or Android patterns, there is likely a large number of Knock Code users; we estimate, 700,000--2,500,000 in the US alone. In this paper, we studied Knock Codes security asking participants to select codes on mobile devices in three settings: a control treatment, a blocklist treatment, and a treatment with a larger, 2x3 grid. We find that Knock Codes are significantly weaker than other deployed authentication, e.g., PINs or Android patterns. In a simulated attacker setting, 2x3 grids offered no additional security, but blocklisting was more beneficial, making Knock Codes' security similar to Android patterns. Participants expressed positive perceptions of Knock Codes, but usability was challenged. SUS values were \"marginal\" or \"ok\" across treatments. Based on these findings, we recommend deploying blacklists for selecting a Knock Code because it improves security but has limited impact on usability perceptions.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Knock Codes是LG智能手机上使用的一种基于知识的解锁认证方案，用户通过点击或“敲击”2x2网格上的序列来输入代码。虽然与pin或Android模式相比，这是一种较少使用的身份验证方法，但可能有大量的敲门码用户；我们估计，仅在美国就有70万到250万人。在本文中，我们研究了Knock Codes安全性，要求参与者在三种设置下在移动设备上选择代码:控制处理、阻止列表处理和具有更大的2×3网格的处理。我们发现，敲门代码明显弱于其他部署的认证，例如pin或Android模式。在模拟攻击者设置中，2x3网格没有提供额外的安全性，但阻止列表更有益，使敲门代码的安全性类似于Android模式。参与者表达了对Knock代码的积极看法，但可用性受到了挑战。在所有治疗中，SUS值为“边缘”或“正常”。基于这些发现，我们建议部署黑名单来选择敲门代码，因为它提高了安全性，但对可用性感知的影响有限。",
        "title_zh": "敲门敲门。谁在那里？关于LG的敲码的安全性",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/soups/soups2020.html",
        "conf_title": "16th SOUPS @ USENIX Security Symposium 2020",
        "conf_url": "https://www.usenix.org/conference/soups2020",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity20/presentation/ruge",
        "title": "Frankenstein: Advanced Wireless Fuzzing to Exploit New Bluetooth Escalation Targets",
        "authors": "Jan Ruge, Jiska Classen, Francesco Gringoli, Matthias Hollick",
        "abstract": "Wireless communication standards and implementations have a troubled history regarding security. Since most implementations and firmwares are closed-source, fuzzing remains one of the main methods to uncover Remote Code Execution (RCE) vulnerabilities in deployed systems. Generic over-the-air fuzzing suffers from several shortcomings, such as constrained speed, limited repeatability, and restricted ability to debug. In this paper, we present Frankenstein, a fuzzing framework based on advanced firmware emulation, which addresses these shortcomings. Frankenstein brings firmware dumps \"back to life\", and provides fuzzed input to the chip's virtual modem. The speed-up of our new fuzzing method is sufficient to maintain interoperability with the attached operating system, hence triggering realistic full-stack behavior. We demonstrate the potential of Frankenstein by finding three zero-click vulnerabilities in the Broadcom and Cypress Bluetooth stack, which is used in most Apple devices, many Samsung smartphones, the Raspberry Pis, and many others. \nGiven RCE on a Bluetooth chip, attackers may escalate their privileges beyond the chip's boundary. We uncover a Wi-Fi/Bluetooth coexistence issue that crashes multiple operating system kernels and a design flaw in the Bluetooth 5.2 specification that allows link key extraction from the host. Turning off Bluetooth will not fully disable the chip, making it hard to defend against RCE attacks. Moreover, when testing our chip-based vulnerabilities on those devices, we find BlueFrag, a chip-independent Android RCE.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "无线通信标准和实现在安全性方面有着麻烦的历史。由于大多数实现和固件都是闭源的，模糊化仍然是发现已部署系统中远程代码执行(rce)漏洞的主要方法之一。一般的空中模糊化有几个缺点，例如速度受限、可重复性有限和调试能力受限。在本文中，我们介绍了Frankenstein，一个基于高级固件仿真的模糊框架，它解决了这些缺点。弗兰肯斯坦使固件转储“起死回生”，并向芯片的虚拟调制解调器提供模糊输入。我们的新fuzzing方法的加速足以维持与附加操作系统的互操作性，从而触发真实的全栈行为。我们通过在Broadcom和Cypress蓝牙堆栈中发现三个零点击漏洞来展示Frankenstein的潜力，该堆栈用于大多数苹果设备、许多三星智能手机、Raspberry Pis和许多其他设备。\n鉴于蓝牙芯片上的RCE，攻击者可能会将其权限提升到芯片边界之外。我们发现了一个导致多个操作系统内核崩溃的Wi-Fi/蓝牙共存问题，以及蓝牙5.2规范中允许从主机提取链接密钥的设计缺陷。关闭蓝牙不会完全禁用芯片，这使得它很难抵御RCE攻击。此外，当在这些设备上测试我们基于芯片的漏洞时，我们发现了BlueFrag，一种独立于芯片的Android RCE。",
        "title_zh": "弗兰肯斯坦:先进的无线模糊技术开发新的蓝牙升级目标",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2020.html",
        "conf_title": "29th USENIX Security Symposium 2020",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity20",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity20/presentation/zhang-yue",
        "title": "Breaking Secure Pairing of Bluetooth Low Energy Using Downgrade Attacks",
        "authors": "Yue Zhang, Jian Weng, Rajib Dey, Yier Jin, Zhiqiang Lin, Xinwen Fu",
        "abstract": "To defeat security threats such as man-in-the-middle (MITM) attacks, Bluetooth Low Energy (BLE) 4.2 and 5.x introduced a Secure Connections Only (SCO) mode, under which a BLE device can only accept secure pairing such as Passkey Entry and Numeric Comparison from an initiator, e.g., an Android mobile. However, the BLE specification does not require the SCO mode for the initiator, and does not specify how the BLE programming framework should implement this mode. In this paper we show that the BLE programming framework of the initiator must properly handle SCO initiation, status management, error handling, and bond management; otherwise severe flaws can be exploited to perform downgrade attacks, forcing the BLE pairing protocols to run in an insecure mode without user’s awareness. To validate our findings, we have tested 18 popular BLE commercial products with 5 Android phones. Our experimental results proved that MITM attacks (caused by downgrading) are possible to all these products. More importantly, due to such system flaws from the BLE programming framework, all BLE apps in Android are subject to our downgrade attacks. To defend against our attacks, we have built a prototype for the SCO mode on Android 8 atop Android Open Source Project (AOSP). Finally, in addition to Android, we also find all major OSes including iOS, macOS, Windows, and Linux do not support the SCO mode properly. We have reported the identified BLE pairing vulnerabilities to Bluetooth Special Interest Group, Google, Apple, Texas Instruments, and Microsoft.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "为了战胜诸如中间人(MITM)攻击之类的安全威胁，蓝牙低能量(BLE) 4.2和5.x引入了仅安全连接(SCO)模式，在该模式下，BLE设备只能接受来自发起者(例如，Android手机)的安全配对，诸如密钥输入和数字比较。然而，BLE规范并不要求发起方采用SCO模式，也没有规定BLE编程框架应该如何实现这种模式。在本文中，我们表明发起方的BLE编程框架必须正确处理SCO发起、状态管理、错误处理和绑定管理；否则，可以利用严重的缺陷来执行降级攻击，迫使BLE配对协议在用户不知情的情况下以不安全的模式运行。为了验证我们的发现，我们用5部Android手机测试了18款受欢迎的BLE商业产品。我们的实验结果证明，MITM攻击(由降级引起)对所有这些产品都是可能的。更重要的是，由于BLE编程框架的这种系统缺陷，Android中的所有BLE应用都受到我们的降级攻击。为了抵御我们的攻击，我们在Android开源项目(AOSP)的Android 8上构建了SCO模式的原型。最后，除了Android，我们还发现包括iOS、macOS、Windows和Linux在内的所有主流操作系统都不支持SCO模式。我们已经向蓝牙特别兴趣小组、谷歌、苹果、德州仪器和微软报告了识别出的BLE配对漏洞。",
        "title_zh": "使用降级攻击破坏蓝牙低能量的安全配对",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2020.html",
        "conf_title": "29th USENIX Security Symposium 2020",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity20",
        "keywords": [
            "AOSP",
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity20/presentation/hernandez",
        "title": "BigMAC: Fine-Grained Policy Analysis of Android Firmware",
        "authors": "Grant Hernandez, Dave (Jing) Tian, Anurag Swarnim Yadav, Byron J. Williams, Kevin R. B. Butler",
        "abstract": "The Android operating system is the world’s dominant mobile computing platform. To defend against malicious applications and external attack, Android relies upon a complex combination of discretionary and mandatory access control mechanisms, including Linux capabilities, to maintain least privilege. To understand the impact and interaction between these layers, we created a framework called BIGMAC that combines and instantiates all layers of the policy together in a fine grained graph supporting millions of edges. Our model filters out paths and types not in use on actual systems that policy analysis alone would consider. Unlike previous work which requires a rooted device, using only static firmware and Android domain knowledge, we are able to extract and recreate the security state of a running system, achieving a process credential recovery at best 74.7% and a filesystem DAC and MAC accuracy of over 98%. Using BIGMAC, we develop attack queries to discover sets of objects that can be influenced by untrusted applications and external peripherals. Our evaluation against Samsung S8+ and LG G7 firmwares reveals multiple policy concerns, including untrusted apps on LG being able to communicate with a kernel monitoring service, Samsung S8+ allowing IPC from untrusted apps to some root processes, at least 24 processes with the CAP_SYS_ADMIN capability, and system_server with the capability to load kernel modules. We have reported our findings to the corresponding vendors and release BIGMAC for the community.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android操作系统是世界上占主导地位的移动计算平台。为了抵御恶意应用程序和外部攻击，Android依赖于自主和强制访问控制机制的复杂组合，包括Linux功能，以维持最低特权。为了理解这些层之间的影响和交互，我们创建了一个名为BIGMAC的框架，该框架在一个支持数百万条边的细粒度图中组合并实例化了策略的所有层。我们的模型过滤掉了在实际系统中没有使用的路径和类型，只有策略分析会考虑它们。与之前需要根设备的工作不同，仅使用静态固件和Android领域知识，我们能够提取和重建运行系统的安全状态，实现进程凭证恢复率最高为74.7%，文件系统DAC和MAC准确率超过98%。使用BIGMAC，我们开发攻击查询来发现可能受不受信任的应用程序和外围设备影响的对象集。我们对Samsung S8+和LG G7固件的评估揭示了多种策略问题，包括LG上不受信任的应用程序能够与内核监控服务进行通信，Samsung S8+允许不受信任的应用程序对一些根进程进行IPC，至少24个进程具有CAP_SYS_ADMIN功能，system_server具有加载内核模块的功能。我们已经向相应的供应商报告了我们的发现，并为社区发布了BIGMAC。",
        "title_zh": "big MAC:Android固件的细粒度策略分析",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2020.html",
        "conf_title": "29th USENIX Security Symposium 2020",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity20",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity20/presentation/liu",
        "title": "FANS: Fuzzing Android Native System Services via Automated Interface Analysis",
        "authors": "Baozheng Liu, Chao Zhang, Guang Gong, Yishun Zeng, Haifeng Ruan, Jianwei Zhuge",
        "abstract": "Android native system services provide essential supports and fundamental functionalities for user apps. Finding vulnerabilities in them is crucial for Android security. Fuzzing is one of the most popular vulnerability discovery solutions, yet faces several challenges when applied to Android native system services. First, such services are invoked via a special interprocess communication (IPC) mechanism, namely binder, via service-specific interfaces. Thus, the fuzzer has to recognize all interfaces and generate interface-specific test cases automatically. Second, effective test cases should satisfy the interface model of each interface. Third, the test cases should also satisfy the semantic requirements, including variable dependencies and interface dependencies. In this paper, we propose an automated generation-based fuzzing solution FANS to find vulnerabilities in Android native system services. It first collects all interfaces in target services and uncovers deep nested multi-level interfaces to test. Then, it automatically extracts interface models, including feasible transaction code, variable names and types in the transaction data, from the abstract syntax tree (AST) of target interfaces. Further, it infers variable dependencies in transactions via the variable name and type knowledge, and infers interface dependencies via the generation and use relationship. Finally, it employs the interface models and dependency knowledge to generate sequences of transactions, which have valid formats and semantics, to test interfaces of target services. We implemented a prototype of FANS from scratch and evaluated it on six smartphones equipped with a recent version of Android, i.e., android-9.0.0_r46 , and found 30 unique vulnerabilities deduplicated from thousands of crashes, of which 20 have been confirmed by Google. Surprisingly, we also discovered 138 unique Java exceptions during fuzzing. ∗Part of this work was done during Baozheng Liu’s research internship at Alpha Lab of 360.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android原生系统服务为用户应用提供必要的支持和基础功能。找到其中的漏洞对于Android安全至关重要。Fuzzing是最流行的漏洞发现解决方案之一，但在应用于Android原生系统服务时面临几个挑战。首先，这种服务是通过一种特殊的进程间通信(IPC)机制调用的，即通过特定于服务的接口调用binder。因此，fuzzer必须识别所有接口，并自动生成特定于接口的测试用例。第二，有效的测试用例应该满足每个接口的接口模型。第三，测试用例还应该满足语义需求，包括变量依赖和接口依赖。在本文中，我们提出了一种基于自动生成的fuzzing解决方案，以发现Android原生系统服务中的漏洞。它首先收集目标服务中的所有接口，并揭示深层嵌套的多级接口进行测试。然后，它从目标接口的抽象语法树(AST)中自动提取接口模型，包括可行的事务代码、变量名称和事务数据中的类型。此外，它通过变量名和类型知识来推断事务中的变量依赖，并通过生成和使用关系来推断接口依赖。最后，它使用接口模型和依赖知识来生成具有有效格式和语义的事务序列，以测试目标服务的接口。我们从零开始实现了一个FANS原型，并在六款搭载最新版本Android(即android-9.0.0_r46)的智能手机上进行评估，发现了30个从数千次崩溃中重复删除的独特漏洞，其中20个已被谷歌确认。令人惊讶的是，我们还在fuzzing期间发现了138个独特的Java异常。这项工作的一部分是在刘在360阿尔法实验室的研究实习期间完成的。",
        "title_zh": "粉丝:通过自动化界面分析模糊Android原生系统服务",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2020.html",
        "conf_title": "29th USENIX Security Symposium 2020",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity20",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity20/presentation/chen-jiayi",
        "title": "Chaperone: Real-time Locking and Loss Prevention for Smartphones",
        "authors": "Jiayi Chen, Urs Hengartner, Hassan Khan, Mohammad Mannan",
        "abstract": "Smartphone loss affects millions of users each year and causes significant monetary and data losses. Device tracking services (e.g., Google’s “Find My Device”) enable the device owner to secure or recover a lost device, but they can be easily circumvented with physical access (e.g., turn on airplane mode). An effective loss prevention solution should immediately lock the phone and alert the owner before they leave without the phone. We present such an opensource, real-time system called Chaperone that does not require additional hardware. Chaperone adopts active acoustic sensing to detect a phone’s unattended status by tracking the owner’s departure via the built-in speaker and microphone. It is designed to robustly operate in real-world scenarios characterized by bursting highfrequency noise, bustling crowds, and diverse environmental layouts. We evaluate Chaperone by conducting over 1,300 experiments at a variety of locations including coffee shops, restaurants, transit stations, and cars, under different testing conditions. Chaperone provides an overall precision rate of 93% and an overall recall rate of 96% for smartphone loss events. Chaperone detects these events in under 0.5 seconds for 95% of the successful detection cases. We conduct a user study (n = 17) to investigate participants’ smartphone loss experiences, collect feedback on using Chaperone, and study different alert methods. Most participants were satisfied with Chaperone’s performance for its detection ability, detection accuracy, and power consumption. Finally, we provide an implementation of Chaperone as a standalone Android app.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "智能手机丢失每年都会影响数百万用户，并造成重大的金钱和数据损失。设备跟踪服务(例如，谷歌的“查找我的设备”)使设备所有者能够保护或找回丢失的设备，但它们可以很容易地通过物理访问来规避(例如，打开飞行模式)。一个有效的防止丢失的解决方案应该是立即锁定电话，并在机主没有带电话离开之前提醒他们。我们提出了这样一个开源的实时系统，称为伴侣，不需要额外的硬件。伴侣采用主动声学传感技术，通过内置扬声器和麦克风跟踪主人的离开，来检测手机的无人值守状态。它被设计为在真实世界的场景中稳健地运行，这些场景的特征是突发的高频噪声、熙熙攘攘的人群和不同的环境布局。我们通过在不同的测试条件下，在不同的地点，包括咖啡店、餐馆、中转站和汽车，进行超过1，300次实验来评估伴侣。对于智能手机丢失事件，伴侣提供了93%的整体准确率和96%的整体召回率。对于95%的成功检测案例，伴侣在0.5秒内检测到这些事件。我们进行了一项用户研究(n = 17)，以调查参与者的智能手机丢失经历，收集关于使用伴侣的反馈，并研究不同的警报方法。大多数参与者对伴侣的检测能力、检测准确性和功耗的性能感到满意。最后，我们提供了一个作为独立Android应用程序的伴侣实现。",
        "title_zh": "chapterone:智能手机实时锁定和防丢失",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2020.html",
        "conf_title": "29th USENIX Security Symposium 2020",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity20",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity20/presentation/possemato",
        "title": "Towards HTTPS Everywhere on Android: We Are Not There Yet",
        "authors": "Andrea Possemato, Yanick Fratantonio",
        "abstract": "Nowadays, virtually all mobile apps rely on communicating with a network backend. Given the sensitive nature of the data exchanged between apps and their backends, securing these network communications is of growing importance. In recent years, Google has developed a number of security mechanisms for Android apps, ranging from multiple KeyStores to the recent introduction of the new Network Security Policy, an XML-based configuration file that allows apps to define their network security posture. In this paper, we perform the first comprehensive study on these new network defense mechanisms. In particular, we present them in detail,we discuss the attacks they are defending from, and the relevant threat models. We then discuss the first large-scale analysis on this aspect. During June and July 2019, we crawled125,419 applications andwe foundhowonly16,332 apps adopt this new security feature. We then focus on these apps,andweuncoverhowdevelopersadoptweakandpotentially vulnerable network security configurations. We note that, in November 2019, Google then made the default policy stricter, which would help the adoption. We thus opted to re-crawl the same dataset (from April to June 2020) and we repeated the experiments: while more apps do adopt this new security mechanism, a significant portion of them still do not take fully advantage of it (e.g., by allowing usage of insecure protocols). We then set out to explore the root cause of theseweaknesses (i.e., the why). Our analysis showed that app developers often copy-paste vulnerable policies from popular developer websites (e.g., StackOverflow). We also found that several popular ad libraries require apps to weaken their security policy, the key problem lying in the vast complexity of the ad ecosystem. As a last contribution, we propose a new extension of the Network Security Policy, so to allow app developers to embed problematic ad libraries without the need to weaken the security of their entire app.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "如今，几乎所有的移动应用都依赖于与网络后端的通信。鉴于应用程序及其后端之间交换的数据的敏感性，保护这些网络通信变得越来越重要。近年来，谷歌为Android应用程序开发了许多安全机制，从多个密钥库到最近推出的新网络安全策略，这是一个基于XML的配置文件，允许应用程序定义自己的网络安全状态。本文首次对这些新的网络防御机制进行了全面的研究。特别是，我们详细介绍了它们，讨论了它们所防御的攻击，以及相关的威胁模型。然后我们讨论这方面的第一次大规模分析。在2019年6月和7月期间，我们抓取了125，419个应用程序，我们发现只有16，332个应用程序采用了这一新的安全功能。然后，我们重点关注这些应用程序，并发现开发人员如何利用软件和潜在的易受攻击的网络安全配置。我们注意到，在2019年11月，谷歌随后使默认政策更加严格，这将有助于采用。因此，我们选择重新抓取相同的数据集(从2020年4月到6月)，并重复了实验:虽然更多的应用程序采用了这种新的安全机制，但其中很大一部分仍然没有充分利用它(例如，通过允许使用不安全的协议)。然后我们开始探索这些弱点的根源(即为什么)。我们的分析表明，应用程序开发人员经常从流行的开发人员网站(例如StackOverflow)复制粘贴易受攻击的策略。我们还发现，一些流行的广告库需要应用程序来削弱他们的安全策略，关键问题在于广告生态系统的巨大复杂性。作为最后的贡献，我们提出了网络安全政策的新扩展，以便允许应用程序开发者嵌入有问题的广告库，而无需削弱他们整个应用程序的安全性。",
        "title_zh": "Android上HTTPS无处不在:我们还没到那一步",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2020.html",
        "conf_title": "29th USENIX Security Symposium 2020",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity20",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity20/presentation/tuncay",
        "title": "See No Evil: Phishing for Permissions with False Transparency",
        "authors": "Güliz Seray Tuncay, Jingyu Qian, Carl A. Gunter",
        "abstract": "Android introduced runtime permissions in order to provide users with more contextual information to make informed decisions as well as with finer granularity when dealing with permissions. In this work, we identified that the correct operation of the runtime permission model relies on certain implicit assumptions which can conveniently be broken by adversaries to illegitimately obtain permissions from the background while impersonating foreground apps. We call this detrimental scenario false transparency attacks. These attacks constitute a serious security threat to the Android platform as they invalidate the security guarantees of 1) runtime permissions by enabling background apps to spoof the context and identity of foreground apps when requesting permissions and of 2) Android permissions altogether by allowing adversaries to exploit users’ trust in other apps to obtain permissions. We demonstrated via a user study we conducted on Amazon Mechanical Turk that mobile users’ comprehension of runtime permissions renders them susceptible to this attack vector. We carefully designed our attacks to launch strategically in order to appear persuasive and verified the validity of our design strategies through our user study. To demonstrate the feasibility of our attacks, we conducted an in-lab user study in a realistic setting and showed that none of the subjects noticed our attacks. Finally, we discuss why the existing defenses against mobile phishing fail in the context of false transparency attacks. In particular, we disclose the security vulnerabilities we identified in a key security mechanism added in Android 10. We then propose a list of countermeasures to be implemented on the Android platform and on app stores to practically tackle false transparency attacks.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android引入了运行时权限，以便为用户提供更多的上下文信息来做出明智的决策，并在处理权限时提供更精细的粒度。在这项工作中，我们发现运行时权限模型的正确操作依赖于某些隐式假设，对手可以很方便地破坏这些假设，在模拟前台应用程序时从后台非法获取权限。我们称这种有害的场景为假透明攻击。这些攻击对Android平台构成了严重的安全威胁，因为它们使1)运行时权限的安全保证无效，因为后台应用程序在请求权限时可以欺骗前台应用程序的上下文和身份；以及2) Android权限完全无效，因为它们允许对手利用用户对其他应用程序的信任来获得权限。我们通过在Amazon Mechanical Turk上进行的用户研究证明，移动用户对运行时权限的理解使他们容易受到这种攻击媒介的影响。我们精心设计了攻击策略，以使其看起来更有说服力，并通过用户研究验证了我们设计策略的有效性。为了证明我们攻击的可行性，我们在现实环境中进行了实验室用户研究，结果显示没有一个受试者注意到我们的攻击。最后，我们讨论了为什么现有的手机钓鱼防御在虚假透明攻击的背景下失败。特别是，我们披露了我们在Android 10中添加的一个关键安全机制中发现的安全漏洞。然后，我们提出了一系列在Android平台和应用程序商店上实施的对策，以切实解决虚假透明攻击。",
        "title_zh": "无恶不作:假透明权限钓鱼",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2020.html",
        "conf_title": "29th USENIX Security Symposium 2020",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity20",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity20/presentation/harrison",
        "title": "PARTEMU: Enabling Dynamic Analysis of Real-World TrustZone Software Using Emulation",
        "authors": "Lee Harrison, Hayawardh Vijayakumar, Rohan Padhye, Koushik Sen, Michael Grace",
        "abstract": "ARM’s TrustZone technology is the basis for security of billions of devices worldwide, including Android smartphones and IoT devices. Because TrustZone has access to sensitive information such as cryptographic keys, access to TrustZone has been locked down on real-world devices: only code that is authenticated by a trusted party can run in TrustZone. A side-effect is that TrustZone software cannot be instrumented or monitored. Thus, recent advances in dynamic analysis techniques such as feedback-driven fuzz testing have not been applied to TrustZone software. To address the above problem, this work builds an emulator that runs four widely-used, real-world TrustZone operating systems (TZOSes) Qualcomm’s QSEE, Trustonic’s Kinibi, Samsung’s TEEGRIS, and Linaro’s OP-TEE and the trusted applications (TAs) that run on them. The traditional challenge for this approach is that the emulation effort required is often impractical. However, we find that TZOSes depend only on a limited subset of hardware and software components. By carefully choosing a subset of components to emulate, we find we are able to make the effort practical. We implement our emulation on PARTEMU, a modular framework we develop on QEMU and PANDA. We show the utility of PARTEMU by integrating feedback-driven fuzz-testing using AFL and use it to perform a large-scale study of 194 unique TAs from 12 different Android smartphone vendors and a leading IoT vendor, finding previously unknown vulnerabilities in 48 TAs, several of which are exploitable. We identify patterns of developer mistakes unique to TrustZone development that cause some of these vulnerabilities, highlighting the need for TrustZone-specific developer education. We also demonstrate using PARTEMU to test the QSEE TZOS itself, finding crashes in code paths that would not normally be exercised on a real device. Our work shows that dynamic analysis of real-world TrustZone software through emulation is both feasible and beneficial. * These authors contributed equally to this work.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "ARM的TrustZone技术是全球数十亿设备的安全基础，包括Android智能手机和物联网设备。因为TrustZone可以访问加密密钥等敏感信息，所以在现实设备上对TrustZone的访问已经被锁定:只有经过可信方认证的代码才能在TrustZone中运行。一个副作用是TrustZone软件无法被检测或监控。因此，动态分析技术的最新进展，如反馈驱动的模糊测试，还没有应用于TrustZone软件。为了解决上述问题，这项工作构建了一个仿真器，该仿真器运行四个广泛使用的真实世界TrustZone操作系统(TZOSes)高通的QSEE、Trustonic的Kinibi、三星的TEEGRIS和Linaro的OP-TEE以及在这些操作系统上运行的可信应用程序(TAs)。这种方法的传统挑战是所需的仿真工作通常不切实际。然而，我们发现TZOSes只依赖于硬件和软件组件的有限子集。通过仔细选择要模拟的组件子集，我们发现我们能够将这一努力付诸实践。我们在PARTEMU上实现了我们的仿真，PARTEMU是我们在QEMU和PANDA上开发的模块化框架。我们通过使用AFL集成反馈驱动的模糊测试来展示PARTEMU的效用，并使用它对来自12家不同的Android智能手机供应商和一家领先的物联网供应商的194个独特的ta进行大规模研究，在48个ta中找到以前未知的漏洞，其中几个是可利用的。我们确定了TrustZone开发特有的导致这些漏洞的开发人员错误模式，强调了针对TrustZone的开发人员教育的必要性。我们还演示了如何使用PARTEMU来测试QSEE TZOS本身，在代码路径中找到通常不会在真实设备上执行的崩溃。我们的工作表明，通过仿真对真实世界的TrustZone软件进行动态分析是可行和有益的。*这些作者对这项工作做出了同等贡献。",
        "title_zh": "PARTEMU:支持使用仿真对真实世界的TrustZone软件进行动态分析",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2020.html",
        "conf_title": "29th USENIX Security Symposium 2020",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity20",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity20/presentation/dai",
        "title": "BScout: Direct Whole Patch Presence Test for Java Executables",
        "authors": "Jiarun Dai, Yuan Zhang, Zheyue Jiang, Yingtian Zhou, Junyan Chen, Xinyu Xing, Xiaohan Zhang, Xin Tan, Min Yang, Zhemin Yang",
        "abstract": "To protect end-users and software from known vulnerabilities, it is crucial to apply security patches to affected executables timely. To this end, patch presence tests are proposed with the capability of independently investigating patch application status on a target without source code. Existing work on patch presence testing adopts a signature-based approach. To make a trade-off between the uniqueness and the stability of the signature, existing work is limited to use a small and localized patch snippet (instead of the whole patch) for signature generation, so they are inherently unreliable. In light of this, we present BSCOUT, which directly checks the presence of a whole patch in Java executables without generating signatures. BSCOUT features several new techniques to bridge the semantic gap between source code and bytecode instructions during the testing, and accurately checks the fine-grained patch semantics in the whole target executable. We evaluate BScout with 194 CVEs from the Android framework and third-party libraries. The results show that it achieves remarkable accuracy with and without line number information (i.e., debug information) presented in a target executable. We further apply BSCOUT to perform a large-scale patch application practice study with 2,506 Android system images from 7 vendors. Our study reveals many findings that have not yet been reported.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "为了保护最终用户和软件免受已知漏洞的影响，及时对受影响的可执行文件应用安全补丁至关重要。为此，提出了补丁存在测试，其具有在没有源代码的情况下独立调查目标上的补丁应用状态的能力。关于补丁存在测试的现有工作采用基于签名的方法。为了在签名的唯一性和稳定性之间进行权衡，现有的工作局限于使用小的和本地化的补丁片段(而不是整个补丁)来生成签名，因此它们本质上是不可靠的。有鉴于此，我们提出BSCOUT，它直接检查Java可执行文件中整个补丁的存在，而不生成签名。BSCOUT采用了几项新技术来弥合测试期间源代码和字节码指令之间的语义鸿沟，并准确检查整个目标可执行文件中的细粒度补丁语义。我们用Android框架和第三方库中的194个CVE对BScout进行了评测。结果表明，在目标可执行文件中存在或不存在行号信息(即调试信息)的情况下，它都能获得显著的准确性。我们进一步应用BSCOUT对来自7家厂商的2，506个Android系统映像进行了大规模补丁应用实践研究。我们的研究揭示了许多尚未报道的发现。",
        "title_zh": "BScout:针对Java可执行文件的直接完整补丁存在测试",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2020.html",
        "conf_title": "29th USENIX Security Symposium 2020",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity20",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity20/presentation/mahmud",
        "title": "Cardpliance: PCI DSS Compliance of Android Applications",
        "authors": "Samin Yaseer Mahmud, Akhil Acharya, Benjamin Andow, William Enck, Bradley Reaves",
        "abstract": "Smartphones and their applications have become a predominant way of computing, and it is only natural that they have become an important part of financial transaction technology. However, applications asking users to enter credit card numbers have been largely overlooked by prior studies, which frequently report pervasive security and privacy concerns in the general mobile application ecosystem. Such applications are particularly security-sensitive, and they are subject to the Payment Card Industry Data Security Standard (PCI DSS). In this paper, we design a tool called Cardpliance, which bridges the semantics of the graphical user interface with static program analysis to capture relevant requirements from PCI DSS. We use Cardpliance to study 358 popular applications from Google Play that ask the user to enter a credit card number. Overall, we found that 1.67% of the 358 applications are not compliant with PCI DSS, with vulnerabilities including improperly storing credit card numbers and card verification codes. These findings paint a largely positive picture of the state of PCI DSS compliance of popular Android applications.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "智能手机及其应用已经成为一种主要的计算方式，它们成为金融交易技术的重要组成部分也是很自然的。然而，要求用户输入信用卡号码的应用程序在很大程度上被先前的研究忽略了，这些研究经常报告一般移动应用程序生态系统中普遍存在的安全和隐私问题。这种应用对安全性特别敏感，并且它们受支付卡行业数据安全标准(PCI DSS)的约束。在本文中，我们设计了一个名为Cardpliance的工具，它将图形用户界面的语义与静态程序分析联系起来，从PCI DSS中获取相关的需求。我们使用Cardpliance来研究Google Play中要求用户输入信用卡号的358个流行应用程序。总的来说，我们发现358个应用中有1.67%不符合PCI DSS，漏洞包括不正确存储信用卡号码和卡验证码。这些发现描绘了流行的Android应用程序的PCI DSS遵从状态的基本积极的画面。",
        "title_zh": "card pliance:Android应用程序的PCI DSS兼容性",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2020.html",
        "conf_title": "29th USENIX Security Symposium 2020",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity20",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity20/presentation/specter",
        "title": "The Ballot is Busted Before the Blockchain: A Security Analysis of Voatz, the First Internet Voting Application Used in U.S. Federal Elections",
        "authors": "Michael A. Specter, James Koppel, Daniel J. Weitzner",
        "abstract": "In the 2018 midterm elections, West Virginia became the first state in the U.S. to allow select voters to cast their ballot on a mobile phone via a proprietary app called “Voatz.” Although there is no public formal description of Voatz’s security model, the company claims that election security and integrity are maintained through the use of a permissioned blockchain, biometrics, a mixnet, and hardware-backed key storage modules on the user’s device. In this work, we present the first public security analysis of Voatz, based on a reverse engineering of their Android application and the minimal available documentation of the system. We performed a cleanroom reimplementation of Voatz’s server and present an analysis of the election process as visible from the app itself. We find that Voatz has vulnerabilities that allow different kinds of adversaries to alter, stop, or expose a user’s vote, including a sidechannel attack in which a completely passive network adversary can potentially recover a user’s secret ballot. We additionally find that Voatz has a number of privacy issues stemming from their use of third party services for crucial app functionality. Our findings serve as a concrete illustration of the common wisdom against Internet voting, and of the importance of transparency to the legitimacy of elections.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "在2018年中期选举中，西弗吉尼亚州成为美国第一个允许精选选民通过名为“Voatz”的专有应用程序在手机上投票的州。尽管Voatz的安全模型没有公开的正式描述，但该公司声称，选举的安全性和完整性是通过在用户设备上使用许可的区块链、生物识别、mixnet和硬件支持的密钥存储模块来维护的。在这项工作中，我们提出了Voatz的第一个公共安全分析，基于他们的Android应用程序的逆向工程和系统的最小可用文档。我们对Voatz的服务器进行了一次洁净室重新实施，并展示了从应用程序本身可见的选举过程分析。我们发现Voatz存在漏洞，允许不同类型的对手改变、阻止或暴露用户的投票，包括侧信道攻击，在这种攻击中，完全被动的网络对手可能会恢复用户的秘密投票。此外，我们还发现Voatz在使用第三方服务来实现关键应用功能时存在许多隐私问题。我们的发现具体说明了反对网络投票的普遍观点，以及透明度对选举合法性的重要性。",
        "title_zh": "选票在区块链之前被终结:对美国联邦选举中使用的第一个互联网投票应用Voatz的安全分析",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2020.html",
        "conf_title": "29th USENIX Security Symposium 2020",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity20",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity20/presentation/ispoglou",
        "title": "FuzzGen: Automatic Fuzzer Generation",
        "authors": "Kyriakos K. Ispoglou, Daniel Austin, Vishwath Mohan, Mathias Payer",
        "abstract": "Fuzzing is a testing technique to discover unknown vulnerabilities in software. When applying fuzzing to libraries, the core idea of supplying random input remains unchanged, yet it is non-trivial to achieve good code coverage. Libraries cannot run as standalone programs, but instead are invoked through another application. Triggering code deep in a library remains challenging as specific sequences of API calls are required to build up the necessary state. Libraries are diverse and have unique interfaces that require unique fuzzers, so far written by a human analyst. To address this issue, we present FuzzGen, a tool for automatically synthesizing fuzzers for complex libraries in a given environment. FuzzGen leverages a whole system analysis to infer the library’s interface and synthesizes fuzzers specifically for that library. FuzzGen requires no human interaction and can be applied to a wide range of libraries. Furthermore, the generated fuzzers leverage LibFuzzer to achieve better code coverage and expose bugs that reside deep in the library. FuzzGen was evaluated on Debian and the Android Open Source Project (AOSP) selecting 7 libraries to generate fuzzers. So far, we have found 17 previously unpatched vulnerabilities with 6 assigned CVEs. The generated fuzzers achieve an average of 54.94% code coverage; an improvement of 6.94% when compared to manually written fuzzers, demonstrating the effectiveness and generality of FuzzGen.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "模糊化是一种发现软件中未知漏洞的测试技术。当将fuzzing应用于库时，提供随机输入的核心思想保持不变，然而实现良好的代码覆盖率并不容易。库不能作为独立程序运行，而是通过另一个应用程序调用。触发库深处的代码仍然具有挑战性，因为需要特定的API调用序列来建立必要的状态。库是多种多样的，并且有独特的接口，需要独特的模糊器，到目前为止是由人类分析师编写的。为了解决这个问题，我们提出了FuzzGen，一个在给定环境中为复杂库自动合成fuzzers的工具。FuzzGen利用整个系统分析来推断库的接口，并专门为该库合成fuzzers。FuzzGen不需要人工交互，可以应用于广泛的库。此外，生成的Fuzzer利用LibFuzzer来实现更好的代码覆盖率，并暴露库中存在的错误。FuzzGen是在Debian和Android开源项目(AOSP)上评估的，选择了7个库来生成fuzzers。到目前为止，我们已经发现了17个以前未修补的漏洞，分配了6个CVE。生成的模糊器平均达到54.94%的代码覆盖率；与手工编写的fuzzers相比提高了6.94%，证明了FuzzGen的有效性和通用性。",
        "title_zh": "FuzzGen:自动Fuzzer生成",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2020.html",
        "conf_title": "29th USENIX Security Symposium 2020",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity20",
        "keywords": [
            "AOSP",
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity20/presentation/elsabagh",
        "title": "FIRMSCOPE: Automatic Uncovering of Privilege-Escalation Vulnerabilities in Pre-Installed Apps in Android Firmware",
        "authors": "Mohamed Elsabagh, Ryan Johnson, Angelos Stavrou, Chaoshun Zuo, Qingchuan Zhao, Zhiqiang Lin",
        "abstract": "Android devices ship with pre-installed privileged apps in their firmware — some of which are essential system components, others deliver a unique user experience — that users cannot disable. These pre-installed apps are assumed to be secure as they are handpicked or developed by the device vendors themselves rather than third parties. Unfortunately, we have identified an alarming number of Android firmware that contain privilege-escalation vulnerabilities in pre-installed apps, allowing attackers to perform unauthorized actions such as executing arbitrary commands, recording the device audio and screen, and accessing personal data to name a few. To uncover these vulnerabilities, we built FIRMSCOPE, a novel static analysis system that analyzes Android firmware to expose unwanted functionality in pre-installed apps using an efficient and practical context-sensitive, flow-sensitive, fieldsensitive, and partially object-sensitive taint analysis. Our experimental results demonstrate that FIRMSCOPE significantly outperforms the state-of-the-art Android taint analysis solutions both in terms of detection power and runtime performance. We used FIRMSCOPE to scan 331,342 pre-installed apps in 2,017 Android firmware images from v4.0 to v9.0 from more than 100 Android vendors. Among them, FIRMSCOPE uncovered 850 unique privilege-escalation vulnerabilities, many of which are exploitable and 0-day.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android设备在其固件中预装了特权应用程序，其中一些是必不可少的系统组件，另一些则提供了独特的用户体验，用户无法禁用这些应用程序。这些预装的应用程序被认为是安全的，因为它们是由设备供应商自己挑选或开发的，而不是第三方。不幸的是，我们已经发现数量惊人的Android固件在预安装的应用程序中包含权限提升漏洞，允许攻击者执行未经授权的操作，例如执行任意命令、记录设备音频和屏幕，以及访问个人数据等。为了揭示这些漏洞，我们建立了FIRMSCOPE，这是一个新颖的静态分析系统，它使用高效实用的上下文敏感、流敏感、场敏感和部分对象敏感的污点分析来分析Android固件，以暴露预装应用中不想要的功能。我们的实验结果表明，在检测能力和运行时性能方面，FIRMSCOPE明显优于最先进的Android污点分析解决方案。我们使用FIRMSCOPE扫描了100多家Android厂商从v4.0到v9.0的2017个Android固件映像中的331342个预装应用。其中，FIRMSCOPE发现了850个独特的权限提升漏洞，其中许多是可利用的和0天的。",
        "title_zh": "FIRMSCOPE:自动发现安卓固件中预装应用的权限提升漏洞",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2020.html",
        "conf_title": "29th USENIX Security Symposium 2020",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity20",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity20/presentation/xu",
        "title": "Automatic Hot Patch Generation for Android Kernels",
        "authors": "Zhengzi Xu, Yulong Zhang, Longri Zheng, Liangzhao Xia, Chenfu Bao, Zhi Wang, Yang Liu",
        "abstract": "The rapid growth of the Android ecosystem has led to the fragmentation problem where a wide range of (customized) versions of Android OS exist in the market. This poses a severe security issue as it is very costly for Android vendors to fix vulnerabilities in their customized Android kernels in time. The recent development of the hot patching technique provides an ideal solution to solve this problem since it can be applied to a wide range of Android kernels without interrupting their normal functionalities. However, the current hot patches are written by human experts, which can be timeconsuming and error-prone. To this end, we first study the feasibility of automatic patch generation from 373 Android kernel CVEs ranging from 2012 to 2016. Then, we develop an automatic hot patch generation tool, named Vulmet, which produces semantic preserving hot patches by learning from the official patches. The key idea of Vulmet is to use the weakest precondition reasoning to transform the changes made by the official patches into the hot patch constraints. The experiments have shown that Vulmet can generate correct hot patches for 55 real-world Android kernel CVEs. The hot patches do not affect the robustness of the kernels and have low performance overhead.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android生态系统的快速增长导致了碎片化问题，市场上存在大量(定制)版本的Android操作系统。这造成了严重的安全问题，因为Android供应商及时修复他们定制的Android内核中的漏洞是非常昂贵的。热补丁技术的最新发展为解决这一问题提供了一个理想的解决方案，因为它可以应用于广泛的Android内核，而不会中断它们的正常功能。然而，目前的热门补丁是由人类专家编写的，这可能非常耗时且容易出错。为此，我们首先从2012-2016年的373个Android内核CVE中研究补丁自动生成的可行性。然后，我们开发了一个名为Vulmet的热补丁自动生成工具，它通过学习官方补丁来生成语义保持的热补丁。Vulmet的核心思想是使用最弱的前提条件推理将官方补丁所做的更改转化为热补丁约束。实验表明，Vulmet可以为55个真实世界的Android内核CVE生成正确的热补丁。热补丁不会影响内核的健壮性，并且性能开销很低。",
        "title_zh": "Android内核的自动热补丁生成",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2020.html",
        "conf_title": "29th USENIX Security Symposium 2020",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity20",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity20/presentation/guo",
        "title": "SkillExplorer: Understanding the Behavior of Skills in Large Scale",
        "authors": "Zhixiu Guo, Zijin Lin, Pan Li, Kai Chen",
        "abstract": "Smart speakers have been popularly used around the world recently, mainly due to the convenience brought from the virtual personal assistant (VPA) which offers interactive actions through the convenient voice commands from users. Besides the built-in capabilities, VPA services can be further extended by third-party developers through skills. Similar to smartphone applications on Android and iOS markets, skills are also available on markets (e.g., Amazon, Google), attracting users together with malicious developers. Recent researches discover that malicious developers are able to route users’ requests to malicious skills without users’ consent by creating skills with similar names of legitimate ones. However, to the best of our knowledge, there is no prior research that systematically explores the interaction behaviors of skills, mainly due to the challenges in handling skills’ inputs/outputs which are in the form of natural languages. In this paper, we propose the first systematic study on behaviors of skills, which is achieved by a suite of new grammar-based techniques including utterance extraction, question understanding, and answer generation specifically designed for skills. We build an interactive system called SkillExplorer and analyze 28,904 skills from the Amazon market and 1,897 actions from the Google market. Among these skills, we find that 1,141 skills request users’ private information without following developer specifications, which are actually demanded by markets. 68 skills continue to eavesdrop users’ private conversations, even after users have sent the command to stop them.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "智能扬声器最近在世界各地广泛使用，主要是由于虚拟个人助理(VPA)带来的便利，它通过用户方便的语音命令提供交互式操作。除了内置功能之外，VPA服务还可以由第三方开发人员通过技能进一步扩展。与Android和iOS市场上的智能手机应用程序类似，市场上也有技能(例如，亚马逊、谷歌)，与恶意开发者一起吸引用户。最近的研究发现，恶意开发者可以通过创建与合法技能名称相似的技能，在未经用户同意的情况下将用户的请求路由到恶意技能。然而，据我们所知，目前还没有系统地探索技能交互行为的研究，这主要是由于处理自然语言形式的技能输入/输出的挑战。在本文中，我们提出了第一个关于技能行为的系统研究，这是通过一套新的基于语法的技术实现的，包括专门为技能设计的话语提取、问题理解和答案生成。我们构建了一个名为SkillExplorer的交互系统，分析了来自亚马逊市场的28，904项技能和来自谷歌市场的1，897项操作。在这些技能中，我们发现1141个技能要求用户的私人信息，而不遵循开发者的规范，这实际上是市场的需求。68技能继续窃听用户的私人对话，即使在用户已经发出命令阻止他们之后。",
        "title_zh": "SkillExplorer:大规模理解技能的行为",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2020.html",
        "conf_title": "29th USENIX Security Symposium 2020",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity20",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity21/presentation/basin",
        "title": "Card Brand Mixup Attack: Bypassing the PIN in non-Visa Cards by Using Them for Visa Transactions",
        "authors": "David A. Basin, Ralf Sasse, Jorge Toro-Pozo",
        "abstract": "Most EMV transactions require online authorization by the card issuer. Namely, the merchant’s payment terminal sends an authorization request to the card issuer over a payment network, typically operated by the company that brands the card such as Visa or Mastercard. In this paper we show that it is possible to induce a mismatch between the card brand and the payment network, from the terminal’s perspective. The resulting card brand mixup attack has serious security consequences. In particular, it enables criminals to use a victim’s Mastercard contactless card to pay for expensive goods without knowing the card’s PIN. Concretely, the attacker fools the terminal into believing that the card being used is a Visa card and then applies the recent PIN bypass attack that we reported on Visa. We have built an Android application and successfully used it to carry out this attack for transactions with both Mastercard debit and credit cards, including a transaction for over 400 USD with a Maestro debit card. Finally, we extend our formal model of the EMV contactless protocol to machine-check fixes to the issues found.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "大多数EMV交易需要发卡方的在线授权。也就是说，商家的支付终端通过支付网络向发卡方发送授权请求，该支付网络通常由品牌卡的公司如Visa或Mastercard运营。在本文中，我们表明，从终端的角度来看，有可能导致卡品牌和支付网络之间的不匹配。由此产生的卡品牌混淆攻击具有严重的安全后果。特别是，它使犯罪分子能够使用受害者的万事达卡非接触卡来支付昂贵的商品，而不知道卡的PIN。具体来说，攻击者欺骗终端，使其相信正在使用的卡是Visa卡，然后应用我们在Visa上报道的最近的PIN旁路攻击。我们已经构建了一个Android应用程序，并成功地利用它对Mastercard借记卡和信用卡的交易进行了攻击，包括一笔使用Maestro借记卡的400多美元的交易。最后，我们扩展了EMV无接触协议的形式化模型，对发现的问题进行机器检查修复。",
        "title_zh": "卡品牌混淆攻击:通过使用非Visa卡进行Visa交易来绕过PIN",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2021.html",
        "conf_title": "30th USENIX Security Symposium 2021",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity21",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity21/presentation/cronin",
        "title": "Charger-Surfing: Exploiting a Power Line Side-Channel for Smartphone Information Leakage",
        "authors": "Patrick Cronin, Xing Gao, Chengmo Yang, Haining Wang",
        "abstract": "Touchscreen-based mobile devices such as smartphones and tablets are used daily by billions of people for productivity and entertainment. This paper uncovers a new security threat posed by a side-channel leakage through the power line, called Charger-Surfing, which targets these touchscreen devices. We reveal that while a smartphone is charging, its power trace, which can be measured via the USB charging cable, leaks information about the dynamic content on its screen. This information can be utilized to determine the location on the touchscreen where an animation is played by the mobile OS to indicate, for instance, that a button press has been registered. We develop a portable, low cost power trace collection system for the side-channel construction. This leakage channel is thoroughly evaluated on various smartphones running Android or iOS, equipped with the two most commonly used screen technologies (LCD and OLED). We validate the effectiveness of Charger-Surfing by conducting a case study on a passcode unlock screen. Our experiments show that an adversary can exploit Charger-Surfing across a wide range of smartphone models to achieve an average accuracy of 98.7% for single button inference, and an average of 95.1% or 92.8% accuracy on the first attempt when cracking a victim’s 4-digit or 6-digit passcode, respectively. The inference accuracy increases to 99.3% (4-digit) or 96.9% (6-digit) within five trials. We further demonstrate the robustness of Charger-Surfing in realistic settings and discuss countermeasures against it.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "数十亿人每天都在使用智能手机和平板电脑等基于触摸屏的移动设备进行生产和娱乐。这篇论文揭示了一种新的安全威胁，这种威胁是由通过电力线的侧信道泄漏构成的，称为充电器冲浪，它针对的是这些触摸屏设备。我们发现，当智能手机充电时，可以通过USB充电电缆测量的电源轨迹会泄露屏幕上动态内容的信息。该信息可用于确定触摸屏上移动OS播放动画的位置，以指示例如按钮按压已被注册。我们开发了一种便携式、低成本的功率跟踪采集系统，用于侧通道建设。这种泄漏通道在运行Android或iOS的各种智能手机上进行了彻底的评估，这些智能手机配备了两种最常用的屏幕技术(LCD和有机发光二极管)。我们通过对密码解锁屏幕进行案例研究来验证充电器上网的有效性。我们的实验表明，对手可以利用各种智能手机型号的充电器冲浪来实现单按钮推断的平均准确率为98.7%，在首次尝试破解受害者的4位或6位密码时，平均准确率分别为95.1%和92.8%。在五次试验中，推断准确度提高到99.3% (4位数)或96.9% (6位数)。我们进一步证明了充电器冲浪在现实环境中的鲁棒性，并讨论了应对措施。",
        "title_zh": "充电器冲浪:利用电力线旁路泄露智能手机信息",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2021.html",
        "conf_title": "30th USENIX Security Symposium 2021",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity21",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity21/presentation/shen-bingyu",
        "title": "Can Systems Explain Permissions Better? Understanding Users' Misperceptions under Smartphone Runtime Permission Model",
        "authors": "Bingyu Shen, Lili Wei, Chengcheng Xiang, Yudong Wu, Mingyao Shen, Yuanyuan Zhou, Xinxin Jin",
        "abstract": "Current smartphone operating systems enable users to manage permissions according to their personal preferences with a runtime permission model. Nonetheless, the systems provide very limited information when requesting permissions, making it difficult for users to understand permissions’ capabilities and potentially induced risks. In this paper, we first investigated to what extent current system-provided information can help users understand the scope of permissions and their potential risks. We took a mixed-methods approach by collecting real permission settings from 4,636 Android users, an interview study of 20 participants, and large-scale Internet surveys of 1559 users. Our study identified several common misunderstandings on the runtime permission model among users. We found that only a very small percentage (6.1%) of users can infer the scope of permission groups accurately from the system-provided information. This indicates that the information provided by current systems is far from sufficient. We thereby explored what extra information that systems can provide to help users make more informed permission decisions. By surveying users’ common concerns on apps’ permission requests, we identified five types of information (i.e., decision factors) that are helpful for users’ decisions. We further studied the impact and helpfulness of the factors to users’ permission decisions with both positive and negative messages. Our study shows that the background access factor helps most while the grant rate helps the least. Based on the findings, we provide suggestions for system designers to enhance future systems with more permission information.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "当前的智能手机操作系统允许用户通过运行时权限模型根据个人偏好管理权限。尽管如此，系统在请求权限时提供的信息非常有限，使得用户很难理解权限的能力和潜在的诱发风险。在本文中，我们首先调查了当前系统提供的信息在多大程度上可以帮助用户理解权限范围及其潜在风险。我们采取了混合方法，从4，636名Android用户那里收集了真实的权限设置，对20名参与者进行了采访研究，并对1559名用户进行了大规模的互联网调查。我们的研究确定了用户对运行时权限模型的几种常见误解。我们发现只有极小比例(6.1%)的用户能够从系统提供的信息中准确推断出权限组的范围。这表明当前系统提供的信息远远不够。因此，我们探索了系统可以提供哪些额外的信息来帮助用户做出更明智的许可决定。通过调查用户对应用程序权限请求的共同关注，我们确定了五种有助于用户决策的信息类型(即决策因素)。我们进一步研究了正面和负面信息对用户许可决策的影响和帮助。我们的研究表明，背景准入因素帮助最大，而赠款率帮助最小。基于这些发现，我们为系统设计者提供了一些建议，以便用更多的权限信息来增强未来的系统。",
        "title_zh": "系统能更好地解释权限吗？理解智能手机运行时权限模型下的用户误解",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2021.html",
        "conf_title": "30th USENIX Security Symposium 2021",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity21",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity21/presentation/bilogrevic",
        "title": "\"Shhh...be quiet!\" Reducing the Unwanted Interruptions of Notification Permission Prompts on Chrome",
        "authors": "Igor Bilogrevic, Balazs Engedy, Judson L. Porter III, Nina Taft, Kamila Hasanbega, Andrew Paseltiner, Hwi Kyoung Lee, Edward Jung, Meggyn Watkins, P. J. McLachlan, Jason James",
        "abstract": "Push notifications can be a very useful feature. On web browsers, they allow users to receive timely updates even if the website is not currently open. On Chrome, the feature has become extremely popular since its inception in 2015, but it is also the least likely to be accepted by users. Chrome telemetry shows that, although 74% of all permission prompts are about notifications, they are also the least likely to be granted with only a 10% grant rate on desktop and 21% grant rate on Android. In order to preserve its utility for websites and to reduce unwanted interruptions and potential abuses for the users, we designed and tested both a novel UI and its activation mechanism for notification permission prompts in Chrome. To understand how users interact with such prompts, we conducted two large-scale studies with more than 300 million users in the wild. The first study showed that most of them block or ignore the prompts across all types of websites, which prompted us to rethink its UI and activation logic. The second study, based on an A/B test using behavioral data from more than 40 million users who interacted with more than 100 million prompts on more than 70 thousand websites, show that the new prompt is very effective at reducing unwanted interruptions and their frequency (up to 30% fewer unnecessary actions on the prompts), with a minimal impact (less than 5%) on the grant rates, across all types of users and websites. We achieve these results thanks to a novel adaptive activation mechanism coupled with a block list of interrupting websites, which is derived from crowd-sourced telemetry from Chrome clients.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "推送通知可能是一个非常有用的功能。在web浏览器上，即使网站当前没有打开，它们也允许用户接收及时的更新。在Chrome上，该功能自2015年问世以来变得极为流行，但也是最不容易被用户接受的。Chrome telemetry显示，尽管所有权限提示中有74%是关于通知的，但它们也是最不可能被授予的，在桌面上只有10%的授予率，在Android上只有21%的授予率。为了保持其对网站的实用性，减少不必要的中断和用户的潜在滥用，我们设计并测试了一个新的UI及其在Chrome中的通知权限提示激活机制。为了了解用户如何与这种提示进行交互，我们在野外对超过3亿用户进行了两次大规模研究。第一项研究表明，他们中的大多数人会阻止或忽略所有类型网站的提示，这促使我们重新思考它的UI和激活逻辑。第二项研究基于A/B测试，使用的行为数据来自4000多万用户，他们与7万多个网站上的1亿多个提示进行了交互，该研究表明，新的提示在减少不必要的中断及其频率方面非常有效(对提示的不必要操作减少了30%)，对所有类型的用户和网站的授权率影响最小(不到5%)。我们取得这些成果要归功于一种新颖的自适应激活机制，以及一份中断网站的阻止列表，该列表来自Chrome客户端的众包遥测。",
        "title_zh": "“嘘...安静点！”减少Chrome上通知权限提示的不必要中断",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2021.html",
        "conf_title": "30th USENIX Security Symposium 2021",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity21",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity21/presentation/cao-weicheng",
        "title": "A Large Scale Study of User Behavior, Expectations and Engagement with Android Permissions",
        "authors": "Weicheng Cao, Chunqiu Xia, Sai Teja Peddinti, David Lie, Nina Taft, Lisa M. Austin",
        "abstract": "We conduct a global study on the behaviors, expectations and engagement of 1,719 participants across 10 countries and regions towards Android application permissions. Participants were recruited using mobile advertising and used an application we designed for 30 days. Our app samples user behaviors (decisions made), rationales (via in-situ surveys), expectations, and attitudes, as well as some app provided explanations. We study the grant and deny decisions our users make, and build mixed effect logistic regression models to illustrate the many factors that influence this decision making. Among several interesting findings, we observed that users facing an unexpected permission request are more than twice as likely to deny it compared to a user who expects it, and that permission requests accompanied by an explanation have a deny rate that is roughly half the deny rate of app permission requests without explanations. These findings remain true even when controlling for other factors. To the best of our knowledge, this may be the first study of actual privacy behavior (not stated behavior) for Android apps, with users using their own devices, across multiple continents.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "我们针对10个国家和地区的1，719名参与者对Android应用程序权限的行为、期望和参与度进行了一项全球性研究。参与者通过移动广告招募，并使用我们设计的应用程序30天。我们的应用程序对用户行为(所做的决策)、理由(通过现场调查)、期望和态度进行采样，并且一些应用程序提供了解释。我们研究用户做出的同意和拒绝决策，并建立混合效应逻辑回归模型来说明影响这一决策的许多因素。在几个有趣的发现中，我们观察到，与预期的用户相比，面临意外权限请求的用户拒绝权限请求的可能性是预期用户的两倍以上，并且附有解释的权限请求的拒绝率大约是没有解释的应用程序权限请求的拒绝率的一半。即使控制了其他因素，这些发现仍然成立。据我们所知，这可能是第一次对Android应用程序的实际隐私行为(非声明行为)的研究，用户使用自己的设备，跨越多个大洲。",
        "title_zh": "一项关于Android权限的用户行为、期望和参与度的大规模研究",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2021.html",
        "conf_title": "30th USENIX Security Symposium 2021",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity21",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity21/presentation/severi",
        "title": "Explanation-Guided Backdoor Poisoning Attacks Against Malware Classifiers",
        "authors": "Giorgio Severi, Jim Meyer, Scott E. Coull, Alina Oprea",
        "abstract": "Training pipelines for machine learning (ML) based malware classification often rely on crowdsourced threat feeds, exposing a natural attack injection point. In this paper, we study the susceptibility of feature-based ML malware classifiers to backdoor poisoning attacks, specifically focusing on challenging “clean label” attacks where attackers do not control the sample labeling process. We propose the use of techniques from explainable machine learning to guide the selection of relevant features and values to create effective backdoor triggers in a model-agnostic fashion. Using multiple reference datasets for malware classification, including Windows PE files, PDFs, and Android applications, we demonstrate effective attacks against a diverse set of machine learning models and evaluate the effect of various constraints imposed on the attacker. To demonstrate the feasibility of our backdoor attacks in practice, we create a watermarking utility for Windows PE files that preserves the binary’s functionality, and we leverage similar behavior-preserving alteration methodologies for Android and PDF files. Finally, we experiment with potential defensive strategies and show the difficulties of completely defending against these attacks, especially when the attacks blend in with the legitimate sample distribution.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "基于机器学习(ML)的恶意软件分类的训练管道通常依赖于众包威胁源，从而暴露了自然的攻击注入点。在本文中，我们研究了基于特征的ML恶意软件分类器对后门中毒攻击的敏感性，特别侧重于挑战攻击者不控制样本标记过程的“干净标签”攻击。我们建议使用来自可解释的机器学习的技术来指导相关特征和值的选择，以模型不可知的方式创建有效的后门触发器。使用多个用于恶意软件分类的参考数据集，包括Windows PE文件、pdf和Android应用程序，我们展示了针对各种机器学习模型的有效攻击，并评估了对攻击者施加的各种约束的效果。为了证明我们的后门攻击在实践中的可行性，我们为Windows PE文件创建了一个水印实用程序，它保留了二进制文件的功能，并且我们为Android和PDF文件利用了类似的行为保留更改方法。最后，我们对潜在的防御策略进行了实验，并展示了完全防御这些攻击的困难，特别是当攻击与合法的样本分布混合在一起时。",
        "title_zh": "针对恶意软件分类器的解释引导后门中毒攻击",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2021.html",
        "conf_title": "30th USENIX Security Symposium 2021",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity21",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity21/presentation/yang-limin",
        "title": "CADE: Detecting and Explaining Concept Drift Samples for Security Applications",
        "authors": "Limin Yang, Wenbo Guo, Qingying Hao, Arridhana Ciptadi, Ali Ahmadzadeh, Xinyu Xing, Gang Wang",
        "abstract": "Concept drift poses a critical challenge to deploy machine learning models to solve practical security problems. Due to the dynamic behavior changes of attackers (and/or the benign counterparts), the testing data distribution is often shifting from the original training data over time, causing major failures to the deployed model. To combat concept drift, we present a novel system CADE aiming to 1) detect drifting samples that deviate from existing classes, and 2) provide explanations to reason the detected drift. Unlike traditional approaches (that require a large number of new labels to determine concept drift statistically), we aim to identify individual drifting samples as they arrive. Recognizing the challenges introduced by the high-dimensional outlier space, we propose to map the data samples into a low-dimensional space and automatically learn a distance function to measure the dissimilarity between samples. Using contrastive learning, we can take full advantage of existing labels in the training dataset to learn how to compare and contrast pairs of samples. To reason the meaning of the detected drift, we develop a distance-based explanation method. We show that explaining “distance” is much more effective than traditional methods that focus on explaining a “decision boundary” in this problem context. We evaluate CADE with two case studies: Android malware classification and network intrusion detection. We further work with a security company to test CADE on its malware database. Our results show that CADE can effectively detect drifting samples and provide semantically meaningful explanations.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "概念漂移对部署机器学习模型来解决实际安全问题提出了严峻的挑战。由于攻击者(和/或良性对手)的动态行为变化，测试数据分布通常会随着时间的推移而偏离原始训练数据，从而导致部署的模型出现重大故障。为了对抗概念漂移，我们提出了一种新的系统CADE，旨在1)检测偏离现有类别的漂移样本，以及2)提供解释以推理检测到的漂移。与传统方法(需要大量新标签来统计确定概念漂移)不同，我们的目标是在单个漂移样本到达时识别它们。认识到由高维离群值空间引入的挑战，我们提出将数据样本映射到低维空间，并自动学习距离函数来测量样本之间的不相似性。使用对比学习，我们可以充分利用训练数据集中的现有标签来学习如何比较和对比样本对。为了推理检测到的漂移的含义，我们开发了一种基于距离的解释方法。我们表明，解释“距离”比传统方法更有效，传统方法侧重于在这个问题的背景下解释“决策边界”。我们用两个案例研究来评估CADE:Android恶意软件分类和网络入侵检测。我们还与一家安全公司合作，对CADE的恶意软件数据库进行测试。我们的结果表明，CADE可以有效地检测漂移样本，并提供语义上有意义的解释。",
        "title_zh": "CADE:检测和解释安全应用的概念漂移样本",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2021.html",
        "conf_title": "30th USENIX Security Symposium 2021",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity21",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity21/presentation/talebi",
        "title": "Undo Workarounds for Kernel Bugs",
        "authors": "Seyed Mohammadjavad Seyed Talebi, Zhihao Yao, Ardalan Amiri Sani, Zhiyun Qian, Daniel Austin",
        "abstract": "OS kernels are full of bugs resulting in security, reliability, and usability issues. Several kernel fuzzers have recently been developed to find these bugs and have proven to be effective. Yet, bugs take several months to be patched once they are discovered. In this window of vulnerability, bugs continue to pose concerns. We present workarounds for kernel bugs, called bowknots, which maintain the functionality of the system even when bugs are triggered, are applicable to many kernel bugs, do not cause noticeable performance overhead, and have a small kernel footprint. The key idea behind bowknots is to undo the side effects of the in-flight syscall that triggers a bug, effectively neutralizing the syscall. We also present a static analysis tool, called Hecaton, that generates bowknots automatically and inserts them into the kernel. Through extensive evaluations on the kernel of Android devices as well as x86 upstream kernels, we demonstrate that bowknots are effective in mitigating kernel bugs and vulnerabilities. We also show that Hecaton is capable of generating the right bowknots fully automatically in majority of cases, and requires minimal help from the analyst for the rest. Finally, we demonstrate the benefits of bowknots in improving the efficiency of kernel fuzzing by eliminating repetitive reboots.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "操作系统内核充满了导致安全性、可靠性和可用性问题的错误。最近开发了几个内核模糊器来发现这些错误，并被证明是有效的。然而，漏洞一旦被发现，需要几个月的时间来修补。在这个易受攻击的窗口中，错误继续引起关注。我们提出了内核错误的解决方法，称为bowknots，它即使在错误被触发时也能保持系统的功能，适用于许多内核错误，不会引起明显的性能开销，并且具有较小的内核占用空间。bowknots背后的关键思想是消除触发bug的运行中的系统调用的副作用，有效地中和系统调用。我们还展示了一个名为Hecaton的静态分析工具，它可以自动生成蝴蝶结并将其插入内核。通过对Android设备内核以及x86上游内核的广泛评估，我们证明了bowknots在减轻内核错误和漏洞方面是有效的。我们还表明，在大多数情况下，Hecaton能够完全自动地生成正确的蝴蝶结，其余情况下只需要分析师的最小帮助。最后，我们展示了bowknots通过消除重复重启来提高内核模糊化效率的好处。",
        "title_zh": "撤销内核错误的变通办法",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2021.html",
        "conf_title": "30th USENIX Security Symposium 2021",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity21",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity21/presentation/lee-yu-tsung",
        "title": "PolyScope: Multi-Policy Access Control Analysis to Compute Authorized Attack Operations in Android Systems",
        "authors": "Yu Tsung Lee, William Enck, Haining Chen, Hayawardh Vijayakumar, Ninghui Li, Zhiyun Qian, Daimeng Wang, Giuseppe Petracca, Trent Jaeger",
        "abstract": "Android’s filesystem access control provides a foundation for system integrity. It combines mandatory (e.g., SEAndroid) and discretionary (e.g., Unix permissions) access control, protecting both the Android platform from Android/OEM services and Android/OEM services from third-party applications. However, OEMs often introduce vulnerabilities when they add market-differentiating features and fail to correctly reconfigure this complex combination of policies. In this paper, we propose the PolyScope tool to triage Android systems for vulnerabilities using their filesystem access control policies by: (1) identifying the resources that subjects are authorized to use that may be modified by their adversaries, both with and without policy manipulations, and (2) determining the attack operations on those resources that are actually available to adversaries to reveal the specific cases that need vulnerability testing. A key insight is that adversaries may exploit discretionary elements in Android access control to expand the permissions available to themselves and/or victims to launch attack operations, which we call permission expansion. We apply PolyScope to five Google and five OEM Android releases and find that permission expansion increases the privilege available to launch attacks, sometimes by more than 10x, but a significant fraction (about 15-20%) cannot be converted into attack operations due to other system configurations. Based on this analysis, we describe two previously unknown vulnerabilities and show how PolyScope helps OEMs triage the complex combination of access control policies down to attack operations worthy of testing.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android的文件系统访问控制为系统完整性提供了基础。它结合了强制(例如SEAndroid)和自由(例如Unix权限)访问控制，保护Android平台免受Android/OEM服务的攻击，并保护Android/OEM服务免受第三方应用程序的攻击。然而，原始设备制造商在添加区分市场的功能时，往往会引入漏洞，并且无法正确地重新配置这种复杂的策略组合。在本文中，我们提出了PolyScope工具，用于使用Android系统的文件系统访问控制策略来筛选Android系统的漏洞，方法是:(1)识别受试者被授权使用的、可能被其对手修改的资源，无论有无策略操作，以及(2)确定对手实际可用的那些资源上的攻击操作，以揭示需要漏洞测试的特定情况。一个关键的见解是，对手可能会利用Android访问控制中的任意元素来扩展他们自己和/或受害者可用的权限，以发起攻击操作，我们称之为权限扩展。我们将PolyScope应用于五个Google和五个OEM Android版本，发现权限扩展增加了可用于发起攻击的权限，有时超过10倍，但由于其他系统配置，很大一部分(约15-20%)无法转换为攻击操作。基于这一分析，我们描述了两个以前未知的漏洞，并展示了PolyScope如何帮助OEM筛选访问控制策略的复杂组合，以攻击值得测试的操作。",
        "title_zh": "poly scope:Android系统中计算授权攻击操作的多策略访问控制分析",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2021.html",
        "conf_title": "30th USENIX Security Symposium 2021",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity21",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity21/presentation/aafer",
        "title": "Android SmartTVs Vulnerability Discovery via Log-Guided Fuzzing",
        "authors": "Yousra Aafer, Wei You, Yi Sun, Yu Shi, Xiangyu Zhang, Heng Yin",
        "abstract": "The recent rise of Smart IoT devices has opened new doors for cyber criminals to achieve damages unique to the ecosys-tem. SmartTVs, the most widely adopted home-based IoT devices, are no exception. Albeit their popularity, little has been done to evaluate their security and associated risks. To proactively address the problem, we propose a systematic evaluation of Android SmartTVs security. We overcome a number of prominent challenges such as most of the added TV related functionalities are (partially) implemented in the native layer and many security problems only manifest themselves on the physical aspect without causing any misbehaviors inside the OS. We develop a novel dynamic fuzzing approach, which features an on-the-ﬂy log-based input speciﬁcation derivation and feedback collection. Our solution further introduces a novel external observer that monitors the TV-related physical symptoms (i.e., visual and auditory) to detect potential physical anomalies. We leverage our technique to analyze 11 Android TV Boxes. Our analysis reveals 37 unique vulnerabilities, leading to high-impact cyber threats (e.g., corrupting critical boot environment settings and accessing highly-sensitive data), memory corruptions, and even visual and auditory disturbances (e.g., persistent display content corruption and audio muting).",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "最近智能物联网设备的兴起为网络犯罪分子打开了新的大门，以实现生态系统特有的破坏。最广泛采用的家庭物联网设备智能电视也不例外。尽管它们很受欢迎，但很少有人对它们的安全性和相关风险进行评估。为了主动解决这个问题，我们建议对Android智能电视的安全性进行系统评估。我们克服了许多突出的挑战，例如大多数添加的电视相关功能(部分)在本地层实施，许多安全问题仅在物理方面表现出来，不会在操作系统内部引起任何不当行为。我们开发了一种新的动态模糊化方法，其特点是基于实时日志的输入规格推导和反馈收集。我们的解决方案还引入了一种新颖的外部观察器，它可以监控与电视相关的身体症状(即视觉和听觉症状)，以检测潜在的身体异常。我们利用我们的技术分析了11个安卓电视盒子。我们的分析揭示了37个独特的漏洞，导致高影响的网络威胁(例如，损坏关键启动环境设置和访问高度敏感的数据)、内存损坏，甚至视觉和听觉干扰(例如，持续的显示内容损坏和音频静音)。",
        "title_zh": "通过日志引导模糊化发现Android智能电视漏洞",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2021.html",
        "conf_title": "30th USENIX Security Symposium 2021",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity21",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity21/presentation/rossi",
        "title": "SEApp: Bringing Mandatory Access Control to Android Apps",
        "authors": "Matthew Rossi, Dario Facchinetti, Enrico Bacis, Marco Rosa, Stefano Paraboschi",
        "abstract": "Mandatory Access Control (MAC) has provided a great contribution to the improvement of the security of modern operating systems. A clear demonstration is represented by Android, which has progressively assigned a greater role to SELinux since its introduction in 2013. These benefits have been mostly dedicated to the protection of system components against the behavior of apps and no control is offered to app developers on the use of MAC. Our solution overcomes this limitation, giving developers the power to define ad-hoc MAC policies for their apps, supporting the internal compartmentalization of app components. This is a natural evolution of the security mechanisms already available in Android, but its realization requires to consider that (i) the security of system components must be maintained, (ii) the solution must be usable by developers, and (iii) the performance impact should be limited. Our proposal meets these three requirements. The proposal is supported by an open-source implementation.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "强制访问控制(MAC)为提高现代操作系统的安全性做出了巨大贡献。一个明显的例子是Android，自2013年推出以来，它逐渐赋予SELinux更大的角色。这些好处主要致力于保护系统组件免受应用程序行为的影响，而没有向应用程序开发者提供对MAC使用的控制。我们的解决方案克服了这一限制，使开发人员能够为他们的应用程序定义专门的MAC策略，支持应用程序组件的内部划分。这是Android中已有的安全机制的自然发展，但它的实现需要考虑(I)必须维护系统组件的安全性，(ii)解决方案必须可供开发人员使用，以及(iii)性能影响应该有限。我们的提议符合这三项要求。该提议得到了开源实现的支持。",
        "title_zh": "SEApp:为Android应用带来强制访问控制",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2021.html",
        "conf_title": "30th USENIX Security Symposium 2021",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity21",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity21/presentation/huang",
        "title": "A11y and Privacy don't have to be mutually exclusive: Constraining Accessibility Service Misuse on Android",
        "authors": "Jie Huang, Michael Backes, Sven Bugiel",
        "abstract": "Accessibility features of Android are crucial in assisting people with disabilities or impairment to navigate their devices. However, the same, powerful features are commonly misused by shady apps for malevolent purposes, such as stealing data from other apps. Unfortunately, existing defenses do not allow apps to protect themselves and at the same time to be fully inclusive to users with accessibility needs. \nTo enhance the privacy protection of the user while preserving the accessibility features for assistive apps, we introduce an extension to Android’s accessibility framework. Our design is based on a study of how accessibility features are used in 95 existing accessibility apps of different types (malware, utility, and a11y). Based on those insights, we propose to model the usage of the accessibility framework as a pipeline of code modules, which are all sandboxed on the system-side. By policing the data flows of those modules, we achieve a more fine-grained control over the access to accessibility features and the way they are used in apps, allowing a balance between accessibility functionality for dependent users and reduced privacy risks. We demonstrate the feasibility of our solution by migrating two real-world apps to our privacy-enhanced accessibility framework.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android的辅助功能对于帮助残障人士使用他们的设备至关重要。然而，同样强大的功能通常被可疑应用程序滥用于恶意目的，例如从其他应用程序窃取数据。不幸的是，现有的防御措施不允许应用程序在保护自己的同时完全包容具有可访问性需求的用户。\n为了加强用户的隐私保护，同时保留辅助应用程序的可访问性功能，我们引入了对Android可访问性框架的扩展。我们的设计基于对95个不同类型(恶意软件、实用程序和a11y)的现有辅助功能应用程序如何使用辅助功能的研究。基于这些见解，我们建议将可访问性框架的使用建模为代码模块的管道，这些模块都在系统端沙箱化。通过监管这些模块的数据流，我们可以对辅助功能的访问以及它们在应用中的使用方式进行更精细的控制，从而在依赖用户的辅助功能和降低隐私风险之间实现平衡。我们通过将两个真实世界的应用程序迁移到我们的隐私增强可访问性框架来证明我们的解决方案的可行性。",
        "title_zh": "A11y和隐私不一定是互斥的:限制Android上的可访问性服务误用",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2021.html",
        "conf_title": "30th USENIX Security Symposium 2021",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity21",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity21/presentation/zhang-zheng",
        "title": "An Investigation of the Android Kernel Patch Ecosystem",
        "authors": "Zheng Zhang, Hang Zhang, Zhiyun Qian, Billy Lau",
        "abstract": "open-source projects are often reused in commercial software. Android, a popular mobile operating system, is a great example that has fostered an ecosystem of open-source kernels. However, due to the largely decentralized and fragmented nature, patch propagation from the upstream through multiple layers to end devices can be severely delayed. In this paper, we undertake a thorough investigation of the patch propagation behaviors in the entire Android kernel ecosystem. By analyzing the CVEs and patches available since the inception of the Android security bulletin, as well as open-source upstream kernels (e.g., Linux and AOSP) and hundreds of mostly binary OEM kernels (e.g., by Samsung), we find that the delays of patches are largely due to the current patching practices and the lack of knowledge about which upstream commits being security-critical. Unfortunately, we find that the gap between the first publicly available patch and its final application on end devices is often months and even years, leaving a large attack window for experienced hackers to exploit the unpatched vulnerabilities.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "开源项目经常在商业软件中被重用。流行的移动操作系统Android是一个很好的例子，它培育了一个开源内核的生态系统。然而，由于高度分散和分散的特性，补丁从上游通过多层传播到终端设备可能会严重延迟。在本文中，我们对整个Android内核生态系统中的补丁传播行为进行了彻底的调查。通过分析自Android安全公告发布以来可用的CVE和补丁，以及开源上游内核(如Linux和AOSP)和数百个主要是二进制OEM内核(如三星)，我们发现补丁的延迟主要是由于当前的补丁实践和缺乏关于哪些上游提交是安全关键的知识。不幸的是，我们发现第一个公开可用的补丁和它在终端设备上的最终应用之间的间隔通常是几个月甚至几年，这给有经验的黑客留下了很大的攻击窗口来利用未打补丁的漏洞。",
        "title_zh": "Android内核补丁生态系统调查",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2021.html",
        "conf_title": "30th USENIX Security Symposium 2021",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity21",
        "keywords": [
            "AOSP",
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity21/presentation/nguyen",
        "title": "Share First, Ask Later (or Never?) Studying Violations of GDPR's Explicit Consent in Android Apps",
        "authors": "Trung Tin Nguyen, Michael Backes, Ninja Marnau, Ben Stock",
        "abstract": "Since the General Data Protection Regulation (GDPR) went into effect in May 2018, online services are required to obtain users’ explicit consent before sharing users’ personal data with third parties that use the data for their own purposes. While violations of this legal basis on the Web have been stud-ied in-depth, the community lacks insight into such violations in the mobile ecosystem. We perform the ﬁrst large-scale measurement on Android apps in the wild to understand the current state of the violation of GDPR’s explicit consent. Speciﬁcally, we build a semi-automated pipeline to detect data sent out to the Internet without prior consent and apply it to a set of 86,163 Android apps. Based on the domains that receive data protected under the GDPR without prior consent, we collaborate with a legal scholar to assess if these contacted domains are third-party data controllers. Doing so, we ﬁnd 24,838 apps send personal data towards data controllers without the user’s explicit prior consent. To understand the reasons behind this, we run a notiﬁcation campaign to inform affected developers and gather insights from their responses. We then conduct an in-depth analysis of violating apps as well as the corresponding third parties’ documentation and privacy policies. Based on the responses and our analysis of available documentation, we derive concrete recommendations for all involved entities in the ecosystem to allow data subjects to exercise their fundamental rights and freedoms.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "自《一般数据保护条例》(GDPR)于2018年5月生效以来，在线服务需要在与出于自身目的使用数据的第三方共享用户个人数据之前，获得用户的明确同意。虽然对网络上违反这一法律基础的行为已经进行了深入研究，但社区缺乏对移动生态系统中这种违反行为的洞察。我们在野外对Android应用进行了首次大规模测量，以了解违反GDPR明确同意的现状。具体来说，我们建立了一个半自动管道来检测未经事先同意发送到互联网的数据，并将其应用于一组86，163个Android应用程序。根据未经事先同意接收受GDPR保护的数据的域，我们与法律学者合作，评估这些联系的域是否是第三方数据控制者。通过这样做，我们发现有24，838个应用程序在未经用户明确同意的情况下向数据控制器发送个人数据。为了了解这背后的原因，我们开展了一项通知活动，通知受影响的开发人员，并从他们的回应中收集见解。然后，我们对违规应用以及相应的第三方文档和隐私政策进行深入分析。根据反馈和我们对可用文档的分析，我们为生态系统中的所有相关实体提出了具体建议，以允许数据主体行使其基本权利和自由。",
        "title_zh": "先分享，后提问(还是永远不？)研究安卓应用中违反GDPR明确同意的情况",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2021.html",
        "conf_title": "30th USENIX Security Symposium 2021",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity21",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity21/presentation/ji",
        "title": "DEFInit: An Analysis of Exposed Android Init Routines",
        "authors": "Yuede Ji, Mohamed Elsabagh, Ryan Johnson, Angelos Stavrou",
        "abstract": "During the booting process of an Android device, a special daemon called Init is launched by the kernel as the first userspace process. Android allows vendors to extend the behavior of Init by introducing custom routines in .rc files. These Init routines can also be triggered by privileged pre-installed apps in a certain manner to accomplish privileged functionalities. However, as these pre-installed apps may fail to properly protect access to code sites triggering these Init routines, the capabilities of these routines may leak to unprivileged apps, resulting in crossing security boundaries set by the system. To this end, this study aims at investigating the prevalence of these Init routines and their security impact. We present DEFINIT as a tool to help automate the process of identifying Init routines exposed by pre-installed apps and estimating their potential security impact. Our findings are alarming. We found that custom Init routines added by vendors were substantial and had significant security impact. On a data set of 259 firmware from the top 21 vendors worldwide, we identified 1,947 exposed custom Init routines in 101 firmware from 13 vendors. Of these routines, 515 performed at least one sensitive action. We verified 89 instances spanning 30 firmware from 6 vendors, allowing unprivileged apps to perform sensitive functionalities without user interaction, including disabling SELinux enforcement, sniffing network traffic, reading system logs, among others.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "在Android设备的引导过程中，内核会启动一个名为Init的特殊守护进程作为第一个用户空间进程。Android允许供应商通过在中引入自定义例程来扩展Init的行为。rc文件。这些初始化例程也可以由特权预安装应用程序以某种方式触发，以实现特权功能。但是，由于这些预安装的应用程序可能无法正确保护对触发这些Init例程的代码站点的访问，这些例程的功能可能会泄露给无权限的应用程序，从而导致越过系统设置的安全边界。为此，本研究旨在调查这些Init例程的流行程度及其安全影响。我们将DEFINIT作为一种工具来帮助自动识别预安装应用程序暴露的INIT例程，并评估它们的潜在安全影响。我们的发现令人震惊。我们发现供应商添加的自定义Init例程非常多，并且具有显著的安全影响。在来自全球前21家厂商的259个固件的数据集上，我们在来自13家厂商的101个固件中识别出1，947个暴露的定制初始化例程。在这些程序中，有515个执行了至少一个敏感动作。我们验证了来自6家供应商的30个固件的89个实例，允许非特权应用在没有用户交互的情况下执行敏感功能，包括禁用SELinux强制、嗅探网络流量、读取系统日志等。",
        "title_zh": "DEFInit:对暴露的Android Init例程的分析",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2021.html",
        "conf_title": "30th USENIX Security Symposium 2021",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity21",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity21/presentation/hu-hang",
        "title": "Assessing Browser-level Defense against IDN-based Phishing",
        "authors": "Hang Hu, Steve T. K. Jan, Yang Wang, Gang Wang",
        "abstract": "Internationalized Domain Names (IDN) allow people around the world to use their native languages for domain names. Unfortunately, because characters from different languages can look like each other, IDNs have been used to impersonate popular domains for phishing, i.e., IDN homograph. To mitigate this risk, browsers have recently introduced defense policies. However, it is not yet well understood regarding how these policies are constructed and how effective they are. In this paper, we present an empirical analysis of browser IDN policies, and a user study to understand user perception of homograph IDNs. We focus on 5 major web browsers (Chrome, Firefox, Safari, Microsoft Edge, and IE), and 2 mobile browsers (Android Chrome and iOS Safari) and analyze their current and historical versions released from January 2015 to April 2020. By treating each browser instance as a black box, we develop an automated tool to test the browser policies with over 9,000 testing cases. We find that all the tested browsers have weaknesses in their rules, leaving opportunities for attackers to craft homograph IDNs to impersonate target websites while bypassing browsers’ defense. In addition, a browser’s defense is not always getting stricter over time. For example, we observe Chrome has reversed its rules to re-allow certain homograph IDNs. Finally, our user study shows that the homograph IDNs that can bypass browsers’ defense are still highly deceptive to users. Overall, our results suggest the need to improve the current defense against IDN homograph.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "国际化域名(IDN)允许世界各地的人们使用他们的母语作为域名。不幸的是，因为来自不同语言的字符可能看起来彼此相似，所以IDN已经被用来冒充网络钓鱼的流行域名，即IDN同形异义词。为了减轻这种风险，浏览器最近引入了防御策略。然而，关于这些政策是如何制定的以及它们的有效性如何，人们还没有很好地理解。在本文中，我们对浏览器IDN政策进行了实证分析，并对用户进行了研究，以了解用户对同形异义域名的看法。我们重点关注5种主要的网络浏览器(Chrome、Firefox、Safari、Microsoft Edge和IE)和2种移动浏览器(Android Chrome和iOS Safari)，并分析它们在2015年1月至2020年4月发布的当前和历史版本。通过将每个浏览器实例视为一个黑盒，我们开发了一个自动化工具，用超过9，000个测试案例来测试浏览器策略。我们发现所有被测试的浏览器在其规则中都有弱点，这为攻击者提供了机会来伪造同形异义的IDN来冒充目标网站，同时绕过浏览器的防御。此外，随着时间的推移，浏览器的防御并不总是越来越严格。例如，我们观察到Chrome改变了规则，重新允许某些同形异义域名。最后，我们的用户研究表明，可以绕过浏览器防御的同形异义域名仍然对用户具有高度欺骗性。总的来说，我们的结果表明，需要改善目前对IDN单应性的防御。",
        "title_zh": "评估针对基于IDN的网络钓鱼的浏览器级防御",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2021.html",
        "conf_title": "30th USENIX Security Symposium 2021",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity21",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity21/presentation/wang-jice",
        "title": "Understanding Malicious Cross-library Data Harvesting on Android",
        "authors": "Jice Wang, Yue Xiao, Xueqiang Wang, Yuhong Nan, Luyi Xing, Xiaojing Liao, Jinwei Dong, Nicolás Serrano, Haoran Lu, XiaoFeng Wang, Yuqing Zhang",
        "abstract": "Recent years have witnessed the rise of security risks of libraries integrated in mobile apps, which are reported to steal private user data from the host apps and the app backend servers. Their security implications, however, have never been fully understood. In our research, we brought to light a new attack vector long been ignored yet with serious privacy impacts – malicious libraries strategically target other vendors’ SDKs integrated in the same host app to harvest private user data (e.g., Facebook’s user profile). Using a methodology that incorporates semantic analysis on an SDK’s Terms of Services (ToS, which describes restricted data access and sharing policies) and code analysis on cross-library interactions, we were able to investigate 1.3 million Google Play apps and the ToSes from 40 highly-popular SDKs, leading to the discovery of 42 distinct libraries stealthily harvesting data from 16 popular SDKs, which affect more than 19K apps with a total of 9 billion downloads. Our study further sheds light on the underground ecosystem behind such library-based data harvesting (e.g., monetary incentives for SDK integration), their unique strategies (e.g., hiding data in crash reports and using C2 server to schedule data exfiltration) and significant impacts.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "近年来，集成在移动应用程序中的图书馆的安全风险上升，据报道，这些图书馆从主机应用程序和应用程序后端服务器窃取私人用户数据。然而，它们的安全含义从未被充分理解。在我们的研究中，我们揭示了一种长期被忽视但具有严重隐私影响的新攻击载体——恶意库战略性地以集成在同一主机应用程序中的其他供应商的SDK为目标，以收集私人用户数据(例如，脸书的用户配置文件)。使用一种结合了对SDK服务条款(ToS，描述受限数据访问和共享政策)的语义分析和对跨库交互的代码分析的方法，我们能够调查130万个Google Play应用和40个高度流行的SDK的ToSes，导致发现42个不同的库偷偷从16个流行的SDK收集数据，这些SDK影响了超过19K个应用，总下载量为90亿次。我们的研究进一步揭示了这种基于库的数据收集背后的地下生态系统(例如，对SDK集成的货币激励)、其独特的策略(例如，在崩溃报告中隐藏数据和使用C2服务器来安排数据渗透)和重大影响。",
        "title_zh": "了解Android上的恶意跨库数据收集",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2021.html",
        "conf_title": "30th USENIX Security Symposium 2021",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity21",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity21/presentation/oltrogge",
        "title": "Why Eve and Mallory Still Love Android: Revisiting TLS (In)Security in Android Applications",
        "authors": "Marten Oltrogge, Nicolas Huaman, Sabrina Amft, Yasemin Acar, Michael Backes, Sascha Fahl",
        "abstract": "Android applications have a long history of being vulnerable to man-in-the-middle attacks due to insecure custom TLS certificate validation implementations. To resolve this, Google deployed the Network Security Configuration (NSC), a configuration-based approach to increase custom certificate validation logic security, and implemented safeguards in Google Play to block insecure applications. In this paper, we perform a large-scale in-depth investigation of the effectiveness of these countermeasures: First, we investigate the security of 99,212 NSC settings files in 1,335,322 Google Play apps using static code and manual analysis techniques. We find that 88.87% of the apps using custom NSC settings downgrade security compared to the default settings, and only 0.67% implement certificate pinning. Second, we penetrate Google Play’s protection mechanisms by trying to publish apps that are vulnerable to man-in-the-middle attacks. In contrast to official announcements by Google, we found that Play does not effectively block vulnerable apps. Finally, we performed a static code analysis study of 15,000 apps and find that 5,511 recently published apps still contain vulnerable certificate validation code. Overall, we attribute most of the problems we find to insufficient support for developers, missing clarification of security risks in official documentation, and inadequate security checks for vulnerable applications in Google Play.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "由于不安全的自定义TLS证书验证实现，Android应用程序很容易受到中间人攻击。为了解决这一问题，Google部署了网络安全配置(NSC)，这是一种基于配置的方法，可以提高自定义证书验证逻辑的安全性，并在Google Play中实施了安全措施来阻止不安全的应用程序。在本文中，我们对这些对策的有效性进行了大规模的深入调查:首先，我们使用静态代码和手动分析技术调查了1，335，322个Google Play应用程序中99，212个NSC设置文件的安全性。我们发现，与默认设置相比，88.87%使用自定义NSC设置的应用程序会降低安全性，只有0.67%的应用程序会实施证书锁定。第二，我们试图发布易受中间人攻击的应用，从而穿透Google Play的保护机制。与谷歌的官方声明相反，我们发现Play并不能有效阻止易受攻击的应用。最后，我们对15，000个应用进行了静态代码分析研究，发现5，511个最近发布的应用仍然包含易受攻击的证书验证代码。总的来说，我们将发现的大部分问题归结于对开发者的支持不足，官方文档中缺少对安全风险的澄清，以及Google Play中对易受攻击的应用程序的安全检查不足。",
        "title_zh": "为什么Eve和Mallory仍然热爱Android:重温Android应用程序中的TLS (In)安全性",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2021.html",
        "conf_title": "30th USENIX Security Symposium 2021",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity21",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity22/presentation/shakevsky",
        "title": "Trust Dies in Darkness: Shedding Light on Samsung's TrustZone Keymaster Design",
        "authors": "Alon Shakevsky, Eyal Ronen, Avishai Wool",
        "abstract": "ARM-based Android smartphones rely on the TrustZone hardware support for a Trusted Execution Environment (TEE) to implement security-sensitive functions. The TEE runs a separate, isolated, TrustZone Operating System (TZOS), in parallel to Android. The implementation of the cryptographic functions within the TZOS is left to the device vendors, who create proprietary undocumented designs. In this work, we expose the cryptographic design and implementation of Android’s Hardware-Backed Keystore in Samsung’s Galaxy S8, S9, S10, S20, and S21 ﬂagship devices. We reversed-engineered and provide a detailed description of the cryptographic design and code structure, and we unveil severe design ﬂaws. We present an IV reuse attack on AES-GCM that allows an attacker to extract hardware-protected key material, and a downgrade attack that makes even the latest Samsung devices vulnerable to the IV reuse attack. We demonstrate working key extraction attacks on the latest devices. We also show the implications of our attacks on two higher-level cryptographic protocols between the TrustZone and a remote server: we demonstrate a working FIDO2 WebAuthn login bypass and a compromise of Google’s Secure Key Import. We discuss multiple ﬂaws in the design ﬂow of TrustZone based protocols. Although our speciﬁc attacks only apply to the ≈ 100 million devices made by Samsung, it raises the much more general requirement for open and proven stan-dards for critical cryptographic and security designs.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "基于ARM的Android智能手机依靠TrustZone硬件支持可信执行环境(TEE)来实现安全敏感功能。TEE运行一个独立的TrustZone操作系统(TZOS ),与Android并行。TZOS中加密功能的实现留给了设备供应商，他们创建专有的未记录的设计。在这项工作中，我们展示了三星Galaxy S8、S9、S10、S20和S21旗舰设备中Android硬件支持的密钥库的加密设计和实现。我们进行了逆向工程，提供了密码设计和代码结构的详细描述，并揭示了严重的设计缺陷。我们提出了一种对AES-GCM的IV重用攻击，它允许攻击者提取受硬件保护的密钥材料，以及一种降级攻击，它甚至使最新的三星设备也容易受到IV重用攻击。我们演示了在最新设备上的工作密钥提取攻击。我们还展示了我们的攻击对TrustZone和远程服务器之间的两个高级加密协议的影响:我们展示了一个有效的FIDO2 WebAuthn登录旁路和一个对Google安全密钥导入的损害。我们在基于TrustZone的协议的设计流程中讨论了多个流程。虽然我们的特定攻击仅适用于三星制造的约1亿台设备，但它提出了对关键加密和安全设计的开放和成熟标准的更普遍要求。",
        "title_zh": "信任在黑暗中消亡:三星TrustZone Keymaster设计的启示",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2022.html",
        "conf_title": "31st USENIX Security Symposium 2022",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity22",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity22/presentation/wu-qiushi",
        "title": "OS-Aware Vulnerability Prioritization via Differential Severity Analysis",
        "authors": "Qiushi Wu, Yue Xiao, Xiaojing Liao, Kangjie Lu",
        "abstract": "The Linux kernel is quickly evolving and extensively cus-tomized. This results in thousands of versions and derivatives. Unfortunately, the Linux kernel is quite vulnerable. Each year, thousands of bugs are reported, and hundreds of them are security-related bugs. Given the limited resources, the kernel maintainers have to prioritize patching the more severe vulnerabilities. In practice, Common Vulnerability Scoring System (CVSS) [1] has become the standard for characterizing vulnerability severity. However, a fundamental problem exists when CVSS meets Linux—it is used in a “one for all” manner. The severity of a Linux vulnerability is assessed for only the mainstream Linux, and all affected versions and derivatives will simply honor and reuse the CVSS score. Such an undistinguished CVSS usage results in underestimation or overestimation of severity, which further results in delayed and ignored patching or wastes of the precious resources. In this paper, we propose OS-aware vulnerability prioritization (namely D IFF CVSS), which employs differential severity analysis for vulnerabilities. Specifically, given a severity-assessed vulnerability, as well as the mainstream version and a target version of Linux, D IFF CVSS employs multiple new techniques based on static program analysis and natural language processing to differentially identify whether the vulnerability manifests a higher or lower severity in the target version. A unique strength of this approach is that it transforms the challenging and laborious CVSS calculation into automatable differential analysis. We implement D IFF CVSS and apply it to the mainstream Linux and downstream Android systems. The evaluation and user-study results show that D IFF CVSS is able to precisely perform the differential severity analysis, and offers a precise and effective way to identify vulnerabilities that deserve a severity reevaluation.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Linux内核正在快速发展并被广泛定制。这导致了数以千计的版本和衍生物。不幸的是，Linux内核非常脆弱。每年都有成千上万的错误被报告，其中数百个是与安全相关的错误。鉴于资源有限，内核维护人员必须优先修补更严重的漏洞。在实践中，通用漏洞评分系统(CVSS) [1]已经成为描述漏洞严重性的标准。然而，当CVSS遇到Linux时，存在一个根本的问题——它是以“一个对所有”的方式使用的。Linux漏洞的严重性仅针对主流Linux进行评估，所有受影响的版本和衍生版本将简单地遵守和重用CVSS评分。这种不加区分的CVSS使用导致低估或高估严重性，这进一步导致宝贵资源的延迟和被忽略的修补或浪费。在本文中，我们提出了操作系统感知的漏洞优先级(即CVSS)，它采用不同的严重性分析漏洞。具体来说，给定一个严重性评估漏洞，以及Linux的主流版本和目标版本，CVSS敌我识别工具采用多种基于静态程序分析和自然语言处理的新技术，来区别识别漏洞在目标版本中表现出更高还是更低的严重性。这种方法的独特优势在于，它将具有挑战性且费力的CVSS计算转化为可自动化的微分分析。我们实现了CVSS，并将其应用于主流的Linux和下游的Android系统。评估和用户研究结果表明，CVSS迪夫能够精确地执行不同的严重性分析，并提供了一种精确和有效的方法来识别漏洞，值得严重性重新评估。",
        "title_zh": "通过不同严重性分析确定操作系统感知漏洞优先级",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2022.html",
        "conf_title": "31st USENIX Security Symposium 2022",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity22",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity22/presentation/shen-yun",
        "title": "A Large-scale Temporal Measurement of Android Malicious Apps: Persistence, Migration, and Lessons Learned",
        "authors": "Yun Shen, Pierre-Antoine Vervier, Gianluca Stringhini",
        "abstract": "We study the temporal dynamics of potentially harmful apps (PHAs) on Android by leveraging 8.8M daily on-device detections collected among 11.7M customers of a popular mobile security product between 2019 and 2020. We show that the current security model of Android, which limits security products to run as regular apps and prevents them from automatically removing malicious apps opens a signiﬁcant window of opportunity for attackers. Such apps warn users about the newly discovered threats, but users do not promptly act on this information, allowing PHAs to persist on their device for an average of 24 days after they are detected. We also ﬁnd that while app markets remove PHAs after these become known, there is a signiﬁcant delay between when PHAs are identiﬁed and when they are removed: PHAs persist on Google Play for 77 days on average and 34 days on third party marketplaces. Finally, we ﬁnd evidence of PHAs migrating to other marketplaces after being removed on the original one. This paper provides an unprecedented view of the Android PHA landscape, showing that current defenses against PHAs on Android are not as effective as commonly thought, and identifying multiple research directions that the security community should pursue, from orchestrating more effective PHA takedowns to devising better alerts for mobile security products.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "我们利用2019年至2020年期间在一款流行的移动安全产品的1170万客户中收集的880万次每日设备上检测，研究了Android上潜在有害应用(PHA)的时间动态。我们发现，Android当前的安全模式限制安全产品作为常规应用运行，并阻止它们自动删除恶意应用，这为攻击者打开了一个重要的机会之窗。这类应用程序会警告用户新发现的威胁，但用户不会立即根据这些信息采取行动，这使得PHA在被检测到后平均会在设备上保留24天。我们还发现，虽然应用程序市场在PHA公开后将其删除，但在PHA被识别和删除之间存在明显的延迟:PHA在Google Play上平均持续77天，在第三方市场上持续34天。最后，我们发现PHA从原来的市场上移除后转移到其他市场的证据。本文提供了Android PHA前景的前所未有的视图，表明当前针对Android上PHA的防御并不像通常认为的那样有效，并确定了安全社区应该追求的多个研究方向，从策划更有效的PHA撤销到为移动安全产品设计更好的警报。",
        "title_zh": "Android恶意应用的大规模时间测量:持久性、迁移和经验教训",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2022.html",
        "conf_title": "31st USENIX Security Symposium 2022",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity22",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity22/presentation/gorski",
        "title": "FReD: Identifying File Re-Delegation in Android System Services",
        "authors": "Sigmund Albert Gorski III, Seaver Thorn, William Enck, Haining Chen",
        "abstract": "The security of the Android platform beneﬁts greatly from a privileged middleware that provides indirect access to protected resources. This architecture is further enhanced by privilege separating functionality into many different services and carefully tuning ﬁle access control policy to mitigate the impact of software vulnerabilities. However, these services can become confused deputies if they improperly re-delegate ﬁle access to third-party applications through remote procedure call (RPC) interfaces. In this paper, we propose a static program analysis tool called FR E D, which identiﬁes a mapping between Java-based system service RPC interfaces and the ﬁle paths opened within the Java and C/C++ portions of the service. It then combines the Linux-layer ﬁle access control policy with the Android-layer permission policy to identify potential ﬁle re-delegation. We use FR E D to analyze three devices running Android 10 and identify 12 confused deputies that are accessible from third-party applications. These vulnerabilities include ﬁve CVEs with moderate severity, demonstrating the utility of semi-automated approaches to discover subtle ﬂaws in access control enforcement.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android平台的安全性极大地受益于特权中间件，该中间件提供了对受保护资源的间接访问。通过将功能划分到许多不同的服务中并仔细调整文件访问控制策略以减轻软件漏洞的影响，该体系结构得到了进一步增强。但是，如果这些服务通过远程过程调用(RPC)接口不正确地将文件访问重新委托给第三方应用程序，它们可能会成为混乱的代理。在本文中，我们提出了一个名为FR E D的静态程序分析工具，它确定了基于Java的系统服务RPC接口与服务的Java和C/C++部分中打开的文件路径之间的映射。然后，它将Linux层的文件访问控制策略与Android层的权限策略相结合，以识别潜在的文件重新委托。我们使用FR E D来分析三个运行Android 10的设备，并确定12个可以从第三方应用程序访问的混淆的副手。这些漏洞包括五个严重性中等的CVE，证明了半自动方法在访问控制实施中发现细微漏洞的效用。",
        "title_zh": "FReD:识别Android系统服务中的文件重新委托",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2022.html",
        "conf_title": "31st USENIX Security Symposium 2022",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity22",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity22/presentation/imran",
        "title": "SARA: Secure Android Remote Authorization",
        "authors": "Abdullah Imran, Habiba Farrukh, Muhammad Ibrahim, Z. Berkay Celik, Antonio Bianchi",
        "abstract": "Modern smartphones are equipped with Trusted Execution Environments (TEEs), offering security features resilient even against attackers able to fully compromise the normal operating system (e.g., Linux in Android devices). The academic community, as well as the smartphone manufacturers, have proposed to use TEEs to strengthen the security of authorization protocols. However, the usage of these protocols has been hampered by both practicality issues and lack of completeness in terms of security. To address these issues, in this paper, we design, implement, and evaluate SARA (Secure Android Remote Authorization), an Android library that uses the existing TEE-powered Android APIs to implement secure, end-to-end remote authorization for Android apps. SARA is practical in its design, as it makes use of Android APIs and TEE features that are already present in modern Android devices to implement a novel secure authorization protocol. In fact, SARA does not require any modifications to the Android operating system nor to the code running in TrustZone (the TEE powering existing Android devices). For this reason, it can be readily used in existing apps running on existing smartphones. Moreover, SARA is designed to ensure that even developers that have no experience in implementing security protocols can make use of it within their apps. At the same time, SARA is secure , since it allows implementing authorization protocols that are resilient even against attackers able to achieve root privileges on a compromised Android device. We first evaluate SARA by conducting a user study to ascertain its usability. Then, we prove SARA ’s security features by formally verifying its security protocol using ProVerif.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "现代智能手机配备了可信执行环境(tee ),提供了安全功能，甚至可以抵御能够完全破坏正常操作系统(例如，Android设备中的Linux)的攻击者。学术界以及智能手机制造商已经提议使用tee来加强授权协议的安全性。然而，这些协议的使用受到实用性问题和缺乏安全性方面的完整性的阻碍。为了解决这些问题，在本文中，我们设计、实现并评估了SARA(Secure Android Remote Authorization ),这是一个Android库，它使用现有的TEE支持的Android APIs来实现对Android应用的安全的端到端远程授权。SARA的设计很实用，因为它利用了现代Android设备中已经存在的Android APIs和TEE特性来实现一种新颖的安全授权协议。事实上，SARA不需要对Android操作系统和TrustZone(支持现有Android设备的TEE)中运行的代码进行任何修改。由于这个原因，它可以很容易地在现有智能手机上运行的现有应用程序中使用。此外，SARA旨在确保即使没有实现安全协议经验的开发人员也可以在他们的应用程序中使用它。同时，SARA是安全的，因为它允许实现授权协议，即使攻击者能够在受损的Android设备上获得root权限，该协议也是有弹性的。我们首先通过进行用户研究来评估SARA，以确定它的可用性。然后，我们通过使用ProVerif形式化验证SARA的安全协议来证明其安全特性。",
        "title_zh": "SARA:安全的Android远程授权",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2022.html",
        "conf_title": "31st USENIX Security Symposium 2022",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity22",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity22/presentation/li-jianfeng",
        "title": "FOAP: Fine-Grained Open-World Android App Fingerprinting",
        "authors": "Jianfeng Li, Hao Zhou, Shuohan Wu, Xiapu Luo, Ting Wang, Xian Zhan, Xiaobo Ma",
        "abstract": "Despite the widespread adoption of encrypted communication for mobile apps, adversaries can still identify apps or infer selected user activities of interest from encrypted mobile trafﬁc via app ﬁngerprinting (AF) attacks. However, most existing AF techniques only work under the closed-world as-sumption, thereby suffering potential precision decline when faced with apps unseen during model training. Moreover, serious privacy leakage often occurs when users conduct some sensitive operations, which are closely associated with speciﬁc UI components. Unfortunately, existing AF techniques are too coarse-grained to acquire such ﬁne-grained sensitive information. In this paper, we take the ﬁrst step to identify method-level ﬁne-grained user action of Android apps in the open-world setting and present a systematic solution, dubbed FOAP, to address the above limitations. First, to effectively reduce false positive risks in the open-world setting, we propose a novel metric, named structural similarity, to adaptively ﬁlter out trafﬁc segments irrelevant to the app of interest. Second, FOAP achieves ﬁne-grained user action identiﬁcation via synthesizing trafﬁc and binary analysis. Speciﬁcally, FOAP identiﬁes user actions on speciﬁc UI components through inferring entry point methods correlated with them. Extensive evaluations and case studies demonstrate that FOAP is not only reasonably accurate but also practical in ﬁne-grained user activity inference and user privacy analysis.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "尽管移动应用广泛采用加密通信，但对手仍然可以通过应用指纹(af)攻击从加密的移动流量中识别应用或推断出感兴趣的选定用户活动。然而，大多数现有的自动对焦技术仅在封闭世界的假设下工作，因此当面对模型训练期间不可见的应用时，会遭受潜在的精度下降。此外，当用户进行一些敏感操作时，往往会发生严重的隐私泄露，这些操作与特定的UI组件密切相关。不幸的是，现有的AF技术过于粗糙，无法获取如此精细的敏感信息。在本文中，我们首先确定了开放环境中Android应用程序的方法级细粒度用户操作，并提出了一个称为FOAP的系统解决方案，以解决上述限制。首先，为了有效降低开放环境中的误报风险，我们提出了一个名为结构相似性的新指标，以自适应地过滤掉与感兴趣的应用程序无关的流量段。其次，FOAP通过综合流量和二进制分析实现了细粒度的用户行为识别。具体来说，FOAP通过推断与特定UI组件相关的入口点方法来识别特定UI组件上的用户操作。广泛的评估和案例研究表明，FOAP不仅相当准确，而且在细粒度用户活动推断和用户隐私分析方面也很实用。",
        "title_zh": "FOAP:细粒度的开放世界Android应用指纹",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2022.html",
        "conf_title": "31st USENIX Security Symposium 2022",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity22",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity22/presentation/cerdeira",
        "title": "ReZone: Disarming TrustZone with TEE Privilege Reduction",
        "authors": "David Cerdeira, José Martins, Nuno Santos, Sandro Pinto",
        "abstract": "In TrustZone-assisted TEEs, the trusted OS has unrestricted access to both secure and normal world memory. Unfortu-nately, this architectural limitation has opened an aisle of exploration for attackers, which have demonstrated how to leverage a chain of exploits to hijack the trusted OS and gain full control of the system, targeting (i) the rich execution environment (REE), (ii) all trusted applications (TAs), and (iii) the secure monitor. In this paper, we propose R E Z ONE . The main novelty behind R E Z ONE design relies on leveraging TrustZone-agnostic hardware primitives available on commer-cially off-the-shelf (COTS) platforms to restrict the privileges of the trusted OS. With R E Z ONE , a monolithic TEE is restructured and partitioned into multiple sandboxed domains named zones , which have only access to private resources. We have fully implemented R E Z ONE for the i.MX 8MQuad EVK and integrated it with Android OS and OP-TEE. We extensively evaluated R E Z ONE using microbenchmarks and real-world applications. R E Z ONE can sustain popular applications like DRM-protected video encoding with acceptable performance overheads. We have surveyed 80 CVE vulnerability reports and estimate that R E Z ONE could mitigate 86.84% of them.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "在TrustZone辅助的TEEs中，可信操作系统可以不受限制地访问安全内存和普通内存。不幸的是，这种架构限制为攻击者开辟了一条探索之路，他们展示了如何利用一连串的攻击劫持可信操作系统并获得对系统的完全控制，目标是(I)丰富的执行环境(REE)，(ii)所有可信应用程序(ta)，以及(iii)安全监视器。在本文中，我们提出R E Z ONE。R E Z ONE设计背后的主要新颖之处在于利用商业现货(COTS)平台上可用的与信任区域无关的硬件原语来限制可信操作系统的权限。在R E Z ONE中，一个单一的TEE被重新构造并划分成多个沙盒域，这些域被命名为zones，它们只能访问私有资源。我们已经为i.MX 8MQuad EVK完全实现了R E Z ONE，并将其与Android OS和OP-TEE集成在一起。我们使用微基准测试和真实应用程序对R E Z ONE进行了广泛的评估。R E Z ONE能够以可接受的性能开销支持受DRM保护的视频编码等流行应用。我们调查了80个CVE漏洞报告，估计R E Z ONE可以缓解其中的86.84%。",
        "title_zh": "重划:解除信任区并减少特权",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2022.html",
        "conf_title": "31st USENIX Security Symposium 2022",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity22",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity22/presentation/rohlmann",
        "title": "Oops... Code Execution and Content Spoofing: The First Comprehensive Analysis of OpenDocument Signatures",
        "authors": "Simon Rohlmann, Christian Mainka, Vladislav Mladenov, Jörg Schwenk",
        "abstract": "OpenDocument is one of the major standards for interoperable office documents. Supported by office suites like Apache OpenOffice, LibreOffice, and Microsoft Office, the OpenDocument Format (ODF) is available for text processing, spreadsheets, and presentations on all major desktop and mobile operating systems. When it comes to governmental and business use cases, OpenDocument signatures can protect the integrity of a document’s content, for example, for contracts, amendments, or bills. Moreover OpenDocument signatures also protect document’s macros. Since the risks of using macros in documents is well-known, modern office applications only enable their execution if a trusted entity signs the macro code. Thus, the security of ODF documents often depends on the correct signature verification. In this paper, we conduct the first comprehensive analysis of OpenDocument signatures and reveal numerous severe threats. We identified five new attacks and evaluated them against 16 office applications on Windows, macOS, Linux, iOS, Android, and two online services. Our investigation revealed 12 out of 18 applications to be vulnerable for macro code execution, although the application only executes macros signed by trusted entities. For 17 of 18 applications, we could spoof the content in a signed ODF document while keeping the signature valid and trusted. Finally, we showed that attackers possessing a signed ODF could alter and forge the signature creation time in 16 of 18 applications. Our research was acknowledged by Microsoft, Apache OpenOffice, and LibreOffice during the coordinated disclosure.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "OpenDocument是互操作办公文档的主要标准之一。在Apache OpenOffice、LibreOffice和Microsoft Office等办公套件的支持下，OpenDocument格式(ODF)可用于所有主要桌面和移动操作系统上的文本处理、电子表格和演示。当涉及政府和商业用例时，OpenDocument签名可以保护文档内容的完整性，例如，对于合同、修订或账单。此外，OpenDocument签名还保护文档的宏。因为在文档中使用宏的风险是众所周知的，所以现代办公应用程序只有在可信实体签署宏代码的情况下才允许执行宏。因此，ODF文档的安全性通常取决于正确的签名验证。在本文中，我们对OpenDocument签名进行了第一次全面的分析，揭示了许多严重的威胁。我们确定了五种新的攻击，并针对Windows、macOS、Linux、iOS、Android上的16种office应用程序和两种在线服务进行了评估。我们的调查显示，18个应用程序中有12个容易受到宏代码执行的攻击，尽管该应用程序只执行由可信实体签名的宏。对于18个应用程序中的17个，我们可以欺骗签名的ODF文档中的内容，同时保持签名有效和可信。最后，我们证明了拥有签名ODF的攻击者可以在18个应用程序中的16个中更改和伪造签名创建时间。我们的研究得到了微软、Apache OpenOffice和LibreOffice的认可。",
        "title_zh": "哎哟...代码执行和内容欺骗:对OpenDocument签名的首次全面分析",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2022.html",
        "conf_title": "31st USENIX Security Symposium 2022",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity22",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity22/presentation/zhao-bodong",
        "title": "StateFuzz: System Call-Based State-Aware Linux Driver Fuzzing",
        "authors": "Bodong Zhao, Zheming Li, Shisong Qin, Zheyu Ma, Ming Yuan, Wenyu Zhu, Zhihong Tian, Chao Zhang",
        "abstract": "Coverage-guided fuzzing has achieved great success in finding software vulnerabilities. Existing coverage-guided fuzzers generally favor test cases that hit new code, and discard ones that exercise the same code. However, such a strategy is not optimum. A new test case exercising the same code could be better than a previous test case, as it may trigger new program states useful for code exploration and bug discovery. In this paper, we assessed the limitation of coverage-guided fuzzing solutions and proposed a state-aware fuzzing solution StateFuzz to address this issue. First, we model program states with values of state-variables and utilize static analysis to recognize such variables. Then, we instrument target programs to track such variables’ values and infer program state transition at runtime. Lastly, we utilize state information to prioritize test cases that can trigger new states, and apply a three-dimension feedback mechanism to fine-tune the evolutionary direction of coverage-guided fuzzers. We have implemented a prototype of StateFuzz, and evaluated it on Linux upstream drivers and Android drivers. Evaluation results show that StateFuzz is effective at discovering both new code and vulnerabilities. It finds 18 unknown vulnerabilities and 2 known but unpatched vulnerabilities, and reaches 19% higher code coverage and 32% higher state coverage than the state-of-the-art fuzzer Syzkaller.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "覆盖引导模糊化在发现软件漏洞方面取得了巨大的成功。现有的覆盖导向模糊器通常倾向于命中新代码的测试用例，而丢弃使用相同代码的测试用例。然而，这种策略并不是最佳的。使用相同代码的新测试用例可能比以前的测试用例更好，因为它可能触发对代码探索和bug发现有用的新程序状态。在本文中，我们评估了覆盖引导的模糊化解决方案的局限性，并提出了一个状态感知的模糊化解决方案StateFuzz来解决这个问题。首先，我们用状态变量的值来建模程序状态，并利用静态分析来识别这些变量。然后，我们引导目标程序跟踪这些变量的值，并在运行时推断程序的状态转换。最后，我们利用状态信息对能够触发新状态的测试用例进行优先级排序，并应用三维反馈机制来微调覆盖导向模糊器的进化方向。我们实现了一个StateFuzz的原型，并在Linux上游驱动和Android驱动上进行了测试。评估结果表明，StateFuzz能够有效地发现新代码和漏洞。它发现了18个未知漏洞和2个已知但未修补的漏洞，与最先进的fuzzer Syzkaller相比，代码覆盖率和状态覆盖率分别高出19%和32%。",
        "title_zh": "State Fuzzing:基于系统调用的状态感知Linux驱动程序模糊化",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2022.html",
        "conf_title": "31st USENIX Security Symposium 2022",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity22",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity22/presentation/owens",
        "title": "Electronic Monitoring Smartphone Apps: An Analysis of Risks from Technical, Human-Centered, and Legal Perspectives",
        "authors": "Kentrell Owens, Anita Alem, Franziska Roesner, Tadayoshi Kohno",
        "abstract": "Electronic monitoring is the use of technology to track individuals accused or convicted of a crime (or civil violation) as an “alternative to incarceration.” Traditionally, this technology has been in the form of ankle monitors, but recently federal, state, and local entities around the U.S. are shifting to using smartphone applications for electronic monitoring. These applications (apps) purport to make the monitoring simpler and more convenient for both the community supervisor and the person being monitored. However, due to the multipurpose nature of smartphones in people’s lives and the amount of sensitive information (e.g., sensor data) smartphones make available, this introduces new risks to people coerced to use these apps. To understand what type of privacy-related and other risks might be introduced to people who use these applications, we conducted a privacy-oriented analysis of 16 Android apps used for electronic monitoring. We analyzed the apps ﬁrst technically, with static and (limited) dynamic analysis tech-niques. We also analyzed user reviews in the Google Play Store to understand the experiences of the people using these apps, and also the privacy policies. We found that apps contain numerous trackers, the permissions requested by them vary widely (with the most common one being location), and the reviews indicate that people ﬁnd the apps invasive and frequently dysfunctional. We end the paper by encouraging mobile app marketplaces to reconsider their role in the future of electronic monitoring apps, and computer security and privacy researchers to consider their potential role in auditing carceral technologies. We hope that this work will lead to more transparency in this obfuscated ecosystem.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "电子监控是利用技术跟踪被指控或被判有罪(或民事侵权)的个人，作为“监禁的替代方案”传统上，这项技术一直采用脚踝监视器的形式，但最近美国各地的联邦、州和地方实体正在转向使用智能手机应用程序进行电子监控。这些应用程序(app)旨在使社区监督员和被监视者的监视更简单、更方便。然而，由于智能手机在人们生活中的多用途性质以及智能手机提供的敏感信息(如传感器数据)的数量，这给被迫使用这些应用程序的人带来了新的风险。为了了解使用这些应用程序的人可能会面临什么类型的隐私相关风险和其他风险，我们对16款用于电子监控的Android应用程序进行了以隐私为导向的分析。我们首先从技术上分析了这些应用，采用了静态和(有限的)动态分析技术。我们还分析了谷歌Play商店的用户评论，以了解人们使用这些应用程序的体验，以及隐私政策。我们发现应用程序包含许多追踪器，它们请求的权限差异很大(最常见的是位置)，评论表明人们发现这些应用程序具有侵入性，并且经常功能失调。最后，我们鼓励移动应用市场重新考虑它们在电子监控应用未来中的作用，并鼓励计算机安全和隐私研究人员考虑它们在审计carceral技术中的潜在作用。我们希望这项工作能让这个混乱的生态系统变得更加透明。",
        "title_zh": "电子监控智能手机应用程序:从技术、以人为本和法律角度分析风险",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2022.html",
        "conf_title": "31st USENIX Security Symposium 2022",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity22",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3546096.3546111",
        "title": "VET5G: A Virtual End-to-End Testbed for 5G Network Security Experimentation",
        "authors": "Zhixin Wen, Harsh Sanjay Pacherkar, Guanhua Yan",
        "abstract": "As 5G networks are gradually rolled out worldwide, it is important to ensure that their network infrastructures are resilient against malicious attacks. This work presents VET5G, a new virtual end-to-end testbed for 5G network security research experiments or training activities such as Capture-The-Flag competitions. The distinguishing features of VET5G include a home-grown 5G core network emulator written in Rust to ensure memory and thread safety, integration of OpenAirInterface’s Radio Access Network emulator and the official Android emulator to achieve full end-to-end 5G network emulation, inclusion of a reference P4 software switch to assist with prototyping of defense mechanisms for 5G data planes, implementation of Python APIs for easy 5G network experimentation, and adoption of JupyterHub to support multi-user experimentation. In our experiments we demonstrate how to use VET5G for two attack scenarios in 5G networks as well as its performance when it is used in a 5G hacking project for a Mobile Systems Security course.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "随着5G网络在全球范围内逐步铺开，确保其网络基础设施能够抵御恶意攻击非常重要。这项工作介绍了VET5G，这是一种新的虚拟端到端测试平台，用于5G网络安全研究实验或培训活动，如夺旗比赛。VET5G的突出特点包括:用Rust编写的自主开发的5G核心网络仿真器，以确保内存和线程安全；集成OpenAirInterface的无线电接入网络仿真器和官方Android仿真器，以实现完整的端到端5G网络仿真；包含参考P4软件交换机，以帮助建立5G数据平面防御机制的原型；实现Python APIs，以方便5G网络实验；采用JupyterHub支持多用户实验。在我们的实验中，我们展示了如何在5G网络的两种攻击场景中使用VET5G，以及它在移动系统安全课程的5G黑客项目中使用时的性能。",
        "title_zh": "VET5G:5G网络安全实验的虚拟端到端试验台",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/cset2022.html",
        "conf_title": "14th CSET @ USENIX Security Symposium 2022: Virtual Event, USA",
        "conf_url": "https://doi.org/10.1145/3546096",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity19/presentation/sivakumaran",
        "title": "A Study of the Feasibility of Co-located App Attacks against BLE and a Large-Scale Analysis of the Current Application-Layer Security Landscape",
        "authors": "Pallavi Sivakumaran, Jorge Blasco",
        "abstract": "Bluetooth Low Energy (BLE) is a fast-growing wireless technology with a large number of potential use cases, particularly in the IoT domain. Increasingly, these use cases require the storage of sensitive user data or critical device controls on the BLE device, as well as the access of this data by an augmentative mobile application. Uncontrolled access to such data could violate user privacy, cause a device to malfunction, or even endanger lives. The BLE standard provides security mechanisms such as pairing and bonding to protect sensitive data such that only authenticated devices can access it. In this paper we show how unauthorized co-located Android applications can access pairing-protected BLE data, without the user's knowledge. We discuss mitigation strategies in terms of the various stakeholders involved in this ecosystem, and argue that at present, the only possible option for securing BLE data is for BLE developers to implement remedial measures in the form of application-layer security between the BLE device and the Android application. We introduce BLECryptracer, a tool for identifying the presence of such application-layer security, and present the results of a large-scale static analysis over 18,900+ BLE-enabled Android applications. Our findings indicate that over 45% of these applications do not implement measures to protect BLE data, and that cryptography is sometimes applied incorrectly in those that do. This implies that a potentially large number of corresponding BLE peripheral devices are vulnerable to unauthorized data access.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "蓝牙低能耗(BLE)是一项快速发展的无线技术，具有大量潜在的使用案例，尤其是在物联网领域。这些使用案例越来越多地要求在BLE设备上存储敏感用户数据或关键设备控制，以及通过增强的移动应用程序访问这些数据。不受控制地访问这些数据可能会侵犯用户隐私，导致设备故障，甚至危及生命。BLE标准提供了配对和绑定等安全机制来保护敏感数据，只有经过身份验证的设备才能访问这些数据。在本文中，我们展示了未经授权的协同定位Android应用程序如何在用户不知情的情况下访问配对保护的BLE数据。我们从这个生态系统中涉及的各种利益相关者的角度讨论了缓解策略，并认为目前，保护ble数据的唯一可能的选择是BLE开发者在BLE设备和Android应用程序之间实施应用层安全形式的补救措施。我们介绍了BLECryptracer，一种用于识别这种应用层安全性的工具，并展示了对18，900多个支持BLE的Android应用进行大规模静态分析的结果。我们的调查结果表明，超过45%的这些应用程序没有实施保护BLE数据的措施，而在那些实施措施的应用程序中，加密技术有时会被错误地应用。这意味着潜在的大量相应的BLE外围设备容易受到未经授权的数据访问。",
        "title_zh": "针对BLE的协同定位应用攻击的可行性研究以及对当前应用层安全形势的大规模分析",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2019.html",
        "conf_title": "28th USENIX Security Symposium 2019: Santa Clara, CA, USA",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity19",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity19/presentation/petracca",
        "title": "EnTrust: Regulating Sensor Access by Cooperating Programs via Delegation Graphs",
        "authors": "Giuseppe Petracca, Yuqiong Sun, Ahmad Atamli-Reineh, Patrick D. McDaniel, Jens Grossklags, Trent Jaeger",
        "abstract": "Modern operating systems support a cooperating program abstraction that, instead of placing all functionality into a single program, allows diverse programs to cooperate to complete tasks requested by users. However, untrusted programs may exploit such interactions to spy on users through device sensors by causing privileged system services to misuse their permissions, or to forward user requests to malicious programs inadvertently. Researchers have previously explored methods to restrict access to device sensors based on the state of the user interface that elicited the user input or based on the set of cooperating programs, but the former approach does not consider cooperating programs and the latter approach has been found to be too restrictive for many cases. In this paper, we propose EnTrust, an authorization system that tracks the processing of input events across programs for eliciting approvals from users for sensor operations. EnTrust constructs delegation graphs by linking input events to cooperation events among programs that lead to sensor operation requests, then uses such delegation graphs for eliciting authorization decisions from users. To demonstrate this approach, we implement the EnTrust authorization system for Android OS. In a laboratory study, we show that attacks can be prevented at a much higher rate (47-67% improvement) compared to the first-use approach. Our field study reveals that EnTrust only requires a user effort comparable to the first-use approach while incurring negligible performance (<1% slowdown) and memory overheads (5.5 KB per program).",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "现代操作系统支持协作程序抽象，它不是将所有功能放在一个程序中，而是允许不同的程序协作完成用户请求的任务。但是，不受信任的程序可能会利用这种交互，通过设备传感器监视用户，导致特权系统服务滥用其权限，或者无意中将用户请求转发给恶意程序。研究人员先前已经探索了基于引发用户输入的用户界面的状态或者基于合作程序的集合来限制对设备传感器的访问的方法，但是前一种方法没有考虑合作程序，并且后一种方法已经被发现对于许多情况来说过于严格。在本文中，我们提出了EnTrust，这是一个授权系统，它跟踪跨程序的输入事件的处理，以获得用户对传感器操作的批准。EnTrust通过将输入事件链接到导致传感器操作请求的程序间的合作事件来构建委托图，然后使用这样的委托图来从用户那里获得授权决策。为了演示这种方法，我们实现了Android操作系统的委托授权系统。在实验室研究中，我们发现与首次使用方法相比，可以以更高的比率阻止攻击(提高47-67%)。我们的现场研究表明，EnTrust只需要用户付出与首次使用方法相当的努力，而性能降低< 1%和内存开销(每个程序5.5 KB)。",
        "title_zh": "EnTrust:通过委托图协调程序来调节传感器访问",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2019.html",
        "conf_title": "28th USENIX Security Symposium 2019: Santa Clara, CA, USA",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity19",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity19/presentation/reardon",
        "title": "50 Ways to Leak Your Data: An Exploration of Apps' Circumvention of the Android Permissions System",
        "authors": "Joel Reardon, Álvaro Feal, Primal Wijesekera, Amit Elazari Bar On, Narseo Vallina-Rodriguez, Serge Egelman",
        "abstract": "Modern smartphone platforms implement permission-based models to protect access to sensitive data and system resources. However, apps can circumvent the permission model and gain access to protected data without user consent by using both covert and side channels. Side channels present in the implementation of the permission system allow apps to access protected data and system resources without permission; whereas covert channels enable communication between two colluding apps so that one app can share its permission-protected data with another app lacking those permissions. Both pose threats to user privacy. \n \nIn this work, we make use of our infrastructure that runs hundreds of thousands of apps in an instrumented environment. This testing environment includes mechanisms to monitor apps' runtime behaviour and network traffic. We look for evidence of side and covert channels being used in practice by searching for sensitive data being sent over the network for which the sending app did not have permissions to access it. We then reverse engineer the apps and third-party libraries responsible for this behaviour to determine how the unauthorized access occurred. We also use software fingerprinting methods to measure the static prevalence of the technique that we discover among other apps in our corpus. \n \nUsing this testing environment and method, we uncovered a number of side and covert channels in active use by hundreds of popular apps and third-party SDKs to obtain unauthorized access to both unique identifiers as well as geolocation data. We have responsibly disclosed our findings to Google and have received a bug bounty for our work.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "现代智能手机平台实施基于权限的模型来保护对敏感数据和系统资源的访问。然而，应用程序可以绕过权限模型，通过使用隐蔽和侧边通道，在没有用户同意的情况下获得受保护数据的访问权限。在许可系统的实现中存在的侧信道允许应用在没有许可的情况下访问受保护的数据和系统资源；而隐蔽通道支持两个串通应用程序之间的通信，以便一个应用程序可以与另一个没有权限的应用程序共享其受权限保护的数据。两者都对用户隐私构成威胁。\n\n在这项工作中，我们利用我们的基础设施，在一个仪表化的环境中运行成千上万的应用程序。这个测试环境包括监控应用运行时行为和网络流量的机制。我们通过搜索通过网络发送的敏感数据来寻找实践中使用的辅助和秘密渠道的证据，发送应用程序无权访问这些数据。然后，我们对负责此行为的应用和第三方库进行逆向工程，以确定未经授权的访问是如何发生的。我们还使用软件指纹方法来衡量我们在语料库中的其他应用程序中发现的技术的静态流行程度。\n\n通过使用这种测试环境和方法，我们发现了数百个流行应用和第三方软件开发套件正在使用的大量旁门左道和隐蔽通道，以获取对唯一标识符和地理位置数据的未经授权的访问。我们负责任地向谷歌披露了我们的发现，并因我们的工作获得了bug奖金。",
        "title_zh": "泄露数据的50种方法:探索应用程序对Android权限系统的规避",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2019.html",
        "conf_title": "28th USENIX Security Symposium 2019: Santa Clara, CA, USA",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity19",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity19/presentation/pham",
        "title": "HideMyApp: Hiding the Presence of Sensitive Apps on Android",
        "authors": "Anh Pham, Italo Dacosta, Eleonora Losiouk, John Stephan, Kévin Huguenin, Jean-Pierre Hubaux",
        "abstract": "Millions of users rely on mobile health (mHealth) apps to manage their wellness and medical conditions. Although the popularity of such apps continues to grow, several privacy and security challenges can hinder their potential. In particular, the simple fact that an mHealth app is installed on a user’s phone can reveal sensitive information about the user’s health. Due to Android’s open design, any app, even without per- missions, can easily check for the presence of a specific app or collect the entire list of installed apps on the phone. Our analysis shows that Android apps expose a significant amount of metadata, which facilitates fingerprinting them. Many third parties are interested in such information: Our survey of 2917 popular apps in the Google Play Store shows that around 57% of these apps explicitly query for the list of installed apps. Therefore, we designed and implemented HideMyApp (HMA), an effective and practical solution for hiding the presence of sensitive apps from other apps. HMA does not require any changes to the Android operating system or to apps yet still supports their key functionalities. By using a diverse dataset of both free and paid mHealth apps, our experimental eval- uation shows that HMA supports the main functionalities in most apps and introduces acceptable overheads at runtime (i.e., several milliseconds); these findings were validated by our user-study (N = 30). In short, we show that the practice of collecting information about installed apps is widespread and that our solution, HMA, provides a robust protection against such a threat.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "数百万用户依靠移动健康(mHealth)应用来管理他们的健康和医疗状况。虽然这类应用程序的受欢迎程度持续增长，但一些隐私和安全挑战可能会阻碍它们的潜力。特别是，移动健康应用程序安装在用户手机上这一简单事实可能会泄露用户健康的敏感信息。由于Android的开放式设计，任何应用程序，即使没有预授权，也可以轻松检查特定应用程序的存在或收集手机上已安装应用程序的完整列表。我们的分析表明，Android应用程序暴露了大量的元数据，这有助于对它们进行指纹识别。许多第三方对此类信息感兴趣:我们对谷歌Play商店2917个流行应用的调查显示，其中约57%的应用明确查询已安装应用的列表。因此，我们设计并实现了HideMyApp (HMA)，这是一个有效而实用的解决方案，用于隐藏敏感应用程序的存在，使其不被其他应用程序发现。HMA不需要对安卓操作系统或应用程序做任何改动，但仍然支持它们的关键功能。通过使用免费和付费移动健康应用的不同数据集，我们的实验评估表明，HMA支持大多数应用中的主要功能，并在运行时引入可接受的开销(即几毫秒)；我们的用户研究(N = 30)验证了这些发现。简而言之，我们证明了收集已安装应用程序信息的做法非常普遍，我们的解决方案HMA提供了针对此类威胁的强大保护。",
        "title_zh": "HideMyApp:隐藏Android上敏感应用的存在",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2019.html",
        "conf_title": "28th USENIX Security Symposium 2019: Santa Clara, CA, USA",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity19",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity19/presentation/pendlebury",
        "title": "TESSERACT: Eliminating Experimental Bias in Malware Classification across Space and Time",
        "authors": "Feargus Pendlebury, Fabio Pierazzi, Roberto Jordaney, Johannes Kinder, Lorenzo Cavallaro",
        "abstract": "Is Android malware classification a solved problem? Published F1 scores of up to 0.99 appear to leave very little room for improvement. In this paper, we argue that results are commonly inflated due to two pervasive sources of experimental bias: \"spatial bias\" caused by distributions of training and testing data that are not representative of a real-world deployment; and \"temporal bias\" caused by incorrect time splits of training and testing sets, leading to impossible configurations. We propose a set of space and time constraints for experiment design that eliminates both sources of bias. We introduce a new metric that summarizes the expected robustness of a classifier in a real-world setting, and we present an algorithm to tune its performance. Finally, we demonstrate how this allows us to evaluate mitigation strategies for time decay such as active learning. We have implemented our solutions in TESSERACT, an open source evaluation framework for comparing malware classifiers in a realistic setting. We used TESSERACT to evaluate three Android malware classifiers from the literature on a dataset of 129K applications spanning over three years. Our evaluation confirms that earlier published results are biased, while also revealing counter-intuitive performance and showing that appropriate tuning can lead to significant improvements.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "安卓恶意软件分类是已经解决的问题吗？公布的高达0.99的F1分数似乎没有多少改进的余地。在本文中，我们认为，由于两个普遍的实验偏差来源，结果通常被夸大:“空间偏差”，由不代表真实世界部署的训练和测试数据的分布引起；以及由训练集和测试集的不正确时间分割引起的“时间偏差”，导致不可能的配置。我们提出了一套实验设计的空间和时间限制，以消除这两种来源的偏见。我们引入了一个新的度量来总结分类器在现实世界中的预期鲁棒性，并提出了一个算法来调整其性能。最后，我们展示了这如何允许我们评估时间衰减的缓解策略，如主动学习。我们已经在TESSERACT中实现了我们的解决方案，tessera CT是一个开源评估框架，用于在现实环境中比较恶意软件分类器。我们使用TESSERACT评估了三个Android恶意软件分类器，这些分类器来自跨越三年的129K应用程序数据集上的文献。我们的评估证实了早期发表的结果是有偏差的，同时也揭示了与直觉相反的性能，并表明适当的调优可以带来显著的改进。",
        "title_zh": "宇宙魔方:消除恶意软件跨空间和时间分类的实验偏差",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2019.html",
        "conf_title": "28th USENIX Security Symposium 2019: Santa Clara, CA, USA",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity19",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity19/presentation/yang-guangliang",
        "title": "Iframes/Popups Are Dangerous in Mobile WebView: Studying and Mitigating Differential Context Vulnerabilities",
        "authors": "Guangliang Yang, Jeff Huang, Guofei Gu",
        "abstract": "In this paper, we present a novel class of Android WebView vulnerabilities (called Differential Context Vulnerabilities or DCVs) associated with web iframe/popup behaviors. To demonstrate the security implications of DCVs, we devise several novel concrete attacks. We show an untrusted web iframe/popup inside WebView becomes dangerous that it can launch these attacks to open holes on existing defense solutions, and obtain risky privileges and abilities, such as breaking web messaging integrity, stealthily accessing sensitive mobile functionalities, and performing phishing attacks. Then, we study and assess the security impacts of DCVs on real-world apps. For this purpose, we develop a novel technique, DCV-Hunter, that can automatically vet Android apps against DCVs. By applying DCV-Hunter on a large number of most popular apps, we find DCVs are prevalent. Many highprofile apps are verified to be impacted, such as Facebook, Instagram, Facebook Messenger, Google News, Skype, Uber, Yelp, and U.S. Bank. To mitigate DCVs, we design a multilevel solution that enhances the security of WebView. Our evaluation on real-world apps shows the mitigation solution is effective and scalable, with negligible overhead.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "在本文中，我们提出了一类与web iframe/popup行为相关的新的Android WebView漏洞(称为差分上下文漏洞或dcv)。为了证明DCVs的安全含义，我们设计了几种新颖的具体攻击。我们发现WebView中不受信任的web iframe/popup变得非常危险，它可以发起这些攻击来打开现有防御解决方案的漏洞，并获得有风险的权限和能力，例如破坏web消息完整性，秘密访问敏感的移动功能，以及执行网络钓鱼攻击。然后，我们研究并评估dcv对现实应用程序的安全影响。为此，我们开发了一种新颖的技术，DCVs亨特，可以自动审查Android应用程序的DCV。通过在大量最流行的应用程序上应用DCVs亨特，我们发现DCV很普遍。许多备受瞩目的应用程序被证实会受到影响，如脸书、Instagram、Facebook Messenger、谷歌新闻、Skype、优步、Yelp和美国银行。为了减少DCVs，我们设计了一个多级解决方案来增强WebView的安全性。我们对真实应用程序的评估表明，该缓解解决方案是有效且可扩展的，开销可以忽略不计。",
        "title_zh": "iframe/popup在移动WebView中是危险的:研究和减轻差异上下文漏洞",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2019.html",
        "conf_title": "28th USENIX Security Symposium 2019: Santa Clara, CA, USA",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity19",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity19/presentation/klein",
        "title": "From IP ID to Device ID and KASLR Bypass",
        "authors": "Amit Klein, Benny Pinkas",
        "abstract": "IP headers include a 16-bit ID field. Our work examines the generation of this field in Windows (versions 8 and higher), Linux and Android, and shows that the IP ID field enables remote servers to assign a unique ID to each device and thus be able to identify subsequent transmissions sent from that device. This identification works across all browsers and over network changes. In modern Linux and Android versions, this field leaks a kernel address, thus we also break KASLR. \nOur work includes reverse-engineering of the Windows IP ID generation code, and a cryptanalysis of this code and of the Linux kernel IP ID generation code. It provides practical techniques to partially extract the key used by each of these algorithms, overcoming different implementation issues, and observing that this key can identify individual devices. We deployed a demo (for Windows) showing that key extraction and machine fingerprinting works in the wild, and tested it from networks around the world.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "IP报头包括一个16位的ID字段。我们的工作检查了该字段在Windows(版本8和更高版本)、Linux和Android中的生成，并表明IP id字段使远程服务器能够为每个设备分配唯一的ID，从而能够识别从该设备发送的后续传输。这种识别适用于所有浏览器和网络变化。在现代的Linux和Android版本中，这个字段泄漏了一个内核地址，因此我们也破坏了KASLR。\n我们的工作包括Windows IP ID生成代码的逆向工程，以及对该代码和Linux内核IP ID生成代码的密码分析。它提供了部分提取这些算法所使用的密钥的实用技术，克服了不同的实现问题，并观察到该密钥可以识别各个设备。我们部署了一个演示程序(针对Windows ),展示了密钥提取和机器指纹识别在野外的工作情况，并在世界各地的网络中进行了测试。",
        "title_zh": "从IP ID到设备ID和KASLR旁路",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2019.html",
        "conf_title": "28th USENIX Security Symposium 2019: Santa Clara, CA, USA",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity19",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/cset17/workshop-program/presentation/gagnon",
        "title": "Revisiting Static Analysis of Android Malware",
        "authors": "François Gagnon, Frédéric Massicotte",
        "abstract": "The mobile malware threat is fought by both static and dynamic analysis, two complementary approaches in need of constant sharpening. In this paper, static analysis is revisited to update and deepen knowledge about Android malware, correlate malicious samples through common artifacts, and further understand malware developers’ modus operandi. By looking at more than 200,000 malware samples, our study revealed interesting new insights such as: the presence of duplicated permissions in the manifest, the variation of the certificate validity period between malware and benign applications, the pertinence of looking at each sample’s certificate file name, and the presence of Android applications nested inside other applications (APKs inside APKs). We also seek to revisit previous findings from related work on Android static analysis in order to confirm or refute them. In some cases, our findings are significantly different from previous work (e.g., diversity of certificates used to sign malware). Therefore, since the Android malware landscape is evolving, we conclude that our overall knowledge must be kept up-to-date.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "通过静态和动态分析来应对移动恶意软件威胁，这两种互补的方法需要不断改进。在本文中，重新审视静态分析，以更新和深化关于Android恶意软件的知识，通过常见工件关联恶意样本，并进一步了解恶意软件开发者的作案手法。通过查看超过200，000个恶意软件样本，我们的研究揭示了有趣的新见解，例如:清单中重复权限的存在，恶意软件和良性应用程序之间证书有效期的变化，查看每个样本的证书文件名的相关性，以及嵌套在其他应用程序中的Android应用程序的存在(apk中的apk)。我们还试图重新审视以前在Android静态分析相关工作中的发现，以证实或反驳它们。在某些情况下，我们的发现明显不同于以前的工作(例如，用于签署恶意软件的证书的多样性)。因此，由于Android恶意软件的发展，我们得出结论，我们的总体知识必须保持最新。",
        "title_zh": "重新审视Android恶意软件的静态分析",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/cset2017.html",
        "conf_title": "10th CSET @ USENIX Security Symposium 2017: Vancouver, BC, Canada",
        "conf_url": "https://www.usenix.org/conference/cset17",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/woot17/workshop-program/presentation/shwartz",
        "title": "Shattered Trust: When Replacement Smartphone Components Attack",
        "authors": "Omer Shwartz, Amir Cohen, Asaf Shabtai, Yossi Oren",
        "abstract": "Phone touchscreens, and other similar hardware components such as orientation sensors, wireless charging controllers, and NFC readers, are often produced by third-party manufacturers and not by the phone vendors themselves. Third-party driver source code to support these components is integrated into the vendor's source code. In contrast to 'pluggable' drivers, such as USB or network drivers, the component driver's source code implicitly assumes that the component hardware is authentic and trustworthy. As a result of this trust, very few integrity checks are performed on the communications between the component and the device's main processor. \nIn this paper, we call this trust into question, considering the fact that touchscreens are often shattered and then replaced with aftermarket components of questionable origin. We analyze the operation of a commonly used touchscreen controller. We construct two standalone attacks, based on malicious touchscreen hardware, that function as building blocks toward a full attack: a series of touch injection attacks that allow the touchscreen to impersonate the user and exfiltrate data, and a buffer overflow attack that lets the attacker execute privileged operations. Combining the two building blocks, we present and evaluate a series of end-to-end attacks that can severely compromise a stock Android phone with standard firmware. Our results make the case for a hardware-based physical countermeasure.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "手机触摸屏和其他类似的硬件组件，如方位传感器、无线充电控制器和NFC读卡器，通常由第三方制造商生产，而不是由手机供应商自己生产。支持这些组件的第三方驱动程序源代码被集成到供应商的源代码中。与“可插拔”驱动程序(如USB或网络驱动程序)相比，组件驱动程序的源代码隐含地假定组件硬件是可信的。由于这种信任，很少对组件和设备的主处理器之间的通信执行完整性检查。\n在本文中，我们对这种信任提出了质疑，因为触摸屏经常被打碎，然后被来源可疑的配件市场组件所取代。我们分析一个常用的触摸屏控制器的操作。我们基于恶意的触摸屏硬件构建了两种独立的攻击，作为全面攻击的构建模块:一系列允许触摸屏模拟用户和泄漏数据的触摸注入攻击，以及允许攻击者执行特权操作的缓冲区溢出攻击。结合这两个构建模块，我们提出并评估了一系列端到端的攻击，这些攻击可能会严重危及带有标准固件的普通Android手机。我们的结果为基于硬件的物理对策提供了依据。",
        "title_zh": "破碎的信任:当替换智能手机组件受到攻击时",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/woot/woot2017.html",
        "conf_title": "11th WOOT @ USENIX Security Symposium 2017: Vancouver, BC, Canada",
        "conf_url": "https://www.usenix.org/conference/woot17",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/woot17/workshop-program/presentation/park",
        "title": "White-Stingray: Evaluating IMSI Catchers Detection Applications",
        "authors": "Shinjo Park, Altaf Shaik, Ravishankar Borgaonkar, Andrew Martin, Jean-Pierre Seifert",
        "abstract": "IMSI catchers, also known as fake base station threats, have recently become a real concern. There are currently a few freely available tools to detect such threats, most of which are Android apps that warn users when they are connected to the fake cellular base station. \n \nIn this paper, we evaluate these Android apps and test how resistant they are against various attacking techniques. Such an evaluation is important for not only measuring the available defense against IMSI catchers attacks but also identifying gaps to build effective solutions. We developed White-Stingray, a systematic framework with various attacking capabilities in 2G and 3G networks, and used it for our study. Our results of five popular Android apps are worrisome: none of these apps are resistant to basic privacy identifier catching techniques. Based on our results, we identify limitation of these apps and propose remedies for improving the current state of IMSI catchers detection on mobile devices.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "IMSI捕捉器，也称为伪基站威胁，最近成为一个真正的问题。目前有一些免费的工具可以检测这种威胁，其中大多数是Android应用程序，当用户连接到假冒的蜂窝基站时，它们会向用户发出警告。\n\n在本文中，我们评估了这些Android应用程序，并测试它们对各种攻击技术的抵抗力。这种评估不仅对于衡量针对IMSI捕手攻击的可用防御非常重要，而且对于确定差距以构建有效的解决方案也非常重要。我们开发了White-Stingray，这是一个在2G和3G网络中具有各种攻击能力的系统框架，并将其用于我们的研究。我们对五个流行的Android应用程序的结果令人担忧:这些应用程序都无法抵抗基本的隐私标识符捕获技术。基于我们的结果，我们确定了这些应用程序的局限性，并提出了补救措施，以改善移动设备上IMSI捕手检测的现状。",
        "title_zh": "白色黄貂鱼:评估IMSI捕鼠器探测应用",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/woot/woot2017.html",
        "conf_title": "11th WOOT @ USENIX Security Symposium 2017: Vancouver, BC, Canada",
        "conf_url": "https://www.usenix.org/conference/woot17",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/woot17/workshop-program/presentation/hay",
        "title": "fastboot oem vuln: Android Bootloader Vulnerabilities in Vendor Customizations",
        "authors": "Roee Hay",
        "abstract": "We discuss the fastboot interface of the Android bootloader, an area of fragmentation in Android devices. We then present a variety of vulnerabilities we have found across multiple Android devices. Most notable ones include Secure Boot & Device Locking bypasses in the Motorola and OnePlus 3/3T bootloaders. Another critical flaw in OnePlus 3/3T enables easy attacks by malicious chargers – the only prerequisite is a poweredoff device to be connected. An unexpected attack vector in Nexus 9 is also shown – malicious headphones. Other discovered weaknesses allow for data exfiltration (including a memory dumping of a Nexus 5X device), enablement of hidden functionality such as access to the device’s modem diagnostics and AT interfaces , and attacks against internal System-on-Chips (SoCs) found on the Nexus 9 board.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "我们讨论Android bootloader的fastboot接口，这是Android设备中的一个碎片区。然后，我们展示了我们在多个Android设备上发现的各种漏洞。最值得注意的包括摩托罗拉和OnePlus 3/3T引导加载程序中的安全引导和设备锁定旁路。OnePlus 3/3T的另一个关键缺陷是容易受到恶意充电器的攻击——唯一的先决条件是连接一个断电的设备。还展示了Nexus 9中一个意想不到的攻击载体——恶意耳机。其他发现的弱点包括数据泄露(包括Nexus 5X设备的内存转储)、启用隐藏功能，如访问设备的调制解调器诊断和AT接口，以及对Nexus 9板上的内部片上系统(SOC)的攻击。",
        "title_zh": "fastboot oem漏洞:供应商定制中的Android引导加载程序漏洞",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/woot/woot2017.html",
        "conf_title": "11th WOOT @ USENIX Security Symposium 2017: Vancouver, BC, Canada",
        "conf_url": "https://www.usenix.org/conference/woot17",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/wang-pengfei",
        "title": "How Double-Fetch Situations turn into Double-Fetch Vulnerabilities: A Study of Double Fetches in the Linux Kernel",
        "authors": "Pengfei Wang, Jens Krinke, Kai Lu, Gen Li, Steve Dodier-Lazaro",
        "abstract": "We present the first static approach that systematically \ndetects potential double-fetch vulnerabilities in the Linux kernel. Using a pattern-based analysis, we identified 90 \ndouble fetches in the Linux kernel. 57 of these occur \nin drivers, which previous dynamic approaches were unable \nto detect without access to the corresponding hardware. \nWe manually investigated the 90 occurrences, and \ninferred three typical scenarios in which double fetches \noccur. We discuss each of them in detail. We further developed \na static analysis, based on the Coccinelle matching \nengine, that detects double-fetch situations which can \ncause kernel vulnerabilities. When applied to the Linux, \nFreeBSD, and Android kernels, our approach found six \npreviously unknown double-fetch bugs, four of them in \ndrivers, three of which are exploitable double-fetch vulnerabilities. \nAll of the identified bugs and vulnerabilities \nhave been confirmed and patched by maintainers. Our \napproach has been adopted by the Coccinelle team and \nis currently being integrated into the Linux kernel patch \nvetting. Based on our study, we also provide practical solutions \nfor anticipating double-fetch bugs and vulnerabilities. \nWe also provide a solution to automatically patch \ndetected double-fetch bugs.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "我们提出了第一个静态方法，它系统地\n检测Linux内核中潜在的双重提取漏洞。使用基于模式的分析，我们确定了90个\nLinux内核中的双重获取。其中57起发生在\n在驱动程序中，以前的动态方法不能\n无需访问相应的硬件即可进行检测。\n我们手动调查了90个事件，并且\n推断出两次提取的三种典型情况\n发生。我们将详细讨论它们中的每一个。我们进一步发展了\n基于瓢虫匹配的静态分析\n引擎，检测双重提取的情况，可以\n造成内核漏洞。当应用于Linux时，\nFreeBSD和Android内核，我们的方法找到了六个\n以前未知的双取错误，其中四个在\n驱动程序，其中三个是可利用的双重提取漏洞。\n所有已识别的错误和漏洞\n已经被维护人员确认并打了补丁。我们的\n方法已经被Coccinelle团队采用\n目前正被集成到Linux内核补丁中\n审查。基于我们的研究，我们还提供了切实可行的解决方案\n用于预测双重获取错误和漏洞。\n我们还提供了自动修补的解决方案\n检测到双重提取错误。",
        "title_zh": "双重提取情形如何变成双重提取漏洞:Linux内核中双重提取的研究",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2017.html",
        "conf_title": "26th USENIX Security Symposium 2017: Vancouver, BC, Canada",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity17",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/ning",
        "title": "Ninja: Towards Transparent Tracing and Debugging on ARM",
        "authors": "Zhenyu Ning, Fengwei Zhang",
        "abstract": "Existing malware analysis platforms leave detectable fingerprints like uncommon string properties in QEMU, signatures in Android Java virtual machine, and artifacts in Linux kernel profiles. Since these fingerprints provide the malware a chance to split its behavior depending on whether the analysis system is present or not, existing analysis systems are not sufficient to analyze the sophisticated malware. In this paper, we propose NINJA, a transparent malware analysis framework on ARM platform with low artifacts. NINJA leverages a hardware-assisted isolated execution environment TrustZone to transparently trace and debug a target application with the help of Performance Monitor Unit and Embedded Trace Macrocell. NINJA does not modify system software and is OS-agnostic on ARM platform. We implement a prototype of NINJA (i.e., tracing and debugging subsystems), and the experiment results show that NINJA is efficient and transparent for malware analysis.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "现有的恶意软件分析平台会留下可检测的指纹，如QEMU中不常见的字符串属性、Android Java虚拟机中的签名以及Linux内核配置文件中的工件。由于这些指纹为恶意软件提供了根据分析系统是否存在来分割其行为的机会，所以现有的分析系统不足以分析复杂的恶意软件。本文提出了NINJA，一个基于ARM平台的透明恶意软件分析框架，具有低伪像。NINJA利用硬件辅助的隔离执行环境TrustZone，在性能监控单元和嵌入式跟踪宏单元的帮助下，透明地跟踪和调试目标应用程序。NINJA不修改系统软件，在ARM平台上与操作系统无关。我们实现了一个NINJA原型(即跟踪和调试子系统)，实验结果表明NINJA对于恶意软件分析是高效和透明的。",
        "title_zh": "Ninja:在ARM上实现透明跟踪和调试",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2017.html",
        "conf_title": "26th USENIX Security Symposium 2017: Vancouver, BC, Canada",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity17",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/xue",
        "title": "Malton: Towards On-Device Non-Invasive Mobile Malware Analysis for ART",
        "authors": "Lei Xue, Yajin Zhou, Ting Chen, Xiapu Luo, Guofei Gu",
        "abstract": "It’s an essential step to understand malware’s behaviors for developing effective solutions. Though a number of systems have been proposed to analyze Android malware, they have been limited by incomplete view of inspection on a single layer. What’s worse, various new techniques (e.g., packing, anti-emulator, etc.) employed by the latest malware samples further make these systems ineffective. In this paper, we propose Malton, a novel on-device non-invasive analysis platform for the new Android runtime (i.e., the ART runtime). As a dynamic analysis tool, Malton runs on real mobile devices and provides a comprehensive view of malware’s behaviors by conducting multi-layer monitoring and information flow tracking, as well as efficient path exploration. We have carefully evaluated Malton using real-world malware samples. The experimental results showed that Malton is more effective than existing tools, with the capability to analyze sophisticated malware samples and provide a comprehensive view of malicious behaviors of these samples.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "了解恶意软件的行为对于开发有效的解决方案是必不可少的一步。虽然已经提出了许多系统来分析Android恶意软件，但它们受到单个层上检查的不完整视图的限制。更糟糕的是，各种新技术(例如，打包、反仿真器等。)进一步使这些系统失效。在本文中，我们提出了Malton，一种新的Android运行时(即ART运行时)的新型设备上非侵入式分析平台。作为一种动态分析工具，Malton运行在真实的移动设备上，通过进行多层监控和信息流跟踪以及高效的路径探索，提供恶意软件行为的全面视图。我们已经使用真实世界的恶意软件样本仔细评估了Malton。实验结果表明，Malton比现有工具更有效，能够分析复杂的恶意软件样本，并提供这些样本的恶意行为的综合视图。",
        "title_zh": "Malton:面向ART的设备上非侵入式移动恶意软件分析",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2017.html",
        "conf_title": "26th USENIX Security Symposium 2017: Vancouver, BC, Canada",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity17",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/petracca",
        "title": "AWare: Preventing Abuse of Privacy-Sensitive Sensors via Operation Bindings",
        "authors": "Giuseppe Petracca, Ahmad Atamli-Reineh, Yuqiong Sun, Jens Grossklags, Trent Jaeger",
        "abstract": "System designers have long struggled with the challenge of determining how to control when untrusted applications may perform operations using privacy-sensitive sensors securely and effectively. Current systems request that users authorize such operations once (i.e., on install or first use), but malicious applications may abuse such authorizations to collect data stealthily using such sensors. Proposed research methods enable systems to infer the operations associated with user input events, but malicious applications may still trick users into allowing unexpected, stealthy operations. To prevent users from being tricked, we propose to bind applications’ operation requests to the associated user input events and how they were obtained explicitly, enabling users to authorize operations on privacy-sensitive sensors unambiguously and reuse such authorizations. To demonstrate this approach, we implement the AWare authorization framework for Android, extending the Android Middleware to control access to privacy-sensitive sensors. We evaluate the effectiveness of AWare in: (1) a laboratory-based user study, finding that at most 7% of the users were tricked by examples of four types of attacks when using AWare, instead of 85% on average for prior approaches; (2) a field study, showing that the user authorization effort increases by only 2.28 decisions on average per application; (3) a compatibility study with 1,000 of the most-downloaded Android applications, demonstrating that such applications can operate effectively under AWare.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "系统设计者长期以来一直面临着这样的挑战:如何控制不受信任的应用程序何时可以安全有效地使用隐私敏感传感器执行操作。当前的系统要求用户授权这样的操作一次(即，在安装或第一次使用时)，但是恶意应用可能滥用这样的授权来使用这样的传感器秘密地收集数据。提出的研究方法使系统能够推断与用户输入事件相关联的操作，但恶意应用程序仍可能欺骗用户允许意想不到的秘密操作。为了防止用户被欺骗，我们提出将应用程序的操作请求绑定到相关的用户输入事件以及它们是如何显式获得的，使用户能够明确地授权对隐私敏感的传感器的操作，并重用这种授权。为了演示这种方法，我们为Android实现了AWare授权框架，扩展了Android中间件来控制对隐私敏感传感器的访问。我们在以下方面评估了AWare的有效性:(1)一项基于实验室的用户研究，发现在使用AWare时，最多有7%的用户被四种攻击类型的示例欺骗，而不是之前方法的平均85%；(2)现场研究，表明用户授权努力平均每个应用仅增加2.28个决定；(3)对1，000个下载量最大的Android应用程序进行兼容性研究，证明此类应用程序可以在AWare下有效运行。",
        "title_zh": "AWare:通过操作绑定防止隐私敏感传感器的滥用",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2017.html",
        "conf_title": "26th USENIX Security Symposium 2017: Vancouver, BC, Canada",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity17",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/sikder",
        "title": "6thSense: A Context-aware Sensor-based Attack Detector for Smart Devices",
        "authors": "Amit Kumar Sikder, Hidayet Aksu, A. Selcuk Uluagac",
        "abstract": "Sensors (e.g., light, gyroscope, accelerotmeter) and sensing enabled applications on a smart device make the applications more user-friendly and efficient. However, the current permission-based sensor management systems of smart devices only focus on certain sensors and any App can get access to other sensors by just accessing the generic sensor API. In this way, attackers can exploit these sensors in numerous ways: they can extract or leak users' sensitive information, transfer malware, or record or steal sensitive information from other nearby devices. In this paper, we propose 6thSense, a context-aware intrusion detection system which enhances the security of smart devices by observing changes in sensor data for different tasks of users and creating a contextual model to distinguish benign and malicious behavior of sensors. 6thSense utilizes three different Machine Learning-based detection mechanisms (i.e., Markov Chain, Naive Bayes, and LMT) to detect malicious behavior associated with sensors. We implemented 6thSense on a sensor-rich Android smart device (i.e., smartphone) and collected data from typical daily activities of 50 real users. Furthermore, we evaluated the performance of 6thSense against three sensor-based threats: (1) a malicious App that can be triggered via a sensor (e.g., light), (2) a malicious App that can leak information via a sensor, and (3) a malicious App that can steal data using sensors. Our extensive evaluations show that the 6thSense framework is an effective and practical approach to defeat growing sensor-based threats with an accuracy above 96% without compromising the normal functionality of the device. Moreover, our framework costs minimal overhead.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "智能设备上的传感器(如光线、陀螺仪、加速度计)和支持传感的应用程序使应用程序更加用户友好和高效。然而，当前基于权限的智能设备传感器管理系统只关注某些传感器，任何应用程序都可以通过访问通用传感器API来访问其他传感器。通过这种方式，攻击者可以以多种方式利用这些传感器:他们可以提取或泄露用户的敏感信息，传输恶意软件，或者记录或窃取附近其他设备的敏感信息。在本文中，我们提出了6thSense，这是一个上下文感知的入侵检测系统，它通过观察用户不同任务的传感器数据变化，并创建一个上下文模型来区分传感器的良性和恶意行为，从而增强智能设备的安全性。6thSense利用三种不同的基于机器学习的检测机制(即马尔可夫链、朴素贝叶斯和LMT)来检测与传感器相关联的恶意行为。我们在一个传感器丰富的Android智能设备(即智能手机)上实现了6thSense，并从50个真实用户的典型日常活动中收集了数据。此外，我们评估了6thSense针对三种基于传感器的威胁的性能:(1)可以通过传感器(例如，光)触发的恶意应用，(2)可以通过传感器泄露信息的恶意应用，以及(3)可以使用传感器窃取数据的恶意应用。我们的广泛评估表明，6thSense框架是一种有效而实用的方法，可以击败日益增长的基于传感器的威胁，准确率超过96%，而不会影响设备的正常功能。此外，我们的框架开销最小。",
        "title_zh": "6thSense:面向智能设备的基于上下文感知传感器的攻击检测器",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2017.html",
        "conf_title": "26th USENIX Security Symposium 2017: Vancouver, BC, Canada",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity17",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/jordaney",
        "title": "Transcend: Detecting Concept Drift in Malware Classification Models",
        "authors": "Roberto Jordaney, Kumar Sharad, Santanu Kumar Dash, Zhi Wang, Davide Papini, Ilia Nouretdinov, Lorenzo Cavallaro",
        "abstract": "Building machine learning models of malware behavior is widely accepted as a panacea towards effective malware classification. A crucial requirement for building sustainable learning models, though, is to train on a wide variety of malware samples. Unfortunately, malware evolves rapidly and it thus becomes hard—if not impossible—to generalize learning models to reflect future, previously-unseen behaviors. Consequently, most malware classifiers become unsustainable in the long run, becoming rapidly antiquated as malware continues to evolve. In this work, we propose Transcend, a framework to identify aging classification models in vivo during deployment, much before the machine learning model’s performance starts to degrade. This is a significant departure from conventional approaches that retrain aging models retrospectively when poor performance is observed. Our approach uses a statistical comparison of samples seen during deployment with those used to train the model, thereby building metrics for prediction quality. We show how Transcend can be used to identify concept drift based on two separate case studies on Android andWindows malware, raising a red flag before the model starts making consistently poor decisions due to out-of-date training.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "构建恶意软件行为的机器学习模型被广泛认为是实现有效恶意软件分类的灵丹妙药。然而，建立可持续学习模型的一个关键要求是对各种各样的恶意软件样本进行训练。不幸的是，恶意软件发展迅速，因此很难(如果不是不可能的话)概括学习模型来反映未来的、以前看不到的行为。因此，从长远来看，大多数恶意软件分类器变得不可持续，随着恶意软件的不断发展，它们会迅速过时。在这项工作中，我们提出了Transcend，这是一个在部署期间在体内识别老化分类模型的框架，远远早于机器学习模型的性能开始退化。这与传统的方法有很大的不同，传统的方法是在观察到较差的性能时回顾性地重新训练老化模型。我们的方法使用部署期间看到的样本与用于训练模型的样本的统计比较，从而建立预测质量的度量。我们基于对Android和Windows恶意软件的两个独立案例研究，展示了如何使用Transcend来识别概念漂移，在模型由于过时的训练而开始做出一贯糟糕的决策之前发出红色警报。",
        "title_zh": "Transcend:检测恶意软件分类模型中的概念漂移",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2017.html",
        "conf_title": "26th USENIX Security Symposium 2017: Vancouver, BC, Canada",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity17",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/liu",
        "title": "Measuring the Insecurity of Mobile Deep Links of Android",
        "authors": "Fang Liu, Chun Wang, Andres Pico, Danfeng Yao, Gang Wang",
        "abstract": "Mobile deep links are URIs that point to specific locations within apps, which are instrumental to web-to-app communications. Existing “scheme URLs” are known to have hijacking vulnerabilities where one app can freely register another app’s schemes to hijack the communication. Recently, Android introduced two new methods “App links” and “Intent URLs” which were designed with security features, to replace scheme URLs. While the new mechanisms are secure in theory, little is known about how effective they are in practice. In this paper, we conduct the first empirical measurement on various mobile deep links across apps and websites. Our analysis is based on the deep links extracted from two snapshots of 160,000+ top Android apps from Google Play (2014 and 2016), and 1 million webpages from Alexa top domains. We find that the new linking methods (particularly App links) not only failed to deliver the security benefits as designed, but significantly worsen the situation. First, App links apply link verification to prevent hijacking. However, only 194 apps (2.2% out of 8,878 apps with App links) can pass the verification due to incorrect (or no) implementations. Second, we identify a new vulnerability in App link’s preference setting, which allows a malicious app to intercept arbitrary HTTPS URLs in the browser without raising any alerts. Third, we identify more hijacking cases on App links than existing scheme URLs among both apps and websites. Many of them are targeting popular sites such as online social networks. Finally, Intent URLs have little impact in mitigating hijacking risks due to a low adoption rate on the web.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "移动深度链接是URIs，指向应用程序中的特定位置，这有助于网络到应用程序的通信。现有的“方案URL”存在劫持漏洞，一个应用程序可以自由注册另一个应用程序的方案来劫持通信。最近，Android引入了两种新方法“应用链接”和“意图URL ”,它们被设计成具有安全特性，以取代scheme URLs。虽然新的机制在理论上是安全的，但它们在实践中的有效性却鲜为人知。在本文中，我们对应用程序和网站之间的各种移动深度链接进行了首次实证测量。我们的分析基于从Google Play (2014年和2016年)的160，000+顶级Android应用程序和Alexa顶级域名的100万个网页的两个快照中提取的深度链接。我们发现，新的链接方法(尤其是应用程序链接)不仅没有提供设计的安全性优势，反而使情况严重恶化。第一，App链接应用链接验证，防止劫持。然而，只有194个应用程序(8，878个有应用程序链接的应用程序中的2.2%)可以通过验证，因为实现不正确(或没有实现)。其次，我们在App link的首选项设置中发现了一个新的漏洞，该漏洞允许恶意应用程序在浏览器中拦截任意HTTPS URL，而不会引发任何警报。第三，我们在应用程序和网站中发现了比现有方案URL更多的应用程序链接劫持案例。他们中的许多人瞄准了流行的网站，如在线社交网络。最后，由于在网络上的低采用率，意图URL在减轻劫持风险方面几乎没有影响。",
        "title_zh": "测量Android的移动深度链接的不安全性",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2017.html",
        "conf_title": "26th USENIX Security Symposium 2017: Vancouver, BC, Canada",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity17",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/tang",
        "title": "CLKSCREW: Exposing the Perils of Security-Oblivious Energy Management",
        "authors": "Adrian Tang, Simha Sethumadhavan, Salvatore J. Stolfo",
        "abstract": "The need for powerand energy-efficient computing has resulted in aggressive cooperative hardware-software energy management mechanisms on modern commodity devices. Most systems today, for example, allow software to control the frequency and voltage of the underlying hardware at a very fine granularity to extend battery life. Despite their benefits, these software-exposed energy management mechanisms pose grave security implications that have not been studied before. In this work, we present the CLKSCREW attack, a new class of fault attacks that exploit the securityobliviousness of energy management mechanisms to break security. A novel benefit for the attackers is that these fault attacks become more accessible since they can now be conducted without the need for physical access to the devices or fault injection equipment. We demonstrate CLKSCREW on commodity ARM/Android devices. We show that a malicious kernel driver (1) can extract secret cryptographic keys from Trustzone, and (2) can escalate its privileges by loading self-signed code into Trustzone. As the first work to show the security ramifications of energy management mechanisms, we urge the community to re-examine these security-oblivious designs.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "对高性能和高能效计算的需求导致了现代商用设备上积极的软硬件协同能源管理机制。例如，今天的大多数系统允许软件以非常精细的粒度控制底层硬件的频率和电压，以延长电池寿命。尽管有这些好处，这些软件暴露的能量管理机制造成了以前没有研究过的严重的安全隐患。在本文中，我们提出了CLKSCREW攻击，这是一种新的故障攻击，它利用能量管理机制的安全性来破坏安全性。对攻击者来说，一个新的好处是这些故障攻击变得更容易获得，因为它们现在可以在不需要物理访问设备或故障注入设备的情况下进行。我们在商用ARM/Android设备上演示CLKSCREW。我们证明了恶意内核驱动程序(1)可以从Trustzone中提取秘密密钥，并且(2)可以通过将自签名代码加载到Trustzone中来提升其权限。作为展示能源管理机制的安全分支的第一份工作，我们敦促社区重新检查这些忽视安全的设计。",
        "title_zh": "CLKSCREW:揭露忽视安全的能源管理的危险",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2017.html",
        "conf_title": "26th USENIX Security Symposium 2017: Vancouver, BC, Canada",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity17",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/gasparis",
        "title": "Detecting Android Root Exploits by Learning from Root Providers",
        "authors": "Ioannis Gasparis, Zhiyun Qian, Chengyu Song, Srikanth V. Krishnamurthy",
        "abstract": "Malware that are capable of rooting Android phones are arguably, the most dangerous ones. Unfortunately, detecting the presence of root exploits in malware is a very challenging problem. This is because such malware typically target specific Android devices and/or OS versions and simply abort upon detecting that an expected runtime environment (e.g., specific vulnerable device driver or preconditions) is not present; thus, emulators such as Google Bouncer fail in triggering and revealing such root exploits. In this paper, we build a system RootExplorer, to tackle this problem. The key observation that drives the design of RootExplorer is that, in addition to malware, there are legitimate commercial grade Android apps backed by large companies that facilitate the rooting of phones, referred to as root providers or one-click root apps. By conducting extensive analysis on oneclick root apps, RootExplorer learns the precise preconditions and environmental requirements of root exploits. It then uses this information to construct proper analysis environments either in an emulator or on a smartphone testbed to effectively detect embedded root exploits in malware. Our extensive experimental evaluations with RootExplorer show that it is able to detect all malware samples known to perform root exploits and incurs no false positives. We have also found an app that is currently available on the markets, that has an embedded",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "可以说，能够攻击安卓手机的恶意软件是最危险的。不幸的是，检测恶意软件中根漏洞的存在是一个非常具有挑战性的问题。这是因为这种恶意软件通常以特定的Android设备和/或OS版本为目标，并且在检测到预期的运行时环境(例如，特定的易受攻击的设备驱动程序或前提条件)不存在时简单地中止；因此，Google Bouncer等模拟器无法触发和揭示此类根漏洞。本文构建了一个系统RootExplorer来解决这个问题。驱动RootExplorer设计的关键观察是，除了恶意软件，还有由大公司支持的合法商业级Android应用程序，这些应用程序促进了手机的根，被称为根提供商或一键根应用程序。通过对oneclick root应用程序进行广泛分析，RootExplorer了解了root漏洞利用的精确前提条件和环境要求。然后，它使用这些信息在仿真器或智能手机测试平台上构建适当的分析环境，以有效检测恶意软件中嵌入的根漏洞。我们对RootExplorer的大量实验评估表明，它能够检测到所有已知执行root漏洞利用的恶意软件样本，并且不会导致误报。我们还发现了一个目前市场上可以买到的应用程序，它嵌入了",
        "title_zh": "通过向根提供商学习来检测Android根漏洞",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2017.html",
        "conf_title": "26th USENIX Security Symposium 2017: Vancouver, BC, Canada",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity17",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/chen",
        "title": "Adaptive Android Kernel Live Patching",
        "authors": "Yue Chen, Yulong Zhang, Zhi Wang, Liangzhao Xia, Chenfu Bao, Tao Wei",
        "abstract": "Android kernel vulnerabilities pose a serious threat to user security and privacy. They allow attackers to take full control over victim devices, install malicious and unwanted apps, and maintain persistent control. Unfortunately, most Android devices are never timely updated to protect their users from kernel exploits. Recent Android malware even has built-in kernel exploits to take advantage of this large window of vulnerability. An effective solution to this problem must be adaptable to lots of (out-of-date) devices, quickly deployable, and secure from misuse. However, the fragmented Android ecosystem makes this a complex and challenging task. To address that, we systematically studied 1,139 Android kernels and all the recent critical Android kernel vulnerabilities. We accordingly propose KARMA, an adaptive live patching system for Android kernels. KARMA features a multi-level adaptive patching model to protect kernel vulnerabilities from exploits. Specifically, patches in KARMA can be placed at multiple levels in the kernel to filter malicious inputs, and they can be automatically adapted to thousands of Android devices. In addition, KARMA’s patches are written in a high-level memory-safe language, making them secure and easy to vet, and their run-time behaviors are strictly confined to prevent them from being misused. Our evaluation demonstrates that KARMA can protect most critical kernel vulnerabilities on many Android devices (520 devices in our evaluation) with only minor performance overhead (< 1%).",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android内核漏洞对用户安全和隐私构成严重威胁。它们允许攻击者完全控制受害者设备，安装恶意和不需要的应用程序，并保持持久的控制。不幸的是，大多数Android设备从未及时更新以保护其用户免受内核攻击。最近的Android恶意软件甚至内置了内核漏洞来利用这个大漏洞窗口。这个问题的有效解决方案必须适用于大量(过时的)设备，可快速部署，并且防止误用。然而，支离破碎的Android生态系统使这成为一项复杂而具有挑战性的任务。为了解决这个问题，我们系统地研究了1，139个Android内核以及所有最近出现的严重Android内核漏洞。因此，我们提出了KARMA，一个适用于Android内核的自适应实时补丁系统。KARMA具有多级自适应修补模型，可防止内核漏洞被利用。具体来说，KARMA中的补丁可以放在内核的多个级别上，以过滤恶意输入，它们可以自动适应成千上万的Android设备。此外，KARMA的补丁是用高级内存安全语言编写的，这使得它们安全且易于审查，并且它们的运行时行为被严格限制以防止它们被误用。我们的评估表明，KARMA可以保护许多Android设备(在我们的评估中有520台设备)上的大多数关键内核漏洞，而性能开销很小(< 1%)。",
        "title_zh": "自适应Android内核实时补丁",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2017.html",
        "conf_title": "26th USENIX Security Symposium 2017: Vancouver, BC, Canada",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity17",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/soups2018/presentation/votipka",
        "title": "User Comfort with Android Background Resource Accesses in Different Contexts",
        "authors": "Daniel Votipka, Seth M. Rabin, Kristopher K. Micinski, Thomas Gilray, Michelle L. Mazurek, Jeffrey S. Foster",
        "abstract": "Android apps ask users to allow or deny access to sensitive resources the first time the app needs them. Prior work has shown that users decide whether to grant these requests based on the context. In this work, we investigate user comfort level with resource accesses that happen in a background context, meaning they occur when there is no visual indication of a resource use. For example, accessing the device location after a related button click would be considered an interactive access, and accessing location whenever it changes would be considered a background access. We conducted a 2,198-participant fractional-factorial vignette study, showing each participant a resource-access scenario in one of two mock apps, varying what event triggers the access (when) and how the collected data is used (why). Our results show that both when and why a resource is accessed are important to users’ comfort. In particular, we identify multiple meaningfully different classes of accesses for each these factors, showing that not all background accesses are regarded equally. Based on these results, we make recommendations for how designers of mobile-privacy systems can take these nuanced distinctions into account.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android应用程序要求用户在应用程序第一次需要敏感资源时允许或拒绝访问它们。先前的工作表明，用户根据上下文来决定是否同意这些请求。在这项工作中，我们调查了在后台环境中发生的资源访问的用户舒适度，这意味着它们发生在没有资源使用的视觉指示时。例如，在点击相关按钮之后访问设备位置将被认为是交互式访问，而在位置改变时访问位置将被认为是后台访问。我们进行了一项2198名参与者的部分因子vignette研究，向每个参与者展示了两个模拟应用程序中的一个资源访问场景，改变了触发访问的事件(何时)以及如何使用收集的数据(为什么)。我们的结果表明，访问资源的时间和原因对用户的舒适度都很重要。特别是，我们为这些因素中的每一个确定了多个有意义的不同访问类别，表明并非所有后台访问都被同等对待。基于这些结果，我们对移动隐私系统的设计者如何考虑这些细微差别提出了建议。",
        "title_zh": "不同环境下Android后台资源访问的用户舒适度",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/soups/soups2018.html",
        "conf_title": "14th SOUPS @ USENIX Security Symposium 2018: Baltimore, MD, USA",
        "conf_url": "https://www.usenix.org/conference/soups2018",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity18/presentation/tian",
        "title": "ATtention Spanned: Comprehensive Vulnerability Analysis of AT Commands Within the Android Ecosystem",
        "authors": "Dave (Jing) Tian, Grant Hernandez, Joseph I. Choi, Vanessa Frost, Christie Ruales, Patrick Traynor, Hayawardh Vijayakumar, Lee Harrison, Amir Rahmati, Michael Grace, Kevin R. B. Butler",
        "abstract": "AT commands, originally designed in the early 80s for controlling modems, are still in use in most modern smartphones to support telephony functions. The role of AT commands in these devices has vastly expanded through vendor-specific customizations, yet the extent of their functionality is unclear and poorly documented. In this paper, we systematically retrieve and extract 3,500 AT commands from over 2,000 Android smartphone firmware images across 11 vendors. We methodically test our corpus of AT commands against eight Android devices from four different vendors through their USB interface and characterize the powerful functionality exposed, including the ability to rewrite device firmware, bypass Android security mechanisms, exfiltrate sensitive device information, perform screen unlocks, and inject touch events solely through the use of AT commands. We demonstrate that the AT command interface contains an alarming amount of unconstrained functionality and represents a broad attack surface on Android devices.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "AT命令最初是在80年代初为控制调制解调器而设计的，现在仍在大多数现代智能手机中使用，以支持电话功能。通过供应商特定的定制，AT命令在这些设备中的作用已经大大扩展，但是它们的功能范围还不清楚，也没有很好的记录。在本文中，我们从11家厂商的2，000多个Android智能手机固件映像中系统地检索和提取了3，500个AT命令。我们通过USB接口，针对来自四个不同供应商的八款Android设备，系统地测试了我们的AT命令集，并描述了所暴露的强大功能，包括重写设备固件、绕过Android安全机制、泄露敏感设备信息、执行屏幕解锁以及仅通过使用AT命令注入触摸事件的能力。我们证明at命令界面包含大量不受约束的功能，并在Android设备上表现出广泛的攻击面。",
        "title_zh": "关注范围:Android生态系统中AT命令的全面漏洞分析",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2018.html",
        "conf_title": "27th USENIX Security Symposium 2018: Baltimore, MD, USA",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity18",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity18/presentation/pan",
        "title": "FlowCog: Context-aware Semantics Extraction and Analysis of Information Flow Leaks in Android Apps",
        "authors": "Xiang Pan, Yinzhi Cao, Xuechao Du, Boyuan He, Gan Fang, Rui Shao, Yan Chen",
        "abstract": "—Android apps having access to private information may be legitimate, depending on whether the app provides users enough semantics to justify the access. Existing works analyzing app semantics are coarse-grained, staying on the app-level. They can only identify whether an app, as a whole, should request special permission but cannot answer whether a specific app behavior under a particular runtime context, such as information flow, is correctly justified. We propose FlowCog , an automated system to extract semantics related to information flows and correlate such semantics with given information flows to address these issues. Particularly, FlowCog statically finds all the Android views related to the given flow via control or data dependencies and then extracts semantics, such as texts and images, from these views and associated layouts. Next, FlowCog adopts natural language processing and deep learning approaches to infer whether the extracted semantics correlate with the given flow. FlowCog is open-source and available at https://github.com/xcdu/FlowCog. Our evaluation shows that FlowCog can achieve an accuracy rate of 95.4% and an F 1 score of 0.953.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "—访问私人信息的Android应用程序可能是合法的，这取决于该应用程序是否为用户提供了足够的语义来证明访问的合理性。现有的分析应用程序语义的工作是粗粒度的，停留在应用程序级别。他们只能确定一个应用程序作为一个整体是否应该请求特殊权限，但不能回答特定运行时上下文(如信息流)下的特定应用程序行为是否正确。我们提出了FlowCog，一个自动提取与信息流相关的语义并将这种语义与给定的信息流相关联的系统，来解决这些问题。具体来说，FlowCog通过控制或数据依赖静态地找到与给定流程相关的所有Android视图，然后从这些视图和相关布局中提取语义，例如文本和图像。接下来，FlowCog采用自然语言处理和深度学习方法来推断提取的语义是否与给定的流相关。FlowCog是开源的，可在https://github.com/xcdu/FlowCog.获得。我们的评估显示，FlowCog可以实现95.4%的准确率和0.953的F 1分数。",
        "title_zh": "FlowCog:Android应用中上下文感知语义提取和信息流泄漏分析",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2018.html",
        "conf_title": "27th USENIX Security Symposium 2018: Baltimore, MD, USA",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity18",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity18/presentation/zhang-hang",
        "title": "Precise and Accurate Patch Presence Test for Binaries",
        "authors": "Hang Zhang, Zhiyun Qian",
        "abstract": "Patching is the main resort to battle software vulnerabilities. It is critical to ensure that patches are propagated to all affected software timely, which, unfortunately, is often not the case. Thus the capability to accurately test the security patch presence in software distributions is crucial, for both defenders and attackers. Inspired by human analysts’ behaviors to inspect only small and localized code areas, we present FIBER, an automated system that leverages this observation in its core design. FIBER works by first parsing and analyzing the open-source security patches carefully and then generating fine-grained binary signatures that faithfully reflect the most representative syntax and semantic changes introduced by the patch, which are used to search against target binaries. Compared to previous work, FIBER leverages the source-level insight strategically by primarily focusing on small changes of patches and minimal contexts, instead of the whole function or file. We have systematically evaluated FIBER using 107 real-world security patches and 8 Android kernel images from 3 different mainstream vendors, the results show that FIBER can achieve an average accuracy of 94% with no false positives.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "打补丁是对抗软件漏洞的主要手段。确保补丁及时传播到所有受影响的软件是至关重要的，但不幸的是，情况往往并非如此。因此，准确测试软件发行版中安全补丁存在的能力对于防御者和攻击者都是至关重要的。受人类分析师只检查小的和本地化的代码区域的行为的启发，我们提出了FIBER，一个在其核心设计中利用这种观察的自动化系统。FIBER的工作方式是首先仔细解析和分析开源安全补丁，然后生成细粒度的二进制签名，这些签名忠实地反映了补丁引入的最具代表性的语法和语义变化，用于搜索目标二进制文件。与以前的工作相比，FIBER战略性地利用了源代码级的洞察力，主要关注补丁和最小上下文的小变化，而不是整个函数或文件。我们使用107个真实世界的安全补丁和来自3个不同主流供应商的8个Android内核映像对FIBER进行了系统评估，结果显示FIBER可以达到94%的平均准确率，没有误报。",
        "title_zh": "对二进制文件进行精确的补丁存在测试",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2018.html",
        "conf_title": "27th USENIX Security Symposium 2018: Baltimore, MD, USA",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity18",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity18/presentation/zhang-xiaohan",
        "title": "An Empirical Study of Web Resource Manipulation in Real-world Mobile Applications",
        "authors": "Xiaohan Zhang, Yuan Zhang, Qianqian Mo, Hao Xia, Zhemin Yang, Min Yang, Xiaofeng Wang, Long Lu, Hai-Xin Duan",
        "abstract": "Mobile apps have become the main channel for accessing Web services. Both Android and iOS feature inapp Web browsers that support convenient Web service integration through a set of Web resource manipulation APIs. Previous work have revealed the attack surfaces of Web resource manipulation APIs and proposed several defense mechanisms. However, none of them provides evidence that such attacks indeed happen in the real world, measures their impacts, and evaluates the proposed defensive techniques against real attacks. This paper seeks to bridge this gap with a large-scale empirical study on Web resource manipulation behaviors in real-world Android apps. To this end, we first define the problem as cross-principal manipulation (XPM) of Web resources, and then design an automated tool named XPMChecker to detect XPM behaviors in apps. Through a study on 80,694 apps from Google Play, we find that 49.2% of manipulation cases are XPM, 4.8% of the apps have XPM behaviors, and more than 70% XPM behaviors aim at top Web sites. More alarmingly, we discover 21 apps with obvious malicious intents, such as stealing and abusing cookies, collecting user credentials and impersonating legitimate parties. For the first time, we show the presence of XPM threats in real-world apps. We also confirm the existence of such threats in iOS apps. Our experiments show that popular Web service providers are largely unaware of such threats. Our measurement results contribute to better understanding of such threats and the development of more effective and usable countermeasures.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "移动应用已经成为访问网络服务的主要渠道。Android和iOS都具有inapp Web浏览器，这些浏览器通过一组Web资源操作API支持方便的Web服务集成。先前的工作揭示了Web资源操纵API的攻击面，并提出了几种防御机制。然而，它们中没有一个提供了这样的攻击确实在现实世界中发生的证据，测量了它们的影响，并且评估了针对真实攻击所提出的防御技术。本文试图通过对现实世界中Android应用程序的网络资源操作行为的大规模实证研究来弥合这一差距。为此，我们首先将问题定义为Web资源的跨主体操纵(XPM)，然后设计一个名为XPMChecker的自动化工具来检测应用程序中的XPM行为。通过对Google Play的80694个应用的研究，我们发现49.2%的操纵案例是XPM，4.8%的应用有XPM行为，超过70%的XPM行为针对顶级网站。更令人担忧的是，我们发现21个应用程序具有明显的恶意意图，如窃取和滥用cookies，收集用户凭据和冒充合法方。我们第一次在现实世界的应用中展示了XPM威胁的存在。我们也确认iOS应用中存在此类威胁。我们的实验表明，流行的网络服务提供商很大程度上没有意识到这种威胁。我们的测量结果有助于更好地理解此类威胁，并开发更有效和可用的对策。",
        "title_zh": "现实移动应用中网络资源操作的实证研究",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2018.html",
        "conf_title": "27th USENIX Security Symposium 2018: Baltimore, MD, USA",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity18",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity18/presentation/wong",
        "title": "Tackling runtime-based obfuscation in Android with TIRO",
        "authors": "Michelle Y. Wong, David Lie",
        "abstract": "Obfuscation is used in malware to hide malicious activity from manual or automatic program analysis. On the Android platform, malware has had a history of using obfuscation techniques such as Java reflection, code packing and value encryption. However, more recent malware has turned to employing obfuscation that subverts the integrity of the Android runtime (ART or Dalvik), a technique we call runtime-based obfuscation. Once subverted, the runtime no longer follows the normally expected rules of code execution and method invocation, raising the difficulty of deobfuscating and analyzing malware that use these techniques. In this work, we propose TIRO, a deobfuscation framework for Android using an approach of TargetInstrument-Run-Observe. TIRO provides a unified framework that can deobfuscate malware that use a combination of traditional obfuscation and newer runtimebased obfuscation techniques. We evaluate and use TIRO on a dataset of modern Android malware samples and find that TIRO can automatically detect and reverse language-based and runtime-based obfuscation. We also evaluate TIRO on a corpus of 2000 malware samples from VirusTotal and find that runtime-based obfuscation techniques are present in 80% of the samples, demonstrating that runtime-based obfuscation is a significant tool employed by Android malware authors today.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "混淆在恶意软件中用于隐藏恶意活动，以避免人工或自动程序分析。在Android平台上，恶意软件有使用混淆技术的历史，如Java反射、代码打包和值加密。然而，最近的恶意软件已经转向使用混淆，破坏Android运行时(ART或Dalvik)的完整性，这种技术我们称为基于运行时的混淆。一旦遭到破坏，运行时将不再遵循通常预期的代码执行和方法调用规则，从而增加了清除和分析使用这些技术的恶意软件的难度。在这项工作中，我们提出了TIRO，一个使用TargetInstrument-Run-Observe方法的Android去融合框架。TIRO提供了一个统一的框架，可以利用传统的混淆技术和更新的基于运行时的混淆技术的组合来消除恶意软件。我们在现代Android恶意软件样本数据集上评估和使用TIRO，发现TIRO可以自动检测和逆转基于语言和基于运行时的混淆。我们还在VirusTotal的2000个恶意软件样本语料库上评估了TIRO，发现基于运行时的混淆技术出现在80%的样本中，表明基于运行时的混淆是当今Android恶意软件作者使用的重要工具。",
        "title_zh": "用TIRO解决Android中基于运行时的混淆",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2018.html",
        "conf_title": "27th USENIX Security Symposium 2018: Baltimore, MD, USA",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity18",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity18/presentation/bonett",
        "title": "Discovering Flaws in Security-Focused Static Analysis Tools for Android using Systematic Mutation",
        "authors": "Richard Bonett, Kaushal Kafle, Kevin Moran, Adwait Nadkarni, Denys Poshyvanyk",
        "abstract": "Mobile application security has been one of the major areas of security research in the last decade. Numerous application analysis tools have been proposed in response to malicious, curious, or vulnerable apps. However, existing tools, and specifically, static analysis tools, trade soundness of the analysis for precision and performance, and are hence soundy. Unfortunately, the specific unsound choices or flaws in the design of these tools are often not known or well-documented, leading to a misplaced confidence among researchers, developers, and users. This paper proposes the Mutation-based soundness evaluation (µSE) framework, which systematically evaluates Android static analysis tools to discover, document, and fix, flaws, by leveraging the well-founded practice of mutation analysis. We implement µSE as a semi-automated framework, and apply it to a set of prominent Android static analysis tools that detect private data leaks in apps. As the result of an in-depth analysis of one of the major tools, we discover 13 undocumented flaws. More importantly, we discover that all 13 flaws propagate to tools that inherit the flawed tool. We successfully fix one of the flaws in cooperation with the tool developers. Our results motivate the urgent need for systematic discovery and documentation of unsound choices in soundy tools, and demonstrate the opportunities in leveraging mutation testing in achieving this goal.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "移动应用安全是近十年来安全研究的主要领域之一。为了应对恶意、好奇或易受攻击的应用程序，已经提出了许多应用程序分析工具。然而，现有的工具，特别是静态分析工具，在精度和性能之间权衡了分析的合理性，因此是合理的。不幸的是，这些工具的设计中具体的不合理选择或缺陷通常不为人知或没有很好的记录，导致研究人员、开发人员和用户之间错误的信任。本文提出了基于突变的可靠性评估(SE)框架，该框架系统地评估Android静态分析工具，通过利用突变分析的良好实践来发现、记录和修复缺陷。我们将SE作为一个半自动框架来实现，并将其应用于一组著名的Android静态分析工具，这些工具可以检测应用程序中的私人数据泄漏。作为对其中一个主要工具进行深入分析的结果，我们发现了13个未记录的缺陷。更重要的是，我们发现所有13个缺陷都传播到继承了有缺陷工具的工具。我们与工具开发人员合作，成功修复了其中一个缺陷。我们的结果激发了对系统发现和记录健全工具中不健全选择的迫切需要，并展示了利用突变测试实现这一目标的机会。",
        "title_zh": "使用系统突变发现Android安全静态分析工具中的缺陷",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2018.html",
        "conf_title": "27th USENIX Security Symposium 2018: Baltimore, MD, USA",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity18",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/woot16/workshop-program/presentation/saltaformaggio",
        "title": "Eavesdropping on Fine-Grained User Activities Within Smartphone Apps Over Encrypted Network Traffic",
        "authors": "Brendan Saltaformaggio, Hongjun Choi, Kristen Johnson, Yonghwi Kwon, Qi Zhang, Xiangyu Zhang, Dongyan Xu, John Qian",
        "abstract": "Smartphone apps have changed the way we interact with online services, but highly specialized apps come at a cost to privacy. In this paper we will demonstrate that a passive eavesdropper is capable of identifying finegrained user activities within the wireless network traffic generated by apps. Despite the widespread use of fully encrypted communication, our technique, called NetScope, is based on the intuition that the highly specific implementation of each app leaves a fingerprint on its traffic behavior (e.g., transfer rates, packet exchanges, and data movement). By learning the subtle traffic behavioral differences between activities (e.g., \"browsing\" versus \"chatting\" in a dating app), NetScope is able to perform robust inference of users' activities, for both Android and iOS devices, based solely on inspecting IP headers. Our evaluation with 35 widely popular app activities (ranging from social networking and dating to personal health and presidential campaigns) shows that NetScope yields high detection accuracy (78.04% precision and 76.04% recall on average).",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "智能手机应用程序改变了我们与在线服务互动的方式，但高度专业化的应用程序以隐私为代价。在本文中，我们将证明被动窃听者能够识别应用程序生成的无线网络流量中的细粒度用户活动。尽管完全加密的通信得到了广泛使用，但我们名为NetScope的技术基于一种直觉，即每个应用程序的高度特定的实现都会在其流量行为(例如，传输速率、数据包交换和数据移动)上留下指纹。通过了解活动之间的细微流量行为差异(例如，约会应用程序中的“浏览”与“聊天”)，NetScope能够仅基于检查IP报头，对Android和iOS设备的用户活动进行可靠的推断。我们对35个广泛流行的应用程序活动(从社交网络和约会到个人健康和总统竞选)的评估表明，NetScope产生了很高的检测准确性(平均78.04%的精确度和76.04%的召回率)。",
        "title_zh": "通过加密的网络流量窃听智能手机应用程序中的精细用户活动",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/woot/woot2016.html",
        "conf_title": "10th WOOT 2016: Austin, TX, USA",
        "conf_url": "https://www.usenix.org/conference/woot16",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/woot16/workshop-program/presentation/spisak",
        "title": "Hardware-Assisted Rootkits: Abusing Performance Counters on the ARM and x86 Architectures",
        "authors": "Matt Spisak",
        "abstract": "In this paper, a novel hardware-assisted rootkit is introduced, which leverages the performance monitoring unit (PMU) of a CPU. By configuring hardware performance counters to count specific architectural events, this research effort proves it is possible to transparently trap system calls and other interrupts driven entirely by the PMU. This offers an attacker the opportunity to redirect control flow to malicious code without requiring modifications to a kernel image. \n \nThe approach is demonstrated as a kernel-mode rootkit on both the ARM and Intel x86-64 architectures that is capable of intercepting system calls while evading current kernel patch protection implementations such as PatchGuard. A proof-of-concept Android rootkit is developed targeting ARM (Krait) chipsets found in millions of smartphones worldwide, and a similar Windows rootkit is developed for the Intel x86-64 architecture. The prototype PMU-assisted rootkit adds minimal overhead to Android, and less than 10% overhead to Windows OS. Further analysis into performance counters also reveals that the PMU can be used to trap returns from secure world on ARM as well as returns from System Management Mode on x86-64.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "本文介绍了一种新颖的硬件辅助rootkit，它利用了CPU的性能监控单元(PMU)。通过配置硬件性能计数器来计数特定的架构事件，这项研究工作证明了透明地捕获系统调用和其他完全由PMU驱动的中断是可能的。这为攻击者提供了将控制流重定向到恶意代码的机会，而无需修改内核映像。\n\n该方法被证明是ARM和Intel x86-64架构上的内核模式rootkit，能够拦截系统调用，同时规避当前的内核补丁保护实施，如PatchGuard。一个概念验证的Android rootkit是针对全球数百万部智能手机中的ARM (Krait)芯片组开发的，一个类似的Windows rootkit是针对英特尔x86-64架构开发的。原型PMU辅助的rootkit为Android增加了最小的开销，为Windows OS增加了不到10%的开销。对性能计数器的进一步分析还显示，PMU可用于捕获来自ARM上的安全世界的返回，以及来自x86-64上的系统管理模式的返回。",
        "title_zh": "硬件辅助的Rootkits:滥用ARM和x86架构上的性能计数器",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/woot/woot2016.html",
        "conf_title": "10th WOOT 2016: Austin, TX, USA",
        "conf_url": "https://www.usenix.org/conference/woot16",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/wheeler",
        "title": "zxcvbn: Low-Budget Password Strength Estimation",
        "authors": "Daniel Lowe Wheeler",
        "abstract": "For over 30 years, password requirements and feedback have largely remained a product of LUDS: counts of lowerand uppercase letters, digits and symbols. LUDS remains ubiquitous despite being a conclusively burdensome and ineffective security practice. zxcvbn is an alternative password strength estimator that is small, fast, and crucially no harder than LUDS to adopt. Using leaked passwords, we compare its estimations to the best of four modern guessing attacks and show it to be accurate and conservative at low magnitudes, suitable for mitigating online attacks. We find 1.5 MB of compressed storage is sufficient to accurately estimate the best-known guessing attacks up to 105 guesses, or 104 and 103 guesses, respectively, given 245 kB and 29 kB. zxcvbn can be adopted with 4 lines of code and downloaded in seconds. It runs in milliseconds and works as-is on web, iOS and Android.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "30多年来，密码要求和反馈在很大程度上仍然是LUDS的产物:小写和大写字母、数字和符号的计数。LUDS仍然无处不在，尽管它是一种负担沉重且效率低下的安全措施。zxcvbn是一个替代的密码强度估计器，它小巧、快速，而且关键是不比LUDS更难采用。使用泄漏的密码，我们将它的估计与四种现代猜测攻击的最佳估计进行比较，并显示它在低量级下是准确和保守的，适合于减轻在线攻击。我们发现，在给定245 kB和29 kB的情况下，1.5 MB的压缩存储足以准确估计最著名的猜测攻击多达105次猜测，或者分别为104次和103次猜测。zxcvbn可以通过4行代码，几秒钟下载。它可以在几毫秒内运行，可以在web、iOS和Android上运行。",
        "title_zh": "zxcvbn:低预算密码强度评估",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2016.html",
        "conf_title": "25th USENIX Security Symposium 2016: Washington, D.C., USA",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity16",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/lipp",
        "title": "ARMageddon: Cache Attacks on Mobile Devices",
        "authors": "Moritz Lipp, Daniel Gruss, Raphael Spreitzer, Clémentine Maurice, Stefan Mangard",
        "abstract": "In the last 10 years, cache attacks on Intel x86 CPUs have gained increasing attention among the scientific community and powerful techniques to exploit cache side channels have been developed. However, modern smartphones use one or more multi-core ARM CPUs that have a different cache organization and instruction set than Intel x86 CPUs. So far, no cross-core cache attacks have been demonstrated on non-rooted Android smartphones. In this work, we demonstrate how to solve key challenges to perform the most powerful cross-core cache attacks Prime+Probe, Flush+Reload, Evict+Reload, and Flush+Flush on non-rooted ARM-based devices without any privileges. Based on our techniques, we demonstrate covert channels that outperform state-of-the-art covert channels on Android by several orders of magnitude. Moreover, we present attacks to monitor tap and swipe events as well as keystrokes, and even derive the lengths of words entered on the touchscreen. Eventually, we are the first to attack cryptographic primitives implemented in Java. Our attacks work across CPUs and can even monitor cache activity in the ARM TrustZone from the normal world. The techniques we present can be used to attack hundreds of millions of Android devices.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "在过去的10年中，对Intel x86 CPUs的高速缓存攻击在科学界引起了越来越多的关注，并且开发出了利用高速缓存侧通道的强大技术。然而，现代智能手机使用一个或多个多核ARM CPUs，这些CPU具有与英特尔x86 CPUs不同的高速缓存组织和指令集。到目前为止，在非根Android智能手机上还没有演示过跨核缓存攻击。在这项工作中，我们演示了如何解决在没有任何权限的非根ARM设备上执行最强大的跨核缓存攻击Prime+Probe、Flush+Reload、Evict+Reload和Flush+Flush的关键挑战。基于我们的技术，我们展示了比Android上最先进的隐蔽通道好几个数量级的隐蔽通道。此外，我们提出攻击来监控点击和滑动事件以及击键，甚至推导出在触摸屏上输入的单词长度。最终，我们第一个攻击用Java实现的密码原语。我们的攻击跨CPU工作，甚至可以从正常世界监视ARM信任区中的缓存活动。我们提出的技术可以用来攻击数以亿计的Android设备。",
        "title_zh": "世界末日:移动设备上的缓存攻击",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2016.html",
        "conf_title": "25th USENIX Security Symposium 2016: Washington, D.C., USA",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity16",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/backes_android",
        "title": "On Demystifying the Android Application Framework: Re-Visiting Android Permission Specification Analysis",
        "authors": "Michael Backes, Sven Bugiel, Erik Derr, Patrick D. McDaniel, Damien Octeau, Sebastian Weisgerber",
        "abstract": "In contrast to the Android application layer, Android’s application framework’s internals and their influence on the platform security and user privacy are still largely a black box for us. In this paper, we establish a static runtime model of the application framework in order to study its internals and provide the first high-level classification of the framework’s protected resources. We thereby uncover design patterns that differ highly from the runtime model at the application layer. We demonstrate the benefits of our insights for security-focused analysis of the framework by re-visiting the important use-case of mapping Android permissions to framework/SDK API methods. We, in particular, present a novel mapping based on our findings that significantly improves on prior results in this area that were established based on insufficient knowledge about the framework’s internals. Moreover, we introduce the concept of permission locality to show that although framework services follow the principle of separation of duty, the accompanying permission checks to guard sensitive operations violate it.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "与Android应用层相反，Android的应用框架的内部结构及其对平台安全和用户隐私的影响在很大程度上对我们来说仍然是一个黑匣子。在本文中，我们建立了一个应用框架的静态运行时模型，以研究其内部结构，并提供框架受保护资源的第一个高级分类。因此，我们在应用层揭示了与运行时模型高度不同的设计模式。我们通过重温将Android权限映射到框架/SDK API方法的重要用例，展示了我们对框架的安全分析的见解的好处。特别是，我们基于我们的发现提出了一种新的映射，它显著改进了该领域中基于对框架内部知识不足而建立的先前结果。此外，我们引入了权限局部性的概念，以表明尽管框架服务遵循职责分离的原则，但是伴随的保护敏感操作的权限检查违反了这一原则。",
        "title_zh": "揭开Android应用框架的神秘面纱——重新审视Android权限规范分析",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2016.html",
        "conf_title": "25th USENIX Security Symposium 2016: Washington, D.C., USA",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity16",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/nadkarni",
        "title": "Practical DIFC Enforcement on Android",
        "authors": "Adwait Nadkarni, Benjamin Andow, William Enck, Somesh Jha",
        "abstract": "Smartphone users often use private and enterprise data with untrusted third party applications. The fundamental lack of secrecy guarantees in smartphone OSes, such as Android, exposes this data to the risk of unauthorized exfiltration. A natural solution is the integration of secrecy guarantees into the OS. In this paper, we describe the challenges for decentralized information flow control (DIFC) enforcement on Android. We propose contextsensitive DIFC enforcement via lazy polyinstantiation and practical and secure network export through domain declassification. Our DIFC system, Weir, is backwards compatible by design, and incurs less than 4 ms overhead for component startup. With Weir, we demonstrate practical and secure DIFC enforcement on Android.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "智能手机用户经常通过不可信的第三方应用程序使用私人和企业数据。智能手机操作系统(如Android)基本缺乏保密保证，使这些数据面临未经授权的泄露风险。一个自然的解决方案是将保密保证集成到操作系统中。在本文中，我们描述了在Android上实施分散信息流控制(DIFC)所面临的挑战。我们建议通过惰性多实例化实施上下文敏感的DIFC，并通过域解密实现实用安全的网络导出。我们的DIFC系统Weir通过设计向后兼容，组件启动开销不到4 ms。借助Weir，我们在Android上展示了实用且安全的DIFC实施。",
        "title_zh": "Android上的实用DIFC实施",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2016.html",
        "conf_title": "25th USENIX Security Symposium 2016: Washington, D.C., USA",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity16",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/saltaformaggio",
        "title": "Screen after Previous Screens: Spatial-Temporal Recreation of Android App Displays from Memory Images",
        "authors": "Brendan Saltaformaggio, Rohit Bhatia, Xiangyu Zhang, Dongyan Xu, Golden G. Richard III",
        "abstract": "Smartphones are increasingly involved in cyber and real world crime investigations. In this paper, we demonstrate a powerful smartphone memory forensics technique, called RetroScope, which recovers multiple previous screens of an Android app — in the order they were displayed — from the phone’s memory image. Different from traditional memory forensics, RetroScope enables spatial-temporal forensics, revealing the progression of the phone user’s interactions with the app (e.g., a banking transaction, online chat, or document editing session). RetroScope achieves near perfect accuracy in both the recreation and ordering of reconstructed screens. Further, RetroScope is app-agnostic, requiring no knowledge about an app’s internal data definitions or rendering logic. RetroScope is inspired by the observations that (1) app-internal data on previous screens exists much longer in memory than the GUI data structures that “package” them and (2) each app is able to perform context-free redrawing of its screens upon command from the Android framework. Based on these, RetroScope employs a novel interleaved re-execution engine to selectively reanimate an app’s screen redrawing functionality from within a memory image. Our evaluation shows that RetroScope is able to recover full temporally-ordered sets of screens (each with 3 to 11 screens) for a variety of popular apps on a number of different Android devices.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "智能手机越来越多地参与网络和现实世界的犯罪调查。在本文中，我们展示了一种强大的智能手机内存取证技术，称为RetroScope，它可以从手机的内存图像中恢复一个Android应用程序的多个先前屏幕-按照它们显示的顺序。与传统的内存取证不同，RetroScope支持时空取证，揭示手机用户与应用程序交互的进展(例如，银行交易、在线聊天或文档编辑会话)。RetroScope在重建屏幕的重建和排序方面达到了近乎完美的准确性。此外，RetroScope与应用程序无关，不需要了解应用程序的内部数据定义或渲染逻辑。RetroScope的灵感来自以下观察结果:( 1)先前屏幕上的应用程序内部数据在内存中的存在时间比“打包”它们的GUI数据结构长得多,( 2)每个应用程序都能够根据Android框架的命令执行其屏幕的上下文无关重绘。基于这些，RetroScope采用了一种新颖的交错重新执行引擎，从内存映像中有选择地重新激活应用程序的屏幕重绘功能。我们的评估表明，RetroScope能够为许多不同Android设备上的各种流行应用程序恢复完整的时间有序屏幕集(每个屏幕有3到11个屏幕)。",
        "title_zh": "前几个屏幕之后的屏幕:从记忆图像中对Android应用程序显示进行时空重建",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2016.html",
        "conf_title": "25th USENIX Security Symposium 2016: Washington, D.C., USA",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity16",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/aafer",
        "title": "Harvesting Inconsistent Security Configurations in Custom Android ROMs via Differential Analysis",
        "authors": "Yousra Aafer, Xiao Zhang, Wenliang Du",
        "abstract": "Android customization offers substantially different experiences and rich functionalities to users. Every party in the customization chain, such as vendors and carriers, modify the OS and the pre-installed apps to tailor their devices for a variety of models, regions, and custom services. However, these modifications do not come at no cost. Several existing studies demonstrate that modifying security configurations during the customization brings in critical security vulnerabilities. Albeit these serious consequences, little has been done to systematically study how Android customization can lead to security problems, and how severe the situation is. In this work, we systematically identified security features that, if altered during the customization, can introduce potential risks. We conducted a large scale differential analysis on 591 custom images to detect inconsistent security features. Our results show that these discrepancies are indeed prevalent among our collected images. We have further identified several risky patterns that warrant further investigation. We have designed attacks on real devices and confirmed that these inconsistencies can indeed lead to actual security breaches.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android定制为用户提供了完全不同的体验和丰富的功能。定制链中的每一方，如供应商和运营商，都会修改操作系统和预装的应用程序，以针对各种型号、地区和定制服务定制他们的设备。然而，这些修改并不是没有代价的。一些现有的研究表明，在定制过程中修改安全配置会带来严重的安全漏洞。尽管这些后果很严重，但很少有人系统地研究Android定制如何导致安全问题，以及情况有多严重。在这项工作中，我们系统地确定了一些安全特性，如果在定制过程中改变了这些特性，就会带来潜在的风险。我们对591个自定义图像进行了大规模差异分析，以检测不一致的安全特征。我们的结果表明，这些差异确实普遍存在于我们收集的图像中。我们进一步确定了几个值得进一步调查的风险模式。我们设计了对真实设备的攻击，并证实这些不一致确实会导致实际的安全漏洞。",
        "title_zh": "通过差异分析收集定制Android ROMs中不一致的安全配置",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2016.html",
        "conf_title": "25th USENIX Security Symposium 2016: Washington, D.C., USA",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity16",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/cset16/workshop-program/presentation/kikuchi",
        "title": "Evaluating Malware Mitigation by Android Market Operators",
        "authors": "Yosuke Kikuchi, Hiroshi Mori, Hiroki Nakano, Katsunari Yoshioka, Tsutomu Matsumoto, Michel van Eeten",
        "abstract": "All Android markets are confronted with malicious apps, but they differ in how effective they deal with them. In this study, we evaluate the mitigation efforts of Google Play and four third-party markets. We define three metrics and measure how sensitive they are to different detection results from anti-virus vendors. Malware presence in three third-party markets – Liqucn, eoeMarket and Mumayi – is around ten times higher than in Google Play and Freeware Lovers. Searching for certain keywords in Google Play leads leads to a fifty times higher malware rate than those for popular apps. Finally, we measure malware survival times and find that Google Play seems to be the only market that effectively removes malware, though it contains a cluster of apps flagged as adware and malware over long time periods. This points to different incentives for app markets, anti-virus vendors and users.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "所有的Android市场都面临着恶意应用，但他们在处理这些应用的有效性方面有所不同。在这项研究中，我们评估了Google Play和四个第三方市场的缓解工作。我们定义了三个指标，并测量它们对来自反病毒供应商的不同检测结果的敏感度。三个第三方市场——liqui cn、eoeMarket和Mumayi——的恶意软件数量比Google Play和免费软件爱好者高出约10倍。在Google Play中搜索某些关键词会导致比热门应用高出50倍的恶意软件比率。最后，我们测量了恶意软件的存活时间，发现Google Play似乎是唯一一个有效删除恶意软件的市场，尽管它包含一系列长时间标记为广告软件和恶意软件的应用程序。这表明了应用市场、反病毒软件供应商和用户的不同动机。",
        "title_zh": "评估Android市场运营商的恶意软件缓解措施",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/cset2016.html",
        "conf_title": "CSET @ USENIX Security Symposium 2016: Austin, TX, USA",
        "conf_url": "https://www.usenix.org/conference/cset16",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/woot15/workshop-program/presentation/peles",
        "title": "One Class to Rule Them All: 0-Day Deserialization Vulnerabilities in Android",
        "authors": "Or Peles, Roee Hay",
        "abstract": "We present previously unknown high severity vulnerabilities in Android. \n \nThe first is in the Android Platform and Google Play Services. The Platform instance affects Android 4.3-5.1, M (Preview 1) or 55% of Android devices at the time of writing. This vulnerability allows for arbitrary code execution in the context of many apps and services and results in elevation of privileges. In this paper we also demonstrate a Proof-of-Concept exploit against the Google Nexus 5 device, that achieves code execution inside the highly privileged system_server process, and then either replaces an existing arbitrary application on the device with our own malware app or changes the device's SELinux policy. For some other devices, we are also able to gain kernel code execution by loading an arbitrary kernel module. We had responsibly disclosed the vulnerability to Android Security Team which tagged it as CVE-2015-3825 (internally as ANDROID-21437603/21583894) and patched Android 4.4/5.x/M and Google Play Services. \n \nFor the sake of completeness we also made a large-scale experiment over 32,701 of Android applications, finding similar previously unknown deserialization vulnerabilities, identified by CVE-2015-2000/1/2/3/4/20, in 6 SDKs affecting multiple apps. We responsibly (privately) contacted the SDKs' vendors or code maintainers so they would provide patches. Further analysis showed that many of the SDKs were vulnerable due to weak code generated by SWIG, an interoperability tool that connects C/C++ with a variety of languages, when fed with some bad configuration given by the developer. We therefore worked closely with the SWIG team to make sure it would generate more robust code -- patches are available.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "我们介绍了Android中以前未知的高严重性漏洞。\n\n首先是在Android平台和Google Play服务中。平台实例在撰写时影响Android 4.3-5.1、M(预览版1)或55%的Android设备。该漏洞允许在许多应用和服务的上下文中执行任意代码，并导致权限提升。在本文中，我们还展示了针对Google Nexus 5设备的概念验证利用，该利用实现了高度特权的system_server进程内的代码执行，然后用我们自己的恶意软件应用程序替换设备上现有的任意应用程序，或者更改设备的SELinux策略。对于其他一些设备，我们也能够通过加载任意内核模块来获得内核代码执行。我们负责任地向Android安全团队披露了该漏洞，该团队将其标记为CVE-2015-3825(内部标记为ANDROID-21437603/21583894)，并修补了Android 4.4/5.x/M和Google Play服务。\n\n为了完整起见，我们还对32，701个Android应用程序进行了大规模实验，在影响多个应用程序的6个SDK中发现了类似的先前未知的反序列化漏洞，这些漏洞由CVE-2015-2000/1/2/3/4/20确定。我们负责任地(私下)联系了SDK的供应商或代码维护者，让他们提供补丁。进一步的分析表明，许多SDK容易受到SWIG生成的脆弱代码的攻击，SWIG是一种将C/C++与各种语言连接起来的互操作性工具，当使用开发人员提供的一些糟糕的配置时。因此，我们与SWIG团队紧密合作，以确保它能够生成更健壮的代码——补丁是可用的。",
        "title_zh": "一个类来统治它们:Android中的0天反序列化漏洞",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/woot/woot2015.html",
        "conf_title": "9th WOOT 2015: Washington, DC, USA",
        "conf_url": "https://www.usenix.org/conference/woot15",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/woot15/workshop-program/presentation/xu",
        "title": "Own Your Android! Yet Another Universal Root",
        "authors": "Wen Xu, Yubin Fu",
        "abstract": "In recent years, to find a universal root solution for Android becomes harder and harder due to rare vulnerabilities in the Linux kernel base and also the exploit mitigations applied on the devices by various vendors. \n \nIn this paper, we will present our universal root solution. The related vulnerability CVE-2015-3636, a typical use-after-free bug in Linux kernel is discussed in detail. Exploiting such a use-after-free in Linux kernel is truly difficult due to the separated allocation from the kernel allocator. We will show how we leverage this kernel use-after-free bug to achieve privilege promotion on most popular Android devices on market which have a version not less than 4.3, including the first 64bit root case in the world. In short, we will present a generic way to exploit use-after-free vulnerabilities in Linux kernel, which means one exploit applies to devices of all brands. All the current mitigations in the kernel like PXN are circumvented by this approach. And most importantly our unique and undocumented exploitation technique targeting kernel use-after-free bugs features stability and accuracy.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "近年来，由于Linux内核基础中罕见的漏洞以及各个供应商在设备上应用的漏洞缓解措施，为Android找到一个通用的根解决方案变得越来越困难。\n\n在本文中，我们将提出我们的通用根解决方案。详细讨论了相关漏洞CVE-2015-3636，这是一个典型的Linux内核释放后使用漏洞。在Linux内核中利用这种先用后免的特性确实很困难，因为分配是从内核分配器中分离出来的。我们将展示我们如何利用这个释放后使用内核的错误，在市场上最受欢迎的版本不低于4.3的Android设备上实现特权提升，包括世界上第一个64位root case。简而言之，我们将介绍一种利用Linux内核中释放后使用漏洞的通用方法，这意味着一次利用适用于所有品牌的设备。内核中所有当前的缓解措施，如PXN，都被这种方法规避了。最重要的是，我们针对内核释放后使用错误的独特和未记录的利用技术具有稳定性和准确性。",
        "title_zh": "拥有您的Android！另一个普遍的根源",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/woot/woot2015.html",
        "conf_title": "9th WOOT 2015: Washington, DC, USA",
        "conf_url": "https://www.usenix.org/conference/woot15",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/reaves",
        "title": "Mo(bile) Money, Mo(bile) Problems: Analysis of Branchless Banking Applications in the Developing World",
        "authors": "Bradley Reaves, Nolen Scaife, Adam Bates, Patrick Traynor, Kevin R. B. Butler",
        "abstract": "Mobile money, also known as branchless banking, brings much-needed financial services to the unbanked in the developing world. Leveraging ubiquitous cellular networks, these services are now being deployed as smart phone apps, providing an electronic payment infrastructure where alternatives such as credit cards generally do not exist. Although widely marketed as a more secure option to cash, these applications are often not subject to the traditional regulations applied in the financial sector, leaving doubt as to the veracity of such claims. In this paper, we evaluate these claims and perform the first in-depth measurement analysis of branchless banking applications. We first perform an automated analysis of all 46 known Android mobile money apps across the 246 known mobile money providers and demonstrate that automated analysis fails to provide reliable insights. We subsequently perform comprehensive manual teardown of the registration, login, and transaction procedures of a diverse 15% of these apps. We uncover pervasive and systemic vulnerabilities spanning botched certification validation, do-it-yourself cryptography, and myriad other forms of information leakage that allow an attacker to impersonate legitimate users, modify transactions in flight, and steal financial records. These findings confirm that the majority of these apps fail to provide the protections needed by financial services. Finally, through inspection of providers' terms of service, we also discover that liability for these problems unfairly rests on the shoulders of the customer, threatening to erode trust in branchless banking and hinder efforts for global financial inclusion.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "移动货币，也被称为无分支银行，为发展中国家没有银行账户的人带来了急需的金融服务。利用无处不在的蜂窝网络，这些服务现在被部署为智能手机应用，在信用卡等替代品通常不存在的地方提供电子支付基础设施。尽管这些应用程序被广泛宣传为比现金更安全的选择，但它们往往不受金融部门适用的传统法规的约束，这让人对这种说法的真实性产生了怀疑。在本文中，我们评估了这些主张，并对无分支银行应用进行了首次深入的测量分析。我们首先对246个已知移动货币提供商的所有46个已知Android移动货币应用进行了自动化分析，并证明自动化分析无法提供可靠的见解。随后，我们对其中15%的应用程序的注册、登录和交易程序进行了全面的人工拆除。我们发现了无处不在的系统漏洞，包括拙劣的认证验证、自己动手加密和无数其他形式的信息泄漏，这些漏洞允许攻击者冒充合法用户、修改交易并窃取财务记录。这些发现证实，这些应用程序中的大多数未能提供金融服务所需的保护。最后，通过检查提供商的服务条款，我们还发现这些问题的责任不公平地落在了客户的肩上，这有可能侵蚀对无分支银行的信任，并阻碍全球金融包容性的努力。",
        "title_zh": "Mo(胆汁)货币，Mo(胆汁)问题:发展中国家无分行银行应用分析",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2015.html",
        "conf_title": "24th USENIX Security Symposium 2015: Washington, D.C., USA",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity15",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/oltrogge",
        "title": "To Pin or Not to Pin-Helping App Developers Bullet Proof Their TLS Connections",
        "authors": "Marten Oltrogge, Yasemin Acar, Sergej Dechand, Matthew Smith, Sascha Fahl",
        "abstract": "For increased security during TLS certificate validation, a common recommendation is to use a variation of pinning. Especially non-browser software developers are encouraged to limit the number of trusted certificates to a minimum, since the default CA-based approach is known to be vulnerable to serious security threats. \n \nThe decision for or against pinning is always a tradeoff between increasing security and keeping maintenance efforts at an acceptable level. In this paper, we present an extensive study on the applicability of pinning for non-browser software by analyzing 639,283 Android apps. Conservatively, we propose pinning as an appropriate strategy for 11,547 (1.8%) apps or for 45,247 TLS connections (4.25%) in our sample set. With a more optimistic classification of borderline cases, we propose pinning for consideration for 58,817 (9.1%) apps or for 140,020 (3.8%1) TLS connections. This weakens the assumption that pinning is a widely usable strategy for TLS security in non-browser software. However, in a nominalactual comparison, we find that only 45 apps actually implement pinning. We collected developer feedback from 45 respondents and learned that only a quarter of them grasp the concept of pinning, but still find pinning too complex to use. Based on their feedback, we built an easy-to-use web-application that supports developers in the decision process and guides them through the correct deployment of a pinning-protected TLS implementation.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "为了提高TLS证书验证期间的安全性，一个常见的建议是使用不同的固定方式。特别鼓励非浏览器软件开发人员将可信证书的数量限制到最小，因为默认的基于CA的方法容易受到严重的安全威胁。\n\n支持或反对钉住的决定总是在增加安全性和将维护工作保持在可接受的水平之间进行权衡。在本文中，我们通过分析639，283个Android应用程序，对非浏览器软件的锁定适用性进行了广泛的研究。保守地说，我们建议对样本集中的11，547个(1.8%)应用或45，247个(4.25%)TLS连接采用固定策略。通过对临界情况进行更乐观的分类，我们建议对58，817 (9.1%)个应用或140，020 (3.8%1)个TLS连接进行锁定考虑。这削弱了牵制是非浏览器软件中广泛使用的TLS安全策略的假设。然而，在名义上的实际比较中，我们发现只有45个应用程序实际上实现了锁定。我们从45个回答者那里收集了开发人员的反馈，了解到只有四分之一的人理解了锁定的概念，但是仍然发现锁定太复杂而无法使用。根据他们的反馈，我们构建了一个易于使用的web应用程序，在决策过程中为开发人员提供支持，并指导他们正确部署受锁定保护的TLS实施。",
        "title_zh": "钉住还是不钉住——帮助应用程序开发人员防弹他们的TLS连接",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2015.html",
        "conf_title": "24th USENIX Security Symposium 2015: Washington, D.C., USA",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity15",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/wang-ruowen",
        "title": "EASEAndroid: Automatic Policy Analysis and Refinement for Security Enhanced Android via Large-Scale Semi-Supervised Learning",
        "authors": "Ruowen Wang, William Enck, Douglas S. Reeves, Xinwen Zhang, Peng Ning, Dingbang Xu, Wu Zhou, Ahmed M. Azab",
        "abstract": "Mandatory protection systems such as SELinux and SEAndroid harden operating system integrity. Unfortunately, policy development is error prone and requires lengthy refinement using audit logs from deployed systems. While prior work has studied SELinux policy in detail, SEAndroid is relatively new and has received little attention. SEAndroid policy engineering differs significantly from SELinux: Android fundamentally differs from traditional Linux; the same policy is used on millions of devices for which new audit logs are continually available; and audit logs contain a mix of benign and malicious accesses. In this paper, we propose EASEAndroid, the first SEAndroid analytic platform for automatic policy analysis and refinement. Our key insight is that the policy refinement process can be modeled and automated using semi-supervised learning. Given an existing policy and a small set of known access patterns, EASEAndroid continually expands the knowledge base as new audit logs become available, producing suggestions for policy refinement. We evaluate EASEAndroid on 1.3 million audit logs from real-world devices. EASEAndroid successfully learns 2,518 new access patterns and generates 331 new policy rules. During this process, EASEAndroid discovers eight categories of attack access patterns in real devices, two of which are new attacks directly against the SEAndroid MAC mechanism.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "SELinux和SEAndroid等强制保护系统强化了操作系统的完整性。不幸的是，策略开发容易出错，并且需要使用来自已部署系统的审计日志进行冗长的改进。虽然之前的工作已经详细研究了SELinux策略，但是SEAndroid相对较新，很少受到关注。SEAndroid策略工程与SELinux显著不同:Android与传统的Linux有着根本的不同；相同的策略被用在数百万个设备上，这些设备的新审计日志持续可用；和恶意访问的混合。在本文中，我们提出了EASEAndroid，这是第一个用于自动策略分析和细化的SEAndroid分析平台。我们的关键见解是，可以使用半监督学习对策略细化过程进行建模和自动化。给定一个现有的策略和一小组已知的访问模式，EASEAndroid会随着新的审计日志的出现而不断扩展知识库，从而为策略改进提供建议。我们在来自真实设备的130万个审计日志上评估了EASEAndroid。EASEAndroid成功学习了2，518个新的访问模式，并生成了331个新的策略规则。在这个过程中，EASEAndroid在真实设备中发现了八类攻击访问模式，其中两类是直接针对SEAndroid MAC机制的新攻击。",
        "title_zh": "EASEAndroid:通过大规模半监督学习对安全性增强的Android进行自动策略分析和改进",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2015.html",
        "conf_title": "24th USENIX Security Symposium 2015: Washington, D.C., USA",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity15",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/karapanos",
        "title": "Sound-Proof: Usable Two-Factor Authentication Based on Ambient Sound",
        "authors": "Nikolaos Karapanos, Claudio Marforio, Claudio Soriente, Srdjan Capkun",
        "abstract": "Two-factor authentication protects online accounts even if passwords are leaked. Most users, however, prefer password-only authentication. One reason why two-factor authentication is so unpopular is the extra steps that the user must complete in order to log in. Currently deployed two-factor authentication mechanisms require the user to interact with his phone to, for example, copy a verification code to the browser. Two-factor authentication schemes that eliminate user-phone interaction exist, but require additional software to be deployed. \n \nIn this paper we propose Sound-Proof, a usable and deployable two-factor authentication mechanism. Sound-Proof does not require interaction between the user and his phone. In Sound-Proof the second authentication factor is the proximity of the user's phone to the device being used to log in. The proximity of the two devices is verified by comparing the ambient noise recorded by their microphones. Audio recording and comparison are transparent to the user, so that the user experience is similar to the one of password-only authentication. Sound-Proof can be easily deployed as it works with current phones and major browsers without plugins. We build a prototype for both Android and iOS. We provide empirical evidence that ambient noise is a robust discriminant to determine the proximity of two devices both indoors and outdoors, and even if the phone is in a pocket or purse. We conduct a user study designed to compare the perceived usability of Sound-Proof with Google 2-Step Verification. Participants ranked Sound-Proof as more usable and the majority would be willing to use Sound-Proof even for scenarios in which two-factor authentication is optional.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "即使密码泄露，双因素身份验证也能保护在线帐户。然而，大多数用户更喜欢仅使用密码的身份验证。双因素身份验证如此不受欢迎的一个原因是用户登录时必须完成的额外步骤。当前部署的双因素认证机制要求用户与他的电话交互，例如，将验证码复制到浏览器。消除用户电话交互的双因素认证方案是存在的，但是需要部署额外的软件。\n\n在本文中，我们提出了可靠的、可用的和可部署的双因素认证机制。隔音不需要用户和他的电话之间的交互。在隔音方面，第二个认证因素是用户手机与用于登录的设备的接近度。通过比较两个设备的麦克风记录的环境噪声来验证这两个设备的接近度。音频记录和比较对用户是透明的，因此用户体验类似于仅使用密码的身份验证。隔音可以很容易地部署，因为它与当前的手机和主要浏览器没有插件。我们为Android和iOS构建了一个原型。我们提供的经验证据表明，环境噪声是确定两个设备在室内和室外的接近度的可靠判别标准，即使手机在口袋或钱包中。我们进行了一项用户研究，旨在比较隔音和谷歌两步验证的感知可用性。参与者认为隔音更有用，大多数人愿意使用隔音，即使在双因素身份认证可选的情况下也是如此。",
        "title_zh": "隔音:基于环境声音的可用双因素认证",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2015.html",
        "conf_title": "24th USENIX Security Symposium 2015: Washington, D.C., USA",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity15",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/wijesekera",
        "title": "Android Permissions Remystified: A Field Study on Contextual Integrity",
        "authors": "Primal Wijesekera, Arjun Baokar, Ashkan Hosseini, Serge Egelman, David A. Wagner, Konstantin Beznosov",
        "abstract": "We instrumented the Android platform to collect data regarding how often and under what circumstances smartphone applications access protected resources regulated by permissions. We performed a 36-person field study to explore the notion of \"contextual integrity,\" i.e., how often applications access protected resources when users are not expecting it. Based on our collection of 27M data points and exit interviews with participants, we examine the situations in which users would like the ability to deny applications access to protected resources. At least 80% of our participants would have preferred to prevent at least one permission request, and overall, they stated a desire to block over a third of all requests. Our findings pave the way for future systems to automatically determine the situations in which users would want to be confronted with security decisions.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "我们对Android平台进行了测试，以收集关于智能手机应用程序在何种情况下以何种频率访问受权限控制的受保护资源的数据。我们进行了一项36人的现场研究，以探索“上下文完整性”的概念，即当用户不期望时，应用程序访问受保护资源的频率。基于我们收集的2700万个数据点和对参与者的离职面谈，我们研究了用户希望能够拒绝应用程序访问受保护资源的情况。至少80%的参与者倾向于阻止至少一个权限请求，总体而言，他们表示希望阻止超过三分之一的请求。我们的发现为未来系统自动确定用户想要面对安全决策的情况铺平了道路。",
        "title_zh": "Android权限再神秘化:关于上下文完整性的实地研究",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2015.html",
        "conf_title": "24th USENIX Security Symposium 2015: Washington, D.C., USA",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity15",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/chen-kai",
        "title": "Finding Unknown Malice in 10 Seconds: Mass Vetting for New Threats at the Google-Play Scale",
        "authors": "Kai Chen, Peng Wang, Yeonjoon Lee, XiaoFeng Wang, Nan Zhang, Heqing Huang, Wei Zou, Peng Liu",
        "abstract": "An app market's vetting process is expected to be scalable and effective. However, today's vetting mechanisms are slow and less capable of catching new threats. In our research, we found that a more powerful solution can be found by exploiting the way Android malware is constructed and disseminated, which is typically through repackaging legitimate apps with similar malicious components. As a result, such attack payloads often stand out from those of the same repackaging origin and also show up in the apps not supposed to relate to each other. \n \nBased upon this observation, we developed a new technique, called MassVet, for vetting apps at a massive scale, without knowing what malware looks like and how it behaves. Unlike existing detection mechanisms, which often utilize heavyweight program analysis techniques, our approach simply compares a submitted app with all those already on a market, focusing on the difference between those sharing a similar UI structure (indicating a possible repackaging relation), and the commonality among those seemingly unrelated. Once public libraries and other legitimate code reuse are removed, such diff/common program components become highly suspicious. In our research, we built this \"Diff-Com\" analysis on top of an efficient similarity comparison algorithm, which maps the salient features of an app's UI structure or a method's control-flow graph to a value for a fast comparison. We implemented MassVet over a stream processing engine and evaluated it nearly 1.2 million apps from 33 app markets around the world, the scale of Google Play. Our study shows that the technique can vet an app within 10 seconds at a low false detection rate. Also, it outperformed all 54 scanners in VirusTotal (NOD32, Symantec, McAfee, etc.) in terms of detection coverage, capturing over a hundred thousand malicious apps, including over 20 likely zero-day malware and those installed millions of times. A close look at these apps brings to light intriguing new observations e.g., Google's detection strategy and malware authors' countermoves that cause the mysterious disappearance and reappearance of some Google Play apps.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "应用市场的审查过程应该是可扩展的和有效的。然而，今天的审查机制速度缓慢，而且捕捉新威胁的能力较弱。在我们的研究中，我们发现通过利用Android恶意软件的构造和传播方式，可以找到更强大的解决方案，这通常是通过用类似的恶意组件重新包装合法应用程序。因此，这种攻击载荷经常从那些相同的重新打包来源中脱颖而出，并且还出现在不应该彼此相关的应用程序中。\n\n基于这一观察，我们开发了一种新技术，称为MassVet，用于大规模审查应用程序，而不知道恶意软件的样子和行为方式。与现有的检测机制不同，现有的检测机制经常利用重量级的程序分析技术，我们的方法只是将提交的应用程序与市场上已经存在的所有应用程序进行比较，重点关注共享相似UI结构的应用程序之间的差异(表明可能的重新打包关系)，以及那些看似不相关的应用程序之间的共性。一旦删除了公共库和其他合法的代码重用，这样的diff/common程序组件就会变得非常可疑。在我们的研究中，我们在一个高效的相似性比较算法的基础上建立了这种“Diff-Com”分析，该算法将应用程序的UI结构或方法的控制流图的显著特征映射到一个值，以便进行快速比较。我们在流处理引擎上实现了MassVet，并对来自全球33个应用市场的近120万个应用进行了评估，规模相当于Google Play。我们的研究表明，该技术可以在10秒内审查一个应用程序，错误检测率很低。此外，它优于VirusTotal中的所有54种扫描器(NOD32、Symantec、McAfee等)。)在检测覆盖率方面，捕获了超过10万个恶意应用程序，包括超过20个可能的零日恶意软件和那些安装了数百万次的恶意软件。仔细观察这些应用程序会发现有趣的新观察结果，例如，谷歌的检测策略和恶意软件作者的对策导致了一些Google Play应用程序的神秘消失和重新出现。",
        "title_zh": "在10秒钟内发现未知恶意:在Google-Play范围内大规模审查新威胁",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2015.html",
        "conf_title": "24th USENIX Security Symposium 2015: Washington, D.C., USA",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity15",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/chen-jin",
        "title": "You Shouldn't Collect My Secrets: Thwarting Sensitive Keystroke Leakage in Mobile IME Apps",
        "authors": "Jin Chen, Haibo Chen, Erick Bauman, Zhiqiang Lin, Binyu Zang, Haibing Guan",
        "abstract": "IME (input method editor) apps are the primary means of interaction on mobile touch screen devices and thus are usually granted with access to a wealth of private user input. In order to understand the (in)security of mobile IME apps, this paper first performs a systematic study and uncovers that many IME apps may (intentionally or unintentionally) leak users' sensitive data to the outside world (mainly due to the incentives of improving the user's experience). To thwart the threat of sensitive information leakage while retaining the benefits of an improved user experience, this paper then proposes I-BOX, an app-transparent oblivious sandbox that minimizes sensitive input leakage by confining untrusted IME apps to predefined security policies. Several key challenges have to be addressed due to the proprietary and closed-source nature of most IME apps and the fact that an IME app can arbitrarily store and transform user input before sending it out. By designing system-level transactional execution, I-BOX works seamlessly and transparently with IME apps. Specifically, I-BOX first checkpoints an IME app's state before the first keystroke of an input, monitors and analyzes the user's input, and rolls back the state to the checkpoint if it detects the potential danger that sensitive input may be leaked. A proof of concept I-BOX prototype has been built for Android and tested with a set of popular IME apps. Experimental results show that I-BOX is able to thwart the leakage of sensitive input for untrusted IME apps, while incurring very small runtime overhead and little impact on user experience.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "IME(输入法编辑器)应用是移动触摸屏设备上的主要交互方式，因此通常被授予访问大量私人用户输入的权限。为了了解移动IME应用的安全性，本文首先进行了系统的研究，揭示了许多IME应用可能(有意或无意地)向外界泄露用户的敏感数据(主要是由于改善用户体验的激励)。为了阻止敏感信息泄漏的威胁，同时保留改善用户体验的好处，本文随后提出了I-BOX，这是一个应用透明的遗忘沙箱，通过将不受信任的IME应用限制到预定义的安全策略来最大限度地减少敏感输入泄漏。由于大多数IME应用程序的专有和闭源性质，以及IME应用程序可以在发送用户输入之前任意存储和转换用户输入的事实，必须解决几个关键挑战。通过设计系统级的交易执行，I-BOX可以无缝、透明地与IME应用协同工作。具体来说，I-BOX首先在输入的第一次按键之前检查IME应用的状态，监控和分析用户的输入，如果检测到敏感输入可能被泄露的潜在危险，则将状态回滚到检查点。一个概念验证的I-BOX原型已经为Android开发出来，并通过一系列流行的IME应用程序进行了测试。实验结果表明，I-BOX能够阻止不受信任的IME应用程序的敏感输入泄露，同时产生非常小的运行时开销，对用户体验几乎没有影响。",
        "title_zh": "你不应该收集我的秘密:阻止移动IME应用程序中的敏感按键泄漏",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2015.html",
        "conf_title": "24th USENIX Security Symposium 2015: Washington, D.C., USA",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity15",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/backes",
        "title": "Boxify: Full-fledged App Sandboxing for Stock Android",
        "authors": "Michael Backes, Sven Bugiel, Christian Hammer, Oliver Schranz, Philipp von Styp-Rekowsky",
        "abstract": "We present the first concept for full-fledged app sandboxing on stock Android. Our approach is based on application virtualization and process-based privilege separation to securely encapsulate untrusted apps in an isolated environment. In contrast to all related work on stock Android, we eliminate the necessity to modify the code of monitored apps, and thereby overcome existing legal concerns and deployment problems that rewriting-based approaches have been facing. We realize our concept as a regular Android app called Boxify that can be deployed without firmware modifications or root privileges. A systematic evaluation of Boxify demonstrates its capability to enforce established security policies without incurring a significant runtime performance overhead.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "我们提出了第一个在普通Android上的成熟应用沙盒的概念。我们的方法基于应用虚拟化和基于流程的权限分离，在隔离环境中安全封装不受信任的应用。与股票Android上的所有相关工作相比，我们消除了修改受监控应用程序代码的必要性，从而克服了基于重写的方法一直面临的现有法律问题和部署问题。我们意识到我们的概念是一个名为Boxify的常规Android应用程序，无需修改固件或root权限即可部署。对Boxify的系统评估表明，它有能力在不导致显著运行时性能开销的情况下执行已建立的安全策略。",
        "title_zh": "Boxify:成熟的Android应用沙盒",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2015.html",
        "conf_title": "24th USENIX Security Symposium 2015: Washington, D.C., USA",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity15",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/fawaz",
        "title": "Anatomization and Protection of Mobile Apps' Location Privacy Threats",
        "authors": "Kassem Fawaz, Huan Feng, Kang G. Shin",
        "abstract": "Mobile users are becoming increasingly aware of the privacy threats resulting from apps' access of their location. Few of the solutions proposed thus far to mitigate these threats have been deployed as they require either app or platform modifications. Mobile operating systems (OSes) also provide users with location access controls. In this paper, we analyze the efficacy of these controls in combating the location-privacy threats. For this analysis, we conducted the first location measurement campaign of its kind, analyzing more than 1000 free apps from Google Play and collecting detailed usage of location by more than 400 location-aware apps and 70 Advertisement and Analytics (A&A) libraries from more than 100 participants over a period ranging from 1 week to 1 year. Surprisingly, 70% of the apps and the A&A libraries pose considerable profiling threats even when they sporadically access the user's location. Existing OS controls are found ineffective and inefficient in mitigating these threats, thus calling for a finer-grained location access control. To meet this need, we propose LP-Doctor, a light-weight user-level tool that allows Android users to effectively utilize the OS's location access controls while maintaining the required app's functionality as our userstudy (with 227 participants) shows.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "移动用户越来越意识到应用程序访问他们的位置所带来的隐私威胁。迄今为止，为缓解这些威胁而提出的解决方案很少得到部署，因为它们需要修改应用程序或平台。移动操作系统(OS)也为用户提供位置访问控制。在本文中，我们分析了这些控制在对抗位置隐私威胁的有效性。为了进行这项分析，我们开展了第一次此类位置测量活动，分析了Google Play的1000多个免费应用程序，并从100多名参与者那里收集了400多个位置感知应用程序和70个广告和分析(A&A)库在1周到1年期间对位置的详细使用情况。令人惊讶的是，70%的应用程序和A&A图书馆构成了相当大的档案威胁，即使它们偶尔访问用户的位置。发现现有的操作系统控制在缓解这些威胁方面无效且低效，因此需要更细粒度的位置访问控制。为了满足这一需求，我们提出了LP-Doctor，这是一种轻量级用户级工具，允许Android用户有效地利用操作系统的位置访问控制，同时保持所需的应用程序功能，如我们的用户研究(有227名参与者)所示。",
        "title_zh": "移动应用位置隐私威胁的剖析与防护",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2015.html",
        "conf_title": "24th USENIX Security Symposium 2015: Washington, D.C., USA",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity15",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/michalevsky",
        "title": "PowerSpy: Location Tracking Using Mobile Device Power Analysis",
        "authors": "Yan Michalevsky, Aaron Schulman, Gunaa Arumugam Veerapandian, Dan Boneh, Gabi Nakibly",
        "abstract": "Modern mobile platforms like Android enable applications to read aggregate power usage on the phone. This information is considered harmless and reading it requires no user permission or notification. We show that by simply reading the phone's aggregate power consumption over a period of a few minutes an application can learn information about the user's location. Aggregate phone power consumption data is extremely noisy due to the multitude of components and applications that simultaneously consume power. Nevertheless, by using machine learning algorithms we are able to successfully infer the phone's location. We discuss several ways in which this privacy leak can be remedied.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "像Android这样的现代移动平台使应用程序能够读取手机上的总用电量。这些信息被认为是无害的，阅读它们不需要用户许可或通知。我们表明，通过简单地读取手机在几分钟内的总功耗，应用程序就可以了解用户的位置信息。由于大量组件和应用程序同时消耗电能，合计电话功耗数据噪声极大。然而，通过使用机器学习算法，我们能够成功地推断出手机的位置。我们讨论了补救这种隐私泄露的几种方法。",
        "title_zh": "PowerSpy:使用移动设备功耗分析进行位置跟踪",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2015.html",
        "conf_title": "24th USENIX Security Symposium 2015: Washington, D.C., USA",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity15",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/ren-chuangang",
        "title": "Towards Discovering and Understanding Task Hijacking in Android",
        "authors": "Chuangang Ren, Yulong Zhang, Hui Xue, Tao Wei, Peng Liu",
        "abstract": "Android multitasking provides rich features to enhance user experience and offers great flexibility for app developers to promote app personalization. However, the security implication of Android multitasking remains under-investigated. With a systematic study of the complex tasks dynamics, we find design flaws of Android multitasking which make all recent versions of Android vulnerable to task hijacking attacks. We demonstrate proof-of-concept examples utilizing the task hijacking attack surface to implement UI spoofing, denial-of-service and user monitoring attacks. Attackers may steal login credentials, implement ransomware and spy on user's activities. We have collected and analyzed over 6.8 million apps from various Android markets. Our analysis shows that the task hijacking risk is prevalent. Since many apps depend on the current multitasking design, defeating task hijacking is not easy. We have notified the Android team about these issues and we discuss possible mitigation techniques in this paper.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android多任务处理提供了丰富的功能来增强用户体验，并为应用程序开发人员提供了极大的灵活性来促进应用程序个性化。然而，Android多任务处理的安全含义仍未得到充分研究。通过对复杂任务动态的系统研究，我们发现了Android多任务的设计缺陷，这使得所有最新版本的Android都容易受到任务劫持攻击。我们展示了利用任务劫持攻击面实现UI欺骗、拒绝服务和用户监控攻击的概念验证示例。攻击者可能会窃取登录凭据，实施勒索软件并窥探用户的活动。我们从各种Android市场收集并分析了超过680万个应用程序。我们的分析表明，任务劫持风险是普遍存在的。由于许多应用依赖于当前的多任务设计，战胜任务劫持并不容易。我们已经将这些问题通知了Android团队，并在本文中讨论了可能的缓解技术。",
        "title_zh": "发现和理解Android中的任务劫持",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2015.html",
        "conf_title": "24th USENIX Security Symposium 2015: Washington, D.C., USA",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity15",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/huang",
        "title": "SUPOR: Precise and Scalable Sensitive User Input Detection for Android Apps",
        "authors": "Jianjun Huang, Zhichun Li, Xusheng Xiao, Zhenyu Wu, Kangjie Lu, Xiangyu Zhang, Guofei Jiang",
        "abstract": "While smartphones and mobile apps have been an essential part of our lives, privacy is a serious concern. Previous mobile privacy related research efforts have largely focused on predefined known sources managed by smartphones. Sensitive user inputs through UI (User Interface), another information source that may contain a lot of sensitive information, have been mostly neglected. \n \nIn this paper, we examine the possibility of scalably detecting sensitive user inputs from mobile apps. In particular, we design and implement SUPOR, a novel static analysis tool that automatically examines the UIs to identify sensitive user inputs containing critical user data, such as user credentials, finance, and medical data. SUPOR enables existing privacy analysis approaches to be applied on sensitive user inputs as well. To demonstrate the usefulness of SUPOR, we build a system that detects privacy disclosures of sensitive user inputs by combining SUPOR with off-the-shelf static taint analysis We apply the system to 16,000 popular Android apps, and conduct a measurement study on the privacy disclosures. SUPOR achieves an average precision of 97.3% and an average recall of 97.3% for sensitive user input identification. SUPOR finds 355 apps with privacy disclosures and the false positive rate is 8.7%. We discover interesting cases related to national ID, username/password, credit card and health information.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "虽然智能手机和移动应用已经成为我们生活中必不可少的一部分，但隐私是一个严重的问题。以前的移动隐私相关研究工作主要集中在智能手机管理的预定义已知来源上。通过UI(用户界面)的敏感用户输入，另一个可能包含许多敏感信息的信息源，已经被大多数人忽略了。\n\n在本文中，我们研究了从移动应用程序中可扩展地检测敏感用户输入的可能性。特别是，我们设计并实现了SUPOR，这是一种新颖的静态分析工具，它可以自动检查用户界面，以识别包含关键用户数据的敏感用户输入，如用户凭据、财务和医疗数据。SUPOR使现有的隐私分析方法也能应用于敏感的用户输入。为了证明苏泊尔的有用性，我们通过将苏泊尔与现成的静态污点分析相结合，构建了一个检测敏感用户输入隐私泄露的系统。我们将该系统应用于16，000个流行的Android应用程序，并对隐私泄露进行了测量研究。苏泊尔对敏感用户输入识别的平均准确率达到97.3%，平均召回率达到97.3%。苏泊尔发现355个应用存在隐私泄露，误报率为8.7%。我们发现了一些有趣的案例，涉及身份证、用户名/密码、信用卡和健康信息。",
        "title_zh": "SUPOR:针对Android应用的精确且可扩展的敏感用户输入检测",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2015.html",
        "conf_title": "24th USENIX Security Symposium 2015: Washington, D.C., USA",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity15",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity23/presentation/schepers",
        "title": "Framing Frames: Bypassing Wi-Fi Encryption by Manipulating Transmit Queues",
        "authors": "Domien Schepers, Aanjhan Ranganathan, Mathy Vanhoef",
        "abstract": "Wi-Fi devices routinely queue frames at various layers of the network stack before transmitting, for instance, when the receiver is in sleep mode. In this work, we investigate how Wi-Fi access points manage the security context of queued frames. By exploiting power-save features, we show how to trick access points into leaking frames in plaintext, or encrypted using the group or an all-zero key. We demonstrate resulting attacks against several open-source network stacks. We attribute our findings to the lack of explicit guidance in managing security contexts of buffered frames in the 802.11 standards. The unprotected nature of the power-save bit in a frame’s header, which our work reveals to be a fundamental design flaw, also allows an adversary to force queue frames intended for a specific client resulting in its disconnection and trivially executing a denial-of-service attack. Furthermore, we demonstrate how an attacker can override and control the security context of frames that are yet to be queued. This exploits a design flaw in hotspot-like networks and allows the attacker to force an access point to encrypt yet to be queued frames using an adversary-chosen key, thereby bypassing Wi-Fi encryption entirely. Our attacks have a widespread impact as they affect various devices and operating systems (Linux, FreeBSD, iOS, and Android) and because they can be used to hijack TCP connections or intercept client and web traffic. Overall, we highlight the need for transparency in handling security context across the network stack layers and the challenges in doing so.",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "成帧帧:通过操纵传输队列绕过Wi-Fi加密",
        "abstract_zh": "Wi-Fi设备在传输前通常会在网络堆栈的不同层对帧进行排队，例如，当接收器处于睡眠模式时。在这项工作中，我们研究了Wi-Fi接入点如何管理排队帧的安全上下文。通过利用节能功能，我们展示了如何欺骗接入点泄漏明文帧，或使用组或全零密钥加密的帧。我们展示了对几个开源网络栈的攻击结果。我们将我们的发现归因于802.11标准在管理缓冲帧的安全上下文方面缺乏明确的指导。帧头中节能位的无保护性质(我们的工作揭示了这是一个基本的设计缺陷)也允许对手强行对特定客户端的帧进行排队，导致其断开连接，并轻易地执行拒绝服务攻击。此外，我们演示了攻击者如何能够覆盖和控制尚未排队的帧的安全上下文。这利用了类似热点网络的设计缺陷，并允许攻击者使用对手选择的密钥强制接入点加密尚未排队的帧，从而完全绕过Wi-Fi加密。我们的攻击具有广泛的影响，因为它们影响各种设备和操作系统(Linux、FreeBSD、iOS和Android ),还因为它们可以用来劫持TCP连接或拦截客户端和web流量。总的来说，我们强调在处理跨网络堆栈层的安全上下文时需要透明，以及这样做的挑战。",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2023.html",
        "conf_title": "32nd USENIX Security Symposium 2023:\nAnaheim, CA, USA",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity23",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity23/presentation/chen-yizheng",
        "title": "Continuous Learning for Android Malware Detection",
        "authors": "Yizheng Chen, Zhoujie Ding, David A. Wagner",
        "abstract": "Machine learning methods can detect Android malware with very high accuracy. However, these classifiers have an Achilles heel, concept drift: they rapidly become out of date and ineffective, due to the evolution of malware apps and benign apps. Our research finds that, after training an Android malware classifier on one year's worth of data, the F1 score quickly dropped from 0.99 to 0.76 after 6 months of deployment on new test samples. In this paper, we propose new methods to combat the concept drift problem of Android malware classifiers. Since machine learning technique needs to be continuously deployed, we use active learning: we select new samples for analysts to label, and then add the labeled samples to the training set to retrain the classifier. Our key idea is, similarity-based uncertainty is more robust against concept drift. Therefore, we combine contrastive learning with active learning. We propose a new hierarchical contrastive learning scheme, and a new sample selection technique to continuously train the Android malware classifier. Our evaluation shows that this leads to significant improvements, compared to previously published methods for active learning. Our approach reduces the false negative rate from 14% (for the best baseline) to 9%, while also reducing the false positive rate (from 0.86% to 0.48%). Also, our approach maintains more consistent performance across a seven-year time period than past methods.",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "Android恶意软件检测的持续学习",
        "abstract_zh": "机器学习方法可以以非常高的准确率检测Android恶意软件。然而，这些分类器有一个致命弱点，即概念漂移:由于恶意应用程序和良性应用程序的演变，它们很快变得过时和无效。我们的研究发现，在一年的数据上训练一个Android恶意软件分类器后，F1分数在新测试样本上部署6个月后迅速从0.99下降到0.76。在本文中，我们提出了新的方法来解决Android恶意软件分类器的概念漂移问题。由于机器学习技术需要不断部署，我们使用主动学习:我们选择新的样本供分析师标记，然后将标记的样本添加到训练集中以重新训练分类器。我们的核心思想是，基于相似性的不确定性更能抵御概念漂移。因此，我们把对比学习和主动学习结合起来。我们提出了一种新的分层对比学习方案，以及一种新的样本选择技术来连续训练Android恶意软件分类器。我们的评估表明，与以前公布的主动学习方法相比，这导致了显著的改进。我们的方法将假阴性率从14%(对于最佳基线)降低到9%，同时还降低了假阳性率(从0.86%降低到0.48%)。此外，与过去的方法相比，我们的方法在七年的时间内保持了更一致的性能。",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2023.html",
        "conf_title": "32nd USENIX Security Symposium 2023:\nAnaheim, CA, USA",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity23",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity23/presentation/li-heng",
        "title": "Black-box Adversarial Example Attack towards FCG Based Android Malware Detection under Incomplete Feature Information",
        "authors": "Heng Li, Zhang Cheng, Bang Wu, Liheng Yuan, Cuiying Gao, Wei Yuan, Xiapu Luo",
        "abstract": "The function call graph (FCG) based Android malware detection methods have recently attracted increasing attention due to their promising performance. However, these methods are susceptible to adversarial examples (AEs). In this paper, we design a novel black-box AE attack towards the FCG based malware detection system, called BagAmmo. To mislead its target system, BagAmmo purposefully perturbs the FCG feature of malware through inserting\"never-executed\"function calls into malware code. The main challenges are two-fold. First, the malware functionality should not be changed by adversarial perturbation. Second, the information of the target system (e.g., the graph feature granularity and the output probabilities) is absent. To preserve malware functionality, BagAmmo employs the try-catch trap to insert function calls to perturb the FCG of malware. Without the knowledge about feature granularity and output probabilities, BagAmmo adopts the architecture of generative adversarial network (GAN), and leverages a multi-population co-evolution algorithm (i.e., Apoem) to generate the desired perturbation. Every population in Apoem represents a possible feature granularity, and the real feature granularity can be achieved when Apoem converges. Through extensive experiments on over 44k Android apps and 32 target models, we evaluate the effectiveness, efficiency and resilience of BagAmmo. BagAmmo achieves an average attack success rate of over 99.9% on MaMaDroid, APIGraph and GCN, and still performs well in the scenario of concept drift and data imbalance. Moreover, BagAmmo outperforms the state-of-the-art attack SRL in attack success rate.",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "不完全特征信息下基于FCG的Android恶意软件检测的黑盒对抗示例攻击",
        "abstract_zh": "基于函数调用图(FCG)的Android恶意软件检测方法因其良好的性能而受到越来越多的关注。然而，这些方法容易受到对抗性例子(AEs)的影响。在本文中，我们针对基于FCG的恶意软件检测系统设计了一种新的黑盒AE攻击，称为BagAmmo。为了误导其目标系统，BagAmmo通过在恶意软件代码中插入“从不执行”的函数调用，有目的地干扰恶意软件的FCG功能。主要的挑战是双重的。首先，恶意软件的功能不应被敌对的干扰所改变。第二，缺少目标系统的信息(例如，图特征粒度和输出概率)。为了保护恶意软件的功能，BagAmmo采用try-catch陷阱来插入函数调用，以扰乱恶意软件的FCG。在不知道特征粒度和输出概率的情况下，BagAmmo采用生成对抗网络(GAN)的架构，并利用多种群协同进化算法(即Apoem)来产生期望的扰动。Apoem中的每个种群代表一个可能的特征粒度，当Apoem收敛时才能达到真正的特征粒度。通过在超过44k个Android应用程序和32个目标模型上的大量实验，我们评估了BagAmmo的有效性、效率和弹性。BagAmmo在MaMaDroid、APIGraph和GCN上取得了超过99.9%的平均攻击成功率，在概念漂移和数据不平衡的场景下依然表现出色。此外，BagAmmo在攻击成功率方面优于最先进的攻击SRL。",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2023.html",
        "conf_title": "32nd USENIX Security Symposium 2023:\nAnaheim, CA, USA",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity23",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity23/presentation/gilsenan",
        "title": "Security and Privacy Failures in Popular 2FA Apps",
        "authors": "Conor Gilsenan, Fuzail Shakir, Noura Alomar, Serge Egelman",
        "abstract": "The Time-based One-Time Password (TOTP) algorithm is a 2FA method that is widely deployed because of its relatively low implementation costs and purported security benefits over SMS 2FA. However, users of TOTP 2FA apps face a critical usability challenge: maintain access to the secrets stored within the TOTP app, or risk getting locked out of their accounts. To help users avoid this fate, popular TOTP apps implement a wide range of backup mechanisms, each with varying security and privacy implications. In this paper, we define an assessment methodology for conducting systematic security and privacy analyses of the backup and recovery functionality of TOTP apps. We identified all general purpose Android TOTP apps in the Google Play Store with at least 100k installs that implemented a backup mechanism (n = 22). Our findings show that most backup strategies end up placing trust in the same technologies that TOTP 2FA is meant to supersede: passwords, SMS, and email. Many backup implementations shared personal user information with third parties, had serious cryptographic flaws, and/or allowed the app developers to access the TOTP secrets in plaintext. We present our findings and recommend ways to improve the security and privacy of TOTP 2FA app backup mechanisms.",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "流行的2FA应用中的安全和隐私故障",
        "abstract_zh": "基于时间的一次性密码(TOTP)算法是一种2FA方法，由于其相对较低的实现成本和据称优于SMS 2FA的安全优势而被广泛部署。然而，TOTP 2FA应用的用户面临着一个关键的可用性挑战:保持对存储在TOTP应用中的秘密的访问，否则就有被锁定帐户的风险。为了帮助用户避免这种命运，流行的TOTP应用程序实现了各种各样的备份机制，每种机制都有不同的安全和隐私影响。在本文中，我们定义了一种评估方法，用于对TOTP应用的备份和恢复功能进行系统的安全性和隐私性分析。我们发现谷歌Play商店所有通用安卓TOTP应用至少有10万个安装了备份机制(n = 22)。我们的发现表明，大多数备份策略最终都信任TOTP 2FA打算取代的技术:密码、短信和电子邮件。许多备份实现与第三方共享个人用户信息，有严重的加密缺陷，和/或允许应用程序开发人员以明文形式访问TOTP秘密。我们提出了我们的研究结果，并推荐了提高TOTP 2FA应用程序备份机制的安全性和隐私性的方法。",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2023.html",
        "conf_title": "32nd USENIX Security Symposium 2023:\nAnaheim, CA, USA",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity23",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity23/presentation/lyons",
        "title": "Log: It's Big, It's Heavy, It's Filled with Personal Data! Measuring the Logging of Sensitive Information in the Android Ecosystem",
        "authors": "Allan Lyons, Julien Gamba, Austin Shawaga, Joel Reardon, Juan Tapiador, Serge Egelman, Narseo Vallina-Rodriguez",
        "abstract": "Android offers a shared system that multiplexes all logged data from all system components, including both the operating system and the console output of apps that run on it. A security mechanism ensures that user-space apps can only read the log entries that they create, though many “privileged” apps are exempt from this restriction. This includes preloaded system apps provided by Google, the phone manufacturer, the cellular carrier, as well as those sharing the same signature. Consequently, Google advises developers to not log sensitive information to the system log. In this work, we examined the logging of sensitive data in the Android ecosystem. Using a field study, we show that most devices log some amount of user-identifying information. We show that the logging of “activity” names can inadvertently reveal information about users through their app usage. We also tested whether different smartphones log personal identifiers by default, examined preinstalled apps that access the system logs, and analyzed the privacy policies of manufacturers that report collecting system logs.",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "日志:又大又重，里面全是个人资料！衡量Android生态系统中敏感信息的记录",
        "abstract_zh": "Android提供了一个共享系统，可以复用来自所有系统组件的所有日志数据，包括操作系统和在其上运行的应用程序的控制台输出。一种安全机制确保用户空间应用程序只能读取它们创建的日志条目，尽管许多“特权”应用程序不受此限制。这包括手机制造商、移动运营商谷歌提供的预装系统应用，以及那些共享相同签名的应用。因此，Google建议开发者不要在系统日志中记录敏感信息。在这项工作中，我们研究了Android生态系统中敏感数据的日志记录。通过实地研究，我们发现大多数设备都会记录一定量的用户识别信息。我们发现，记录“活动”名称可能会无意中泄露用户使用应用程序的信息。我们还测试了不同的智能手机是否默认记录个人标识符，检查了访问系统日志的预装应用程序，并分析了报告收集系统日志的制造商的隐私政策。",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2023.html",
        "conf_title": "32nd USENIX Security Symposium 2023:\nAnaheim, CA, USA",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity23",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity23/presentation/tian",
        "title": "Sparsity Brings Vulnerabilities: Exploring New Metrics in Backdoor Attacks",
        "authors": "Jianwen Tian, Kefan Qiu, Debin Gao, Zhi Wang, Xiaohui Kuang, Gang Zhao",
        "abstract": "Nowadays, using AI-based detectors to keep pace with the fast iterating of malware has attracted a great attention. However, most AI-based malware detectors use features with vast sparse subspaces to characterize applications, which brings significant vulnerabilities to the model. To exploit this sparsity-related vulnerability, we propose a clean-label backdoor attack consisting of a dissimilarity metric-based candidate selection and a variation ratio-based trigger construction. The proposed backdoor is veriﬁed on different datasets, including a Windows PE dataset, an Android dataset with numerical and boolean feature values, and a PDF dataset. The experimental results show that the attack can slash the accuracy on watermarked malware to nearly 0% even with the least number (0.01% of the class set) of watermarked goodwares compared to previous attacks. Problem space constraints are also considered with experiments in data-agnostic scenario and data-and-model-agnostic scenario , proving transferability between different datasets as well as deep neural networks and traditional classiﬁers. The attack is veriﬁed consistently powerful under the above scenarios. Moreover, eight existing defenses were tested with their effect left much to be desired. We demonstrated the reason and proposed a subspace compression strategy to boost models’ robustness, which also makes part of the previously failed defenses effective.",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "稀疏带来漏洞:探索后门攻击的新指标",
        "abstract_zh": "如今，使用基于人工智能的检测器来跟上恶意软件的快速迭代已经引起了极大的关注。然而，大多数基于人工智能的恶意软件检测器使用具有大量稀疏子空间的特征来表征应用程序，这给模型带来了重大漏洞。为了利用这种稀疏性相关的漏洞，我们提出了一种干净标签后门攻击，包括基于相异度度量的候选选择和基于变化率的触发构造。建议的后门在不同的数据集上进行验证，包括Windows PE数据集、具有数字和布尔特征值的Android数据集以及PDF数据集。实验结果表明，与以前的攻击相比，即使使用最少数量(类别集的0.01%)的水印恶意软件，该攻击也可以将水印恶意软件的准确率降低到接近0%。在数据不可知场景和数据与模型不可知场景中的实验也考虑了问题空间约束，证明了不同数据集以及深度神经网络和传统分类器之间的可转移性。在上述场景下，攻击被验证为持续强大。此外，测试了八种现有的防御方法，其效果仍有待改进。我们证明了原因，并提出了一个子空间压缩策略来提高模型的鲁棒性，这也使以前失败的防御有效的一部分。",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2023.html",
        "conf_title": "32nd USENIX Security Symposium 2023:\nAnaheim, CA, USA",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity23",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity23/presentation/wu-yafei",
        "title": "LibScan: Towards More Precise Third-Party Library Identification for Android Applications",
        "authors": "Yafei Wu, Cong Sun, Dongrui Zeng, Gang Tan, Siqi Ma, Peicheng Wang",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "LIBSCAN：针对Android应用程序更精确的第三方库标识",
        "abstract_zh": "",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2023.html",
        "conf_title": "32nd USENIX Security Symposium 2023:\nAnaheim, CA, USA",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity23",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity23/presentation/wang-xueqiang-duress",
        "title": "Union under Duress: Understanding Hazards of Duplicate Resource Mismediation in Android Software Supply Chain",
        "authors": "Xueqiang Wang, Yifan Zhang, XiaoFeng Wang, Yan Jia, Luyi Xing",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "胁迫下的工会：了解Android软件供应链中重复资源失败的危害",
        "abstract_zh": "",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2023.html",
        "conf_title": "32nd USENIX Security Symposium 2023:\nAnaheim, CA, USA",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity23",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity23/presentation/tang",
        "title": "Eye-Shield: Real-Time Protection of Mobile Device Screen Information from Shoulder Surfing",
        "authors": "Brian Tang, Kang G. Shin",
        "abstract": "People use mobile devices ubiquitously for computing, communication, storage, web browsing, and more. As a result, the information accessed and stored within mobile devices, such as financial and health information, text messages, and emails, can often be sensitive. Despite this, people frequently use their mobile devices in public areas, becoming susceptible to a simple yet effective attack, shoulder surfing. Shoulder surfing occurs when a person near a mobile user peeks at the user's mobile device, potentially acquiring passcodes, PINs, browsing behavior, or other personal information. We propose Eye-Shield, a solution to prevent shoulder surfers from accessing or stealing sensitive on-screen information. Eye-Shield is designed to protect all types of on-screen information in real time, without any serious impediment to users' interactions with their mobile devices. Eye-Shield generates images that appear readable at close distances, but appear blurry or pixelated at farther distances and wider angles. It is capable of protecting on-screen information from shoulder surfers, operating in real time, and being minimally intrusive to the intended users. Eye-Shield protects images and text from shoulder surfers by reducing recognition rates to 24.24% and 15.91%. Our implementations of Eye-Shield, with frame rates of 24 FPS for Android and 43 FPS for iOS, effectively work on screen resolutions as high as 1440x3088. Eye-Shield also incurs acceptable memory usage, CPU utilization, and energy overhead. Finally, our MTurk and in-person user studies indicate that Eye-Shield protects on-screen information without a large usability cost for privacy-conscious users.",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "眼球：从肩膀冲浪中对移动设备屏幕信息的实时保护",
        "abstract_zh": "人们使用更多的移动设备来计算，通信，存储，网络浏览等。 结果，访问并存储在移动设备中的信息，例如财务和健康信息，文本消息和电子邮件通常很敏感。 尽管如此，人们还是经常在公共区域使用其移动设备，很容易受到简单而有效的攻击，肩膀冲浪的影响。 当移动用户附近的一个人窥视用户的移动设备时，可能会获取密码，销钉，浏览行为或其他个人信息时，就会发生肩膀冲浪。 我们提出了眼球，这是一种防止肩膀冲浪者访问或窃取敏感屏幕上信息的解决方案。 眼球旨在实时保护所有类型的屏幕上信息，而不会严重障碍用户与移动设备的互动。 眼球产生的图像在近距离时看起来可读，但在较远的角度和较大的角度看起来模糊或像素化。 它能够实时保护屏幕上的信息免受肩膀冲浪者的影响，并且对预期用户的侵入性最低。 眼球通过将识别率降低到24.24％和15.91％，从而保护图像和文字从肩膀冲浪者中。 我们的眼球实现，Android的帧速率为24 fps，iOS的43 fps实现，实际上可以在屏幕分辨率上高达1440x3088。 眼球还会引起可接受的内存使用，CPU利用率和开销的能量。 最后，我们的MTURK和面对面的用户研究表明，眼球可保护屏幕上的信息，而无需使用大量的隐私用户可用性成本。",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2023.html",
        "conf_title": "32nd USENIX Security Symposium 2023:\nAnaheim, CA, USA",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity23",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity23/presentation/li-rui",
        "title": "Lost in Conversion: Exploit Data Structure Conversion with Attribute Loss to Break Android Systems",
        "authors": "Rui Li, Wenrui Diao, Shishuai Yang, Xiangyu Liu, Shanqing Guo, Kehuan Zhang",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "转换中丢失：利用数据结构转换，属性损失损失到破坏Android系统",
        "abstract_zh": "",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2023.html",
        "conf_title": "32nd USENIX Security Symposium 2023:\nAnaheim, CA, USA",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity23",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity23/presentation/dambra",
        "title": "One Size Does not Fit All: Quantifying the Risk of Malicious App Encounters for Different Android User Profiles",
        "authors": "Savino Dambra, Leyla Bilge, Platon Kotzias, Yun Shen, Juan Caballero",
        "abstract": "Previous work has investigated the particularities of security practices within speciﬁc user communities deﬁned based on country of origin, age, prior tech abuse, and economic status. Their results highlight that current security solutions that adopt a one-size-ﬁts-all-users approach ignore the differences and needs of particular user communities. However, those works focus on a single community or cluster users into hard-to-interpret sub-populations. In this work, we perform a large-scale quantitative analysis of the risk of encountering malware and other potentially unwanted applications (PUA) across user communities. At the core of our study is a dataset of app installation logs collected from 12M Android mobile devices. Leveraging user-installed apps, we deﬁne intuitive proﬁles based on users’ interests (e.g., gamers and investors), and ﬁt a subset of 5.4M devices to those proﬁles. Our analysis is structured in three parts. First, we perform risk analysis on the whole population to measure how the risk of malicious app encounters is affected by different factors. Next, we create different proﬁles to investigate whether risk differences across users may be due to their interests. Finally, we compare a per-proﬁle approach for classifying clean and infected devices with the classical approach that considers the whole population. We observe that features such as the diversity of the app signers and the use of alternative markets highly correlate with the risk of malicious app encounters. We also discover that some proﬁles such as gamers and social-media users are exposed to more than twice the risks experienced by the average users. We also show that the classiﬁcation outcome has a marked accuracy improvement when using a per-proﬁle approach to train the prediction models. Overall, our results conﬁrm the inadequacy of one-size-ﬁts-all protection",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "一个尺寸不适合全部：量化针对不同的Android用户配置文件的恶意应用程序遇到的风险",
        "abstract_zh": "先前的工作调查了根据原产国，年龄，先前的技术滥用和经济状况定义的特定用户社区中安全实践的特殊性。 他们的结果表明，采用单一尺寸的所有用户方法的当前安全解决方案忽略了特定用户社区的差异和需求。 但是，这些作品专注于单个社区或将用户集中在难以释放的子人群中。 在这项工作中，我们对跨用户社区遇到恶意软件和其他潜在不需要的应用程序（PUA）的风险进行了大规模的定量分析。 我们研究的核心是从12M Android移动设备收集的应用程序安装日志的数据集。 利用用户安装的应用程序，我们根据用户的兴趣（例如游戏玩家和投资者）定义直观的专业文件，并将540万个设备的子集贴上这些程序。 我们的分析分为三个部分。 首先，我们对整个人群进行风险分析，以衡量恶意应用程序遇到的风险如何受到不同因素的影响。 接下来，我们创建不同的专业文件，以调查用户之间的风险差异是否可能是由于他们的兴趣所致。 最后，我们比较了一种将清洁和感染设备分类的每一条方法与考虑整个人群的经典方法。 我们观察到，诸如应用程序签名者的多样性以及替代市场的使用之类的功能与恶意应用程序相遇的风险高度相关。 我们还发现，一些专业文件（例如游戏玩家和社交媒体用户）的风险是普通用户经历的两倍以上。 我们还表明，分类结果在使用人均方法训练预测模型时具有明显的准确性提高。 总体而言，我们的结果证实了一定程度的全部保护不足",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2023.html",
        "conf_title": "32nd USENIX Security Symposium 2023:\nAnaheim, CA, USA",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity23",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity23/presentation/xue",
        "title": "Bypassing Tunnels: Leaking VPN Client Traffic by Abusing Routing Tables",
        "authors": "Nian Xue, Yashaswi Malla, Zihang Xia, Christina Pöpper, Mathy Vanhoef",
        "abstract": "Virtual Private Networks (VPNs) authenticate and encrypt network traffic to protect users’ security and privacy, and are used in professional and personal settings to defend against malicious actors, circumvent censorship, remotely work from home, etc. It is therefore essential that VPNs are secure. In this paper, we present two novel attacks that cause VPN clients to leak traffic outside the protected VPN tunnel. The root cause of both attacks is a widespread design flaw in how clients configure the Operating System (OS) to route all traffic through the VPN tunnel. This is typically done by updating the system’s IP routing tables such that all traffic will first pass through the VPN client. However, some routing exceptions are added to ensure the system keeps functioning properly, namely that traffic to the local network, and to the VPN server itself, is sent outside the VPN tunnel. We show that by setting up a Wi-Fi access point or by spoofing DNS responses, an adversary can manipulate these exceptions to make the victim send arbitrary traffic in plaintext outside the VPN tunnel. We confirm our findings in practice by conducting 248 experiments against 67 of the most representative VPN providers on Windows, macOS, iOS, Linux, and Android. Our experimental results reveal that a significant number (126 and 39) and proportion (64.6% and 73.6%) of free, paid, open-source, corporate, and built-in VPN clients are vulnerable to (variants of) our two attacks respectively, suffering from leaky traffic. We discuss countermeasures to mitigate the vulnerabilities and confirm the effectiveness of selected defenses in practice.",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "绕过隧道：通过滥用路由表泄露VPN客户端流量",
        "abstract_zh": "虚拟专用网(VPN)对网络流量进行认证和加密，以保护用户的安全和隐私，并在专业和个人环境中用于防御恶意行为者、规避审查、在家远程工作等。因此，VPN的安全性至关重要。在本文中，我们提出了两种新颖的攻击，它们导致VPN客户端将流量泄漏到受保护的VPN隧道之外。这两种攻击的根本原因是客户端如何配置操作系统(OS)以通过VPN隧道路由所有流量的普遍设计缺陷。这通常是通过更新系统的IP路由表来实现的，这样所有流量将首先通过VPN客户端。但是，添加了一些路由例外，以确保系统保持正常运行，也就是说，到本地网络和VPN服务器本身的流量是在VPN隧道之外发送的。我们发现，通过设置Wi-Fi接入点或欺骗DNS响应，对手可以操纵这些异常，使受害者在VPN隧道外以明文形式发送任意流量。我们通过在Windows、macOS、iOS、Linux和Android上对67个最具代表性的VPN提供商进行248次实验，在实践中证实了我们的发现。我们的实验结果显示，大量(126和39)和比例(64.6%和73.6%)的免费、付费、开源、企业和内置VPN客户端分别容易受到我们的两种攻击(变体)，遭受泄漏流量。我们讨论了减少漏洞的对策，并在实践中证实了所选防御措施的有效性。",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2023.html",
        "conf_title": "32nd USENIX Security Symposium 2023:\nAnaheim, CA, USA",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity23",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity23/presentation/kol",
        "title": "Device Tracking via Linux's New TCP Source Port Selection Algorithm",
        "authors": "Moshe Kol, Amit Klein, Yossi Gilad",
        "abstract": "We describe a tracking technique for Linux devices, exploiting a new TCP source port generation mechanism recently introduced to the Linux kernel. This mechanism is based on an algorithm, standardized in RFC 6056, for boosting security by better randomizing port selection. Our technique detects collisions in a hash function used in the said algorithm, based on sampling TCP source ports generated in an attacker-prescribed manner. These hash collisions depend solely on a per-device key, and thus the set of collisions forms a device ID that allows tracking devices across browsers, browser privacy modes, containers, and IPv4/IPv6 networks (including some VPNs). It can distinguish among devices with identical hardware and software, and lasts until the device restarts. We implemented this technique and then tested it using tracking servers in two different locations and with Linux devices on various networks. We also tested it on an Android device that we patched to introduce the new port selection algorithm. The tracking technique works in real-life conditions, and we report detailed ﬁndings about it, including its dwell time, scalability, and success rate in different network types. We worked with the Linux kernel team to mitigate the exploit, resulting in a security patch introduced in May 2022 to the Linux kernel, and we provide recommendations for better securing the port selection algorithm in the paper.",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "通过Linux的新TCP源端口选择算法跟踪设备跟踪",
        "abstract_zh": "我们描述了针对Linux设备的跟踪技术，利用了最近引入Linux内核的新的TCP源端口生成机制。 该机制基于在RFC 6056中标准化的算法，用于通过更好的随机端口选择来提高安全性。 我们的技术基于以攻击者规定方式生成的采样TCP源端口，检测到上述算法中使用的哈希函数的碰撞。 这些哈希碰撞仅取决于每个设备密钥，因此碰撞组形成了一个设备ID，该设备ID允许在浏览器，浏览器隐私模式，容器和IPv4/ipv6网络（包括一些VPN）上跟踪设备。 它可以区分具有相同硬件和软件的设备，并持续到设备重新启动为止。 我们实现了此技术，然后使用两个不同位置的跟踪服务器以及各种网络上的Linux设备对其进行了测试。 我们还在Android设备上测试了它，我们对我们进行了修补，以引入新的端口选择算法。 跟踪技术在现实生活中起作用，我们报告了有关它的详细发现，包括其停留时间，可扩展性和在不同网络类型中的成功率。 我们与Linux内核团队合作，以减轻利用，从而导致2022年5月推出的安全补丁，并提供建议，以更好地确保论文中的端口选择算法。",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2023.html",
        "conf_title": "32nd USENIX Security Symposium 2023:\nAnaheim, CA, USA",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity23",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/usenixsecurity23/presentation/vasquez",
        "title": "The Most Dangerous Codec in the World: Finding and Exploiting Vulnerabilities in H.264 Decoders",
        "authors": "Willy R. Vasquez, Stephen Checkoway, Hovav Shacham",
        "abstract": "Modern video encoding standards such as H.264 are a marvel of hidden complexity. But with hidden complexity comes hidden security risk. Decoding video in practice means interacting with dedicated hardware accelerators and the pro-prietary, privileged software components used to drive them. The video decoder ecosystem is obscure, opaque, diverse, highly privileged, largely untested, and highly exposed—a dangerous combination. We introduce and evaluate H26F ORGE , domain-speciﬁc infrastructure for analyzing, generating, and manipulating syntactically correct but semantically spec-non-compliant video ﬁles. Using H26F ORGE , we uncover insecurity in depth across the video decoder ecosystem, including kernel memory corruption bugs in iOS, memory corruption bugs in Firefox and VLC for Windows, and video accelerator and application processor kernel memory bugs in multiple Android devices.",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "世界上最危险的编解码器：H.264解码器中的发现和利用漏洞",
        "abstract_zh": "现代视频编码标准（例如H.264）是隐藏复杂性的奇迹。 但是隐藏的复杂性带来了隐藏的安全风险。 在实践中解码视频意味着与专用硬件加速器以及用于驱动它们的专业的专门特权软件组件进行互动。 视频解码器生态系统晦涩，不透明，多样，高度特权，在很大程度上未经测试和高度暴露，这是一种危险的组合。 我们介绍和评估用于分析，生成和操纵语法正确但语义上规范性的视频填充的H26F ORGE，特定领域的基础架构。 使用H26F ORGE，我们在视频解码器生态系统中深入揭示了不安全感，包括iOS中的内核内存损坏错误，Firefox和Windows中的VLC中的内存损坏错误，以及视频加速器和应用程序处理器处理器内存内存错误。",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/uss/uss2023.html",
        "conf_title": "32nd USENIX Security Symposium 2023:\nAnaheim, CA, USA",
        "conf_url": "https://www.usenix.org/conference/usenixsecurity23",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-662-58387-6_7",
        "title": "An Economic Study of the Effect of Android Platform Fragmentation on Security Updates",
        "authors": "Sadegh Farhang, Aron Laszka, Jens Grossklags",
        "abstract": "",
        "files": {
            "openAccessPdf": "http://arxiv.org/pdf/1712.08222"
        },
        "abstract_zh": "",
        "title_zh": "Android平台碎片化对安全更新影响的经济学研究",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/fc/fc2018.html",
        "conf_title": "22nd Financial Cryptography 2018: Nieuwpoort, Curaçao",
        "conf_url": "https://doi.org/10.1007/978-3-662-58387-6",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-662-54970-4_3",
        "title": "Android UI Deception Revisited: Attacks and Defenses",
        "authors": "Earlence Fernandes, Qi Alfred Chen, Justin Paupore, Georg Essl, J. Alex Halderman, Zhuoqing Morley Mao, Atul Prakash",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "Android UI欺骗再探:攻击与防御",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/fc/fc2016.html",
        "conf_title": "20th Financial Cryptography 2016: Christ Church, Barbados",
        "conf_url": "https://doi.org/10.1007/978-3-662-54970-4",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-662-54970-4_13",
        "title": "CuriousDroid: Automated User Interface Interaction for Android Application Analysis Sandboxes",
        "authors": "Patrick Carter, Collin Mulliner, Martina Lindorfer, William K. Robertson, Engin Kirda",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "CuriousDroid:Android应用程序分析沙箱的自动化用户界面交互",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/fc/fc2016.html",
        "conf_title": "20th Financial Cryptography 2016: Christ Church, Barbados",
        "conf_url": "https://doi.org/10.1007/978-3-662-54970-4",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-662-54970-4_15",
        "title": "DroidAuditor: Forensic Analysis of Application-Layer Privilege Escalation Attacks on Android (Short Paper)",
        "authors": "Stephan Heuser, Marco Negro, Praveen Kumar Pendyala, Ahmad-Reza Sadeghi",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "droid auditor:Android上应用层权限提升攻击的取证分析(短文本)",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/fc/fc2016.html",
        "conf_title": "20th Financial Cryptography 2016: Christ Church, Barbados",
        "conf_url": "https://doi.org/10.1007/978-3-662-54970-4",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-030-14234-6_19",
        "title": "Analyzing Use of High Privileges on Android: An Empirical Case Study of Screenshot and Screen Recording Applications",
        "authors": "Mark Huasong Meng, Guangdong Bai, Joseph K. Liu, Xiapu Luo, Yu Wang",
        "abstract": "",
        "files": {
            "openAccessPdf": "http://arxiv.org/pdf/1804.04605"
        },
        "abstract_zh": "",
        "title_zh": "安卓系统高权限使用分析:屏幕截图和屏幕录制应用的实证案例研究",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/cisc/inscrypt2018.html",
        "conf_title": "14th Inscrypt 2018: Fuzhou, China",
        "conf_url": "https://doi.org/10.1007/978-3-030-14234-6",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-75160-3_19",
        "title": "NativeSpeaker: Identifying Crypto Misuses in Android Native Code Libraries",
        "authors": "Qing Wang, Juanru Li, Yuanyuan Zhang, Hui Wang, Yikun Hu, Bodong Li, Dawu Gu",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "NativeSpeaker:识别Android本机代码库中的加密误用",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/cisc/inscrypt2017.html",
        "conf_title": "Inscrypt 2017: Beijing, China",
        "conf_url": "https://doi.org/10.1007/978-3-319-75160-3",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-29485-8_14",
        "title": "Side-Channel Analysis of Weierstrass and Koblitz Curve ECDSA on Android Smartphones",
        "authors": "Pierre Belgarric, Pierre-Alain Fouque, Gilles Macario-Rat, Mehdi Tibouchi",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "Android智能手机上Weierstrass和Koblitz曲线ECDSA的侧信道分析",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ctrsa/ctrsa2016.html",
        "conf_title": "CT-RSA 2016: San Francisco, CA, USA",
        "conf_url": "https://doi.org/10.1007/978-3-319-29485-8",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.ndss-symposium.org/ndss-paper/auto-draft-187/",
        "title": "PHYjacking: Physical Input Hijacking for Zero-Permission Authorization Attacks on Android",
        "authors": "Xianbo Wang, Shangcheng Shi, Yikang Chen, Wing Cheong Lau",
        "abstract": "—Nowadays, most mobile devices are equipped with various hardware interfaces such as touchscreen, fingerprint scanner, camera and microphone to capture inputs from the user. Many mobile apps use these physical interfaces to receive user-input for authentication/authorization operations including one- click login, fingerprint-based payment approval, and face/voice unlocking. In this paper, we investigate the so-called PHYjacking attack where a victim is misled by a zero-permission malicious app to feed physical inputs to different hardware interfaces on a mobile device to result in unintended authorization. We analyze the protection mechanisms in Android for different types of physical input interfaces and introduce new techniques to bypass them. Specifically, we identify weaknesses in the existing protec- tion schemes for the related system APIs and observe common pitfalls when apps implement physical-input-based authorization. Worse still, we discover a race-condition bug in Android that can be exploited even when app-based mitigations are properly implemented. Based on these findings, we introduce fingerprint-jacking and facejacking techniques and demonstrate their impact on real apps. We also discuss the feasibility of launching similar attacks against NFC and microphone inputs, as well as effective tapjacking attacks against Single Sign-On apps. We have designed a static analyzer to examine 3000+ real-world apps and find 44% of them contain PHYjacking-related implementation flaws. We demonstrate the practicality and potential impact of PHYjacking via proof-of-concept implementations which enable unauthorized money transfer on a payment app with over 800 million users, user-privacy leak from a social media app with over 400 million users and escalating app permissions in Android 11.",
        "files": {
            "openAccessPdf": "https://doi.org/10.14722/ndss.2022.24097"
        },
        "abstract_zh": "—如今，大多数移动设备都配备了各种硬件接口，如触摸屏、指纹扫描仪、摄像头和麦克风，以捕捉用户的输入。许多移动应用程序使用这些物理接口来接收用户输入的身份验证/授权操作，包括一键登录、基于指纹的支付批准和面部/语音解锁。在本文中，我们研究了所谓的物理劫持攻击，即受害者被零权限恶意应用程序误导，向移动设备上的不同硬件接口提供物理输入，从而导致意外授权。我们分析了Android中不同类型的物理输入接口的保护机制，并介绍了绕过它们的新技术。具体来说，我们确定了相关系统API的现有保护方案中的弱点，并观察了应用程序实现基于物理输入的授权时的常见陷阱。更糟糕的是，我们在Android中发现了一个竞争条件错误，即使正确实施了基于应用的缓解措施，该错误也可能被利用。基于这些发现，我们介绍了指纹劫持和面部劫持技术，并展示了它们对实际应用程序的影响。我们还讨论了针对NFC和麦克风输入发起类似攻击的可行性，以及针对单点登录应用的有效窃听攻击。我们设计了一个静态分析器来检查3000多个真实世界的应用程序，发现其中44%包含与物理劫持相关的实现缺陷。我们通过概念验证实现展示了劫持的实用性和潜在影响，这些实现允许在拥有超过8亿用户的支付应用上进行未经授权的资金转移，从拥有超过4亿用户的社交媒体应用中泄露用户隐私，以及在Android 11中升级应用权限。",
        "title_zh": "物理劫持:Android上零权限授权攻击的物理输入劫持",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2022.html",
        "conf_title": "29th NDSS 2022: San Diego, CA, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2022/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.ndss-symposium.org/ndss-paper/auto-draft-189/",
        "title": "The Droid is in the Details: Environment-aware Evasion of Android Sandboxes",
        "authors": "Brian Kondracki, Babak Amin Azad, Najmeh Miramirkhani, Nick Nikiforakis",
        "abstract": "—Malware sandboxes have long been a valuable tool for detecting and analyzing malicious software. The proliferation of mobile devices and, subsequently, mobile applications, has led to a surge in the development and use of mobile device sandboxes to ensure the integrity of application marketplaces. In turn, to evade these sandboxes, malware has evolved to suspend its malicious activity when it is executed in a sandbox environment. Sophisticated malware sandboxes attempt to prevent sandbox detection by patching runtime properties indicative of malware- analysis systems. In this paper, we propose a set of novel mobile-sandbox- evasion techniques that we collectively refer to as “environment-aware” sandbox detection. We explore the distribution of artifacts extracted from readily available APIs in order to distinguish real user devices from sandboxes. To that end, we identify Android APIs that can be used to extract environment-related features, such as artifacts of user conﬁgurations (e.g. screen brightness), population of ﬁles on the device (e.g. number of photos and songs), and hardware sensors (e.g. presence of a step counter). By collecting ground truth data from real users and Android sandboxes, we show that attackers can straightforwardly build a classiﬁer capable of differentiating between real Android devices and well-known mobile sandboxes with 98.54% accuracy. More-over, to demonstrate the inefﬁcacy of patching APIs in sandbox environments individually, we focus on feature inconsistencies between the claimed manufacturer of a sandbox (Samsung, LG, etc.) and real devices from these manufacturers. Our ﬁndings emphasize the difﬁculty of creating robust sandbox environments regardless of their underlying platform being an emulated environment, or an actual mobile device.",
        "files": {
            "openAccessPdf": "https://doi.org/10.14722/ndss.2022.23056"
        },
        "abstract_zh": "—长期以来，恶意软件沙箱一直是检测和分析恶意软件的重要工具。移动设备以及随后的移动应用的激增，导致了移动设备沙箱的开发和使用激增，以确保应用市场的完整性。反过来，为了躲避这些沙箱，恶意软件已经发展到当它在沙箱环境中执行时暂停其恶意活动。复杂的恶意软件沙箱试图通过修补指示恶意软件分析系统的运行时属性来阻止沙箱检测。在本文中，我们提出了一套新颖的移动沙盒规避技术，我们统称为“环境感知”沙盒检测。我们探索从容易获得的API中提取的工件的分布，以便将真实的用户设备与沙箱区分开。为此，我们确定了可用于提取环境相关特征的Android APIs，例如用户配置的伪像(例如屏幕亮度)、设备上文件的数量(例如照片和歌曲的数量)以及硬件传感器(例如计步器的存在)。通过从真实用户和Android沙盒中收集基本事实数据，我们表明攻击者可以直接构建一个分类器，能够以98.54%的准确率区分真实Android设备和众所周知的移动沙盒。此外，为了证明单独在沙盒环境中修补API的低效性，我们重点关注声称的沙盒制造商(三星、LG等)之间的功能不一致。)和这些厂商的真实设备。我们的发现强调了创建强大沙盒环境的难度，无论其底层平台是仿真环境还是实际移动设备。",
        "title_zh": "Droid在细节中:环境感知的安卓沙箱规避",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2022.html",
        "conf_title": "29th NDSS 2022: San Diego, CA, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2022/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.ndss-symposium.org/ndss-paper/auto-draft-190/",
        "title": "Uncovering Cross-Context Inconsistent Access Control Enforcement in Android",
        "authors": "Hao Zhou, Haoyu Wang, Xiapu Luo, Ting Chen, Yajin Zhou, Ting Wang",
        "abstract": "—Due to the complexity resulted from the huge code base and the multi-context nature of Android, inconsistent access control enforcement exists in Android, which can be exploited by malware to bypass the access control and perform unauthorized security-sensitive operations. Unfortunately, existing studies only focus on the inconsistent access control enforcement in the Java context of Android. In this paper, we conduct the ﬁrst systematic investigation on the inconsistent access control enforcement across the Java context and native context of Android. In particular, to automatically discover cross-context inconsistencies, we design and implement IAceFinder , a new tool that extracts and contrasts the access control enforced in the Java context and native context of Android. Applying IAceFinder to 14 open-source Android ROM s, we ﬁnd that it can effectively uncover their cross-context inconsistent access control enforcement. Speciﬁcally, IAceFinder discovers 23 inconsistencies that can be abused by attackers to compromise the device and violate user privacy.",
        "files": {
            "openAccessPdf": "https://doi.org/10.14722/ndss.2022.23166"
        },
        "abstract_zh": "—由于庞大的代码库和Android的多上下文特性所导致的复杂性，Android中存在不一致的访问控制实施，恶意软件可以利用它来绕过访问控制并执行未经授权的安全敏感操作。遗憾的是，现有的研究仅关注Android的Java环境中不一致的访问控制实施。在本文中，我们对Java环境和Android本地环境中的不一致访问控制实施进行了首次系统调查。特别是，为了自动发现跨上下文的不一致，我们设计并实现了IAceFinder，这是一个新的工具，它提取并对比了Java上下文和Android本地上下文中实施的访问控制。将IAceFinder应用于14个开源Android ROM，我们发现它可以有效地发现它们的跨上下文不一致的访问控制实施。具体来说，IAceFinder发现了23种不一致，攻击者可以滥用这些不一致来危害设备和侵犯用户隐私。",
        "title_zh": "揭示Android中跨上下文不一致的访问控制实施",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2022.html",
        "conf_title": "29th NDSS 2022: San Diego, CA, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2022/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.ndss-symposium.org/ndss-paper/auto-draft-193/",
        "title": "LogicMEM: Automatic Profile Generation for Binary-Only Memory Forensics via Logic Inference",
        "authors": "Zhenxiao Qi, Yu Qu, Heng Yin",
        "abstract": "—Memory forensic tools rely on the knowledge of kernel symbols and kernel object layouts to retrieve digital evidence and artifacts from memory dumps. This knowledge is called proﬁle. Existing solutions for proﬁle generation are either inconvenient or inaccurate. In this paper, we propose a logic inference approach to automatically generating a proﬁle directly from a memory dump. It leverages the invariants existing in ker- nel data structures across all kernel versions and conﬁgurations to precisely locate forensics-required ﬁelds in kernel objects. We have implemented a prototype named L OGIC M EM and evaluated it on memory dumps collected from mainstream Linux distribu- tions, customized Linux kernels with random conﬁgurations, and operating systems designed for Android smartphones and embed- ded devices. The evaluation results show that the proposed logic inference approach is well-suited for locating forensics-required ﬁelds and achieves 100% precision and recall for mainstream Linux distributions and 100% precision and 95% recall for customized kernels with random conﬁgurations. Moreover, we show that false negatives can be eliminated with improved logic rules. We also demonstrate that L OGIC M EM can generate proﬁles when it is otherwise difﬁcult (if not impossible) for existing approaches, and support memory forensics tasks such as rootkit detection.",
        "files": {
            "openAccessPdf": "https://doi.org/10.14722/ndss.2022.24324"
        },
        "abstract_zh": "—内存取证工具依赖于内核符号和内核对象布局的知识，从内存转储中检索数字证据和工件。这种知识称为profile。现有的档案生成解决方案要么不方便，要么不准确。在本文中，我们提出了一种逻辑推理方法，直接从内存转储中自动生成概要文件。它利用所有内核版本和配置的内核数据结构中存在的不变量来精确定位内核对象中需要取证的字段。我们已经实现了一个名为L OGIC M EM的原型，并在从主流Linux发行版、带有随机配置的定制Linux内核以及为Android智能手机和嵌入式设备设计的操作系统中收集的内存转储上对其进行了评估。评估结果表明，提出的逻辑推理方法非常适合于定位取证所需的文件，对于主流Linux发行版实现了100%的精度和召回率，对于具有随机配置的定制内核实现了100%的精度和95%的召回率。此外，我们表明，假阴性可以消除改进的逻辑规则。我们还证明，当现有方法难以(如果不是不可能)生成档案时，L OGIC M EM可以生成档案，并支持内存取证任务，如rootkit检测。",
        "title_zh": "LogicMEM:通过逻辑推理为二进制内存取证自动生成概要文件",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2022.html",
        "conf_title": "29th NDSS 2022: San Diego, CA, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2022/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.ndss-symposium.org/ndss-paper/auto-draft-229/",
        "title": "FedCRI: Federated Mobile Cyber-Risk Intelligence",
        "authors": "Hossein Fereidooni, Alexandra Dmitrienko, Phillip Rieger, Markus Miettinen, Ahmad-Reza Sadeghi, Felix Madlener",
        "abstract": "—In the present era of ubiquitous digitization more and more services are becoming available online which is ampliﬁed by the Corona pandemic. The fast-growing mobile service market opens up new attack surfaces to the mobile service ecosystem. Hence, mobile service providers are faced with various challenges to protect their services and in particular the associated mobile apps. Defenses for apps are, however, often limited to (lightweight) application-level protection such as app hardening and monitoring and intrusion detection. Therefore, effective risk management is crucial to limit the exposure of mobile services to threats and potential damages caused by attacks.Inthis paper, we present FedCRI, a solution for sharing Cyber-Risk Intelligence (CRI). At its core, FedCRI transforms mobile cyber-risks into machine learning (ML) models and leverages ML-based risk management to evaluate security risks on mobile devices. FedCRI enables fast and autonomous sharing of actionable ML-based CRI knowledge by utilizing Federated Learning (FL). FL allows collaborative training of effective risk detection models based on information contributed by different mobile service providers while preserving the privacy of the training data of the individual organizations. We extensively evaluate our approach on several real-world user databases representing 23.8 million users of security-critical mobile apps (since Android 4 and iOS 6) provided by nine different service providers in different European countries. The datasets were collected over the course of six years in the domains of ﬁnancial services, payments, and insurances. Our approach can successfully extract accurate CRI models, allowing effective identiﬁcation of cybersecurity risks on mobile devices. Our evaluation shows that the federated risk detection model can achieve better than 99% accuracy in terms of F1-score in most risk classiﬁcation tasks with a very low number of false positives.",
        "files": {
            "openAccessPdf": "https://doi.org/10.14722/ndss.2022.23153"
        },
        "abstract_zh": "—在当今无处不在的数字化时代，越来越多的服务变得在线可用，这一点得到了科罗纳疫情的放大。快速增长的移动服务市场为移动服务生态系统开辟了新的攻击面。因此，移动服务提供商面临着各种挑战来保护他们的服务，尤其是相关的移动应用。然而，对应用程序的防御通常仅限于(轻量级)应用程序级保护，如应用程序强化和监控以及入侵检测。因此，有效的风险管理对于限制移动服务暴露于攻击造成的威胁和潜在损害至关重要。在本文中，我们介绍了FedCRI，一种共享网络风险情报(CRI)的解决方案。FedCRI的核心是将移动网络风险转化为机器学习(ML)模型，并利用基于ML的风险管理来评估移动设备上的安全风险。FedCRI通过利用联合学习(FL)实现了可操作的基于ML的CRI知识的快速和自主共享。FL允许基于由不同移动服务提供商提供的信息对有效的风险检测模型进行协作训练，同时保护各个组织的训练数据的隐私。我们在几个真实世界的用户数据库上对我们的方法进行了广泛的评估，这些数据库代表了欧洲不同国家的九个不同服务提供商提供的安全关键型移动应用程序(自Android 4和iOS 6以来)的2380万用户。这些数据集是在金融服务、支付和保险领域历时六年收集的。我们的方法可以成功提取准确的CRI模型，从而有效识别移动设备上的网络安全风险。我们的评估表明，在大多数风险分类任务中，联合风险检测模型的F1值准确率可以达到99%以上，并且误报率非常低。",
        "title_zh": "FedCRI:联邦移动网络风险情报",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2022.html",
        "conf_title": "29th NDSS 2022: San Diego, CA, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2022/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.ndss-symposium.org/ndss-paper/auto-draft-233/",
        "title": "Privacy in Urban Sensing with Instrumented Fleets, Using Air Pollution Monitoring As A Usecase",
        "authors": "Ismi Abidi, Ishan Nangia, Paarijaat Aditya, Rijurekha Sen",
        "abstract": "—Companies providing services like cab sharing, e- commerce logistics and food delivery are willing to instrument their vehicles for scaling up measurements of trafﬁc congestion, travel time, road surface quality, air quality, etc. [1]. Analyzing ﬁne-grained sensors data from such large ﬂeets can be highly beneﬁcial; however, this sensor information reveals the locations and the number of vehicles in the deployed ﬂeet. This sensitive data is of high business value to rival companies in the same business domain, e.g., Uber vs. Ola, Uber vs. Lyft in cab sharing, or Amazon vs. Alibaba in the e-commerce domain. This paper provides privacy guarantees for the scenario mentioned above using Gaussian Process Regression (GPR) based interpolation, Differential Privacy (DP), and Secure two-party computations (2PC). The sensed values from instrumented vehicle ﬂeets are made available preserving ﬂeet and client privacy, along with client utility. Our system has efﬁcient latency and bandwidth overheads, even for resource-constrained mobile clients. To demonstrate our end-to-end system, we build a sample Android application that gives the least polluted route alternatives given a source-destination pair in a privacy preserved manner.",
        "files": {
            "openAccessPdf": "https://doi.org/10.14722/ndss.2022.23127"
        },
        "abstract_zh": "—提供出租车共享、电子商务物流和食品配送等服务的公司愿意为他们的车辆配备仪器，以扩大对交通拥堵、旅行时间、路面质量、空气质量等的测量。[1].分析来自如此大面积的细粒传感器数据可能非常有益；然而，该传感器信息揭示了部署区域内车辆的位置和数量。这些敏感数据对于同一业务领域的竞争对手来说具有很高的商业价值，例如优步对Ola，优步对Lyft在出租车共享领域的竞争，或者亚马逊对阿里巴巴在电子商务领域的竞争。本文使用基于高斯过程回归(GPR)的插值、差分隐私(DP)和安全双方计算(2PC)为上述场景提供隐私保证。来自仪表化车辆轮距的感测值可用于保护轮距和客户隐私，以及客户效用。我们的系统具有足够的延迟和带宽开销，即使对于资源受限的移动客户端也是如此。为了演示我们的端到端系统，我们构建了一个示例Android应用程序，它以隐私保护的方式给出了给定的源-目的地对的污染最少的路线选择。",
        "title_zh": "使用空气污染监测作为用例，使用仪表化车队进行城市传感中的隐私",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2022.html",
        "conf_title": "29th NDSS 2022: San Diego, CA, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2022/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.ndss-symposium.org/ndss-paper/automated-cross-platform-reverse-engineering-of-can-bus-commands-from-mobile-apps/",
        "title": "Automated Cross-Platform Reverse Engineering of CAN Bus Commands From Mobile Apps",
        "authors": "Haohuang Wen, Qingchuan Zhao, Qi Alfred Chen, Zhiqiang Lin",
        "abstract": "In modern automobiles, CAN bus commands are necessary for a wide range of applications such as diagnosis, security monitoring, and recently autonomous driving. However, only a small portion of CAN bus commands is standardized, and a vast majority of them is developed privately by car manufacturers. Today, the most effective way of revealing the proprietary CAN bus commands is to reverse engineer with real cars, which unfortunately is time-consuming and costly. In this paper, we propose a cost-effective (no real car needed) and automatic (no human intervention required) system, CANHUNTER, for reverse engineering of CAN bus commands using just car companion mobile apps. To achieve high effectiveness, we design an efficient technique to uncover the syntactics of CAN bus commands with backward slicing and dynamic forced execution, and a novel algorithm to uncover the semantics of CAN bus commands by leveraging code-level semantic clues. We have implemented a prototype of CANHUNTER for both Android and iOS platforms, and tested it with all free car companion apps (236 in total) from both Google Play and Apple App Store. Among these apps, CANHUNTER discovered 182, 619 unique CAN bus commands with 86.1% of them revealed with semantics, covering 360 car models from 21 car manufactures. We have also evaluated their correctness (both syntactics and semantics) using public resources, cross-platform and cross-app validation, and also realcar testing, with which over 70% of all the uncovered commands are validated. We observe no inconsistency in cross-platform and cross-app validation. While there are 3 semantic inconsistency among 241 manually validated CAN bus commands from public resources and real-car testing, we find that these three cases are actually caused by mistakes from app developers.",
        "files": {
            "openAccessPdf": "https://doi.org/10.14722/ndss.2020.24231"
        },
        "abstract_zh": "在现代汽车中，CAN总线命令对于诊断、安全监控和最近的自动驾驶等广泛应用是必要的。然而，只有一小部分CAN总线命令是标准化的，绝大多数是汽车制造商私人开发的。如今，揭示专有CAN总线命令的最有效方法是用实车进行逆向工程，不幸的是，这既费时又费钱。在本文中，我们提出了一个具有成本效益(不需要真正的汽车)和自动化(不需要人工干预)的系统CANHUNTER，用于仅使用汽车伴侣移动应用程序对CAN总线命令进行逆向工程。为了实现高效率，我们设计了一种有效的技术，通过向后切片和动态强制执行来揭示CAN总线命令的语法，并设计了一种新的算法，通过利用代码级语义线索来揭示CAN总线命令的语义。我们已经实现了一个适用于Android和iOS平台的CANHUNTER原型，并使用来自Google Play和苹果应用商店的所有免费汽车伴侣应用程序(总共236个)进行了测试。在这些应用程序中，CANHUNTER发现了182，619条独特的CAN总线命令，其中86.1%带有语义，涵盖了21家汽车制造商的360款汽车。我们还使用公共资源、跨平台和跨应用程序验证以及realcar测试评估了它们的正确性(语法和语义)，超过70%的未公开命令都通过了验证。我们发现跨平台和跨应用程序验证没有不一致的地方。虽然在来自公共资源和实车测试的241个手动验证的CAN总线命令中有3个语义不一致，但我们发现这三个情况实际上是由应用程序开发人员的错误引起的。",
        "title_zh": "来自移动应用的CAN总线命令的自动化跨平台逆向工程",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2020.html",
        "conf_title": "27th NDSS 2020: San Diego, CA, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2020/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.ndss-symposium.org/ndss-paper/tkperm-cross-platform-permission-knowledge-transfer-to-detect-overprivileged-third-party-applications/",
        "title": "TKPERM: Cross-platform Permission Knowledge Transfer to Detect Overprivileged Third-party Applications",
        "authors": "Faysal Hossain Shezan, Kaiming Cheng, Zhen Zhang, Yinzhi Cao, Yuan Tian",
        "abstract": "Permission-based access control enables users to manage and control their sensitive data for third-party applications. In an ideal scenario, third-party application includes enough details to illustrate the usage of such data, while the reality is that many descriptions of third-party applications are vague about their security or privacy activities. As a result, users are left with insufficient details when granting sensitive data to these applications. Prior works, such as WHYPER and AutoCog, have addressed the aforementioned problem via a so-called permission correlation system. Such a system correlates thirdparty applications’ description with their requested permissions and determines an application as overprivileged, if a mismatch between the requested permission and the description is found. However, although prior works are successful on their own platforms, such as Android eco-system, they are not directly applicable to new platforms, such as Chrome extensions and IFTTT, without extensive data labeling and parameter tuning. In this paper, we design, implement, and evaluate a novel system, called TKPERM, which transfers knowledges of permission correlation systems across platforms. Our key idea is that these varied platforms with different use cases—like smartphones, IoTs, and desktop browsers—are all user-facing and thus allow the knowledges to be transferrable across platforms. Particularly, we adopt a greedy selection algorithm that picks the best source domains to transfer to the target permission on a new platform. TKPERM achieves 90.02% overall F1 score after transfer, which is 12.62% higher than the one of a model trained directly on the target domain without transfer. Particularly, TKPERM has 91.83% F1 score on IFTTT, 89.13% F1 score on Chrome-Extension, and 89.1% F1 score on SmartThings. TKPERM also successfully identified many real-world overprivileged applications, such as a gaming hub requesting location permissions without legitimate use.",
        "files": {
            "openAccessPdf": "https://doi.org/10.14722/ndss.2020.24287"
        },
        "abstract_zh": "基于权限的访问控制使用户能够为第三方应用程序管理和控制他们的敏感数据。在理想的情况下，第三方应用程序包括足够的细节来说明这些数据的使用，而现实是，第三方应用程序的许多描述对其安全或隐私活动都很模糊。因此，当向这些应用程序授予敏感数据时，用户没有足够的详细信息。先前的工作，例如WHYPER和AutoCog，已经通过所谓的许可关联系统解决了上述问题。这种系统将第三方应用程序的描述与它们所请求的许可相关联，并且如果发现所请求的许可和描述之间不匹配，则确定应用程序为特权过高。然而，尽管之前的作品在自己的平台上取得了成功，如Android生态系统，但如果没有大量的数据标签和参数调整，它们并不能直接适用于新的平台，如Chrome extensions和IFTTT。在本文中，我们设计、实现并评估了一个新的系统，称为TKPERM，它跨平台传递权限关联系统的知识。我们的主要想法是，这些具有不同用例的不同平台——如智能手机、物联网和桌面浏览器——都是面向用户的，因此允许知识跨平台转移。特别地，我们采用了一种贪婪的选择算法来挑选最佳的源域转移到新平台上的目标权限。TKPERM在迁移后获得了90.02%的总体F1分数，比直接在目标域上训练的模型的分数高12.62%。特别是TKPERM在IFTTT上的F1评分为91.83%，在Chrome-Extension上的F1评分为89.13%，在SmartThings上的F1评分为89.1%。TKPERM还成功识别了许多现实世界中的过度授权应用程序，例如一个游戏中心在没有合法使用的情况下请求位置许可。",
        "title_zh": "TKPERM:跨平台的权限知识转移，用于检测过度授权的第三方应用程序",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2020.html",
        "conf_title": "27th NDSS 2020: San Diego, CA, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2020/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.ndss-symposium.org/ndss-paper/flowprint-semi-supervised-mobile-app-fingerprinting-on-encrypted-network-traffic/",
        "title": "FlowPrint: Semi-Supervised Mobile-App Fingerprinting on Encrypted Network Traffic",
        "authors": "Thijs van Ede, Riccardo Bortolameotti, Andrea Continella, Jingjing Ren, Daniel J. Dubois, Martina Lindorfer, David R. Choffnes, Maarten van Steen, Andreas Peter",
        "abstract": "Mobile-application fingerprinting of network traffic is valuable for many security solutions as it provides insights into the apps active on a network. Unfortunately, existing techniques require prior knowledge of apps to be able to recognize them. However, mobile environments are constantly evolving, i.e., apps are regularly installed, updated, and uninstalled. Therefore, it is infeasible for existing fingerprinting approaches to cover all apps that may appear on a network. Moreover, most mobile traffic is encrypted, shows similarities with other apps, e.g., due to common libraries or the use of content delivery networks, and depends on user input, further complicating the fingerprinting process. As a solution, we propose FlowPrint, a semi-supervised approach for fingerprinting mobile apps from (encrypted) network traffic. We automatically find temporal correlations among destination-related features of network traffic and use these correlations to generate app fingerprints. Our approach is able to fingerprint previously unseen apps, something that existing techniques fail to achieve. We evaluate our approach for both Android and iOS in the setting of app recognition, where we achieve an accuracy of 89.2%, significantly outperforming state-of-the-art solutions. In addition, we show that our approach can detect previously unseen apps with a precision of 93.5%, detecting 72.3% of apps within the first five minutes of communication.",
        "files": {
            "openAccessPdf": "https://doi.org/10.14722/ndss.2020.24412"
        },
        "abstract_zh": "网络流量的移动应用指纹对许多安全解决方案都很有价值，因为它提供了对网络上活跃的应用的洞察。不幸的是，现有技术需要应用程序的先验知识才能识别它们。然而，移动环境在不断发展，也就是说，应用程序会定期安装、更新和卸载。因此，现有的指纹识别方法覆盖可能出现在网络上的所有应用是不可行的。此外，大多数移动流量都是加密的，显示出与其他应用程序的相似性，例如，由于共同的库或内容交付网络的使用，并且依赖于用户输入，这进一步使指纹识别过程复杂化。作为解决方案，我们提出了FlowPrint，这是一种从(加密的)网络流量中提取移动应用指纹的半监督方法。我们自动发现网络流量的目的地相关特征之间的时间相关性，并使用这些相关性来生成应用指纹。我们的方法能够识别以前未见过的应用程序，这是现有技术无法实现的。我们在应用识别设置中评估了我们在Android和iOS上的方法，我们实现了89.2%的准确率，显著优于最先进的解决方案。此外，我们表明，我们的方法可以以93.5%的精度检测到以前未见过的应用程序，在通信的前五分钟内检测到72.3%的应用程序。",
        "title_zh": "FlowPrint:加密网络流量上的半监督移动应用指纹识别",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2020.html",
        "conf_title": "27th NDSS 2020: San Diego, CA, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2020/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.ndss-symposium.org/ndss-paper/precisely-characterizing-security-impact-in-a-flood-of-patches-via-symbolic-rule-comparison/",
        "title": "Precisely Characterizing Security Impact in a Flood of Patches via Symbolic Rule Comparison",
        "authors": "Qiushi Wu, Yang He, Stephen McCamant, Kangjie Lu",
        "abstract": "A bug is a vulnerability if it has security impacts when triggered. Determining the security impacts of a bug is important to both defenders and attackers. Maintainers of large software systems are bombarded with numerous bug reports and proposed patches, with missing or unreliable information about their impact. Determining which few bugs are vulnerabilities is difficult, and bugs that a maintainer believes do not have security impact will be de-prioritized or even ignored. On the other hand, a public report of a bug with a security impact is a powerful first step towards exploitation. Adversaries may exploit such bugs to launch devastating attacks if defenders do not fix them promptly. Common practice is for maintainers to assess the security impacts of bugs manually, but the scaling and reliability challenges of manual analysis lead to missed vulnerabilities. We propose an automated approach, SID, to determine the security impacts for a bug given its patch, so that maintainers can effectively prioritize applying the patch to the affected programs. The insight behind SID is that both the effect of a patch (either submitted or applied) and security-rule violations (e.g., out-of-bound access) can be modeled as constraints that can be automatically solved. SID incorporates rule comparison, using under-constrained symbolic execution of a patch to determine the security impacts of an un-applied patch. SID can further automatically classify vulnerabilities based on their security impacts. We have implemented SID and applied it to bug patches of the Linux kernel and matching CVE-assigned vulnerabilities to evaluate its precision and recall. We optimized SID to reduce false positives, and our evaluation shows that, from 54K recent valid commit patches, SID detected 227 security bugs with at least 243 security impacts at a 97% precision rate. Critically, 197 of them were not reported as vulnerabilities before, leading to delayed or ignored patching in derivative programs. Even worse, 21 of them are still unpatched in the latest Android kernel. Once exploited, they can cause critical security impacts on Android devices. The evaluation results confirm that SID’s approach is effective and precise in automatically determining security impacts for a massive stream of bug patches.",
        "files": {
            "openAccessPdf": "https://doi.org/10.14722/ndss.2020.24419"
        },
        "abstract_zh": "如果一个bug在被触发时会产生安全影响，那么它就是一个漏洞。确定bug的安全影响对防御方和攻击方都很重要。大型软件系统的维护者被大量的错误报告和建议的补丁轰炸，关于它们的影响的信息缺失或不可靠。确定哪几个bug是漏洞是困难的，维护人员认为没有安全影响的bug会被降低优先级，甚至被忽略。另一方面，公开报告一个具有安全影响的错误是利用漏洞的有力的第一步。如果防御方不及时修复这些漏洞，对手可能会利用这些漏洞发动毁灭性的攻击。通常的做法是让维护人员手动评估bug的安全影响，但是手动分析的可扩展性和可靠性挑战会导致遗漏漏洞。我们提出了一种自动化的方法，SID，来确定给定补丁的bug的安全影响，以便维护人员可以有效地优先对受影响的程序应用补丁。SID背后的观点是，补丁的影响(无论是提交的还是应用的)和违反安全规则的行为(例如，越界访问)都可以建模为可以自动解决的约束。SID合并了规则比较，使用补丁的欠约束符号执行来确定未应用补丁的安全影响。SID可以根据安全影响进一步自动对漏洞进行分类。我们已经实现了SID，并将其应用于Linux内核的错误补丁和匹配CVE分配的漏洞，以评估其精度和召回率。我们优化了SID以减少误报，我们的评估显示，从54K个最近有效的提交补丁中，SID以97%的准确率检测到227个安全漏洞，至少有243个安全影响。关键的是，其中197个以前没有被报告为漏洞，导致衍生程序中的补丁被延迟或忽略。更糟糕的是，其中有21个仍然没有在最新的Android内核中打补丁。一旦被利用，它们会对Android设备造成严重的安全影响。评估结果证实了SID的方法在自动确定大规模bug补丁流的安全影响方面是有效和精确的。",
        "title_zh": "通过符号规则比较精确描述大量补丁的安全影响",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2020.html",
        "conf_title": "27th NDSS 2020: San Diego, CA, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2020/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.ndss-symposium.org/ndss-paper/let-me-unwind-that-for-you-exceptions-to-backward-edge-protection/",
        "title": "Let Me Unwind That For You: Exceptions to Backward-Edge Protection",
        "authors": "Victor Duta, Fabian Freyer, Fabio Pagani, Marius Muench, Cristiano Giuffrida",
        "abstract": "—Backward-edge control-ﬂow hijacking via stack buffer overﬂow is the holy grail of software exploitation. The ability to directly control critical stack data and the hijacked target makes this exploitation strategy particularly appealing for attackers. As a result, the community has deployed strong backward-edge protections such as shadow stacks or stack canaries, forcing attackers to resort to less ideal e.g., heap-based exploitation strategies. However, such mitigations commonly rely on one key assumption, namely an attacker relying on return address corruption to directly hijack control ﬂow upon function return. In this paper, we present exceptions to this assumption and show attacks based on backward-edge control-ﬂow hijacking without the direct hijacking are possible. Speciﬁcally, we demon- strate that stack corruption can cause exception handling to act as a confused deputy and mount backward-edge control- ﬂow hijacking attacks on the attacker’s behalf. This strategy provides overlooked opportunities to divert execution to attacker- controlled catch handlers (a paradigm we term Catch Handler Oriented Programming or CHOP) and craft powerful primitives such as arbitrary code execution or arbitrary memory writes. We ﬁnd CHOP-style attacks to work across multiple platforms (Linux, Windows, macOS, Android and iOS). To analyze the uncovered attack surface, we survey popular open-source pack- ages and study the applicability of the proposed exploitation techniques. Our analysis shows that suitable exception handling targets are ubiquitous in C++ programs and exploitable exception handlers are common. We conclude by presenting three end-to- end exploits on real-world software and proposing changes to deployed mitigations to address CHOP.",
        "files": {
            "openAccessPdf": "https://doi.org/10.14722/ndss.2023.23295"
        },
        "abstract_zh": "—通过堆栈缓冲区溢出的后向边缘控制流劫持是软件开发的圣杯。直接控制关键堆栈数据和被劫持目标的能力使得这种利用策略对攻击者特别有吸引力。因此，社区部署了强大的后向边缘保护，如影子堆栈或堆栈金丝雀，迫使攻击者采取不太理想的策略，如基于堆的利用策略。然而，这种缓解通常依赖于一个关键假设，即攻击者依赖返回地址损坏来在函数返回时直接劫持控制流。在本文中，我们提出了这种假设的例外情况，并表明基于后向边缘控制流劫持而没有直接劫持的攻击是可能的。具体来说，我们证明堆栈损坏会导致异常处理充当混乱的代理，并代表攻击者发起后向边缘控制流劫持攻击。这种策略为将执行转移到攻击者控制的catch处理程序(我们称之为面向Catch处理程序的编程或CHOP)提供了被忽视的机会，并制造了强大的原语，如任意代码执行或任意内存写入。我们发现斩波式攻击可以在多个平台上运行(Linux、Windows、macOS、Android和iOS)。为了分析暴露的攻击面，我们调查了流行的开源包，并研究了所提出的利用技术的适用性。我们的分析表明，合适的异常处理目标在C++程序中普遍存在，可利用的异常处理程序也很常见。最后，我们展示了现实世界软件中的三个端到端漏洞，并建议对已部署的缓解措施进行更改以解决CHOP问题。",
        "title_zh": "让我给你解释一下:后向边缘保护的例外",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2023.html",
        "conf_title": "30th NDSS 2023: San Diego, CA, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2023/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.ndss-symposium.org/ndss-paper/thwarting-smartphone-sms-attacks-at-the-radio-interface-layer/",
        "title": "Thwarting Smartphone SMS Attacks at the Radio Interface Layer",
        "authors": "Haohuang Wen, Phillip A. Porras, Vinod Yegneswaran, Zhiqiang Lin",
        "abstract": "—The short message service (SMS) is a cornerstone of modern smartphone communication that enables inter-personal text messaging and other SMS-based services (e.g., two-factor authentication). However, it can also be readily exploited to compromise unsuspecting remote victims. For instance, novel exploits such as Simjacker and WIBAttack enable transmission of binary SMS messages that could surreptitiously execute dangerous commands on a victim device. The SMS channel may also be subverted to drive other nefarious activities (e.g., spamming, DoS, and tracking), thereby undermining end-user security and privacy. Unfortunately, neither contemporary smart- phone operating systems nor existing defense techniques provide a comprehensive bulwark against the spectrum of evolving SMS- driven threats. To address this limitation, we develop a novel defense framework called R IL D EFENDER , which to the best of our knowledge is the ﬁrst inline prevention system integrated into the radio interface layer (RIL) of Android smartphones. We describe an implementation of R IL D EFENDER on three smartphone models with ﬁve Android versions of the Android Open Source Project (AOSP), and show that it is able to protect users from six types of SMS attacks spanning four adversary models. We evaluate R IL D EFENDER against 19 reproduced SMS attacks and 11 contemporary SMS malware samples and ﬁnd that R IL D EFENDER detects all and automatically prevents all but one of these threats without affecting normal cellular operations.",
        "files": {
            "openAccessPdf": "https://doi.org/10.14722/ndss.2023.24432"
        },
        "abstract_zh": "—短消息服务(SMS)是现代智能手机通信的基石，支持个人之间的文本消息传递和其他基于SMS的服务(例如，双因素身份验证)。但是，它也很容易被利用来危害毫无防备的远程受害者。例如，Simjacker和WIBAttack之类的新漏洞可以传输二进制SMS消息，从而在受害设备上秘密执行危险的命令。SMS信道也可能被破坏以驱动其他恶意活动(例如，垃圾邮件、DoS和跟踪)，从而破坏最终用户的安全和隐私。不幸的是，无论是当代智能手机操作系统还是现有的防御技术，都无法提供全面的防御手段来抵御不断演变的短信驱动的威胁。为了解决这一限制，我们开发了一种称为R IL D EFENDER的新型防御框架，据我们所知，这是第一个集成到Android智能手机无线电接口层(R IL)的在线预防系统。我们描述了R IL D EFENDER在三种智能手机模型上的实现，以及Android开源项目(AOSP)的五个Android版本，并表明它能够保护用户免受跨越四种对手模型的六种类型的短信攻击。我们针对19个复制的短信攻击和11个当代短信恶意软件样本对R IL D EFENDER进行了评估，发现R IL D EFENDER可以检测到所有威胁，并在不影响正常蜂窝操作的情况下自动阻止其中一个威胁。",
        "title_zh": "在无线电接口层阻止智能手机短信攻击",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2023.html",
        "conf_title": "30th NDSS 2023: San Diego, CA, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2023/",
        "keywords": [
            "AOSP",
            "Android"
        ]
    },
    {
        "url": "https://www.ndss-symposium.org/ndss-paper/post-gdpr-threat-hunting-on-android-phones-dissecting-os-level-safeguards-of-user-unresettable-identifiers/",
        "title": "Post-GDPR Threat Hunting on Android Phones: Dissecting OS-level Safeguards of User-unresettable Identifiers",
        "authors": "Mark Huasong Meng, Qing Zhang, Guangshuai Xia, Yuwei Zheng, Yanjun Zhang, Guangdong Bai, Zhi Liu, Sin G. Teo, Jin Song Dong",
        "abstract": "Ever since its genesis, Android has enabled apps to access data and services on mobile devices. This however involves a wide variety of user-unresettable identifiers (UUIs), e.g., the MAC address, which are associated with a device permanently. Given their privacy sensitivity, Android has tightened its UUI access policy since its version 10, in response to the increasingly strict privacy protection regulations around the world. Nonsystem apps are restricted from accessing them and are required to use user-resettable alternatives such as advertising IDs. In this work, we conduct a systematic study on the effectiveness of the UUI safeguards on Android phones including both Android Open Source Project (AOSP) and Original Equipment Manufacturer (OEM) phones. To facilitate our large-scale study, we propose a set of analysis techniques that discover and assess UUI access channels. Our approach features a hybrid analysis that consists of static program analysis of Android Framework and forensic analysis of OS images to uncover access channels. These channels are then tested with differential analysis to identify weaknesses that open any attacking opportunity. We have conducted a vulnerability assessment on 13 popular phones of 9 major manufacturers, most of which are top-selling and installed with the recent Android versions. Our study reveals that UUI mishandling pervasively exists, evidenced by 51 unique vulnerabilities found (8 listed by CVE). Our work unveils the status quo of the UUI protection in Android phones, complementing the existing studies that mainly focus on apps’ UUI harvesting behaviors. Our findings should raise an alert to phone manufacturers and would encourage policymakers to further extend the scope of regulations with device-level data protection.",
        "files": {
            "openAccessPdf": "https://doi.org/10.14722/ndss.2023.23176"
        },
        "abstract_zh": "自诞生以来，Android就让应用程序能够在移动设备上访问数据和服务。然而，这涉及各种各样的用户不可预定的标识符(uui)，例如MAC地址，它们永久地与设备相关联。鉴于其隐私敏感性，Android从版本10开始收紧了其UUI访问政策，以应对全球日益严格的隐私保护法规。非系统应用程序被限制访问它们，并被要求使用用户可重置的替代方法，如广告id。在这项工作中，我们对UUI安全措施在Android手机上的有效性进行了系统研究，包括Android开源项目(AOSP)和原始设备制造商(OEM)手机。为了促进我们的大规模研究，我们提出了一套发现和评估UUI接入信道的分析技术。我们的方法采用混合分析，包括Android框架的静态程序分析和操作系统映像的取证分析，以发现访问通道。然后，通过差异分析对这些通道进行测试，以识别可能带来任何攻击机会的弱点。我们对9大厂商的13款热门手机进行了漏洞评估，大部分都是顶配，安装了最近的Android版本。我们的研究表明，UUI处理不当普遍存在，证据是发现了51个独特的漏洞(CVE列出了8个)。我们的工作揭示了Android手机中UUI保护的现状，补充了主要关注应用程序UUI收割行为的现有研究。我们的发现应该向手机制造商发出警告，并鼓励政策制定者进一步扩大设备级数据保护的监管范围。",
        "title_zh": "Android手机上的后GDPR威胁追踪:剖析用户不可保留标识符的操作系统级保护",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2023.html",
        "conf_title": "30th NDSS 2023: San Diego, CA, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2023/",
        "keywords": [
            "AOSP",
            "Android"
        ]
    },
    {
        "url": "https://www.ndss-symposium.org/ndss-paper/do-not-give-a-dog-bread-every-time-he-wags-his-tail-stealing-passwords-through-content-queries-conquer-attacks/",
        "title": "Do Not Give a Dog Bread Every Time He Wags His Tail: Stealing Passwords through Content Queries (CONQUER) Attacks",
        "authors": "Chongqing Lei, Zhen Ling, Yue Zhang, Kai Dong, Kaizheng Liu, Junzhou Luo, Xinwen Fu",
        "abstract": "—Android accessibility service was designed to assist individuals with disabilities in using Android devices. However, it has been exploited by attackers to steal user passwords due to design shortcomings. Google has implemented various countermeasures to make it difficult for these types of attacks to be successful on modern Android devices. In this paper, we present a new type of side channel attack called content queries (C ONQUER ) that can bypass these defenses. We discovered that Android does not prevent the content of passwords from being queried by the accessibility service, allowing malware with this service enabled to enumerate the combinations of content to brute force the password. While this attack seems simple to execute, there are several challenges that must be addressed in order to successfully launch it against real-world apps. These include the use of lazy query to differentiate targeted password strings, active query to determine the right timing for the attack, and timing-and state-based side channels to infer case-sensitive passwords. Our evaluation results demonstrate that the C ONQUER attack is effective at stealing passwords, with an average one-time success rate of 64.91%. This attack also poses a threat to all Android versions from 4.1 to 12, and can be used against tens of thousands of apps. In addition, we analyzed the root cause of the C ONQUER attack and discussed several countermeasures to mitigate the potential security risks it poses.",
        "files": {
            "openAccessPdf": "https://doi.org/10.14722/ndss.2023.24005"
        },
        "abstract_zh": "—Android辅助功能服务旨在帮助残障人士使用Android设备。然而，由于设计缺陷，它已被攻击者利用来窃取用户密码。谷歌实施了各种对策，使这些类型的攻击难以在现代Android设备上成功。在本文中，我们提出了一种新型的旁路攻击，称为内容查询(C ONQUER ),可以绕过这些防御。我们发现，Android不能防止可访问性服务查询密码的内容，从而允许启用该服务的恶意软件枚举内容的组合来暴力破解密码。虽然这种攻击似乎很容易执行，但要成功地对现实世界的应用程序发起攻击，必须解决几个挑战。其中包括使用惰性查询来区分目标密码字符串，使用主动查询来确定攻击的正确时间，以及使用基于时间和状态的辅助通道来推断区分大小写的密码。评估结果表明，C ONQUER攻击能够有效窃取密码，平均一次性成功率为64.91%。这种攻击也对4.1到12的所有安卓版本构成威胁，可以用来对抗数万个app。此外，我们分析了C ONQUER攻击的根本原因，并讨论了几种对策来减轻它带来的潜在安全风险。",
        "title_zh": "不要每次狗摇尾巴都给它面包:通过内容查询(征服)攻击窃取密码",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2023.html",
        "conf_title": "30th NDSS 2023: San Diego, CA, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2023/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.ndss-symposium.org/ndss-paper/access-your-tesla-without-your-awareness-compromising-keyless-entry-system-of-model-3/",
        "title": "Access Your Tesla without Your Awareness: Compromising Keyless Entry System of Model 3",
        "authors": "Xinyi Xie, Kun Jiang, Rui Dai, Jun Lu, Lihui Wang, Qing Li, Jun Yu",
        "abstract": "Tesla Model 3 has equipped with Phone Keys and Key Cards in addition to traditional key fobs for better driving experiences. These new features allow a driver to enter and start the vehicle without using a mechanical key through a wireless authentication process between the vehicle and the key. Unlike the requirements of swiping against the car for Key Cards, the Tesla mobile app’s Phone Key feature can unlock a Model 3 while your smartphone is still in a pocket or bag. In this paper, we performed a detailed security analysis aiming at Tesla keys, especially for Key Cards and Phone Keys. Starting with reverse engineering the mobile application and sniffing the communication data, we reestablished pairing and authentication protocols and analyzed their potential issues. Missing the certificate verification allows an unofficial Key Card to work as an official one. Using these third-party products may lead to serious security problems. Also, the weaknesses of the current protocol lead to a man-in-the-middle (MitM) attack through a Bluetooth channel. The MitM attack is an improved relay attack breaking the security of the authentication procedures for Phone Keys. We also developed an App named TESmLA installed on customized Android devices to complete the proof-of-concept. The attackers can break into Tesla Model 3 and drive it away without the awareness of the car owner. Our results bring into question the security of Passive Keyless Entry and Start (PKES) and Bluetooth implementations in security-critical applications. To mitigate the security problems, we discussed the corresponding countermeasures and feasible secure scheme in the future.",
        "files": {
            "openAccessPdf": "https://doi.org/10.14722/ndss.2023.24082"
        },
        "abstract_zh": "特斯拉Model 3除了传统的钥匙链之外，还配备了电话钥匙和钥匙卡，以获得更好的驾驶体验。这些新功能允许驾驶员在不使用机械钥匙的情况下通过车辆和钥匙之间的无线认证过程进入和启动车辆。与在汽车上刷钥匙卡的要求不同，特斯拉手机应用程序的手机钥匙功能可以在智能手机仍在口袋或包里的情况下解锁Model 3。本文针对特斯拉钥匙，尤其是门卡和手机钥匙进行了详细的安全性分析。从逆向工程移动应用程序和嗅探通信数据开始，我们重新建立了配对和认证协议，并分析了它们的潜在问题。错过证书验证允许非官方的钥匙卡作为官方的工作。使用这些第三方产品可能会导致严重的安全问题。此外，当前协议的弱点导致了通过蓝牙信道的中间人(MitM)攻击。MitM攻击是一种改进的中继攻击，它破坏了电话密钥认证过程的安全性。我们还开发了一个名为TESmLA的应用程序，安装在定制的Android设备上，以完成概念验证。攻击者可以在车主不知情的情况下闯入特斯拉Model 3并将其开走。我们的结果对安全关键应用中的被动无钥匙进入和启动(PKES)和蓝牙实施的安全性提出了质疑。为了缓解安全问题，我们讨论了相应的对策和未来可行的安全方案。",
        "title_zh": "在你不知情的情况下使用你的特斯拉:损害模型3的无钥匙进入系统",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2023.html",
        "conf_title": "30th NDSS 2023: San Diego, CA, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2023/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.ndss-symposium.org/ndss-paper/droidcap-os-support-for-capability-based-permissions-in-android/",
        "title": "DroidCap: OS Support for Capability-based Permissions in Android",
        "authors": "Abdallah Dawoud, Sven Bugiel",
        "abstract": "We present DroidCap, a retrofitting of Android’s central Binder IPC mechanism to change the way how permissions are being represented and managed in the system. In DroidCap, permissions are per-process Binder object capabilities. DroidCap's design removes Android’s UID-based ambient authority and allows the delegation of capabilities between processes to create least-privileged protection domains efficiently. With DroidCap, we show that object capabilities as underlying access control model integrates naturally and backward-compatible into Android’s stock permission model and application management. Thus, our Binder capabilities provide app developers with a new path to gradually adopting app compartmentalization, which we showcase at two favorite examples from the literature, privilege separated advertisement libraries and least privileged app components.",
        "files": {
            "openAccessPdf": "https://doi.org/10.14722/ndss.2019.23398"
        },
        "abstract_zh": "我们介绍DroidCap，它是Android中央绑定器IPC机制的改型，改变了权限在系统中的表示和管理方式。在DroidCap中，权限是每个进程绑定器对象的能力。DroidCap的设计消除了Android基于UID的环境权限，并允许在进程之间委托能力，以高效地创建最低特权保护域。通过DroidCap，我们展示了作为底层访问控制模型的对象能力自然地、向后兼容地集成到Android的股票许可模型和应用程序管理中。因此，我们的绑定器功能为应用程序开发人员提供了一条逐步采用应用程序划分的新途径，我们在文献中展示了两个最受欢迎的示例，即特权分离广告库和最低特权应用程序组件。",
        "title_zh": "droid cap:Android中对基于能力的权限的操作系统支持",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2019.html",
        "conf_title": "26th NDSS 2019: San Diego, CA, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2019/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.ndss-symposium.org/ndss-paper/time-does-not-heal-all-wounds-a-longitudinal-analysis-of-security-mechanism-support-in-mobile-browsers/",
        "title": "Time Does Not Heal All Wounds: A Longitudinal Analysis of Security-Mechanism Support in Mobile Browsers",
        "authors": "Meng Luo, Pierre Laperdrix, Nima Honarmand, Nick Nikiforakis",
        "abstract": "Recent market share statistics show that mobile device traffic has overtaken that of traditional desktop computers. Users spend an increasing amount of time on their smartphones and tablets, while the web continues to be the platform of choice for delivering new applications to users. In this environment, it is necessary for web applications to utilize all the tools at their disposal to protect mobile users against popular web application attacks. In this paper, we perform the first study of the support of popular web-application security mechanisms (such as the Content-Security Policy, HTTP Strict Transport Security, and Referrer Policy) across mobile browsers. We design 395 individual tests covering 8 different security mechanisms, and utilize them to evaluate the security-mechanism support in the 20 most popular browser families on Android. Moreover, by collecting and testing browser versions from the last seven years, we evaluate a total of 351 unique browser versions against the aforementioned tests, collecting more than 138K test results. By analyzing these results, we find that, although mobile browsers generally support more security mechanisms over time, not all browsers evolve in the same way. We discover popular browsers, with millions of downloads, which do not support the majority of the tested mechanisms, and identify design choices, followed by the majority of browsers, which leave hundreds of popular websites open to clickjacking attacks. Moreover, we discover the presence of multi-year vulnerability windows between the time when popular websites start utilizing a security mechanism and when mobile browsers enforce it. Our findings highlight the need for continuous security testing of mobile web browsers, as well as server-side frameworks which can adapt to the level of security that each browser can guarantee.",
        "files": {
            "openAccessPdf": "https://doi.org/10.14722/ndss.2019.23149"
        },
        "abstract_zh": "最近的市场份额统计显示，移动设备的流量已经超过了传统的台式电脑。用户在智能手机和平板电脑上花费的时间越来越多，而网络仍然是向用户提供新应用的首选平台。在这种环境下，web应用程序有必要利用所有工具来保护移动用户免受流行的web应用程序攻击。在本文中，我们首次研究了跨移动浏览器的流行web应用安全机制(如内容安全策略、HTTP严格传输安全和Referrer策略)的支持。我们设计了涵盖8种不同安全机制的395个单独测试，并利用它们来评估Android上20个最流行的浏览器家族对安全机制的支持。此外，通过收集和测试过去七年的浏览器版本，我们针对上述测试评估了总共351个不同的浏览器版本，收集了超过138K个测试结果。通过分析这些结果，我们发现，尽管随着时间的推移，移动浏览器通常支持更多的安全机制，但并非所有浏览器都以相同的方式发展。我们发现有数百万次下载的流行浏览器，这些浏览器不支持大多数测试的机制，并确定设计选择，然后是大多数浏览器，这使得数百个流行网站容易受到点击劫持攻击。此外，我们发现，在流行网站开始利用安全机制和移动浏览器实施安全机制之间，存在多年的漏洞窗口。我们的发现强调了对移动网络浏览器进行持续安全测试的需要，以及能够适应每个浏览器所能保证的安全级别的服务器端框架。",
        "title_zh": "时间不能治愈所有的伤口:移动浏览器安全机制支持的纵向分析",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2019.html",
        "conf_title": "26th NDSS 2019: San Diego, CA, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2019/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.ndss-symposium.org/ndss-paper/automating-patching-of-vulnerable-open-source-software-versions-in-application-binaries/",
        "title": "Automating Patching of Vulnerable Open-Source Software Versions in Application Binaries",
        "authors": "Ruian Duan, Ashish Bijlani, Yang Ji, Omar Alrawi, Yiyuan Xiong, Moses Ike, Brendan Saltaformaggio, Wenke Lee",
        "abstract": "Mobile application developers rely heavily on opensource software (OSS) to offload common functionalities such as the implementation of protocols and media format playback. Over the past years, several vulnerabilities have been found in popular open-source libraries like OpenSSL and FFmpeg. Mobile applications that include such libraries inherit these flaws, which make them vulnerable. Fortunately, the open-source community is responsive and patches are made available within days. However, mobile application developers are often left unaware of these flaws. The App Security Improvement Program (ASIP) is a commendable effort by Google to notify application developers of these flaws, but recent work has shown that many developers do not act on this information. Our work addresses vulnerable mobile applications through automatic binary patching from source patches provided by the OSS maintainers and without involving the developers. We propose novel techniques to overcome difficult challenges like patching feasibility analysis, source-code-to-binary-code matching, and in-memory patching. Our technique uses a novel variabilityaware approach, which we implement as OSSPATCHER. We evaluated OSSPATCHER with 39 OSS and a collection of 1,000 Android applications using their vulnerable versions. OSSPATCHER generated 675 function-level patches that fixed the affected mobile applications without breaking their binary code. Further, we evaluated 10 vulnerabilities in popular apps such as Chrome with public exploits, which OSSPATCHER was able to mitigate and thwart their exploitation.",
        "files": {
            "openAccessPdf": "https://doi.org/10.14722/ndss.2019.23126"
        },
        "abstract_zh": "移动应用程序开发人员严重依赖开源软件(OSS)来卸载常见的功能，如协议的实现和媒体格式回放。在过去的几年里，在OpenSSL和FFmpeg等流行的开源库中发现了几个漏洞。包含这些库的移动应用程序继承了这些缺陷，这使得它们很容易受到攻击。幸运的是，开源社区响应迅速，补丁在几天内就可以发布。然而，移动应用程序开发人员往往没有意识到这些缺陷。应用程序安全改进计划(ASIP)是谷歌向应用程序开发者通知这些缺陷的一项值得称赞的努力，但最近的工作表明，许多开发者并没有根据这些信息采取行动。我们的工作通过从OSS维护者提供的源代码补丁自动进行二进制修补来解决易受攻击的移动应用程序，而不涉及开发人员。我们提出了新的技术来克服困难的挑战，如修补可行性分析，源代码到二进制代码的匹配，以及内存修补。我们的技术使用了一种新颖的可变性感知方法，我们将其实现为OSSPATCHER。我们评估了OSSPATCHER的39个操作系统和1000个Android应用程序，使用了它们的漏洞版本。OSSPATCHER生成了675个函数级补丁，在不破坏二进制代码的情况下修复了受影响的移动应用程序。此外，我们评估了Chrome等热门应用中的10个漏洞，OSSPATCHER能够缓解和阻止这些漏洞的利用。",
        "title_zh": "自动修补应用程序二进制文件中易受攻击的开源软件版本",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2019.html",
        "conf_title": "26th NDSS 2019: San Diego, CA, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2019/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.ndss-symposium.org/ndss-paper/unveiling-your-keystrokes-a-cache-based-side-channel-attack-on-graphics-libraries/",
        "title": "Unveiling your keystrokes: A Cache-based Side-channel Attack on Graphics Libraries",
        "authors": "Daimeng Wang, Ajaya Neupane, Zhiyun Qian, Nael B. Abu-Ghazaleh, Srikanth V. Krishnamurthy, Edward J. M. Colbert, Paul L. Yu",
        "abstract": "Operating systems use shared memory to improve performance. However, as shown in recent studies, attackers can exploit CPU cache side-channels associated with shared memory to extract sensitive information. The attacks that were previously attempted typically only detect the presence of a certain operation and require significant manual analysis to identify and evaluate their effectiveness. Moreover, very few of them target graphics libraries which are commonly used, but difficult to attack. In this paper, we consider the execution time of shared libraries as the side-channel, and showcase a completely automated technique to discover and select exploitable side-channels on shared graphics libraries. In essence, we first collect the cache lines accessed by a victim process during different key presses offline, and then use machine learning to infer the best cache lines (e.g., easily measurable, robust to noise, high information leakage) for a flush and reload attack. We are able to discover effective strategies to classify what keys have been pressed. Using this approach, we not only preclude the need for manual analyses of code and traces — the automated system discovered many previously unknown sidechannels of the type we are interested in, but also achieve high precision in terms of inferring the sensitive information entered on desktop and Android platforms. We show that our approach infers the passwords with lowercase letters and numbers 10,000 1,000,000 times faster than random guessing. For a large fraction of PINs consisting of 4 to 6 digits, we are able to infer them within 20 and 80 guesses respectively. Finally, we suggest ways to mitigate these attacks.",
        "files": {
            "openAccessPdf": "https://doi.org/10.14722/ndss.2019.23221"
        },
        "abstract_zh": "操作系统使用共享内存来提高性能。然而，最近的研究表明，攻击者可以利用与共享内存相关的CPU缓存旁路来提取敏感信息。以前尝试的攻击通常只检测某个操作的存在，并且需要大量的手动分析来识别和评估它们的有效性。而且，很少有针对常用但难以攻击的图形库的。在本文中，我们将共享图形库的执行时间视为副通道，并展示了一种完全自动化的技术来发现和选择共享图形库上可利用的副通道。本质上，我们首先收集受害者进程在不同的离线按键期间访问的缓存线，然后使用机器学习来推断用于刷新和重新加载攻击的最佳缓存线(例如，容易测量、对噪声鲁棒、高信息泄漏)。我们能够发现有效的策略来对按下的键进行分类。使用这种方法，我们不仅排除了手动分析代码和跟踪的需要——自动化系统发现了许多我们感兴趣的类型的以前未知的侧通道，而且在推断桌面和Android平台上输入的敏感信息方面实现了高精度。我们证明，我们的方法推断小写字母和数字的密码比随机猜测快10，000 1，000，000倍。对于由4到6位数字组成的大部分pin，我们能够分别在20和80次猜测内推断出它们。最后，我们提出了减轻这些攻击的方法。",
        "title_zh": "揭露你的击键:对图形库的基于缓存的旁道攻击",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2019.html",
        "conf_title": "26th NDSS 2019: San Diego, CA, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2019/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.ndss-symposium.org/ndss-paper/total-recall-persistence-of-passwords-in-android/",
        "title": "Total Recall: Persistence of Passwords in Android",
        "authors": "Jaeho Lee, Ang Chen, Dan S. Wallach",
        "abstract": "A good security practice for handling sensitive data, such as passwords, is to overwrite the data buffers with zeros once the data is no longer in use. This protects against attackers who gain a snapshot of a device’s physical memory, whether by inperson physical attacks, or by remote attacks like Meltdown and Spectre. This paper looks at unnecessary password retention in Android phones by popular apps, secure password management apps, and even the lockscreen system process. We have performed a comprehensive analysis of the Android framework and a variety of apps, and discovered that passwords can survive in a variety of locations, including UI widgets where users enter their passwords, apps that retain passwords rather than exchange them for tokens, old copies not yet reused by garbage collectors, and buffers in keyboard apps. We have developed solutions that successfully fix these problems with modest code changes.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "处理敏感数据(如密码)的一个良好的安全实践是，一旦不再使用数据，就用零覆盖数据缓冲区。这可以防止攻击者获得设备物理内存的快照，无论是通过个人物理攻击，还是通过远程攻击，如Meltdown和Spectre。本文通过流行的应用程序、安全的密码管理应用程序，甚至锁屏系统进程来研究Android手机中不必要的密码保留。我们对Android框架和各种应用进行了全面的分析，发现密码可以在各种位置存在，包括用户输入密码的UI小部件，保留密码而不是用密码交换令牌的应用，垃圾收集器尚未重用的旧副本，以及键盘应用中的缓冲区。我们已经开发了解决方案，通过适度的代码更改成功地解决了这些问题。",
        "title_zh": "全面回忆:Android中密码的持久性",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2019.html",
        "conf_title": "26th NDSS 2019: San Diego, CA, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2019/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.ndss-symposium.org/ndss-paper/nearby-threats-reversing-analyzing-and-attacking-googles-nearby-connections-on-android/",
        "title": "Nearby Threats: Reversing, Analyzing, and Attacking Google's 'Nearby Connections' on Android",
        "authors": "Daniele Antonioli, Nils Ole Tippenhauer, Kasper Bonne Rasmussen",
        "abstract": "Google’s Nearby Connections API enables any An-droid (and Android Things) application to provide proximity-based services to its users, regardless of their network connectivity.The API uses Bluetooth BR/EDR, Bluetooth LE and Wi-Fi to let“nearby” clients (discoverers) and servers (advertisers) connectand exchange different types of payloads. The implementation ofthe API is proprietary, closed-source and obfuscated. The updatesof the API are automatically installed by Google across differentversions of Android, without user interaction. Little is knownpublicly about the security guarantees offered by the API, eventhough it presents a significant attack surface.In this work we present the first security analysis of theGoogle’s Nearby Connections API, based on reverse-engineeringof its Android implementation. We discover and implement sev-eral attacks grouped into two families: connection manipulation(CMA) and range extension attacks (REA). CMA-attacks allow anattacker to insert himself as a man-in-the-middle and manipulateconnections (even unrelated to nearby), and to tamper withthe victim’s interface and network configuration. REA-attacksallow an attacker to tunnel any nearby connection to remotelocations, even between two honest devices. Our attacks areenabled by REArby, a toolkit we developed while reversingthe API implementation. REArby includes a dynamic binaryinstrumenter, a packet dissector, and the implementations ofcustom Nearby Connections client and server. We plan to open-source REArby after a responsible disclosure period.",
        "files": {
            "openAccessPdf": "https://doi.org/10.14722/ndss.2019.23367"
        },
        "abstract_zh": "谷歌的Nearby Connections API允许任何An-droid(和Android Things)应用程序向其用户提供基于邻近的服务，不管他们的网络连接如何。该API使用蓝牙BR/EDR、蓝牙LE和Wi-Fi，让“附近”的客户端(发现者)和服务器(广告商)连接和交换不同类型的有效载荷。API的实现是专有的、闭源的和模糊的。API的更新由谷歌自动安装在不同版本的Android上，无需用户交互。公众对API提供的安全保证知之甚少，尽管它呈现了一个重要的攻击面。在这篇文章中，我们基于对Google Android实现的逆向工程，首次对Google的Nearby Connections API进行了安全性分析。我们发现并实施了几种分为两类的攻击:连接操纵(CMA)和范围扩展攻击(REA)。CMA攻击允许攻击者将自己作为中间人插入并操纵连接(即使与附近无关)，并篡改受害者的接口和网络配置。REA攻击允许攻击者通过隧道将任何附近的连接连接到远程位置，即使是两台诚实的设备之间。我们的攻击是由REArby实现的，rear by是我们在逆转API实现时开发的一个工具包。REArby包括一个动态二进制仪器、一个包解析器和自定义邻近连接客户端和服务器的实现。我们计划在一段负责任的披露期后开放源代码REArby。",
        "title_zh": "附近的威胁:逆转、分析和攻击谷歌在安卓系统上的“附近连接”",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2019.html",
        "conf_title": "26th NDSS 2019: San Diego, CA, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2019/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.ndss-symposium.org/ndss-paper/badbluetooth-breaking-android-security-mechanisms-via-malicious-bluetooth-peripherals/",
        "title": "BadBluetooth: Breaking Android Security Mechanisms via Malicious Bluetooth Peripherals",
        "authors": "Fenghao Xu, Wenrui Diao, Zhou Li, Jiongyi Chen, Kehuan Zhang",
        "abstract": "—Bluetooth is a widely used communication tech- nology, especially under the scenarios of mobile computing and Internet of Things. Once paired with a host device, a Bluetooth device then can exchange commands and data, such as voice, keyboard/mouse inputs, network, blood pressure data, and so on, with the host. Due to the sensitivity of such data and commands, some security measures have already been built into the Bluetooth protocol, like authentication, encryption, authorization, etc. However, according to our studies on the Bluetooth protocol as well as its implementation on Android system, we ﬁnd that there are still some design ﬂaws which could lead to serious security consequences. For example, it is found that the authentication process on Bluetooth proﬁles is quite inconsistent and coarse- grained: if a paired device changes its proﬁle, it automatically gets trust and users would not be notiﬁed. Also, there is no strict veriﬁcation on the information provided by the Bluetooth device itself, so that a malicious device can deceive a user by changing its name, proﬁle information, and icon to be displayed on the screen. To better understand the problem, we performed a systematic study over the Bluetooth proﬁles and presented three attacks to demonstrate the feasibility and potential damages of such Bluetooth design ﬂaws. The attacks were implemented on a Raspberry Pi 2 device and evaluated with different Android OS versions ranging from 5.1 to the latest 8.1. The results showed adversaries could bypass existing protections of Android (e.g., permissions, isolations, etc.), launch Man-in-the-Middle attack, control the victim apps and system, steal sensitive information, etc. To mitigate such threats, a new Bluetooth validation mechanism was proposed. We implemented the prototype system based on the AOSP project and deployed it on a Google Pixel 2 phone for evaluation. The experiment showed our solution could effectively prevent the attacks.",
        "files": {
            "openAccessPdf": "https://doi.org/10.14722/ndss.2019.23482"
        },
        "abstract_zh": "—蓝牙是一种广泛使用的通信技术，尤其是在移动计算和物联网的场景下。一旦与主机设备配对，蓝牙设备就可以与主机交换命令和数据，例如语音、键盘/鼠标输入、网络、血压数据等。由于这种数据和命令的敏感性，一些安全措施已经内置到蓝牙协议中，如认证、加密、授权等。然而，根据我们对蓝牙协议及其在Android系统上的实现的研究，我们发现仍有一些设计缺陷可能导致严重的安全后果。例如，我们发现蓝牙配置文件上的身份验证过程非常不一致且粗糙:如果配对的设备更改了其配置文件，它会自动获得信任，而用户不会收到通知。此外，蓝牙设备本身提供的信息没有严格的验证，因此恶意设备可以通过更改其名称、配置文件信息和屏幕上显示的图标来欺骗用户。为了更好地理解这一问题，我们对蓝牙规范进行了系统研究，并展示了三种攻击，以证明此类蓝牙设计规范的可行性和潜在危害。攻击在Raspberry Pi 2设备上实施，并使用从5.1到最新8.1的不同Android操作系统版本进行评估。结果显示，对手可以绕过Android的现有保护(例如，权限、隔离等。)，发起中间人攻击，控制受害者应用和系统，窃取敏感信息等。为了减轻这种威胁，提出了一种新的蓝牙验证机制。我们基于AOSP项目实现了原型系统，并将其部署在Google Pixel 2手机上进行评估。实验表明，我们的解决方案可以有效地防止攻击。",
        "title_zh": "BadBluetooth:通过恶意蓝牙外设破坏Android安全机制",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2019.html",
        "conf_title": "26th NDSS 2019: San Diego, CA, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2019/",
        "keywords": [
            "AOSP",
            "Android"
        ]
    },
    {
        "url": "https://www.ndss-symposium.org/ndss-paper/understanding-open-ports-in-android-applications-discovery-diagnosis-and-security-assessment/",
        "title": "Understanding Open Ports in Android Applications: Discovery, Diagnosis, and Security Assessment",
        "authors": "Daoyuan Wu, Debin Gao, Rocky K. C. Chang, En He, Eric K. T. Cheng, Robert H. Deng",
        "abstract": "—Open TCP/UDP ports are traditionally used by servers to provide application services, but they are also found in many Android apps. In this paper, we present the ﬁrst open- port analysis pipeline, covering the discovery, diagnosis, and security assessment, to systematically understand open ports in Android apps and their threats. We design and deploy a novel on-device crowdsourcing app and its server-side analytic engine to continuously monitor open ports in the wild. Over a period of ten months, we have collected over 40 million port monitoring records from 3,293 users in 136 countries worldwide, which allow us to observe the actual execution of open ports in 925 popular apps and 725 built-in system apps. The crowdsourcing also provides us a more accurate view of the pervasiveness of open ports in Android apps at 15.3%, much higher than the previous estimation of 6.8%. We also develop a new static diagnostic tool to reveal that 61.8% of the open-port apps are solely due to embedded SDKs, and 20.7% suffer from insecure API usages. Finally, we perform three security assessments of open ports: (i) vulnerability analysis revealing ﬁve vulnerability patterns in open ports of popular apps, e.g., Instagram, Samsung Gear, Skype, and the widely-embedded Facebook SDK, (ii) inter-device connectivity measurement in 224 cellular networks and 2,181 WiFi networks through crowdsourced network scans, and (iii) experimental demonstration of effective denial-of-service attacks against mobile open ports.",
        "files": {
            "openAccessPdf": "https://doi.org/10.14722/ndss.2019.23171"
        },
        "abstract_zh": "—开放的TCP/UDP端口传统上由服务器用来提供应用服务，但它们也存在于许多Android应用中。在本文中，我们提出了第一个开放端口分析管道，涵盖发现、诊断和安全评估，以系统地了解Android应用中的开放端口及其威胁。我们设计并部署了一个新颖的设备上众包应用程序及其服务器端分析引擎，以持续监控野外开放的端口。在十个月的时间里，我们从全球136个国家的3，293个用户那里收集了超过4000万个端口监控记录，这使我们能够观察925个流行应用和725个内置系统应用中开放端口的实际执行情况。众包还为我们提供了一个更准确的视角，即Android应用中开放端口的普及率为15.3%，远高于之前估计的6.8%。我们还开发了一种新的静态诊断工具，揭示了61.8%的开放端口应用程序完全是由于嵌入式SDK，20.7%的应用程序遭受不安全的API使用。最后，我们对开放端口进行了三项安全评估:(1)漏洞分析，揭示了流行应用程序开放端口中的五种漏洞模式，如Instagram、Samsung Gear、Skype和广泛嵌入的脸书SDK；(2)通过众包网络扫描对224个蜂窝网络和2，181个WiFi网络进行设备间连接性测量；(3)针对移动开放端口的有效拒绝服务攻击的实验演示。",
        "title_zh": "了解Android应用中的开放端口:发现、诊断和安全评估",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2019.html",
        "conf_title": "26th NDSS 2019: San Diego, CA, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2019/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.ndss-symposium.org/ndss2015/information-flow-analysis-android-applications-droidsafe",
        "title": "Information Flow Analysis of Android Applications in DroidSafe",
        "authors": "Michael I. Gordon, Deokhwan Kim, Jeff H. Perkins, Limei Gilham, Nguyen Nguyen, Martin C. Rinard",
        "abstract": "We present DroidSafe, a static information flow analysis tool that reports potential leaks of sensitive information in Android applications. DroidSafe combines a comprehensive, accurate, and precise model of the Android runtime with static analysis design decisions that enable the DroidSafe analyses to scale to analyze this model. This combination is enabled by accurate analysis stubs, a technique that enables the effective analysis of code whose complete semantics lies outside the scope of Java, and by a combination of analyses that together can statically resolve communication targets identified by dynamically constructed values such as strings and class designators. Our experimental results demonstrate that 1) DroidSafe achieves unprecedented precision and accuracy for Android information flow analysis (as measured on a standard previously published set of benchmark applications) and 2) DroidSafe detects all malicious information flow leaks inserted into 24 real-world Android applications by three independent, hostile Red-Team organizations. The previous state-of-the art analysis, in contrast, detects less than 10% of these malicious flows.",
        "files": {
            "openAccessPdf": "http://people.csail.mit.edu/rinard//paper/ndss15.droidsafe.pdf"
        },
        "abstract_zh": "我们介绍了DroidSafe，这是一个静态信息流分析工具，可以报告Android应用程序中敏感信息的潜在泄漏。DroidSafe将Android运行时的全面、准确和精确的模型与静态分析设计决策相结合，使DroidSafe分析能够扩展以分析该模型。这种组合是通过精确的分析存根(一种能够有效分析其完整语义超出Java范围的代码的技术)以及通过分析的组合来实现的，这些分析一起可以静态地解析由动态构造的值(如字符串和类标志符)标识的通信目标。我们的实验结果表明:1) DroidSafe在Android信息流分析方面实现了前所未有的精确度和准确性(在之前发布的一组标准基准应用程序上进行测量), 2) DroidSafe检测到了由三个独立的敌对红队组织插入到24个真实世界Android应用程序中的所有恶意信息流泄漏。相比之下，之前的最新分析检测到的恶意流量不到10%。",
        "title_zh": "DroidSafe中Android应用程序的信息流分析",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2015.html",
        "conf_title": "NDSS 2015: San Diego, California, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2015/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.ndss-symposium.org/ndss2015/whats-your-dongle-and-bank-account-mandatory-and-discretionary-protection-android-external",
        "title": "What's in Your Dongle and Bank Account? Mandatory and Discretionary Protection of Android External Resources",
        "authors": "Soteris Demetriou, Xiao-yong Zhou, Muhammad Naveed, Yeonjoon Lee, Kan Yuan, XiaoFeng Wang, Carl A. Gunter",
        "abstract": "To address this challenge, we present in this paper SEACAT, a new security system for fine-grained, flexible protection on external resources. SEACAT supports both MAC and DAC, and integrates their enforcement mechanisms across the Android middleware and the Linux kernel. It extends SEAndroid for specifying policies on external resources, and also hosts a DAC policy base. Both sets of policies are managed under the same policy engine and Access Vector Cache that support policy checks within the security hooks distributed across the framework and the Linux kernel layers, over different channels. This integrated security model was carefully designed to ensure that misconfigured DAC policies will not affect the enforcement of MAC policies, which manufacturers and system administrators can leverage to define their security rules. In the meantime, a policy management service is offered to the ordinary Android users for setting policies that protect the resources provided by the third party. This service translates simple user selections into SELinux-compatible policies in the background. Our implementation is capable of thwarting all known attacks on external resources at a negligible performance cost.",
        "files": {
            "openAccessPdf": "http://spiral.imperial.ac.uk/bitstream/10044/1/68241/2/demetriouNDSS15.pdf"
        },
        "abstract_zh": "为了应对这一挑战，我们在本文中介绍了SEACAT，一种新的安全系统，用于对外部资源进行细粒度、灵活的保护。SEACAT支持MAC和DAC，并在Android中间件和Linux内核中集成了它们的执行机制。它扩展了SEAndroid以指定外部资源上的策略，并且还托管了一个DAC策略库。两组策略都在同一个策略引擎和访问向量缓存下进行管理，访问向量缓存支持在不同通道上跨框架和Linux内核层分布的安全挂钩内进行策略检查。这种集成的安全模型经过精心设计，以确保错误配置的DAC策略不会影响MAC策略的实施，制造商和系统管理员可以利用这些策略来定义他们的安全规则。同时，向普通Android用户提供策略管理服务，用于设置保护第三方提供的资源的策略。该服务在后台将简单的用户选择转换成SELinux兼容的策略。我们的实现能够以微不足道的性能代价挫败所有已知的对外部资源的攻击。",
        "title_zh": "你的加密狗和银行账户里有什么？Android外部资源的强制和任意保护",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2015.html",
        "conf_title": "NDSS 2015: San Diego, California, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2015/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.ndss-symposium.org/ndss2015/edgeminer-automatically-detecting-implicit-control-flow-transitions-through-android-framework",
        "title": "EdgeMiner: Automatically Detecting Implicit Control Flow Transitions through the Android Framework",
        "authors": "Yinzhi Cao, Yanick Fratantonio, Antonio Bianchi, Manuel Egele, Christopher Kruegel, Giovanni Vigna, Yan Chen",
        "abstract": "Android users can choose from over one million applications (apps) offered through the official Google Play marketplace. Furthermore, a wealth of alternative sources for Android applications is available for users to choose from. These range from curated stores, such as Amazon’s Appstore to less legitimate sources that offer pirated content. The sheer number of mobile applications prompted researchers from academia and industry to develop static analysis techniques that scrutinize these applications for vulnerabilities and malicious functionality. Android applications always execute in the context of the Android framework — a comprehensive collection of functionality that developers can conveniently use from their applications. The prolific use of the framework poses unique challenges for the analysis of Android applications.",
        "files": {
            "openAccessPdf": "http://www.cs.ucsb.edu/%7Echris/research/doc/ndss15_edgeminer.pdf"
        },
        "abstract_zh": "Android用户可以从官方Google Play市场提供的100多万个应用程序中进行选择。此外，Android应用程序的大量替代资源可供用户选择。这些来源从亚马逊的Appstore等监管商店到提供盗版内容的不太合法的来源。移动应用程序的数量之多促使学术界和工业界的研究人员开发静态分析技术，来仔细检查这些应用程序的漏洞和恶意功能。Android应用程序总是在Android框架的上下文中执行，这是一个全面的功能集合，开发人员可以方便地从他们的应用程序中使用。该框架的大量使用为Android应用程序的分析带来了独特的挑战。",
        "title_zh": "EdgeMiner:通过Android框架自动检测隐式控制流转换",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2015.html",
        "conf_title": "NDSS 2015: San Diego, California, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2015/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.ndss-symposium.org/ndss2015/copperdroid-automatic-reconstruction-android-malware-behaviors",
        "title": "CopperDroid: Automatic Reconstruction of Android Malware Behaviors",
        "authors": "Kimberly Tam, Salahuddin J. Khan, Aristide Fattori, Lorenzo Cavallaro",
        "abstract": "Mobile devices and their application marketplaces drive the entire economy of the today's mobile landscape. Android platforms alone have produced staggering revenues, exceeding five billion USD, which has attracted cybercriminals and increased malware in Android markets at an alarming rate. To better understand this slew of threats, we present CopperDroid, an automatic VMI-based dynamic analysis system to reconstruct the behaviors of Android malware. The novelty of CopperDroid lies in its agnostic approach to identify interesting OS- and high-level Android-specific behaviors. It reconstructs these behaviors by observing and dissecting system calls and, therefore, is resistant to the multitude of alterations the Android runtime is subjected to over its life-cycle. CopperDroid automatically and accurately reconstructs events of interest that describe, not only well-known process-OS interactions (e.g., file and process creation), but also complex intra- and inter-process communications (e.g., SMS reception), whose semantics are typically contextualized through complex Android objects. Because CopperDroid's reconstruction mechanisms are agnostic to the underlying action invocation methods, it is able to capture actions initiated both from Java and native code execution. CopperDroid's analysis generates detailed behavioral profiles that abstract a large stream of low-level—often uninteresting—events into concise, high-level semantics, which are well-suited to provide insightful behavioral traits and open the possibility to further research directions. We carried out an extensive evaluation to assess the capabilities and performance of CopperDroid on more than 2,900 Android malware samples. Our experiments show that CopperDroid faithfully reconstructs OS- and Android-specific behaviors. Additionally, we demonstrate how CopperDroid can be leveraged to disclose additional behaviors through the use of a simple, yet effective, app stimulation technique. Using this technique, we successfully triggered and disclosed additional behaviors on more than 60% of the analyzed malware samples. This qualitatively demonstrates the versatility of CopperDroid's ability to improve dynamic-based code coverage.",
        "files": {
            "openAccessPdf": "https://kclpure.kcl.ac.uk/portal/files/146297430/CopperDroid_TAM_2015_GREEN_AAM.pdf"
        },
        "abstract_zh": "移动设备及其应用市场推动着当今移动领域的整体经济。仅Android平台就产生了惊人的收入，超过50亿美元，这吸引了网络犯罪分子，并以惊人的速度增加了Android市场中的恶意软件。为了更好地理解这些威胁，我们介绍了CopperDroid，一个基于VMI的自动动态分析系统，用于重建Android恶意软件的行为。CopperDroid的新颖之处在于它采用不可知的方法来识别有趣的操作系统和高级别的Android特有的行为。它通过观察和剖析系统调用来重构这些行为，因此能够抵抗Android运行时在其生命周期中遭受的大量更改。CopperDroid自动准确地重建感兴趣的事件，这些事件不仅描述了众所周知的进程-操作系统交互(例如，文件和进程创建)，还描述了复杂的进程内和进程间通信(例如，SMS接收)，其语义通常通过复杂的Android对象来上下文化。因为CopperDroid的重建机制与底层的动作调用方法无关，所以它能够捕获从Java和本地代码执行发起的动作。CopperDroid的分析生成了详细的行为特征，这些特征将大量低级(通常是无趣的)事件抽象为简洁的高级语义，非常适合提供有洞察力的行为特征，并为进一步的研究方向提供可能性。我们进行了广泛的评估，以评估CopperDroid在超过2，900个Android恶意软件样本上的能力和性能。我们的实验表明，CopperDroid忠实地重建了特定于操作系统和Android的行为。此外，我们还展示了如何利用CopperDroid，通过使用一种简单而有效的应用程序刺激技术来揭示其他行为。使用这种技术，我们成功地触发并披露了超过60%的已分析恶意软件样本的其他行为。这定性地证明了CopperDroid改进基于动态的代码覆盖率的能力的多功能性。",
        "title_zh": "CopperDroid:自动重建Android恶意软件行为",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2015.html",
        "conf_title": "NDSS 2015: San Diego, California, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2015/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.ndss-symposium.org/ndss2015/deepdroid-dynamically-enforcing-enterprise-policy-android-devices",
        "title": "DeepDroid: Dynamically Enforcing Enterprise Policy on Android Devices",
        "authors": "Xueqiang Wang, Kun Sun, Yuewu Wang, Jiwu Jing",
        "abstract": "It is becoming a global trend for company employees equipped with mobile devices to access company’s assets. Besides enterprise apps, lots of personal apps from various untrusted app stores may also be installed on those devices. To secure the business environment, policy enforcement on what, how, and when certain apps can access system resources is required by enterprise IT. However, Android, the largest mobile platform with a market share of 81.9%, provides very restricted interfaces for enterprise policy enforcement. In this paper, we present DeepDroid, a dynamic enterprise security policy enforcement scheme on Android devices. Different from existing approaches, DeepDroid is implemented by dynamic memory instrumentation of a small number of critical system processes without any firmware modification. DeepDroid can be easily deployed on various smartphone platforms with a wide range of Android versions. Moreover, based on the context information extracted from Binder interception, a fine-grained policy can be enforced. We develop a prototype of DeepDroid and test it on various smartphones and Android versions. The experimental results show that DeepDroid can effectively enforce enterprise resource access policies with negligible performance overhead.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "配备移动设备的公司员工访问公司资产正在成为一种全球趋势。除了企业应用程序，来自各种不可信应用程序商店的大量个人应用程序也可能安装在这些设备上。为了保护业务环境的安全，企业IT需要对某些应用程序可以访问系统资源的内容、方式和时间实施策略。然而，拥有81.9%市场份额的最大移动平台Android为企业政策执行提供了非常有限的接口。在本文中，我们提出了DeepDroid，一个在Android设备上的动态企业安全策略执行方案。与现有方法不同，DeepDroid是通过少量关键系统进程的动态内存检测来实现的，无需任何固件修改。DeepDroid可以很容易地部署在各种智能手机平台上，具有广泛的Android版本。此外，基于从绑定拦截中提取的上下文信息，可以实施细粒度的策略。我们开发了DeepDroid的原型，并在各种智能手机和Android版本上进行测试。实验结果表明，DeepDroid可以有效地执行企业资源访问策略，而性能开销可以忽略不计。",
        "title_zh": "DeepDroid:在Android设备上动态执行企业政策",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2015.html",
        "conf_title": "NDSS 2015: San Diego, California, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2015/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.ndss-symposium.org/ndss2015/checking-more-and-alerting-less-detecting-privacy-leakages-enhanced-data-flow-analysis-and-peer",
        "title": "Checking More and Alerting Less: Detecting Privacy Leakages via Enhanced Data-flow Analysis and Peer Voting",
        "authors": "Kangjie Lu, Zhichun Li, Vasileios P. Kemerlis, Zhenyu Wu, Long Lu, Cong Zheng, Zhiyun Qian, Wenke Lee, Guofei Jiang",
        "abstract": "Serious concerns have been raised about stealthy disclosures of private user data in smartphone apps, and recent research efforts in mobile security have studied various mechanisms to detect privacy disclosures. However, existing approaches are not effective in informing users and security analysts about potential privacy leakage threats. This is because these methods largely fail to 1) provide highly accurate and inclusive detection of privacy disclosures, and 2) filter out legitimate privacy disclosures that usually dominate detection results and in turn obscure true threats. In this paper, we propose AAPL, an automated system that detects privacy leaks (i.e., truly suspicious privacy disclosures) in Android apps. AAPL is based on multiple special static analysis techniques that we’ve developed for Android apps, including conditional flow identification and joint flow tracking. Furthermore, AAPL employs a new approach called peer voting to filter out most of the legitimate privacy disclosures from the results, purifying the detection results for automatic and easy interpretation. We implemented AAPL and evaluated it over 40, 456 apps. The results indicate that, on average, AAPL achieves an accuracy of 88.7%. For particular disclosures (e.g., contacts), the accuracy is up to 94.6%. Using AAPL, we successfully revealed a collection of unknown privacy leaks. The throughput of our privacy disclosure analysis module is 4.5 apps per minute on a threemachine cluster.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "智能手机应用程序中隐私用户数据的秘密泄露引起了人们的严重关切，最近在移动安全领域的研究工作研究了各种检测隐私泄露的机制。然而，现有的方法不能有效地通知用户和安全分析师潜在的隐私泄露威胁。这是因为这些方法在很大程度上无法1)提供高度准确和全面的隐私泄露检测，以及2)过滤掉通常主导检测结果并进而掩盖真实威胁的合法隐私泄露。在这篇论文中，我们提出了AAPL，这是一个自动系统，可以检测Android应用程序中的隐私泄露(即真正可疑的隐私泄露)。AAPL基于我们为Android应用开发的多种特殊静态分析技术，包括条件流识别和联合流跟踪。此外，AAPL采用了一种称为对等投票的新方法，从结果中过滤掉大多数合法的隐私披露，净化检测结果，以便自动和轻松地解释。我们实施了AAPL，并对40，456个应用进行了评估。结果表明，平均而言，AAPL达到了88.7%的准确率。对于特定的披露(如联系人)，准确率高达94.6%。利用AAPL，我们成功地揭露了一系列未知的隐私泄露。我们的隐私泄露分析模块的吞吐量在一个三机集群上是每分钟4.5个应用。",
        "title_zh": "检查更多，警告更少:通过增强的数据流分析和同行投票检测隐私泄露",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2015.html",
        "conf_title": "NDSS 2015: San Diego, California, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2015/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "http://wp.internetsociety.org/ndss/wp-content/uploads/sites/25/2017/09/ads-safe-detecting-hidden-attacks-through-mobile-app-web-interfaces.pdf",
        "title": "Are these Ads Safe: Detecting Hidden Attacks through the Mobile App-Web Interfaces",
        "authors": "Vaibhav Rastogi, Rui Shao, Yan Chen, Xiang Pan, Shihong Zou, Ryan D. Riley",
        "abstract": "Mobile users are increasingly becoming targets of malware infections and scams. Some platforms, such as Android, are more open than others and are therefore easier to exploit than other platforms. In order to curb such attacks it is important to know how these attacks originate. We take a previously unexplored step in this direction and look for the answer at the interface between mobile apps and the Web. Numerous inapp advertisements work at this interface: when the user taps on an advertisement, she is led to a web page which may further redirect until the user reaches the final destination. Similarly, applications also embed web links that again lead to the outside Web. Even though the original application may not be malicious, the Web destinations that the user visits could play an important role in propagating attacks. In order to study such attacks we develop a systematic methodology consisting of three components related to triggering web links and advertisements, detecting malware and scam campaigns, and determining the provenance of such campaigns reaching the user. We have realized this methodology through various techniques and contributions and have developed a robust, integrated system capable of running continuously without human intervention. We deployed this system for a two-month period and analyzed over 600,000 applications in the United States and in China while triggering a total of about 1.5 million links in applications to the Web. We gain a general understanding of attacks through the app-web interface as well as make several interesting findings, including a rogue antivirus scam, free iPad and iPhone scams, and advertisements propagating SMS trojans disguised as fake movie players. In broader terms, our system enables locating attacks and identifying the parties (such as specific ad networks, websites, and applications) that intentionally or unintentionally let them reach the end users and, thus, increasing accountability from these parties.",
        "files": {
            "openAccessPdf": "https://doi.org/10.14722/ndss.2016.23234"
        },
        "abstract_zh": "移动用户越来越成为恶意软件感染和诈骗的目标。一些平台，如Android，比其他平台更开放，因此比其他平台更容易被利用。为了遏制此类攻击，了解这些攻击是如何发起的非常重要。我们朝着这个方向迈出了前所未有的一步，在移动应用和网络的界面上寻找答案。大量的inapp广告在这个界面上工作:当用户点击一个广告时，她被引导到一个网页，这个网页可能会进一步重定向，直到用户到达最终目的地。类似地，应用程序也嵌入了web链接，这些链接再次指向外部Web。即使原始应用程序可能没有恶意，用户访问的Web目的地也可能在传播攻击中扮演重要角色。为了研究此类攻击，我们开发了一种系统方法，包括三个部分，分别涉及触发web链接和广告、检测恶意软件和诈骗活动，以及确定此类活动到达用户的来源。我们通过各种技术和贡献实现了这种方法，并开发了一个强大的集成系统，能够在没有人工干预的情况下连续运行。我们在两个月的时间里部署了这个系统，分析了美国和中国的60多万个应用程序，同时在应用程序中触发了大约150万个Web链接。我们通过应用程序-web界面对攻击有了一个大致的了解，并获得了一些有趣的发现，包括流氓防病毒骗局、免费iPad和iPhone骗局，以及伪装成假电影播放器传播短信木马的广告。更广泛地说，我们的系统能够定位攻击并识别有意或无意让它们到达最终用户的各方(如特定的广告网络、网站和应用程序),从而提高这些各方的责任。",
        "title_zh": "这些广告安全吗:通过移动应用程序网络界面检测隐藏的攻击",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2016.html",
        "conf_title": "23rd NDSS 2016: San Diego, California, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2016/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "http://wp.internetsociety.org/ndss/wp-content/uploads/sites/25/2017/09/towards-sdn-defined-programmable-bring-your-own-device-security.pdf",
        "title": "Towards SDN-Defined Programmable BYOD (Bring Your Own Device) Security",
        "authors": "Sungmin Hong, Robert Baykov, Lei Xu, Srinath Nadimpalli, Guofei Gu",
        "abstract": "An emerging trend in corporate network administration is BYOD (Bring Your Own Device). Although with many advantages, the paradigm shift presents new challenges in security to enterprise networks. While existing solutions such as Mobile Device Management (MDM) focus mainly on controlling and protecting device data, they fall short in providing a holistic network protection system. New innovation is needed in providing administrators with sophisticated network policies and control capabilities over the devices and mobile applications (apps). In this paper, we present PBS (Programmable BYOD Security), a new security solution to enable fine-grained, applicationlevel network security programmability for the purpose of network management and policy enforcement on mobile apps and devices. Our work is motivated by another emerging and powerful concept, SDN (Software-Defined Networking). With a novel abstraction of mobile device elements (e.g., apps and network interfaces on the device) into conventional SDN network elements, PBS intends to provide network-wide, context-aware, app-specific policy enforcement at run-time without introducing much overhead on a resource-constrained mobile device, and without the actual deployment of SDN switches in enterprise networks. We implement a prototype system of PBS, with a controller component that runs a BYOD policy program on existing SDN controllers and a client component, PBS-DROID, for Android devices. Our evaluation shows that PBS is an effective and practical solution for BYOD security.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "企业网络管理的一个新兴趋势是BYOD(自带设备)。虽然这种模式转变有很多优点，但也给企业网络的安全带来了新的挑战。虽然诸如移动设备管理(MDM)之类的现有解决方案主要关注于控制和保护设备数据，但是它们在提供整体网络保护系统方面存在不足。需要新的创新来为管理员提供复杂的网络策略以及对设备和移动应用程序(app)的控制能力。在本文中，我们介绍了PBS(可编程BYOD Security ),这是一种新的安全解决方案，支持细粒度的应用级网络安全可编程性，以实现移动应用和设备上的网络管理和策略实施。我们的工作受到另一个新兴的强大概念SDN(软件定义网络)的推动。通过将移动设备元素(例如，设备上的应用和网络接口)新颖地抽象为传统的SDN网络元素，PBS旨在在运行时提供网络范围的、上下文感知的、特定于应用的策略实施，而不会在资源受限的移动设备上引入太多开销，并且不会在企业网络中实际部署SDN交换机。我们实现了一个PBS原型系统，其中包含一个在现有SDN控制器上运行BYOD策略程序的控制器组件和一个用于Android设备的客户端组件PBS-DROID。我们的评估表明，PBS是BYOD安全的有效且实用的解决方案。",
        "title_zh": "迈向SDN定义的可编程BYOD(自带设备)安全性",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2016.html",
        "conf_title": "23rd NDSS 2016: San Diego, California, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2016/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "http://wp.internetsociety.org/ndss/wp-content/uploads/sites/25/2017/09/what-mobile-ads-know-about-mobile-users.pdf",
        "title": "What Mobile Ads Know About Mobile Users",
        "authors": "Sooel Son, Daehyeok Kim, Vitaly Shmatikov",
        "abstract": "We analyze the software stack of popular mobile advertising libraries on Android and investigate how they protect the users of advertising-supported apps from malicious advertising. We find that, by and large, Android advertising libraries properly separate the privileges of the ads from the host app by confining ads to dedicated browser instances that correctly apply the same origin policy. We then demonstrate how malicious ads can infer sensitive information about users by accessing external storage, which is essential for media-rich ads in order to cache video and images. Even though the same origin policy prevents confined ads from reading other apps’ externalstorage files, it does not prevent them from learning that a file with a particular name exists. We show how, depending on the app, the mere existence of a file can reveal sensitive information about the user. For example, if the user has a pharmacy price-comparison app installed on the device, the presence of external-storage files with certain names reveals which drugs the user has looked for. We conclude with our recommendations for redesigning mobile advertising software to better protect users from malicious advertising.",
        "files": {
            "openAccessPdf": "https://doi.org/10.14722/ndss.2016.23407"
        },
        "abstract_zh": "我们分析了Android上流行的移动广告库的软件堆栈，并研究了它们如何保护广告支持应用程序的用户免受恶意广告的影响。我们发现，总的来说，Android广告库通过将广告限制在正确应用同源策略的专用浏览器实例中，正确地将广告的权限与主机应用程序分开。然后，我们演示恶意广告如何通过访问外部存储来推断用户的敏感信息，这对于富媒体广告来说是必不可少的，以便缓存视频和图像。即使同源策略阻止受限广告读取其他应用的外部存储文件，它也不会阻止它们了解具有特定名称的文件的存在。我们展示了如何根据应用程序的不同，仅仅一个文件的存在就可以泄露用户的敏感信息。例如，如果用户在设备上安装了一个药房价格比较应用程序，具有特定名称的外部存储文件的存在会揭示用户所寻找的药物。最后，我们建议重新设计移动广告软件，以更好地保护用户免受恶意广告的侵害。",
        "title_zh": "移动广告对移动用户了解多少",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2016.html",
        "conf_title": "23rd NDSS 2016: San Diego, California, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2016/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "http://wp.internetsociety.org/ndss/wp-content/uploads/sites/25/2017/09/free-for-all-assessing-user-data-exposure-advertising-libraries-android.pdf",
        "title": "Free for All! Assessing User Data Exposure to Advertising Libraries on Android",
        "authors": "Soteris Demetriou, Whitney Merrill, Wei Yang, Aston Zhang, Carl A. Gunter",
        "abstract": "In this work, we systematically explore the potential reach of advertising libraries through these channels. We design a framework called Pluto that can be leveraged to analyze an app and discover whether it exposes targeted user data—such as contact information, interests, demographics, medical conditions and so on—-to an opportunistic ad library. We present a prototype implementation of Pluto, that embodies novel strategies for using natural language processing to illustrate what targeted data can potentially be learned from an ad network using files and user inputs. Pluto also leverages machine learning and data mining models to reveal what advertising networks can learn from the list of installed apps. We validate Pluto with a collection of apps for which we have determined ground truth about targeted data they may reveal, together with a data set derived from a survey we conducted that gives ground truth for targeted data and corresponding lists of installed apps for about 300 users. We use these to show that Pluto, and hence also opportunistic ad networks, can achieve 75% recall and 80% precision for selected targeted data coming from app files and inputs, and even better results for certain targeted data based on the list of installed apps. Pluto is the first tool that estimates the risk associated with integrating advertising in apps based on the four available channels and arbitrary sets of targeted data.",
        "files": {
            "openAccessPdf": "https://doi.org/10.14722/ndss.2016.23082"
        },
        "abstract_zh": "在这项工作中，我们通过这些渠道系统地探索广告库的潜在影响。我们设计了一个名为Pluto的框架，可以用来分析应用程序，并发现它是否将目标用户数据(如联系信息、兴趣、人口统计数据、医疗状况等)暴露给机会主义的广告库。我们展示了一个Pluto的原型实现，它包含了使用自然语言处理的新颖策略，以说明使用文件和用户输入可以从广告网络中潜在地学习到什么样的目标数据。Pluto还利用机器学习和数据挖掘模型来揭示广告网络可以从安装的应用程序列表中学习到什么。我们通过一系列应用程序来验证Pluto，我们已经确定了这些应用程序可能揭示的目标数据的基本事实，以及从我们进行的一项调查中获得的数据集，该调查提供了目标数据的基本事实以及大约300名用户的相应安装应用程序列表。我们使用这些来表明，Pluto以及机会主义广告网络可以对来自应用程序文件和输入的选定目标数据实现75%的召回率和80%的精确度，甚至对基于已安装应用程序列表的某些目标数据实现更好的结果。Pluto是第一个基于四个可用渠道和任意目标数据集来评估应用程序中集成广告相关风险的工具。",
        "title_zh": "全部免费！评估Android上广告库的用户数据暴露",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2016.html",
        "conf_title": "23rd NDSS 2016: San Diego, California, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2016/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "http://wp.internetsociety.org/ndss/wp-content/uploads/sites/25/2017/09/discovre-efficient-cross-architecture-identification-bugs-binary-code.pdf",
        "title": "discovRE: Efficient Cross-Architecture Identification of Bugs in Binary Code",
        "authors": "Sebastian Eschweiler, Khaled Yakdan, Elmar Gerhards-Padilla",
        "abstract": "The identification of security-critical vulnerabilities is a key for protecting computer systems. Being able to perform this process at the binary level is very important given that many software projects are closed-source. Even if the source code is available, compilation may create a mismatch between the source code and the binary code that is executed by the processor, causing analyses that are performed on source code to fail at detecting certain bugs and thus potential vulnerabilities. Existing approaches to find bugs in binary code 1) use dynamic analysis, which is difficult for firmware; 2) handle only a single architecture; or 3) use semantic similarity, which is very slow when analyzing large code bases. In this paper, we present a new approach to efficiently search for similar functions in binary code. We use this method to identify known bugs in binaries as follows: starting with a vulnerable binary function, we identify similar functions in other binaries across different compilers, optimization levels, operating systems, and CPU architectures. The main idea is to compute similarity between functions based on the structure of the corresponding control flow graphs. To minimize this costly computation, we employ an efficient pre-filter based on numeric features to quickly identify a small set of candidate functions. This allows us to efficiently search for similar functions in large code bases. We have designed and implemented a prototype of our approach, called discovRE, that supports four instruction set architectures (x86, x64, ARM, MIPS). We show that discovRE is four orders of magnitude faster than the state-of-the-art academic approach for cross-architecture bug search in binaries. We also show that we can identify Heartbleed and POODLE vulnerabilities in an Android system image that contains over 130,000 native ARM functions in about 80 milliseconds.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "安全关键漏洞的识别是保护计算机系统的关键。考虑到许多软件项目是闭源的，能够在二进制级别执行这个过程是非常重要的。即使源代码是可用的，编译也可能在源代码和由处理器执行的二进制代码之间产生不匹配，导致对源代码执行的分析无法检测到某些错误，从而检测到潜在的弱点。发现二进制代码中的缺陷的现有方法1)使用动态分析，这对于固件来说是困难的；2)仅处理单一架构；或者3)使用语义相似度，这在分析大型代码库时非常慢。在本文中，我们提出了一种新的方法来有效地搜索二进制代码中的相似函数。我们使用这种方法来识别二进制文件中的已知错误，如下所示:从易受攻击的二进制函数开始，我们在不同编译器、优化级别、操作系统和CPU架构的其他二进制文件中识别类似的函数。主要思想是基于相应控制流图的结构来计算函数之间的相似性。为了最大限度地减少这种代价高昂的计算，我们采用了一种基于数字特征的高效预过滤器来快速识别一小组候选函数。这允许我们在大型代码库中高效地搜索相似的函数。我们已经设计并实现了一个我们方法的原型，称为discovRE，它支持四种指令集架构(x86、x64、ARM、MIPS)。我们发现，对于二进制文件中的跨架构bug搜索，discovRE比最先进的学术方法快四个数量级。我们还表明，我们可以在大约80毫秒内识别包含超过130，000个原生ARM函数的Android系统映像中的Heartbleed和POODLE漏洞。",
        "title_zh": "discovRE:跨架构高效识别二进制代码中的错误",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2016.html",
        "conf_title": "23rd NDSS 2016: San Diego, California, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2016/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "http://wp.internetsociety.org/ndss/wp-content/uploads/sites/25/2017/09/when-tree-falls-using-diversity-ensemble-classifiers-identify-evasion-malware-detectors.pdf",
        "title": "When a Tree Falls: Using Diversity in Ensemble Classifiers to Identify Evasion in Malware Detectors",
        "authors": "Charles Smutz, Angelos Stavrou",
        "abstract": "Machine learning classifiers are a vital component of modern malware and intrusion detection systems. However, past studies have shown that classifier based detection systems are susceptible to evasion attacks in practice. Improving the evasion resistance of learning based systems is an open problem. To address this, we introduce a novel method for identifying the observations on which an ensemble classifier performs poorly. During detection, when a sufficient number of votes from individual classifiers disagree, the ensemble classifier prediction is shown to be unreliable. The proposed method, ensemble classifier mutual agreement analysis, allows the detection of many forms of classifier evasion without additional external ground truth. We evaluate our approach using PDFrate, a PDF malware detector. Applying our method to data taken from a real network, we show that the vast majority of predictions can be made with high ensemble classifier agreement. However, most classifier evasion attempts, including nine targeted mimicry scenarios from two recent studies, are given an outcome of uncertain indicating that these observations cannot be given a reliable prediction by the classifier. To show the general applicability of our approach, we tested it against the Drebin Android malware detector where an uncertain prediction was correctly given to the majority of novel attacks. Our evaluation includes over 100,000 PDF documents and 100,000 Android applications. Furthermore, we show that our approach can be generalized to weaken the effectiveness of the Gradient Descent and Kernel Density Estimation attacks against Support Vector Machines. We discovered that feature bagging is the most important property for enabling ensemble classifier diversity based evasion detection.",
        "files": {
            "openAccessPdf": "https://doi.org/10.14722/ndss.2016.23078"
        },
        "abstract_zh": "机器学习分类器是现代恶意软件和入侵检测系统的重要组成部分。然而，过去的研究表明，基于分类器的检测系统在实践中容易受到规避攻击。提高基于学习的系统的抗规避能力是一个公开的问题。为了解决这个问题，我们引入了一种新的方法来识别集成分类器表现不佳的观测值。在检测期间，当来自个体分类器的足够数量的投票不一致时，集成分类器预测被显示为不可靠。所提出的方法，集成分类器相互一致性分析，允许检测多种形式的分类器规避，而无需额外的外部基础事实。我们使用PDF恶意软件检测器PDFrate来评估我们的方法。将我们的方法应用于取自真实网络的数据，我们表明绝大多数预测可以以高集成分类器一致性做出。然而，大多数分类器逃避尝试，包括来自两个最近研究的九个目标模仿场景，给出了不确定的结果，表明这些观察不能由分类器给出可靠的预测。为了展示我们的方法的普遍适用性，我们对Drebin Android恶意软件检测器进行了测试，在该检测器中，不确定的预测被正确地给予了大多数新颖的攻击。我们的评估包括超过100，000个PDF文档和100，000个Android应用程序。此外，我们表明，我们的方法可以推广到削弱对支持向量机的梯度下降和核密度估计攻击的有效性。我们发现特征打包是实现基于集成分类器多样性的规避检测的最重要的属性。",
        "title_zh": "当一棵树倒下时:使用集成分类器中的多样性来识别恶意软件检测器中的规避",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2016.html",
        "conf_title": "23rd NDSS 2016: San Diego, California, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2016/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "http://wp.internetsociety.org/ndss/wp-content/uploads/sites/25/2017/09/kratos-discovering-inconsistent-security-policy-enforcement-android-framework_0.pdf",
        "title": "Kratos: Discovering Inconsistent Security Policy Enforcement in the Android Framework",
        "authors": "Yuru Shao, Qi Alfred Chen, Zhuoqing Morley Mao, Jason Ott, Zhiyun Qian",
        "abstract": "The Android framework utilizes a permission-based security model, which is essentially a variation of the ACL-based access control mechanism. This security model provides controlled access to various system resources. Access control systems are known to be vulnerable to anomalies in security policies, such as inconsistency. In this work, we focus on inconsistent security enforcement within the Android framework, motivated by the recent work which discovered such vulnerabilities. They include stealthily taking pictures in the background and recording keystrokes without any permissions, posing security and privacy risks to Android users. Identifying such inconsistencies is generally difficult, especially in complicated and large codebases such as the Android framework. Our work is the first to propose a methodology to systematically uncover the inconsistency in security policy enforcement in Android. We do not assume Android’s security policies are known and focus only on inconsistent enforcement. We propose Kratos, a tool that leverages static analysis to build a precise call graph for identifying paths that allow third-party applications with insufficient privilege to access sensitive resources, violating security policies. Kratos is designed to analyze any Android system, including vendor-customized versions. Using Kratos, we have conservatively discovered at least fourteen inconsistent security enforcement cases that can lead to security check circumvention vulnerabilities across important and popular services such as the SMS service and the Wi-Fi service, incurring impact such as privilege escalation, denial of service, and soft reboot. Our findings also provide useful insights on how to proactively prevent such security enforcement inconsistency within Android.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android框架利用了基于权限的安全模型，它本质上是基于ACL的访问控制机制的变体。这种安全模型提供了对各种系统资源的受控访问。众所周知，访问控制系统易受安全策略异常(如不一致)的影响。在这项工作中，我们关注Android框架内不一致的安全执行，这是由最近发现此类漏洞的工作所激发的。它们包括在没有任何许可的情况下偷偷在后台拍照和记录击键，给Android用户带来安全和隐私风险。识别这种不一致性通常很困难，尤其是在复杂和大型的代码库中，如Android框架。我们的工作首次提出了一种系统地揭示Android中安全策略执行不一致性的方法。我们不假设Android的安全政策是已知的，只关注不一致的执行。我们提出了Kratos，这是一个利用静态分析构建精确调用图的工具，用于识别允许没有足够权限访问敏感资源的第三方应用程序违反安全策略的路径。克瑞托斯设计用于分析任何Android系统，包括供应商定制的版本。通过使用Kratos，我们保守地发现了至少14个不一致的安全执行案例，这些案例可能导致重要和流行服务(如SMS服务和Wi-Fi服务)的安全检查规避漏洞，从而导致权限提升、拒绝服务和软重启等影响。我们的发现还提供了关于如何在Android中主动预防这种安全执行不一致的有用见解。",
        "title_zh": "克瑞托斯:在Android框架中发现不一致的安全策略执行",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2016.html",
        "conf_title": "23rd NDSS 2016: San Diego, California, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2016/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "http://wp.internetsociety.org/ndss/wp-content/uploads/sites/25/2017/09/going-native-large-scale-analysis-android-apps-practical-native-code-sandboxing-policy.pdf",
        "title": "Going Native: Using a Large-Scale Analysis of Android Apps to Create a Practical Native-Code Sandboxing Policy",
        "authors": "Vitor Monte Afonso, Paulo L. de Geus, Antonio Bianchi, Yanick Fratantonio, Christopher Kruegel, Giovanni Vigna, Adam Doupé, Mario Polino",
        "abstract": "Current static analysis techniques for Android applications operate at the Java level—that is, they analyze either the Java source code or the Dalvik bytecode. However, Android allows developers to write code in C or C++ that is cross-compiled to multiple binary architectures. Furthermore, the Java-written components and the native code components (C or C++) can interact. Native code can access all of the Android APIs that the Java code can access, as well as alter the Dalvik Virtual Machine, thus rendering static analysis techniques for Java unsound or misleading. In addition, malicious apps frequently hide their malicious functionality in native code or use native code to launch kernel exploits. It is because of these security concerns that previous research has proposed native code sandboxing, as well as mechanisms to enforce security policies in the sandbox. However, it is not clear whether the large-scale adoption of these mechanisms is practical: is it possible to define a meaningful security policy that can be imposed by a native code sandbox without breaking app functionality? In this paper, we perform an extensive analysis of the native code usage in 1.2 million Android apps. We first used static analysis to identify a set of 446k apps potentially using native code, and we then analyzed this set using dynamic analysis. This analysis demonstrates that sandboxing native code with no permissions is not ideal, as apps’ native code components perform activities that require Android permissions. However, our analysis provided very encouraging insights that make us believe that sandboxing native code can be feasible and useful in practice. In fact, it was possible to automatically generate a native code sandboxing policy, which is derived from our analysis, that limits many malicious behaviors while still allowing the correct execution of the behavior witnessed during dynamic analysis for 99.77% of the benign apps in our dataset. The usage of our system to generate policies would reduce the attack surface available to native code and, as a further benefit, it would also enable more reliable static analysis of Java code.",
        "files": {
            "openAccessPdf": "https://doi.org/10.14722/ndss.2016.23384"
        },
        "abstract_zh": "当前Android应用程序的静态分析技术在Java级别上运行——也就是说，它们要么分析Java源代码，要么分析Dalvik字节码。然而，Android允许开发人员用C或C++编写交叉编译成多种二进制架构的代码。此外，Java编写的组件和本地代码组件(C或C++)可以交互。本机代码可以访问Java代码可以访问的所有Android APIs，也可以更改Dalvik虚拟机，从而使Java的静态分析技术变得不健全或误导。此外，恶意应用程序经常将其恶意功能隐藏在本机代码中，或者使用本机代码来启动内核漏洞。正是由于这些安全问题，以前的研究提出了本机代码沙箱，以及在沙箱中实施安全策略的机制。然而，尚不清楚大规模采用这些机制是否可行:是否有可能定义一个有意义的安全策略，可以由本机代码沙箱强制实施，而不破坏应用程序的功能？在本文中，我们对120万个Android应用中的本机代码使用情况进行了广泛的分析。我们首先使用静态分析来识别一组可能使用本机代码的446k应用程序，然后使用动态分析来分析这组应用程序。这一分析表明，沙盒化没有权限的本机代码并不理想，因为应用程序的本机代码组件执行需要Android权限的活动。然而，我们的分析提供了非常令人鼓舞的见解，使我们相信沙盒本机代码在实践中是可行和有用的。事实上，可以自动生成本机代码沙盒策略，这是从我们的分析中得出的，它限制了许多恶意行为，同时仍然允许对我们数据集中99.77%的良性应用程序进行动态分析时看到的行为的正确执行。使用我们的系统来生成策略将减少本机代码可利用的攻击面，并且作为进一步的好处，它还将实现对Java代码的更可靠的静态分析。",
        "title_zh": "走向本地化:利用对Android应用程序的大规模分析来创建一个实用的本地代码沙箱策略",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2016.html",
        "conf_title": "23rd NDSS 2016: San Diego, California, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2016/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "http://wp.internetsociety.org/ndss/wp-content/uploads/sites/25/2017/09/life-after-app-installation-data-still-alive-data-residue-attacks-android.pdf",
        "title": "Life after App Uninstallation: Are the Data Still Alive? Data Residue Attacks on Android",
        "authors": "Xiao Zhang, Kailiang Ying, Yousra Aafer, Zhenshen Qiu, Wenliang Du",
        "abstract": "Uninstalling apps from mobile devices is among the most common user practices on smartphones. It may sound trivial, but the entire process involves multiple system components coordinating to remove the data belonging to the uninstalled app. Despite its frequency and complexity, little has been done to understand the security risks in the app’s uninstallation process. In this project, we have conducted the first systematic analysis of Android’s data cleanup mechanism during the app’s uninstallation process. Our analysis reveals that data residues are pervasive in the system after apps are uninstalled. For each identified data residue instance, we have formulated hypotheses and designed experiments to see whether it can be exploited to compromise the system security. The results are surprising: we have found 12 instances of vulnerabilities caused by data residues. By exploiting them, adversaries can steal user’s online-account credentials, access other app’s private data, escalate privileges, eavesdrop on user’s keystrokes, etc. We call these attacks the data residue attacks. To evaluate the real-world impact of the attacks, we have conducted an analysis on the top 100 apps in each of the 27 categories from GooglePlay. The result shows that a large portion of the apps can be the target of the data residue attacks. We have further evaluated the effectiveness of popular app markets (GooglePlay, Amazon appstore and Samsung appstore) in preventing our attacking apps from reaching their markets. Moreover, we have studied the data residue attacks on 10 devices from different vendors to see how vendor customization can affect our attacks. Google has acknowledged all our findings, and is working with us to get the problems fixed.",
        "files": {
            "openAccessPdf": "https://doi.org/10.14722/ndss.2016.23061"
        },
        "abstract_zh": "从移动设备上卸载应用程序是智能手机上最常见的用户行为之一。这听起来可能微不足道，但整个过程涉及多个系统组件协调删除属于卸载应用程序的数据。尽管其频率和复杂性，但很少有人了解该应用程序卸载过程中的安全风险。在这个项目中，我们对Android在应用卸载过程中的数据清理机制进行了首次系统分析。我们的分析显示，卸载应用程序后，系统中普遍存在数据残留。对于每个识别出的数据残留实例，我们都制定了假设并设计了实验来观察它是否会被利用来危及系统安全。结果令人惊讶:我们发现了12个由数据残留导致的漏洞实例。通过利用它们，对手可以窃取用户的在线帐户凭证，访问其他应用程序的私人数据，提升权限，窃听用户的按键等。我们称这些攻击为数据残留攻击。为了评估攻击对现实世界的影响，我们对GooglePlay的27个类别中的前100个应用进行了分析。结果表明，很大一部分应用程序可能成为数据残留攻击的目标。我们进一步评估了热门应用市场(GooglePlay、亚马逊appstore和三星appstore)在阻止我们的攻击应用进入其市场方面的有效性。此外，我们研究了来自不同供应商的10种设备上的数据残留攻击，以了解供应商定制如何影响我们的攻击。谷歌已经承认了我们所有的发现，并正在与我们合作解决问题。",
        "title_zh": "App卸载后的生活:数据还活着吗？Android上的数据残留攻击",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2016.html",
        "conf_title": "23rd NDSS 2016: San Diego, California, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2016/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "http://wp.internetsociety.org/ndss/wp-content/uploads/sites/25/2017/09/flexdroid-enforcing-in-app-privilege-separation-android.pdf",
        "title": "FLEXDROID: Enforcing In-App Privilege Separation in Android",
        "authors": "Jaebaek Seo, Daehyeok Kim, Donghyun Cho, Insik Shin, Taesoo Kim",
        "abstract": "—Mobile applications are increasingly integrating third-party libraries to provide various features, such as advertising, analytics, social networking, and more. Unfortunately, such integration with third-party libraries comes with the cost of potential privacy violations of users, because Android always grants a full set of permissions to third-party libraries as their host applications. Unintended accesses to users’ private data are underestimated threats to users’ privacy, as complex and often obfuscated third-party libraries make it hard for application developers to estimate the correct behaviors of third-party libraries. More critically, a wide adoption of native code (JNI) and dynamic code executions such as Java reﬂection or dynamic code reloading, makes it even harder to apply state-of- the-art security analysis. In this work, we propose F LEX D ROID , a new Android security model and isolation mechanism, that provides dynamic, ﬁne-grained access control for third-party libraries. With F LEX D ROID , application developers not only can gain a full control of third-party libraries (e.g., which permissions to grant or not), but also can specify how to make them behave after detecting a privacy violation (e.g., providing a mock user’s information or kill). To achieve such goals, we deﬁne a new notion of principals for third-party libraries, and develop a novel security mechanism, called inter-process stack inspection that is effective to JNI as well as dynamic code execution. Our usability study shows that developers can easily adopt F LEX D ROID ’s policy to their existing applications. Finally, our evaluation shows that F LEX D ROID can effectively restrict the permissions of third-party libraries with negligible overheads.",
        "files": {
            "openAccessPdf": "https://doi.org/10.14722/ndss.2016.23485"
        },
        "abstract_zh": "—移动应用程序越来越多地集成第三方库来提供各种功能，如广告、分析、社交网络等。不幸的是，这种与第三方库的集成带来了潜在的侵犯用户隐私的成本，因为Android总是将全套权限授予第三方库作为其主机应用程序。对用户私人数据的无意访问被低估了对用户隐私的威胁，因为复杂且经常混淆的第三方库使得应用程序开发人员很难估计第三方库的正确行为。更重要的是，本机代码(JNI)和动态代码执行(如Java反射或动态代码重载)的广泛采用，使得应用最先进的安全分析变得更加困难。在这项工作中，我们提出了F LEX D ROID，一种新的Android安全模型和隔离机制，为第三方库提供动态、细粒度的访问控制。借助F LEX D ROID，应用程序开发人员不仅可以获得对第三方库的完全控制(例如，授予或不授予哪些权限)，还可以指定在检测到隐私侵犯后如何让它们运行(例如，提供模拟用户的信息或kill)。为了实现这些目标，我们为第三方库定义了一个新的原则概念，并开发了一种新的安全机制，称为进程间堆栈检查，它对JNI和动态代码执行都有效。我们的可用性研究表明，开发者可以很容易地将ROID公司的政策应用到他们现有的应用程序中。最后，我们的评估表明，F LEX D ROID可以有效地限制第三方库的权限，而开销可以忽略不计。",
        "title_zh": "FLEXDROID:在Android中强制应用内权限分离",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2016.html",
        "conf_title": "23rd NDSS 2016: San Diego, California, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2016/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "http://wp.internetsociety.org/ndss/wp-content/uploads/sites/25/2017/09/intellidroid-targeted-input-generator-dynamic-analysis-android-malware.pdf",
        "title": "IntelliDroid: A Targeted Input Generator for the Dynamic Analysis of Android Malware",
        "authors": "Michelle Y. Wong, David Lie",
        "abstract": "We would like to thank Zhen Huang, Mariana D’Angelo, \nDhaval Miyani, Wei Huang, Beom Heyn Kim, Sukwon Oh, \nand Afshar Ganjali for their suggestions and feedback. We \nalso thank the anonymous reviewers for their constructive \ncomments. The research in this paper was supported by an \nNSERC CGS-M scholarship, a Bell Graduate scholarship, an \nNSERC Discovery grant, an ORF-RE grant, and a Tier 2 \nCanada Research Chair.",
        "files": {
            "openAccessPdf": "https://doi.org/10.14722/ndss.2016.23118"
        },
        "abstract_zh": "我们要感谢黄振，玛丽安娜·安吉洛，\nDhaval Miyani，Wei Huang，Beom Heyn Kim，Sukwon Oh，\n和Afshar Ganjali的建议和反馈。我们\n也感谢匿名评论者的建设性意见\n评论。本文的研究得到了\nNSERC CGS-M奖学金，贝尔研究生奖学金，安\nNSERC探索基金、ORF-RE基金和第2级基金\n加拿大研究主席。",
        "title_zh": "IntelliDroid:用于Android恶意软件动态分析的目标输入生成器",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2016.html",
        "conf_title": "23rd NDSS 2016: San Diego, California, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2016/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "http://wp.internetsociety.org/ndss/wp-content/uploads/sites/25/2017/09/harvesting-runtime-values-android-applications-feature-anti-analysis-techniques.pdf",
        "title": "Harvesting Runtime Values in Android Applications That Feature Anti-Analysis Techniques",
        "authors": "Siegfried Rasthofer, Steven Arzt, Marc Miltenberger, Eric Bodden",
        "abstract": "It is generally challenging to tell apart malware \nfrom benign applications. To make this decision, human analysts \nare frequently interested in runtime values: targets of reflective \nmethod calls, URLs to which data is sent, target telephone \nnumbers of SMS messages, and many more. However, obfuscation \nand string encryption, used by malware as well as goodware, often \nnot only render human inspections, but also static analyses ineffective. In addition, malware frequently tricks dynamic analyses \nby detecting the execution environment emulated by the analysis \ntool and then refraining from malicious behavior. \nIn this work we therefore present HARVESTER, an approach \nto fully automatically extract runtime values from Android \napplications. HARVESTER is designed to extract values even from \nhighly obfuscated state-of-the-art malware samples that obfuscate \nmethod calls using reflection, hide sensitive values in native code, \nload code dynamically and apply anti-analysis techniques. The \napproach combines program slicing with code generation and \ndynamic execution. \nExperiments on 16,799 current malware samples show that \nHARVESTER fully automatically extracts many sensitive values, \nwith perfect precision. The process usually takes less than three \nminutes and does not require human interaction. In particular, \nit goes without simulating UI inputs. Two case studies further \nshow that by integrating the extracted values back into the app, \nHARVESTER can increase the recall of existing static and dynamic \nanalysis tools such as FlowDroid and TaintDroid.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "区分恶意软件通常很有挑战性\n良性应用程序。为了做出这个决定，人类分析师\n经常对运行时值感兴趣:反射的目标\n方法调用、数据发送到的URL、目标电话\n短信数量，以及更多。然而，混淆\n恶意软件和正版软件经常使用字符串加密\n不仅使人工检查无效，而且静态分析也无效。此外，恶意软件经常欺骗动态分析\n通过检测由分析模拟的执行环境\n工具，然后避免恶意行为。\n因此，在这项工作中，我们提出了收割机，一种方法\n从Android中完全自动提取运行时值\n应用程序。HARVESTER设计用于提取值，甚至从\n高度混淆的最新恶意软件样本\n使用反射的方法调用，隐藏本机代码中的敏感值，\n动态加载代码并应用反分析技术。这\n方法将程序切片与代码生成相结合\n动态执行。\n对16，799个当前恶意软件样本的实验表明\nHARVESTER完全自动提取许多敏感值，\n非常精确地。这个过程通常不到三分钟\n分钟，并且不需要人工干预。特别是，\n它不需要模拟UI输入。进一步的两个案例研究\n表明通过将提取的值整合回应用程序，\n收割机可以增加现有的静态和动态的召回\nFlowDroid和TaintDroid等分析工具。",
        "title_zh": "在具有反分析技术的Android应用中收集运行时值",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2016.html",
        "conf_title": "23rd NDSS 2016: San Diego, California, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2016/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "http://wp.internetsociety.org/ndss/wp-content/uploads/sites/25/2018/02/ndss2018_01B-3_Lee_paper.pdf",
        "title": "Removing Secrets from Android's TLS",
        "authors": "Jaeho Lee, Dan S. Wallach",
        "abstract": "Cryptographic libraries that implement Transport Layer Security (TLS) have a responsibility to delete cryptographic keys once they’re no longer in use. Any key that’s left in memory can potentially be recovered through the actions of an attacker, up to and including the physical capture and forensic analysis of a device’s memory. This paper describes an analysis of the TLS library stack used in recent Android distributions, combining a C language core (BoringSSL) with multiple layers of Java code (Conscrypt, OkHttp, and Java Secure Sockets). We first conducted a black-box analysis of virtual machine images, allowing us to discover keys that might remain recoverable. After identifying several such keys, we subsequently pinpointed undesirable interactions across these layers, where the higherlevel use of BoringSSL’s reference counting features, from Java code, prevented BoringSSL from cleaning up its keys. This interaction poses a threat to all Android applications built on standard HTTPS libraries, exposing master secrets to memory disclosure attacks. We found all versions we investigated from Android 4 to the latest Android 8 are vulnerable, showing that this problem has been long overlooked. The Android Chrome application is proven to be particularly problematic. We suggest modest changes to the Android codebase to mitigate these issues, and have reported these to Google to help them patch the vulnerability in future Android systems.",
        "files": {
            "openAccessPdf": "https://doi.org/10.14722/ndss.2018.23365"
        },
        "abstract_zh": "实现传输层安全性(TLS)的加密库有责任删除不再使用的加密密钥。任何留在内存中的密钥都有可能通过攻击者的行动被恢复，包括对设备内存的物理捕获和取证分析。本文描述了对最近Android发行版中使用的TLS库栈的分析，结合了C语言核心(BoringSSL)和多层Java代码(Conscrypt、OkHttp和Java安全套接字)。我们首先对虚拟机映像进行了黑盒分析，让我们能够发现可能仍然可恢复的密钥。在识别了几个这样的键之后，我们随后查明了这些层之间不希望的交互，其中来自Java代码的boringsl的引用计数特性的高级使用阻止了boringsl清理它的键。这种交互对所有基于标准HTTPS库的Android应用程序都构成了威胁，将主机密暴露给内存泄漏攻击。我们发现，从Android 4到最新的Android 8，我们调查的所有版本都存在漏洞，这表明这个问题长期以来一直被忽视。事实证明，Android Chrome应用程序尤其成问题。我们建议对Android代码库进行适度的修改，以缓解这些问题，并已将这些情况报告给谷歌，以帮助他们在未来的Android系统中修补漏洞。",
        "title_zh": "从Android的TLS中移除秘密",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2018.html",
        "conf_title": "25th NDSS 2018: San Diego, CA, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2018/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "http://wp.internetsociety.org/ndss/wp-content/uploads/sites/25/2018/02/ndss2018_03B-1_Bianchi_paper.pdf",
        "title": "Broken Fingers: On the Usage of the Fingerprint API in Android",
        "authors": "Antonio Bianchi, Yanick Fratantonio, Aravind Machiry, Christopher Kruegel, Giovanni Vigna, Simon Pak Ho Chung, Wenke Lee",
        "abstract": "Smartphones are increasingly used for very important tasks such as mobile payments. Correspondingly, new technologies are emerging to provide better security on smartphones. One of the most recent and most interesting is the ability to recognize fingerprints, which enables mobile apps to use biometric-based authentication and authorization to protect security-sensitive operations. In this paper, we present the first systematic analysis of the fingerprint API in Android, and we show that this API is not well understood and often misused by app developers. To make things worse, there is currently confusion about which threat model the fingerprint API should be resilient against. For example, although there is no official reference, we argue that the fingerprint API is designed to protect from attackers that can completely compromise the untrusted OS. After introducing several relevant threat models, we identify common API usage patterns and show how inappropriate choices can make apps vulnerable to multiple attacks. We then design and implement a new static analysis tool to automatically analyze the usage of the fingerprint API in Android apps. Using this tool, we perform the first systematic study on how the fingerprint API is used. The results are worrisome: Our tool indicates that 53.69% of the analyzed apps do not use any cryptographic check to ensure that the user actually touched the fingerprint sensor. Depending on the specific use case scenario of a given app, it is not always possible to make use of cryptographic checks. However, a manual investigation on a subset of these apps revealed that 80% of them could have done so, preventing multiple attacks. Furthermore, the tool indicates that only the 1.80% of the analyzed apps use this API in the most secure way possible, while many others, including extremely popular apps such as Google Play Store and Square Cash, use it in weaker ways. To make things worse, we find issues and inconsistencies even in the samples provided by the official Google documentation. We end this work by suggesting various improvements to the fingerprint API to prevent some of these problematic attacks.",
        "files": {
            "openAccessPdf": "https://doi.org/10.14722/ndss.2018.23079"
        },
        "abstract_zh": "智能手机越来越多地用于非常重要的任务，如移动支付。相应地，新技术不断涌现，为智能手机提供了更好的安全性。最近也是最有趣的一项是识别指纹的能力，这使移动应用程序能够使用基于生物特征的身份验证和授权来保护安全敏感的操作。在本文中，我们首次对Android中的指纹API进行了系统分析，我们表明该API没有得到很好的理解，并且经常被应用程序开发人员滥用。更糟糕的是，目前对于指纹API应该抵御哪种威胁模型还存在困惑。例如，尽管没有官方参考，我们认为指纹API是为了防止攻击者完全危及不受信任的操作系统。在介绍了几个相关的威胁模型后，我们确定了常见的API使用模式，并展示了不适当的选择如何使应用程序容易受到多种攻击。然后，我们设计并实现了一个新的静态分析工具，以自动分析Android应用程序中指纹API的使用情况。使用这个工具，我们对如何使用指纹API进行了第一次系统研究。结果令人担忧:我们的工具表明，53.69%的分析应用程序没有使用任何加密检查来确保用户确实触摸了指纹传感器。根据给定应用程序的特定用例场景，并不总是能够利用加密检查。然而，对这些应用程序子集的手动调查显示，其中80%的应用程序可以这样做，从而防止多次攻击。此外，该工具表明，只有1.80%的分析应用程序以最安全的方式使用该API，而其他许多应用程序，包括谷歌Play商店和Square Cash等非常受欢迎的应用程序，都以较弱的方式使用它。更糟糕的是，我们甚至在谷歌官方文档提供的样本中也发现了问题和不一致之处。我们通过建议对指纹API的各种改进来结束这项工作，以防止其中一些有问题的攻击。",
        "title_zh": "断指:Android中指纹API的使用",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2018.html",
        "conf_title": "25th NDSS 2018: San Diego, CA, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2018/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "http://wp.internetsociety.org/ndss/wp-content/uploads/sites/25/2018/02/ndss2018_04A-4_Duan_paper.pdf",
        "title": "Things You May Not Know About Android (Un)Packers: A Systematic Study based on Whole-System Emulation",
        "authors": "Yue Duan, Mu Zhang, Abhishek Vasisht Bhaskar, Heng Yin, Xiaorui Pan, Tongxin Li, Xueqiang Wang, XiaoFeng Wang",
        "abstract": "The prevalent usage of runtime packers has complicated Android malware analysis, as both legitimate and malicious apps are leveraging packing mechanisms to protect themselves against reverse engineer. Although recent efforts have been made to analyze particular packing techniques, little has been done to study the unique characteristics of Android packers. In this paper, we report the first systematic study on mainstream Android packers, in an attempt to understand their security implications. For this purpose, we developed DROIDUNPACK, a whole-system emulation based Android packing analysis framework, which compared with existing tools, relies on intrinsic characteristics of Android runtime (rather than heuristics), and further enables virtual machine inspection to precisely recover hidden code and reveal packing behaviors. Running our tool on 6 major commercial packers, 93,910 Android malware samples and 3 existing state-of-the-art unpackers, we found that not only are commercial packing services abused to encrypt malicious or plagiarized contents, they themselves also introduce securitycritical vulnerabilities to the apps being packed. Our study further reveals the prevalence and rapid evolution of custom packers used by malware authors, which cannot be defended against using existing techniques, due to their design weaknesses.",
        "files": {
            "openAccessPdf": "https://doi.org/10.14722/ndss.2018.23296"
        },
        "abstract_zh": "运行时打包程序的普遍使用使Android恶意软件分析变得复杂，因为合法和恶意应用程序都在利用打包机制来保护自己免受逆向工程的攻击。尽管最近人们努力分析特定的打包技术，但很少有人研究Android打包程序的独特特征。在本文中，我们报告了对主流Android打包程序的首次系统研究，试图了解它们的安全含义。为此，我们开发了DROIDUNPACK，这是一个基于全系统仿真的Android打包分析框架，与现有工具相比，它依赖于Android运行时的内在特征(而不是启发式)，并进一步使虚拟机检查能够精确地恢复隐藏代码并揭示打包行为。在6个主要的商业打包程序、93，910个Android恶意软件样本和3个现有的最先进的解包程序上运行我们的工具，我们发现不仅商业打包服务被滥用来加密恶意或抄袭的内容，它们本身也会给被打包的应用程序带来安全关键漏洞。我们的研究进一步揭示了恶意软件作者使用的定制打包程序的流行和快速发展，由于其设计弱点，无法使用现有技术进行防御。",
        "title_zh": "你可能不知道的Android (Un)包装商:基于全系统仿真的系统研究",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2018.html",
        "conf_title": "25th NDSS 2018: San Diego, CA, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2018/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "http://wp.internetsociety.org/ndss/wp-content/uploads/sites/25/2018/02/ndss2018_04B-1_Schwarz_paper.pdf",
        "title": "KeyDrown: Eliminating Software-Based Keystroke Timing Side-Channel Attacks",
        "authors": "Michael Schwarz, Moritz Lipp, Daniel Gruss, Samuel Weiser, Clémentine Maurice, Raphael Spreitzer, Stefan Mangard",
        "abstract": "Besides cryptographic secrets, software-based side-channel attacks also leak sensitive user input. The most accurate attacks exploit cache timings or interrupt information to monitor keystroke timings and subsequently infer typed words and sentences. These attacks have also been demonstrated in JavaScript embedded in websites by a remote attacker. We extend the state-of-the-art with a new interrupt-based attack and the first Prime+ Probe attack on kernel interrupt handlers. Previously proposed countermeasures fail to prevent software-based keystroke timing attacks as they do not protect keystroke processing through the entire software stack. We close this gap with KeyDrown, a new defense mechanism against software-based keystroke timing attacks. KeyDrown injects a large number of fake keystrokes in the kernel, making the keystroke interrupt density uniform over time, i.e., independent of the real keystrokes. All keystrokes, including fake keystrokes, are carefully propagated through the shared library to make them indistinguishable by exploiting the specific properties of software-based side channels. We show that attackers cannot distinguish fake keystrokes from real keystrokes anymore and we evaluate KeyDrown on a commodity notebook as well as on Android smartphones. We show that KeyDrown eliminates any advantage an attacker can gain from using software-based side-channel attacks.",
        "files": {
            "openAccessPdf": "https://doi.org/10.14722/ndss.2018.23027"
        },
        "abstract_zh": "除了密码秘密之外，基于软件的旁道攻击还会泄露敏感的用户输入。最准确的攻击利用缓存计时或中断信息来监控击键计时，并随后推断出键入的单词和句子。远程攻击者还在网站中嵌入的JavaScript中演示了这些攻击。我们用一种新的基于中断的攻击和第一个针对内核中断处理程序的Prime+ Probe攻击扩展了最先进的技术。先前提出的对策不能防止基于软件的击键计时攻击，因为它们不能通过整个软件栈保护击键处理。我们用KeyDrown填补了这一空白，这是一种针对基于软件的击键计时攻击的新防御机制。KeyDrown在内核中注入大量假击键，使得击键中断密度随时间均匀，即独立于真实击键。所有键击，包括假键击，都通过共享库小心传播，通过利用基于软件的侧通道的特定属性使它们不可区分。我们表明攻击者无法区分假击键和真击键，我们评估了商用笔记本电脑和Android智能手机上的KeyDrown。我们证明了KeyDrown消除了攻击者使用基于软件的旁道攻击所能获得的任何优势。",
        "title_zh": "击键:消除基于软件的击键计时旁道攻击",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2018.html",
        "conf_title": "25th NDSS 2018: San Diego, CA, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2018/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "http://wp.internetsociety.org/ndss/wp-content/uploads/sites/25/2018/02/ndss2018_04B-3_Yang_paper.pdf",
        "title": "Automated Generation of Event-Oriented Exploits in Android Hybrid Apps",
        "authors": "Guangliang Yang, Jeff Huang, Guofei Gu",
        "abstract": "Recently more and more Android apps integrate the embedded browser, known as “WebView”, to render web pages and run JavaScript code without leaving these apps. WebView provides a powerful feature that allows event handlers defined in the native context (i.e., Java in Android) to handle web events that occur in WebView. However, as shown in prior work, this feature suffers from remote attacks, which we generalize as EventOriented Exploit (EOE) in this paper, such that adversaries may remotely access local critical functionalities through event handlers in WebView without any permission or authentication. In this paper, we propose a novel approach, EOEDroid, which can automatically vet event handlers in a given hybrid app using selective symbolic execution and static analysis. If a vulnerability is found, EOEDroid also automatically generates exploit code to help developers and analysts verify the vulnerability. To support exploit code generation, we also systematically study web events, event handlers and their trigger constraints. We evaluated our approach on 3,652 most popular apps. The result showed that our approach found 97 total vulnerabilities in 58 apps, including 2 cross-frame DOM manipulation, 53 phishing, 30 sensitive information leakage, 1 local resources access, and 11 Intent abuse vulnerabilities. We also found a potential backdoor in a high profile app that could be used to steal users’ sensitive information, such as IMEI. Even though developers attempted to close it, EOEDroid found that adversaries were still able to exploit it by triggering two events together and feeding event handlers with well designed input.",
        "files": {
            "openAccessPdf": "https://doi.org/10.14722/ndss.2018.23236"
        },
        "abstract_zh": "最近，越来越多的Android应用程序集成了嵌入式浏览器，称为“WebView”，可以在不离开这些应用程序的情况下呈现网页和运行JavaScript代码。WebView提供了一个强大的功能，允许在本机上下文(即Android中的Java)中定义的事件处理程序来处理WebView中发生的web事件。然而，如先前的工作所示，该功能遭受远程攻击，我们在本文中将其概括为面向事件的利用(EOE)，使得对手可以通过WebView中的事件处理程序远程访问本地关键功能，而无需任何许可或认证。在本文中，我们提出了一种新的方法EOEDroid，它可以使用选择性符号执行和静态分析来自动检查给定混合应用程序中的事件处理程序。如果发现漏洞，EOEDroid还会自动生成漏洞利用代码，帮助开发者和分析师验证漏洞。为了支持漏洞代码生成，我们还系统地研究了web事件、事件处理程序及其触发约束。我们在3，652个最受欢迎的应用上评估了我们的方法。结果显示，我们的方法在58个应用中发现了97个漏洞，包括2个跨框架DOM操纵、53个网络钓鱼、30个敏感信息泄漏、1个本地资源访问和11个意图滥用漏洞。我们还在一个高调的应用程序中发现了一个潜在的后门，可以用来窃取用户的敏感信息，如IMEI。即使开发人员试图关闭它，EOEDroid发现对手仍然能够通过同时触发两个事件并向事件处理程序提供精心设计的输入来利用它。",
        "title_zh": "Android混合应用中面向事件的漏洞自动生成",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2018.html",
        "conf_title": "25th NDSS 2018: San Diego, CA, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2018/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "http://wp.internetsociety.org/ndss/wp-content/uploads/sites/25/2018/02/ndss2018_04B-4_Bhatia_paper.pdf",
        "title": "Tipped Off by Your Memory Allocator: Device-Wide User Activity Sequencing from Android Memory Images",
        "authors": "Rohit Bhatia, Brendan Saltaformaggio, Seung Jei Yang, Aisha I. Ali-Gombe, Xiangyu Zhang, Dongyan Xu, Golden G. Richard III",
        "abstract": "An essential forensic capability is to infer the sequence of actions performed by a suspect in the commission of a crime. Unfortunately, for cyber investigations, user activity timeline reconstruction remains an open research challenge, currently requiring manual identification of datable artifacts/logs and heuristic-based temporal inference. In this paper, we propose a memory forensics capability to address this challenge. We present Timeliner, a forensics technique capable of automatically inferring the timeline of user actions on an Android device across all apps, from a single memory image acquired from the device. Timeliner is inspired by the observation that Android app Activity launches leave behind key self-identifying data structures. More importantly, this collection of data structures can be temporally ordered, owing to the predictable manner in which they were allocated and distributed in memory. Based on these observations, Timeliner is designed to (1) identify and recover these residual data structures, (2) infer the user-induced transitions between their corresponding Activities, and (3) reconstruct the devicewide, cross-app Activity timeline. Timeliner is designed to leverage the memory image of Android’s centralized ActivityManager service. Hence, it is able to sequence Activity launches across all apps — even those which have terminated. Our evaluation shows that Timeliner can reveal substantial evidence (up to an hour) across a variety of apps on different Android platforms.",
        "files": {
            "openAccessPdf": "https://doi.org/10.14722/ndss.2018.23324"
        },
        "abstract_zh": "一个基本的法医能力是推断犯罪嫌疑人在犯罪过程中的行为顺序。不幸的是，对于网络调查，用户活动时间线重建仍然是一个开放的研究挑战，目前需要手动识别数据工件/日志和基于启发式的时间推断。在本文中，我们提出了一种内存取证功能来应对这一挑战。我们介绍了Timeliner，这是一种取证技术，能够根据从设备获取的单个内存图像，自动推断Android设备上所有应用程序的用户操作时间线。Timeliner的灵感来自对Android应用程序活动启动后会留下关键的自我识别数据结构的观察。更重要的是，这个数据结构集合可以临时排序，因为它们在内存中的分配和分布方式是可预测的。基于这些观察，Timeliner被设计为(1)识别和恢复这些残留数据结构，(2)推断用户引起的相应活动之间的转换，以及(3)重建设备范围内跨应用程序的活动时间线。Timeliner旨在利用Android的集中式ActivityManager服务的内存映像。因此，它能够对所有应用程序的活动启动进行排序，甚至是那些已经终止的应用程序。我们的评估表明，Timeliner可以在不同Android平台上的各种应用程序中揭示大量证据(长达一小时)。",
        "title_zh": "根据内存分配器的提示:来自Android内存映像的设备范围内的用户活动排序",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2018.html",
        "conf_title": "25th NDSS 2018: San Diego, CA, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2018/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "http://wp.internetsociety.org/ndss/wp-content/uploads/sites/25/2018/02/ndss2018_05B-2_Ren_paper.pdf",
        "title": "Bug Fixes, Improvements, ... and Privacy Leaks - A Longitudinal Study of PII Leaks Across Android App Versions",
        "authors": "Jingjing Ren, Martina Lindorfer, Daniel J. Dubois, Ashwin Rao, David R. Choffnes, Narseo Vallina-Rodriguez",
        "abstract": "Is mobile privacy getting better or worse over time? In this paper, we address this question by studying privacy leaks from historical and current versions of 512 popular Android apps, covering 7,665 app releases over 8 years of app version history. Through automated and scripted interaction with apps and analysis of the network traffic they generate on real mobile devices, we identify how privacy changes over time for individual apps and in aggregate. We find several trends that include increased collection of personally identifiable information (PII) across app versions, slow adoption of HTTPS to secure the information sent to other parties, and a large number of third parties being able to link user activity and locations across apps. Interestingly, while privacy is getting worse in aggregate, we find that the privacy risk of individual apps varies greatly over time, and a substantial fraction of apps see little change or even improvement in privacy. Given these trends, we propose metrics for quantifying privacy risk and for providing this risk assessment proactively to help users balance the risks and benefits of installing new versions of apps.",
        "files": {
            "openAccessPdf": "https://doi.org/10.14722/ndss.2018.23143"
        },
        "abstract_zh": "随着时间的推移，移动隐私是变好了还是变坏了？在本文中，我们通过研究512个流行的Android应用程序的历史和当前版本的隐私泄露来解决这个问题，涵盖了8年应用程序版本历史中的7，665个应用程序版本。通过与应用程序的自动化和脚本化交互，以及对它们在真实移动设备上产生的网络流量的分析，我们确定了个人应用程序和总体应用程序的隐私如何随时间变化。我们发现了几个趋势，包括跨应用程序版本收集更多的个人身份信息(PII)，缓慢采用HTTPS来保护发送给其他方的信息，以及大量第三方能够跨应用程序链接用户活动和位置。有趣的是，虽然总体上隐私状况越来越差，但我们发现，随着时间的推移，单个应用的隐私风险差异很大，相当一部分应用的隐私状况几乎没有变化，甚至有所改善。鉴于这些趋势，我们提出了量化隐私风险的指标，并主动提供这种风险评估，以帮助用户平衡安装新版本应用程序的风险和收益。",
        "title_zh": "错误修复、改进，...隐私泄露——安卓应用版本PII泄露的纵向研究",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2018.html",
        "conf_title": "25th NDSS 2018: San Diego, CA, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2018/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "http://wp.internetsociety.org/ndss/wp-content/uploads/sites/25/2018/02/ndss2018_05B-4_Zhang_paper.pdf",
        "title": "OS-level Side Channels without Procfs: Exploring Cross-App Information Leakage on iOS",
        "authors": "Xiaokuan Zhang, Xueqiang Wang, Xiaolong Bai, Yinqian Zhang, XiaoFeng Wang",
        "abstract": "It has been demonstrated in numerous previous studies that Android and its underlying Linux operating systems do not properly isolate mobile apps to prevent cross-app sidechannel attacks. Cross-app information leakage enables malicious Android apps to infer sensitive user data (e.g., passwords), or private user information (e.g., identity or location) without requiring specific permissions. Nevertheless, no prior work has ever studied these side-channel attacks on iOS-based mobile devices. One reason is that iOS does not implement procfs— the most popular side-channel attack vector; hence the previously known attacks are not feasible. In this paper, we present the first study of OS-level sidechannel attacks on iOS. Specifically, we identified several new side-channel attack vectors (i.e., iOS APIs that enable cross-app information leakage); developed machine learning frameworks (i.e., classification and pattern matching) that combine multiple attack vectors to improve the accuracy of the inference attacks; demonstrated three categories of attacks that exploit these vectors and frameworks to exfiltrate sensitive user information. We have reported our findings to Apple and proposed mitigations to the attacks. Apple has incorporated some of our suggested countermeasures into iOS 11 and MacOS High Sierra 10.13 and later versions.",
        "files": {
            "openAccessPdf": "https://doi.org/10.14722/ndss.2018.23260"
        },
        "abstract_zh": "先前的大量研究表明，Android及其底层Linux操作系统无法正确隔离移动应用程序以防止跨应用程序的侧信道攻击。跨应用程序信息泄漏使恶意Android应用程序能够在不需要特定权限的情况下推断敏感的用户数据(如密码)或私人用户信息(如身份或位置)。然而，之前还没有研究基于iOS的移动设备上的这些旁道攻击。一个原因是iOS没有实现procfs——最流行的侧信道攻击载体；因此，先前已知的攻击是不可行的。在本文中，我们首次研究了iOS上的操作系统级旁路攻击。具体来说，我们确定了几个新的侧信道攻击载体(即支持跨应用信息泄漏的iOS APIs开发了机器学习框架(即分类和模式匹配)，结合多个攻击向量来提高推理攻击的准确性；展示了利用这些载体和框架来泄露敏感用户信息的三类攻击。我们已经向苹果公司报告了我们的发现，并提出了缓解攻击的建议。苹果在iOS 11和MacOS High Sierra 10.13及更高版本中融入了我们建议的一些对策。",
        "title_zh": "无Procfs的OS级侧通道:探索iOS上的跨App信息泄露",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2018.html",
        "conf_title": "25th NDSS 2018: San Diego, CA, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2018/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "http://wp.internetsociety.org/ndss/wp-content/uploads/sites/25/2018/02/ndss2018_08-1_Aafer_paper.pdf",
        "title": "AceDroid: Normalizing Diverse Android Access Control Checks for Inconsistency Detection",
        "authors": "Yousra Aafer, Jianjun Huang, Yi Sun, Xiangyu Zhang, Ninghui Li, Chen Tian",
        "abstract": "The Android framework has raised increased security concerns with regards to its access control enforcement. Particularly, existing research efforts successfully demonstrate that framework security checks are not always consistent across appaccessible APIs. However, existing efforts fall short in addressing peculiarities that characterize the complex Android access control and the diversity introduced by the heavy vendor customization. In this paper, we develop a new analysis framework AceDroid that models Android access control in a path-sensitive manner and normalizes diverse checks to a canonical form. We applied our proposed modeling to perform inconsistency analysis for 12 images. Our tool proved to be quite effective, enabling to detect a significant number of inconsistencies introduced by various vendors and to suppress substantial false alarms. Through investigating the results, we uncovered high impact attacks enabling to write a key logger, send premium sms messages, bypass user restrictions, perform a major denial of services and other critical operations.",
        "files": {
            "openAccessPdf": "https://doi.org/10.14722/ndss.2018.23121"
        },
        "abstract_zh": "Android框架在其访问控制实施方面引起了越来越多的安全问题。特别是，现有的研究工作成功地证明了框架安全检查在appaccessible APIs之间并不总是一致的。然而，现有的努力不足以解决复杂的Android访问控制的特性和由大量供应商定制引入的多样性。在本文中，我们开发了一个新的分析框架AceDroid，它以路径敏感的方式对Android访问控制进行建模，并将各种检查规范化为一种规范形式。我们应用我们提出的模型对12幅图像进行不一致性分析。事实证明，我们的工具非常有效，能够检测到由不同供应商引入的大量不一致，并抑制大量的错误警报。通过调查结果，我们发现了影响巨大的攻击，这些攻击能够编写按键记录程序、发送高级sms消息、绕过用户限制、执行重大拒绝服务和其他关键操作。",
        "title_zh": "AceDroid:标准化不同的Android访问控制检查以检测不一致性",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2018.html",
        "conf_title": "25th NDSS 2018: San Diego, CA, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2018/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "http://wp.internetsociety.org/ndss/wp-content/uploads/sites/25/2018/03/ndss2018_08-2_Chen_paper.pdf",
        "title": "InstaGuard: Instantly Deployable Hot-patches for Vulnerable System Programs on Android",
        "authors": "Yaohui Chen, Yuping Li, Long Lu, Yueh-Hsun Lin, Hayawardh Vijayakumar, Zhi Wang, Xinming Ou",
        "abstract": "—Hot-patches, easier to develop and faster to deploy than permanent patches, are used to timely (and temporarily) block exploits of newly discovered vulnerabilities while perma- nent patches are being developed and tested. Researchers recently proposed to apply hot-patching techniques to system programs on Android as a quick mitigation against critical vulnerabilities. However, existing hot-patching techniques, though widely used in conventional computers, are rarely adopted by Android OS or device vendors in reality. Our study uncovers a major hurdle that prevents existing hot-patching methods from being effective on mobile devices: after being developed, hot-patches for mobile devices have to go through lengthy compatibility tests that Android device partners impose on all system code updates. This testing and release process can take months, and therefore, erase the key beneﬁt of hot-patches (i.e., quickly deployable). We propose InstaGuard, a new approach to hot-patch for mobile devices that allows for instant deployment of patches (i.e., “carrier-passthrough”) and fast patch development for device vendors. Unlike existing hot-patching techniques, InstaGuard avoids injecting new code to programs being patched. Instead, it enforces instantly updatable rules that contain no code (i.e., no carrier test is needed) to block exploits of unpatched vulnerabili- ties in a timely fashion. When designing InstaGuard, we overcame two major challenges that previous hot-patching methods did not face. First, since no code addition is allowed, InstaGuard needs a rule language that is expressive enough to mitigate various kinds of vulnerabilities and efﬁcient to be enforced on mobile devices. Second, rule generation cannot require special skills or much efforts from human users. We designed a new language for hot-patches and an enforcement mechanism based on the basic debugging primitives supported by ARM CPUs. We also built RuleMaker, a tool for automatically generating rules for InstaGuard based on high-level, easy-to-write vulnerability descriptions. We have implemented InstaGuard on Google Nexus 5X phones. To demonstrate the coverage of InstaGuard, we show that InstaGuard can handle all critical CVEs from Android Security Bulletins reported in 2016. We also conduct unit tests using critical vulnerabilities from 4 different categories. On average, InstaGuard increases program memory footprint by 1.69% and slows down program execution by 2.70%, which are unnoticeable to device users in practice.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "—热修补程序比永久修补程序更易于开发和部署，用于在开发和测试永久修补程序时及时(和临时)阻止对新发现漏洞的利用。研究人员最近提出将热修补技术应用于Android系统程序，作为快速缓解关键漏洞的方法。然而，现有的热修补技术虽然在传统计算机中广泛使用，但在现实中很少被Android操作系统或设备供应商采用。我们的研究揭示了阻止现有热补丁方法在移动设备上有效的一个主要障碍:在开发出来之后，移动设备的热补丁必须经过漫长的兼容性测试，Android设备合作伙伴会对所有系统代码更新进行测试。这一测试和发布过程可能需要几个月的时间，因此消除了热补丁的主要优势(即可快速部署)。我们提出了InstaGuard，这是一种新的移动设备热补丁方法，允许即时部署补丁(即“运营商直通”)并为设备供应商快速开发补丁。与现有的热修补技术不同，InstaGuard避免向被修补的程序注入新代码。相反，它会强制执行不包含任何代码的可即时更新的规则(即不需要进行运营商测试),以便及时阻止利用未打补丁的漏洞。在设计InstaGuard时，我们克服了以前的热修补方法没有面临的两大挑战。首先，由于不允许添加代码，InstaGuard需要一种规则语言，这种语言的表达能力足以缓解各种类型的漏洞，并且能够在移动设备上有效实施。第二，规则生成不需要人类用户的特殊技能或太多努力。我们设计了一种新的热补丁语言和一种基于ARM处理器支持的基本调试原语的执行机制。我们还构建了RuleMaker，这是一个基于高级、易于编写的漏洞描述为InstaGuard自动生成规则的工具。我们已经在谷歌Nexus 5X手机上实现了InstaGuard。为了展示InstaGuard的覆盖范围，我们展示了InstaGuard可以处理2016年Android安全公告中报告的所有关键CVE。我们还使用4个不同类别的关键漏洞进行单元测试。平均而言，InstaGuard增加了1.69%的程序内存占用，降低了2.70%的程序执行速度，这些在实践中设备用户是察觉不到的。",
        "title_zh": "insta guard:Android上易受攻击系统程序的即时可部署热补丁",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2018.html",
        "conf_title": "25th NDSS 2018: San Diego, CA, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2018/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "http://wp.internetsociety.org/ndss/wp-content/uploads/sites/25/2018/02/ndss2018_08-4_Tuncay_paper.pdf",
        "title": "Resolving the Predicament of Android Custom Permissions",
        "authors": "Güliz Seray Tuncay, Soteris Demetriou, Karan Ganju, Carl A. Gunter",
        "abstract": "Android leverages a set of system permissions to protect platform resources. At the same time, it allows untrusted third-party applications to declare their own custom permissions to regulate access to app components. However, Android treats custom permissions the same way as system permissions even though they are declared by entities of different trust levels. In this work, we describe two new classes of vulnerabilities that arise from the ‘predicament’ created by mixing system and custom permissions in Android. These have been acknowledged as serious security flaws by Google and we demonstrate how they can be exploited in practice to gain unauthorized access to platform resources and to compromise popular Android apps. To address the shortcomings of the system, we propose a new modular design called Cusper for the Android permission model. Cusper separates the management of system and custom permissions and introduces a backward-compatible naming convention for custom permissions to prevent custom permission spoofing. We validate the correctness of Cusper by 1) introducing the first formal model of Android runtime permissions, 2) extending it to describe Cusper, and 3) formally showing that key security properties that can be violated in the current permission model are always satisfied in Cusper. To demonstrate Cusper’s practicality, we implemented it in the Android platform and showed that it is both effective and efficient.",
        "files": {
            "openAccessPdf": "https://doi.org/10.14722/ndss.2018.23210"
        },
        "abstract_zh": "Android利用一组系统权限来保护平台资源。同时，它允许不受信任的第三方应用程序声明自己的自定义权限，以规范对应用程序组件的访问。然而，Android将自定义权限视为系统权限，即使它们是由不同信任级别的实体声明的。在这篇文章中，我们描述了两类新的漏洞，它们源于Android中混合系统和自定义权限所造成的“困境”。谷歌已经承认这些是严重的安全缺陷，我们展示了它们如何在实践中被利用来获得对平台资源的未经授权的访问并危害流行的Android应用程序。为了解决系统的缺点，我们为Android权限模型提出了一种新的模块化设计，称为Cusper。Cusper将系统权限和自定义权限的管理分开，并为自定义权限引入了向后兼容的命名约定，以防止自定义权限欺骗。我们通过以下方式验证Cusper的正确性:1)引入Android运行时权限的第一个正式模型，2)扩展它以描述Cusper，3)正式表明在当前权限模型中可能被违反的关键安全属性在Cusper中总是得到满足。为了证明Cusper的实用性，我们在Android平台上实现了它，并表明它是有效和高效的。",
        "title_zh": "解决Android自定义权限的困境",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2018.html",
        "conf_title": "25th NDSS 2018: San Diego, CA, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2018/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.ndss-symposium.org/ndss2017/ndss-2017-programme/cracking-android-pattern-lock-five-attempts/",
        "title": "Cracking Android Pattern Lock in Five Attempts",
        "authors": "Guixin Ye, Zhanyong Tang, Dingyi Fang, Xiaojiang Chen, Kwang In Kim, Ben Taylor, Zheng Wang",
        "abstract": "Pattern lock is widely used as a mechanism for authentication and authorization on Android devices. This paper presents a novel video-based attack to reconstruct Android lock patterns from video footage filmed using a mobile phone camera. Unlike prior attacks on pattern lock, our approach does not require the video to capture any content displayed on the screen. Instead, we employ a computer vision algorithm to track the fingertip movements to infer the pattern. Using the geometry information extracted from the tracked fingertip motions, our approach is able to accurately identify a small number of (often one) candidate patterns to be tested by an adversary. We thoroughly evaluated our approach using 120 unique patterns collected from 215 independent users, by applying it to reconstruct patterns from video footage filmed using smartphone cameras. Experimental results show that our approach can break over 95% of the patterns in five attempts before the device is automatically locked by the Android operating system. We discovered that, in contrast to many people’s belief, complex patterns do not offer stronger protection under our attacking scenarios. This is demonstrated by the fact that we are able to break all but one complex patterns (with a 97.5% success rate) as opposed to 60% of the simple patterns in the first attempt. Since our threat model is common in day-to-day life, this paper calls for the community to revisit the risks of using Android pattern lock to protect sensitive information.",
        "files": {
            "openAccessPdf": "https://eprints.lancs.ac.uk/id/eprint/82868/7/paper.pdf"
        },
        "abstract_zh": "模式锁被广泛用作Android设备上的身份验证和授权机制。提出了一种新颖的基于视频的攻击方法，从手机摄像头拍摄的视频片段中重建Android锁图案。与之前对模式锁的攻击不同，我们的方法不需要视频来捕捉屏幕上显示的任何内容。相反，我们采用计算机视觉算法来跟踪指尖运动，以推断模式。使用从跟踪的指尖运动中提取的几何信息，我们的方法能够准确地识别少量(通常是一个)要由对手测试的候选模式。我们使用从215名独立用户收集的120个独特模式，通过应用它来重建使用智能手机摄像头拍摄的视频片段的模式，彻底评估了我们的方法。实验结果表明，在设备被Android操作系统自动锁定之前，我们的方法可以在五次尝试中打破95%以上的模式。我们发现，与许多人的想法相反，在我们的攻击场景下，复杂模式并不能提供更强的保护。事实证明了这一点，即我们能够打破除了一个复杂模式之外的所有复杂模式(成功率为97.5%)，而第一次尝试只打破了60%的简单模式。由于我们的威胁模型在日常生活中很常见，本文呼吁社区重新审视使用Android模式锁保护敏感信息的风险。",
        "title_zh": "五次尝试破解安卓模式锁",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2017.html",
        "conf_title": "24th NDSS 2017: San Diego, CA, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2017/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.ndss-symposium.org/ndss2017/ndss-2017-programme/automated-synthesis-semantic-malware-signatures-using-maximum-satisfiability/",
        "title": "Automated Synthesis of Semantic Malware Signatures using Maximum Satisfiability",
        "authors": "Yu Feng, Osbert Bastani, Ruben Martins, Isil Dillig, Saswat Anand",
        "abstract": "This paper proposes a technique for automatically learning semantic malware signatures for Android from very few samples of a malware family. The key idea underlying our technique is to look for a maximally suspicious common subgraph (MSCS) that is shared between all known instances of a malware family. An MSCS describes the shared functionality between multiple Android applications in terms of inter-component call relations and their semantic metadata (e.g., data-flow properties). Our approach identifies such maximally suspicious common subgraphs by reducing the problem to maximum satisfiability. Once a semantic signature is learned, our approach uses a combination of static analysis and a new approximate signature matching algorithm to determine whether an Android application matches the semantic signature characterizing a given malware family. \nWe have implemented our approach in a tool called ASTROID and show that it has a number of advantages over state-of-the-art malware detection techniques. First, we compare the semantic malware signatures automatically synthesized by ASTROID with manually-written signatures used in previous work and show that the signatures learned by ASTROID perform better in terms of accuracy as well as precision. Second, we compare ASTROID against two state-of-the-art malware detection tools and demonstrate its advantages in terms of interpretability and accuracy. Finally, we demonstrate that ASTROID's approximate signature matching algorithm is resistant to behavioral obfuscation and that it can be used to detect zero-day malware. In particular, we were able to find 22 instances of zero-day malware in Google Play that are not reported as malware by existing tools.",
        "files": {
            "openAccessPdf": "http://arxiv.org/pdf/1608.06254"
        },
        "abstract_zh": "本文提出了一种从恶意软件家族的少量样本中自动学习Android语义恶意软件签名的技术。我们的技术的关键思想是寻找在恶意软件家族的所有已知实例之间共享的最大可疑公共子图(MSCS)。MSCS根据组件间调用关系及其语义元数据(例如，数据流属性)来描述多个Android应用程序之间的共享功能。我们的方法通过将问题简化为最大可满足性来识别这种最大可疑公共子图。一旦学习了语义签名，我们的方法使用静态分析和新的近似签名匹配算法的组合来确定Android应用程序是否匹配表征给定恶意软件家族的语义签名。\n我们已经在一个名为ASTROID的工具中实现了我们的方法，并表明它比最先进的恶意软件检测技术具有许多优势。首先，我们将ASTROID自动合成的语义恶意软件签名与之前工作中使用的手写签名进行比较，并显示ASTROID学习的签名在准确性和精确度方面表现更好。其次，我们将ASTROID与两种最先进的恶意软件检测工具进行了比较，并展示了它在可解释性和准确性方面的优势。最后，我们证明了ASTROID的近似签名匹配算法能够抵抗行为混淆，并且可以用于检测零日恶意软件。特别是，我们能够在Google Play中找到22个零日恶意软件的实例，这些实例没有被现有工具报告为恶意软件。",
        "title_zh": "使用最大可满足性的语义恶意软件签名的自动合成",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2017.html",
        "conf_title": "24th NDSS 2017: San Diego, CA, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2017/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.ndss-symposium.org/ndss2017/ndss-2017-programme/mamadroid-detecting-android-malware-building-markov-chains-behavioral-models/",
        "title": "MaMaDroid: Detecting Android Malware by Building Markov Chains of Behavioral Models",
        "authors": "Enrico Mariconti, Lucky Onwuzurike, Panagiotis Andriotis, Emiliano De Cristofaro, Gordon J. Ross, Gianluca Stringhini",
        "abstract": "The rise in popularity of the Android platform has resulted in an explosion of malware threats targeting it. As both Android malware and the operating system itself constantly evolve, it is very challenging to design robust malware mitigation techniques that can operate for long periods of time without the need for modifications or costly re-training. In this paper, we present MaMaDroid, an Android malware detection system that relies on app behavior. MaMaDroid builds a behavioral model, in the form of a Markov chain, from the sequence of abstracted API calls performed by an app, and uses it to extract features and perform classification. By abstracting calls to their packages or families, MaMaDroid maintains resilience to API changes and keeps the feature set size manageable. We evaluate its accuracy on a dataset of 8.5K benign and 35.5K malicious apps collected over a period of six years, showing that it not only effectively detects malware (with up to 99% F-measure), but also that the model built by the system keeps its detection capabilities for long periods of time (on average, 86% and 75% F-measure, respectively, one and two years after training). Finally, we compare against DroidAPIMiner, a state-of-the-art system that relies on the frequency of API calls performed by apps, showing that MaMaDroid significantly outperforms it.",
        "files": {
            "openAccessPdf": "https://discovery.ucl.ac.uk/1532047/1/Stringhini_mamadroid.pdf"
        },
        "abstract_zh": "Android平台越来越受欢迎，导致针对它的恶意软件威胁激增。随着Android恶意软件和操作系统本身的不断发展，设计能够长期运行而无需修改或昂贵的重新培训的健壮恶意软件缓解技术是非常具有挑战性的。在本文中，我们介绍了MaMaDroid，这是一个依赖于应用行为的Android恶意软件检测系统。MaMaDroid从应用程序执行的抽象API调用序列中以马尔可夫链的形式构建行为模型，并使用它来提取特征和执行分类。通过抽象对它们的包或系列的调用，MaMaDroid保持了对API变化的弹性，并使特性集的大小易于管理。我们在六年期间收集的8.5K良性和35.5K恶意应用的数据集上评估了它的准确性，表明它不仅可以有效地检测恶意软件(F-measure高达99%)，而且系统构建的模型可以长时间保持其检测能力(训练后一年和两年的平均F-measure分别为86%和75%)。最后，我们与DroidAPIMiner进行了比较，DroidAPIMiner是一个最先进的系统，它依赖于应用程序执行API调用的频率，显示MaMaDroid明显优于它。",
        "title_zh": "MaMaDroid:通过构建行为模型的马尔可夫链来检测Android恶意软件",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2017.html",
        "conf_title": "24th NDSS 2017: San Diego, CA, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2017/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.ndss-symposium.org/ndss2017/ndss-2017-programme/dark-hazard-learning-based-large-scale-discovery-hidden-sensitive-operations-android-apps/",
        "title": "Dark Hazard: Learning-based, Large-Scale Discovery of Hidden Sensitive Operations in Android Apps",
        "authors": "Xiaorui Pan, Xueqiang Wang, Yue Duan, XiaoFeng Wang, Heng Yin",
        "abstract": "Hidden sensitive operations (HSO) such as stealing privacy user data upon receiving an SMS message are increasingly utilized by mobile malware and other potentially-harmful apps (PHAs) to evade detection. Identification of such behaviors is hard, due to the challenge in triggering them during an app’s runtime. Current static approaches rely on the trigger conditions or hidden behaviors known beforehand and therefore cannot capture previously unknown HSO activities. Also these techniques tend to be computationally intensive and therefore less suitable for analyzing a large number of apps. As a result, our understanding of real-world HSO today is still limited, not to mention effective means to mitigate this threat. In this paper, we present HSOMINER, an innovative machinelearning based program analysis technique that enables a largescale discovery of unknown HSO activities. Our approach leverages a set of program features that characterize an HSO branch and can be relatively easy to extract from an app. These features summarize a set of unique observations about an HSO condition, its paths and the relations between them, and are designed to be general for finding hidden suspicious behaviors. Particularly, we found that a trigger condition is less likely to relate to the path of its branch through data flows or shared resources, compared with a legitimate branch. Also, the behaviors exhibited by the two paths of an HSO branch tend to be conspicuously different (innocent on one side and sinister on the other). Most importantly, even though these individual features are not sufficiently accurate for capturing HSO on their own, collectively they are shown to be highly effective in identifying such behaviors. This differentiating power is harnessed by HSOMINER to classify Android apps, which achieves a high precision (>98%) and coverage (>94%), and is also efficient as discovered in our experiments. The new tool was further used in a measurement study involving 338,354 realworld apps, the largest one ever conducted on suspicious hidden operations. Our research brought to light the pervasiveness of HSO activities, which are present in 18.7% of the apps we analyzed, surprising trigger conditions (e.g., click on a certain region of a view) and behaviors (e.g., hiding operations in a dynamically generated receiver), which help better understand 1A branch, unless otherwise specified, refers to a branching structure, which contains a condition and multiple paths. the problem and contribute to more effective defense against this new threat to the mobile platform.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "移动恶意软件和其他潜在有害应用程序(PHA)越来越多地利用隐藏敏感操作(HSO ),例如在收到SMS消息时窃取用户隐私数据，以逃避检测。识别这种行为很难，因为在应用程序运行时触发它们很困难。当前的静态方法依赖于事先已知的触发条件或隐藏行为，因此不能捕获先前未知的HSO活动。此外，这些技术往往是计算密集型的，因此不太适合分析大量的应用程序。结果，我们对当今真实世界HSO的了解仍然有限，更不用说减轻这一威胁的有效手段了。在本文中，我们介绍了HSOMINER，一种创新的基于机器学习的程序分析技术，能够大规模发现未知的HSO活动。我们的方法利用了一组程序特性，这些特性是HSO分行的特征，并且可以相对容易地从应用程序中提取出来。这些特征总结了一组关于HSO条件、其路径以及它们之间的关系的独特观察，并且被设计成对于发现隐藏的可疑行为是通用的。特别是，我们发现，与合法分支相比，触发条件不太可能与其分支通过数据流或共享资源的路径相关。此外，HSO分支的两条路径表现出的行为往往明显不同(一边是无辜的，另一边是邪恶的)。最重要的是，尽管这些单独的特征本身不足以准确地捕捉HSO，但综合起来看，它们在识别此类行为方面非常有效。HSOMINER利用这种区分能力来分类Android应用程序，实现了高精度(> 98%)和高覆盖率(> 94%)，并且在我们的实验中也发现了这种效率。新工具还被进一步用于一项涉及338，354个现实世界应用的测量研究，这是有史以来对可疑的隐藏操作进行的最大一次测量。我们的研究揭示了HSO活动的普遍性，这些活动在我们分析的18.7%的应用程序中存在，令人惊讶的触发条件(例如，单击视图的某个区域)和行为(例如，在动态生成的接收器中隐藏操作)，这有助于更好地理解1A分支，除非另有说明，是指包含一个条件和多个路径的分支结构。的问题，并有助于更有效地防御这种对移动平台的新威胁。",
        "title_zh": "黑暗危害:基于学习，大规模发现Android应用中隐藏的敏感操作",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2017.html",
        "conf_title": "24th NDSS 2017: San Diego, CA, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2017/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.ndss-symposium.org/ndss2017/ndss-2017-programme/show-me-money-finding-flawed-implementations-third-party-app-payment-android-apps/",
        "title": "Show Me the Money! Finding Flawed Implementations of Third-party In-app Payment in Android Apps",
        "authors": "Wenbo Yang, Yuanyuan Zhang, Juanru Li, Hui Liu, Qing Wang, Yueheng Zhang, Dawu Gu",
        "abstract": "The massive growth of transaction via third-party cashier has attracted numerous mobile apps to embed in-app payment functionality. Although this feature makes the payment easy within apps, transactions via current third-party in-app payment involve more sophisticated interactions between multiple participants compared to those using traditional payments. The implementations in mobile apps also lack security considerations. Therefore, such transaction exposes new attack vectors and could be exploited more easily, leading to serious deceptions such as payment forging. To investigate current third-party mobile payment ecosystem and find potential security threats, we conduct an in-depth analysis on world’s largest mobile payment market–China’s mobile payment market. We study four mainstream third-party mobile payment cashiers, and conclude unified security rules that must be regulated by both cashier and merchant. We also illustrate the serious consequences of violating these security rules, which may cause up to four types of attacks against online and offline transactions. Besides, we detect the seven security rule violations to the payment in Android apps. Our detection result shows not only the prevalence of third-party in-app payment, but also the awful status quo of its security. Over 37% Android apps with at least 100,000 users embed third-party payment functionality. Hundreds of them violate security rule(s) and face with various potential security risks, allowing an attacker to consume almost every aspect of commodities or services in life without actually purchasing them or deceiving others to pay for them. Our further investigation reveals that the cashiers not only have improperly designed SDK, which may expand the attack effects, but also release ambiguous documents and even vulnerable sample codes, directly leading to the mistakes committed by merchants. Besides the cashiers’ ignorance for security, our successful exploits to several apps show that these flawed implementations can cause financial loss in real world. We have reported these findings to all the related parties and received positive feedbacks.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "通过第三方收银机交易的大规模增长吸引了众多移动应用程序嵌入应用内支付功能。尽管这一功能使应用内支付变得容易，但与使用传统支付相比，通过当前第三方应用内支付进行的交易涉及多个参与者之间更复杂的交互。移动应用中的实现也缺乏安全性考虑。因此，这种交易暴露了新的攻击媒介，更容易被利用，导致严重的欺诈，如伪造支付。为了调查当前第三方移动支付生态系统并发现潜在的安全威胁，我们对全球最大的移动支付市场——中国移动支付市场进行了深入分析。我们研究了四种主流的第三方移动支付收银机，总结出收银机和商户都必须规范的统一安全规则。我们还说明了违反这些安全规则的严重后果，这些规则可能导致多达四种针对在线和离线交易的攻击。此外，我们还发现了Android应用程序中违反支付安全规则的七种情况。我们的检测结果不仅显示了第三方应用内支付的盛行，也显示了其安全性的糟糕现状。拥有至少100，000名用户的超过37%的Android应用嵌入了第三方支付功能。数以百计的人违反了安全规则，面临着各种潜在的安全风险，使得攻击者能够消费生活中几乎所有方面的商品或服务，而无需实际购买或欺骗他人付款。我们进一步的调查发现，收银员不仅存在设计不当的SDK，可能扩大攻击效果，而且还会发布模棱两可的文档甚至易受攻击的样本代码，直接导致商家的失误。除了收银员对安全性的无知，我们对几个应用程序的成功利用表明，这些有缺陷的实现可能会在现实世界中造成财务损失。我们已向所有相关方报告了这些发现，并收到了积极的反馈。",
        "title_zh": "给我看看钱！在Android应用中发现有缺陷的第三方应用内支付实现",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2017.html",
        "conf_title": "24th NDSS 2017: San Diego, CA, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2017/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.ndss-symposium.org/ndss2017/ndss-2017-programme/windowguard-systematic-protection-gui-security-android/",
        "title": "WindowGuard: Systematic Protection of GUI Security in Android",
        "authors": "Chuangang Ren, Peng Liu, Sencun Zhu",
        "abstract": "Android graphic user interface (GUI) system plays an important role in rendering app GUIs on display and interacting with users. However, the security of this critical subsystem remains under-investigated. In fact, Android GUI has been plagued by a variety of GUI attacks in recent years. GUI attack refers to any harmful behavior that attempts to adversely affect the integrity or availability of the GUIs belonging to other apps. These attacks are real threats and can cause severe consequences, such as sensitive user information leakage, user device denial of service, etc. Given the seriousness and rapid growth of GUI attacks, we are in a pressing need for a comprehensive defense solution. Nevertheless, existing defense methods fall short in defense coverage, effectiveness and practicality. To overcome these challenges, we systematically scrutinize the security implications of Android GUI system design and propose a new security model, Android Window Integrity (AWI), to comprehensively protect the system against GUI attacks. The AWI model defines the user session to be protected and the legitimacy of GUI system states in the unique mobile GUI environment. By doing so, it can protect a normal user session against arbitrary manipulation by attackers, and still preserve the original user experience. Our implementation, WindowGuard, enforces the AWI model and responds to a suspicious behavior by briefing the user about a security event and asking for the final decision from the user. This design not only improves the detection accuracy, but also makes WindowGuard more usable and practical to meet diverse user needs. WindowGuard is implemented as an Xposed module, making it practical to be quickly deployed on a large number of user devices. Our evaluation shows that WindowGuard can successfully detect all known GUI attacks, while yielding small impacts on user experience and system performance.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android图形用户界面(GUI)系统在显示器上呈现应用程序GUI以及与用户交互方面起着重要作用。然而，这个关键子系统的安全性仍然没有得到充分的研究。事实上，Android GUI近年来一直受到各种GUI攻击的困扰。GUI攻击是指任何试图对属于其他应用程序的GUI的完整性或可用性产生负面影响的有害行为。这些攻击是真实的威胁，会导致严重的后果，如用户敏感信息泄露、用户设备拒绝服务等。鉴于GUI攻击的严重性和快速增长，我们迫切需要一个全面的防御解决方案。然而，现有的防御方法在防御覆盖面、有效性和实用性方面存在不足。为了克服这些挑战，我们系统地审查了Android GUI系统设计的安全含义，并提出了一种新的安全模型Android Window Integrity (AWI ),以全面保护系统免受GUI攻击。AWI模型定义了要保护的用户会话以及独特的移动GUI环境中GUI系统状态的合法性。通过这样做，它可以保护正常的用户会话免受攻击者的任意操纵，并且仍然保留原始的用户体验。我们的实现WindowGuard执行AWI模型，并通过向用户简要介绍安全事件并要求用户做出最终决定来响应可疑行为。这种设计不仅提高了检测精度，也使WindowGuard更具可用性和实用性，以满足多样化的用户需求。WindowGuard是作为一个Xposed模块实现的，这使得它可以快速部署在大量用户设备上。我们的评估表明，WindowGuard可以成功检测所有已知的GUI攻击，同时对用户体验和系统性能产生较小的影响。",
        "title_zh": "window guard:Android GUI安全的系统保护",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2017.html",
        "conf_title": "24th NDSS 2017: San Diego, CA, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2017/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.ndss-symposium.org/ndss2017/ndss-2017-programme/obfuscation-resilient-privacy-leak-detection-mobile-apps-through-differential-analysis/",
        "title": "Obfuscation-Resilient Privacy Leak Detection for Mobile Apps Through Differential Analysis",
        "authors": "Andrea Continella, Yanick Fratantonio, Martina Lindorfer, Alessandro Puccetti, Ali Zand, Christopher Kruegel, Giovanni Vigna",
        "abstract": "Mobile apps are notorious for collecting a wealth of private information from users. Despite significant effort from the research community in developing privacy leak detection tools based on data flow tracking inside the app or through network traffic analysis, it is still unclear whether apps and ad libraries can hide the fact that they are leaking private information. In fact, all existing analysis tools have limitations: data flow tracking suffers from imprecisions that cause false positives, as well as false negatives when the data flow from a source of private information to a network sink is interrupted; on the other hand, network traffic analysis cannot handle encryption or custom encoding. We propose a new approach to privacy leak detection that is not affected by such limitations, and it is also resilient to obfuscation techniques, such as encoding, formatting, encryption, or any other kind of transformation performed on private information before it is leaked. Our work is based on blackbox differential analysis, and it works in two steps: first, it establishes a baseline of the network behavior of an app; then, it modifies sources of private information, such as the device ID and location, and detects leaks by observing deviations in the resulting network traffic. The basic concept of black-box differential analysis is not novel, but, unfortunately, it is not practical enough to precisely analyze modern mobile apps. In fact, their network traffic contains many sources of non-determinism, such as random identifiers, timestamps, and server-assigned session identifiers, which, when not handled properly, cause too much noise to correlate output changes with input changes. The main contribution of this work is to make black-box differential analysis practical when applied to modern Android apps. In particular, we show that the network-based non-determinism can often be explained and eliminated, and it is thus possible to reliably use variations in the network traffic as a strong signal to detect privacy leaks. We implemented this approach in a tool, called AGRIGENTO, and we evaluated it on more than one thousand Android apps. Our evaluation shows that our approach works well in practice and outperforms current state-of-the-art techniques. We conclude our study by discussing several case studies that show how popular apps and ad libraries currently exfiltrate data by using complex combinations of encoding and encryption mechanisms that other approaches fail to detect. Our results show that these apps and libraries seem to deliberately hide their data leaks from current approaches and clearly demonstrate the need for an obfuscation-resilient approach such as ours.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "手机应用因收集大量用户隐私信息而臭名昭著。尽管研究社区在开发基于应用内部数据流跟踪或通过网络流量分析的隐私泄露检测工具方面做出了巨大努力，但目前仍不清楚应用和广告库是否可以隐藏他们正在泄露隐私信息的事实。事实上，所有现有的分析工具都有局限性:当从私人信息源到网络接收器的数据流被中断时，数据流跟踪遭受不精确性，这导致假阳性和假阴性；另一方面，网络流量分析不能处理加密或自定义编码。我们提出了一种新的隐私泄露检测方法，它不受这种限制的影响，并且对混淆技术也有弹性，例如编码、格式化、加密或在隐私信息泄露之前对其执行的任何其他类型的转换。我们的工作基于黑盒差分分析，它分两步工作:首先，它建立一个app的网络行为的基线；然后，它修改私人信息的来源，如设备ID和位置，并通过观察产生的网络流量的偏差来检测泄漏。黑盒差分分析的基本概念并不新颖，但不幸的是，它不足以精确分析现代移动应用程序。事实上，它们的网络流量包含许多不确定性来源，如随机标识符、时间戳和服务器分配的会话标识符，如果处理不当，会产生太多噪声，无法将输出变化与输入变化相关联。这项工作的主要贡献是将黑盒微分分析应用于现代Android应用程序时变得实用。特别是，我们表明，基于网络的不确定性通常可以解释和消除，因此有可能可靠地使用网络流量的变化作为检测隐私泄漏的强信号。我们在一个名为AGRIGENTO的工具中实现了这种方法，并在超过1000个Android应用程序上对其进行了评估。我们的评估表明，我们的方法在实践中工作得很好，并且优于当前最先进的技术。我们通过讨论几个案例研究来总结我们的研究，这些案例研究显示了流行的应用程序和广告库目前如何通过使用其他方法无法检测到的编码和加密机制的复杂组合来渗透数据。我们的结果表明，这些应用程序和库似乎故意隐藏了当前方法的数据泄漏，并清楚地表明了对像我们这样的模糊弹性方法的需要。",
        "title_zh": "通过差异分析对移动应用进行抗混淆隐私泄漏检测",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2017.html",
        "conf_title": "24th NDSS 2017: San Diego, CA, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2017/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.ndss-symposium.org/ndss2017/ndss-2017-programme/boomerang-exploiting-semantic-gap-trusted-execution-environments/",
        "title": "BOOMERANG: Exploiting the Semantic Gap in Trusted Execution Environments",
        "authors": "Aravind Machiry, Eric Gustafson, Chad Spensky, Christopher Salls, Nick Stephens, Ruoyu Wang, Antonio Bianchi, Yung Ryn Choe, Christopher Kruegel, Giovanni Vigna",
        "abstract": "In the past decade, we have come to rely on computers for various safety and security-critical tasks, such as securing our homes, operating our vehicles, and controlling our finances. To facilitate these tasks, chip manufacturers have begun including trusted execution environments (TEEs) in their processors, which enable critical code (e.g., cryptographic functions) to run in an isolated hardware environment that is protected from the traditional operating system (OS) and its applications. While code in the untrusted environment (e.g., Android or Linux) is forbidden from accessing any memory or state within the TEE, the code running in the TEE, by design, has unrestricted access to the memory of the untrusted OS and its applications. However, due to the isolation between these two environments, the TEE has very limited visibility into the untrusted environment’s security mechanisms (e.g., kernel vs. application memory). In this paper, we introduce BOOMERANG, a class of vulnerabilities that arises due to this semantic separation between the TEE and the untrusted environment. These vulnerabilities permit untrusted user-level applications to read and write any memory location in the untrusted environment, including security-sensitive kernel memory, by leveraging the TEE’s privileged position to perform the operations on its behalf. BOOMERANG can be used to steal sensitive data from other applications, bypass security checks, or even gain full control of the untrusted OS. To quantify the extent of this vulnerability, we developed an automated framework for detecting BOOMERANG bugs within the TEEs of popular mobile phones. Using this framework, we were able to confirm the existence of BOOMERANG on four different TEE platforms, affecting hundreds of millions of devices on the market today. Moreover, we confirmed that, in at least two instances, BOOMERANG could be leveraged to completely compromise the untrusted OS (i.e., Android). While the implications of these vulnerabilities are severe, defenses can be quickly implemented by vendors, and we are currently in contact with the affected TEE vendors to deploy adequate fixes. To this end, we evaluated the two most promising defense proposals and their inherent trade-offs. This analysis led the proposal of a novel BOOMERANG defense, addressing the major shortcomings of the existing defenses with minimal performance overhead. Our findings have been reported to and verified by the corresponding vendors, who are currently in the process of creating security patches.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "在过去的十年中，我们已经开始依赖计算机来完成各种安全和安全关键任务，如保护我们的家园、操作我们的车辆和控制我们的财务。为了促进这些任务，芯片制造商已经开始在他们的处理器中包括可信执行环境(tee ),这使得关键代码(例如，加密函数)能够在隔离的硬件环境中运行，该硬件环境被保护免受传统操作系统(OS)及其应用的影响。虽然不可信环境(例如，Android或Linux)中的代码被禁止访问TEE中的任何存储器或状态，但是在TEE中运行的代码通过设计可以不受限制地访问不可信OS及其应用程序的存储器。然而，由于这两种环境之间的隔离，TEE对不可信环境的安全机制(例如，内核与应用程序内存)的可见性非常有限。在本文中，我们介绍了BOOMERANG，这是一类由于TEE和不可信环境之间的语义分离而产生的漏洞。这些漏洞允许不受信任的用户级应用程序读写不受信任环境中的任何内存位置，包括安全敏感的内核内存，方法是利用TEE的特权地位代表它执行操作。BOOMERANG可用于从其他应用程序窃取敏感数据，绕过安全检查，甚至完全控制不受信任的操作系统。为了量化这一漏洞的程度，我们开发了一个自动化框架，用于检测流行手机TEEs中的回飞棒错误。使用这个框架，我们能够在四个不同的TEE平台上确认BOOMERANG的存在，影响了当今市场上的数亿台设备。此外，我们证实，在至少两个实例中，BOOMERANG可以被用来完全危害不可信的操作系统(即Android)。虽然这些漏洞的影响是严重的，但供应商可以快速实施防御，我们目前正在与受影响的供应商联系，以部署足够的修复程序。为此，我们评估了两个最有希望的防御方案及其内在的权衡。这种分析导致了一种新型回旋镖防御的提出，以最小的性能开销解决了现有防御的主要缺点。我们的发现已报告给相应的供应商并得到他们的验证，他们目前正在创建安全补丁。",
        "title_zh": "回旋镖:利用可信执行环境中的语义鸿沟",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ndss/ndss2017.html",
        "conf_title": "24th NDSS 2017: San Diego, CA, USA",
        "conf_url": "https://www.ndss-symposium.org/ndss2017/",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-030-91356-4_11",
        "title": "Andromeda: Enabling Secure Enclaves for the Android Ecosystem",
        "authors": "Dimitris Deyannis, Dimitris Karnikis, Giorgos Vasiliadis, Sotiris Ioannidis",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "Andromeda:为Android生态系统提供安全的飞地",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/isw/isc2021.html",
        "conf_title": "24th ISC 2021: Virtual Event",
        "conf_url": "https://doi.org/10.1007/978-3-030-91356-4",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-030-91356-4_14",
        "title": "Hybroid: Toward Android Malware Detection and Categorization with Program Code and Network Traffic",
        "authors": "Mohammad Reza Norouzian, Peng Xu, Claudia Eckert, Apostolis Zarras",
        "abstract": "",
        "files": {
            "openAccessPdf": "https://zenodo.org/record/6389838/files/ISC_2021_Hybroid.pdf"
        },
        "abstract_zh": "",
        "title_zh": "Hybroid:利用程序代码和网络流量对Android恶意软件进行检测和分类",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/isw/isc2021.html",
        "conf_title": "24th ISC 2021: Virtual Event",
        "conf_url": "https://doi.org/10.1007/978-3-030-91356-4",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-99136-8_3",
        "title": "Lumus: Dynamically Uncovering Evasive Android Applications",
        "authors": "Vitor Monte Afonso, Anatoli Kalysch, Tilo Müller, Daniela Oliveira, André Grégio, Paulo Lício de Geus",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "Lumus:动态揭露规避的Android应用程序",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/isw/isc2018.html",
        "conf_title": "21st ISC 2018: Guildford, UK",
        "conf_url": "https://doi.org/10.1007/978-3-319-99136-8",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-69659-1_20",
        "title": "Enforcing ACL Access Control on Android Platform",
        "authors": "Xiaohai Cai, Xiaozhuo Gu, Yuewu Wang, Quan Zhou, Zhenhuan Cao",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "在Android平台上实施ACL访问控制",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/isw/isc2017.html",
        "conf_title": "20th ISC 2017: Ho Chi Minh City, Vietnam",
        "conf_url": "https://doi.org/10.1007/978-3-319-69659-1",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-29814-6_30",
        "title": "A Solution of Code Authentication on Android",
        "authors": "Xue Zhang, Rui Zhang",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "一种Android上的代码认证解决方案",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/icics/icics2015.html",
        "conf_title": "17. ICICS 2015: Beijing, China",
        "conf_url": "https://doi.org/10.1007/978-3-319-29814-6",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3372297.3423341",
        "title": "VAHunt: Warding Off New Repackaged Android Malware in App-Virtualization's Clothing",
        "authors": "Luman Shi, Jiang Ming, Jianming Fu, Guojun Peng, Dongpeng Xu, Kun Gao, Xuanchen Pan",
        "abstract": "Repackaging popular benign apps with malicious payload used to be the most common way to spread Android malware. Nevertheless, since 2016, we have observed an alarming new trend to Android ecosystem: a growing number of Android malware samples abuse recent app-virtualization innovation as a new distribution channel. App-virtualization enables a user to run multiple copies of the same app on a single device, and tens of millions of users are enjoying this convenience. However, cybercriminals repackage various malicious APK files as plugins into an app-virtualization platform, which is flexible to launch arbitrary plugins without the hassle of installation. This new style of repackaging gains the ability to bypass anti-malware scanners by hiding the grafted malicious payload in plugins, and it also defies the basic premise embodied by existing repackaged app detection solutions. As app-virtualization-based apps are not necessarily malware, in this paper, we aim to make a verdict on them prior to run time. Our in-depth study results in two key observations: 1) the proxy layer between plugin apps and the Android framework is the core of app-virtualization mechanism, and it reveals the feature of finite state transitions; 2) malware typically loads plugins stealthily and hides malicious behaviors. These insights motivate us to develop a two-layer detection approach, called VAHunt. First, we design a stateful detection model to identify the existence of an app-virtualization engine in APK files. Second, we perform data flow analysis to extract fingerprinting features to differentiate between malicious and benign loading strategies. Since October 2019, we have tested VAHunt in Antiy AVL Mobile Security, a leading mobile security company, to detect more than 139K app-virtualization-based samples. Compared with the ground truth, VAHunt achieves 0.7% false negatives and zero false positive. Our automated detection frees security analysts from the burden of reverse engineering.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "用恶意负载重新包装流行的良性应用程序曾经是传播Android恶意软件的最常见方式。然而，自2016年以来，我们观察到了Android生态系统的一个令人担忧的新趋势:越来越多的Android恶意软件样本滥用最近的应用虚拟化创新作为新的分发渠道。应用虚拟化使用户能够在一台设备上运行同一应用的多个副本，数千万用户正在享受这一便利。然而，网络罪犯将各种恶意APK文件作为插件重新打包到应用虚拟化平台中，该平台可以灵活地启动任意插件，而无需安装。这种新的重新打包方式通过将嫁接的恶意有效载荷隐藏在插件中获得了绕过反恶意软件扫描器的能力，并且它也违背了现有重新打包的应用程序检测解决方案所体现的基本前提。由于基于应用虚拟化的应用不一定是恶意软件，在本文中，我们的目标是在运行之前对它们做出判断。我们的深入研究得出了两个关键的观察结果:1)插件应用和Android框架之间的代理层是应用虚拟化机制的核心，它揭示了有限状态转换的特征；2)恶意软件通常会悄悄地加载插件，隐藏恶意行为。这些见解促使我们开发了一种双层检测方法，称为VAHunt。首先，我们设计了一个状态检测模型来识别APK文件中应用虚拟化引擎的存在。其次，我们执行数据流分析来提取指纹特征，以区分恶意和良性加载策略。自2019年10月以来，我们在领先的移动安全公司安天AVL移动安全公司测试了VAHunt，检测了超过139K个基于应用虚拟化的样本。与地面真实相比，VAHunt实现了0.7%的漏报率和零误报率。我们的自动化检测将安全分析师从逆向工程的负担中解放出来。",
        "title_zh": "VAHunt:在应用虚拟化的外衣下抵御新的重新包装的Android恶意软件",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2020.html",
        "conf_title": "27th CCS 2020: Virtual Event, USA",
        "conf_url": "https://doi.org/10.1145/3372297",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3372297.3423346",
        "title": "Deploying Android Security Updates: an Extensive Study Involving Manufacturers, Carriers, and End Users",
        "authors": "Kailani R. Jones, Ting-Fang Yen, Sathya Chandran Sundaramurthy, Alexandru G. Bardas",
        "abstract": "Android's fragmented ecosystem makes the delivery of security updates and OS upgrades cumbersome and complex. While Google initiated various projects such as Android One, Project Treble, and Project Mainline to address this problem, and other involved entities (e.g., chipset vendors, manufacturers, carriers) continuously strive to improve their processes, it is still unclear how effective these efforts are on the delivery of updates to supported end-user devices. In this paper, we perform an extensive quantitative study (Aug. 2015 to Dec. 2019) to measure the Android security updates and OS upgrades rollout process. Our study leverages multiple data sources: the Android Open Source Project (AOSP), device manufacturers, and the top four U.S. carriers (AT&T, Verizon, T-Mobile, and Sprint). Furthermore, we analyze an end-user dataset captured in 2019 (152M anonymized HTTP requests associated with 9.1M unique user identifiers) from a U.S.-based social network. Our findings include unique measurements that, due to the fragmented and inconsistent ecosystem, were previously challenging to perform. For example, manufacturers and carriers introduce a median latency of 24 days before rolling out security updates, with an additional median delay of 11 days before end devices update. We show that these values alter per carrier-manufacturer relationship, yet do not alter greatly based on a model's age. Our results also delve into the effectiveness of current Android projects. For instance, security updates for Treble devices are available on average 7 days faster than for non-Treble devices. While this constitutes an improvement, the security update delay for Treble devices still averages 19 days.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android支离破碎的生态系统使得安全更新和操作系统升级的交付变得繁琐而复杂。虽然谷歌启动了各种项目(如Android One、Project Treble和Project Mainline)来解决这一问题，并且其他相关实体(如芯片组供应商、制造商、运营商)也在不断努力改进他们的流程，但尚不清楚这些努力在向受支持的最终用户设备交付更新方面的效果如何。在本文中，我们进行了广泛的定量研究(2015年8月至2019年12月),以衡量Android安全更新和操作系统升级的推出过程。我们的研究利用了多个数据源:Android开源项目(AOSP)、设备制造商和美国四大运营商(美国电话电报公司、威瑞森、T-Mobile和Sprint)。此外，我们分析了2019年从一家美国社交网络捕获的最终用户数据集(与910万唯一用户标识符相关联的1.52亿匿名HTTP请求)。我们的研究结果包括独特的测量方法，由于生态系统的分散和不一致，这些方法在以前很难执行。例如，制造商和运营商推出安全更新前的平均延迟时间为24天，终端设备更新前的平均延迟时间为11天。我们发现，这些值会因运营商和制造商的关系而变化，但不会因机型的年龄而发生很大变化。我们的结果也深入研究了当前Android项目的有效性。例如，Treble设备的安全更新比非Treble设备平均快7天。虽然这是一项改进，但Treble设备的安全更新延迟平均仍为19天。",
        "title_zh": "部署Android安全更新:涉及制造商、运营商和最终用户的广泛研究",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2020.html",
        "conf_title": "27th CCS 2020: Virtual Event, USA",
        "conf_url": "https://doi.org/10.1145/3372297",
        "keywords": [
            "AOSP",
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3372297.3417255",
        "title": "Demystifying Resource Management Risks in Emerging Mobile App-in-App Ecosystems",
        "authors": "Haoran Lu, Luyi Xing, Yue Xiao, Yifan Zhang, Xiaojing Liao, XiaoFeng Wang, Xueqiang Wang",
        "abstract": "App-in-app is a new and trending mobile computing paradigm in which native app-like software modules, called sub-apps, are hosted by popular mobile apps such as Wechat, Baidu, TikTok and Chrome, to enrich the host app's functionalities and to form an \"all-in-one app\" ecosystem. Sub-apps access system resources through the host, and their functionalities come close to regular mobile apps (taking photos, recording voices, banking, shopping, etc.). Less clear, however, is whether the host app, typically a third-party app, is capable of securely managing sub-apps and their access to system resources. In this paper, we report the first systematic study on the resource management in app-in-app systems. Our study reveals high-impact security flaws, which allow the adversary to stealthily escalate privilege (e.g., accessing the camera, photo gallery, microphone, etc.) or acquire sensitive data (e.g., location, passwords of Amazon, Google, etc.). To understand the impacts of those flaws, we developed an analysis tool that automatically assesses 11 popular app-in-app platforms on both Android and iOS. Our results brought to light the prevalence of the security flaws. We further discuss the lessons learned and propose mitigation strategies.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "App-in-app是一种新兴的趋势性移动计算模式，其中类似原生应用的软件模块(称为子应用)由微信、百度、抖音和Chrome等流行的移动应用托管，以丰富主机应用的功能，并形成“一体化应用”生态系统。子应用通过主机访问系统资源，其功能接近常规手机应用(拍照、录音、银行、购物等。).然而，不太清楚的是主机应用程序(通常是第三方应用程序)是否能够安全地管理子应用程序及其对系统资源的访问。在本文中，我们首次系统地研究了应用程序中的应用程序系统的资源管理。我们的研究揭示了高度影响的安全缺陷，这些缺陷允许对手秘密提升权限(例如，访问摄像头、照片库、麦克风等。)或获取敏感数据(如位置、亚马逊、谷歌的密码等。).为了了解这些缺陷的影响，我们开发了一个分析工具，可以自动评估Android和iOS上11个流行的应用程序中的应用程序平台。我们的结果揭示了安全缺陷的普遍性。我们进一步讨论了经验教训，并提出了缓解策略。",
        "title_zh": "揭秘新兴移动应用中应用生态系统的资源管理风险",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2020.html",
        "conf_title": "27th CCS 2020: Virtual Event, USA",
        "conf_url": "https://doi.org/10.1145/3372297",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3372297.3417291",
        "title": "Enhancing State-of-the-art Classifiers with API Semantics to Detect Evolved Android Malware",
        "authors": "Xiaohan Zhang, Yuan Zhang, Ming Zhong, Daizong Ding, Yinzhi Cao, Yukun Zhang, Mi Zhang, Min Yang",
        "abstract": "Machine learning (ML) classifiers have been widely deployed to detect Android malware, but at the same time the application of ML classifiers also faces an emerging problem. The performance of such classifiers degrades---or called ages---significantly over time given the malware evolution. Prior works have proposed to use retraining or active learning to reverse and improve aged models. However, the underlying classifier itself is still blind, unaware of malware evolution. Unsurprisingly, such evolution-insensitive retraining or active learning comes at a price, i.e., the labeling of tens of thousands of malware samples and the cost of significant human efforts. In this paper, we propose the first framework, called APIGraph, to enhance state-of-the-art malware classifiers with the similarity information among evolved Android malware in terms of semantically-equivalent or similar API usages, thus naturally slowing down classifier aging. Our evaluation shows that because of the slow-down of classifier aging, APIGraph saves significant amounts of human efforts required by active learning in labeling new malware samples.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "机器学习(ML)分类器已被广泛用于检测Android恶意软件，但同时ML分类器的应用也面临一个新问题。考虑到恶意软件的发展，这种分类器的性能会随着时间的推移而显著下降。先前的工作已经提出使用再训练或主动学习来逆转和改进老化的模型。然而，底层分类器本身仍然是盲目的，不知道恶意软件的演变。毫不奇怪，这种对进化不敏感的再训练或主动学习是有代价的，即成千上万恶意软件样本的标记和大量人类努力的成本。在本文中，我们提出了第一个框架，称为APIGraph，利用进化的Android恶意软件之间在语义等价或相似API用法方面的相似性信息来增强最先进的恶意软件分类器，从而自然地减缓分类器老化。我们的评估表明，由于分类器老化的减缓，APIGraph节省了主动学习在标记新恶意软件样本方面所需的大量人力。",
        "title_zh": "用API语义增强最先进的分类器以检测进化的Android恶意软件",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2020.html",
        "conf_title": "27th CCS 2020: Virtual Event, USA",
        "conf_url": "https://doi.org/10.1145/3372297",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3372297.3417232",
        "title": "A Qualitative Study of Dependency Management and Its Security Implications",
        "authors": "Ivan Pashchenko, Duc Ly Vu, Fabio Massacci",
        "abstract": "Several large scale studies on the Maven, NPM, and Android ecosystems point out that many developers do not often update their vulnerable software libraries thus exposing the user of their code to security risks. The purpose of this study is to qualitatively investigate the choices and the interplay of functional and security concerns on the developers' overall decision-making strategies for selecting, managing, and updating software dependencies. We run 25 semi-structured interviews with developers of both large and small-medium enterprises located in nine countries. All interviews were transcribed, coded, and analyzed according to applied thematic analysis. They highlight the trade-offs that developers are facing and that security researchers must understand to provide effective support to mitigate vulnerabilities (for example bundling security fixes with functional changes might hinder adoption due to lack of resources to fix functional breaking changes). We further distill our observations to actionable implications on what algorithms and automated tools should achieve to effectively support (semi-)automatic dependency management.",
        "files": {
            "openAccessPdf": "https://securitylab.disi.unitn.it/lib/exe/fetch.php?media=research_activities:experiments:ccs-2020-preprint.pdf"
        },
        "abstract_zh": "对Maven、NPM和Android生态系统的几项大规模研究指出，许多开发人员不经常更新他们易受攻击的软件库，从而使他们代码的用户面临安全风险。本研究的目的是定性地调查功能和安全问题对开发人员选择、管理和更新软件依赖关系的总体决策策略的选择和相互作用。我们对9个国家的大型和中小型企业的开发人员进行了25次半结构化采访。所有的采访都被转录，编码，并根据应用主题分析进行分析。它们强调了开发人员面临的权衡，安全研究人员必须了解这些权衡，以提供有效的支持来缓解漏洞(例如，将安全修复与功能更改捆绑在一起可能会由于缺乏修复功能性突破性更改的资源而阻碍采用)。我们进一步将我们的观察提炼为可操作的含义，即算法和自动化工具应该实现什么来有效地支持(半)自动化的依赖性管理。",
        "title_zh": "依赖管理及其安全含义的定性研究",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2020.html",
        "conf_title": "27th CCS 2020: Virtual Event, USA",
        "conf_url": "https://doi.org/10.1145/3372297",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3411497.3420219",
        "title": "Proximity Tracing in an Ecosystem of Surveillance Capitalism",
        "authors": "Paul-Olivier Dehaye, Joel Reardon",
        "abstract": "Proximity tracing apps have been proposed as an aide in dealing with the COVID-19 crisis. Some of those apps leverage attenuation of Bluetooth beacons from mobile devices to build a record of proximate encounters between a pair of device owners. The underlying protocols are known to suffer from false positive and re-identification attacks. We present evidence that the attacker's difficulty in mounting such attacks has been overestimated. Indeed, an attacker leveraging a moderately successful app or SDK with Bluetooth and location access can eavesdrop and interfere with these proximity tracing systems at no hardware cost and perform these attacks against users who do not have this app or SDK installed. We describe concrete examples of actors who would be in a good position to execute such attacks. We further present a novel attack, which we call a biosurveillance attack, which allows the attacker to monitor the exposure risk of a smartphone user who installs their app or SDK but who does not use any contact tracing system and may falsely believe they have opted out of the system. Through traffic auditing with an instrumented testbed, we characterize precisely the behaviour of one such SDK that we found in a handful of apps---but installed on more than one hundred million mobile devices. Its behaviour is functionally indistinguishable from a re-identification or biosurveillance attack and capable of executing a false positive attack with minimal effort. We also discuss how easily an attacker could acquire a position conducive to such attacks, by leveraging the lax logic for granting permissions to apps in the Android framework: any app with some geolocation permission could acquire the necessary Bluetooth permission through an upgrade, without any additional user prompt. Finally we discuss motives for conducting such attacks.",
        "files": {
            "openAccessPdf": "http://arxiv.org/pdf/2009.06077"
        },
        "abstract_zh": "邻近追踪应用程序被提议作为处理新冠肺炎危机的辅助手段。其中一些应用利用移动设备蓝牙信号的衰减来建立一对设备所有者之间近距离相遇的记录。已知底层协议会遭受误报和重新识别攻击。我们提供的证据表明，攻击者发动此类攻击的难度被高估了。事实上，利用具有蓝牙和位置访问功能的中等成功的应用程序或SDK的攻击者可以在没有硬件成本的情况下窃听和干扰这些邻近跟踪系统，并对没有安装该应用程序或SDK的用户执行这些攻击。我们描述了有能力实施这种攻击的行为者的具体例子。我们还提出了一种新的攻击，我们称之为生物监控攻击，这种攻击允许攻击者监控智能手机用户的暴露风险，这些用户安装了他们的应用程序或SDK，但没有使用任何联系跟踪系统，并可能错误地认为他们已经选择退出该系统。通过使用仪器测试床进行流量审计，我们精确地描述了一个这样的SDK的行为，我们在少数应用程序中发现了这个SDK，但它安装在超过1亿个移动设备上。其行为在功能上与重新识别或生物监测攻击没有区别，并且能够以最小的努力执行假阳性攻击。我们还讨论了攻击者通过利用Android框架中向应用程序授予权限的松散逻辑，可以多么容易地获得有利于此类攻击的位置:任何具有某种地理位置权限的应用程序都可以通过升级获得必要的蓝牙权限，而无需任何额外的用户提示。最后，我们讨论进行这种攻击的动机。",
        "title_zh": "监视资本主义生态系统中的邻近追踪",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wpes/wpes2020.html",
        "conf_title": "WPES@CCS 2020: Virtual Event, USA",
        "conf_url": "https://doi.org/10.1145/3411497",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3460120.3484546",
        "title": "Dissecting Click Fraud Autonomy in the Wild",
        "authors": "Tong Zhu, Yan Meng, Haotian Hu, Xiaokuan Zhang, Minhui Xue, Haojin Zhu",
        "abstract": "Although the use of pay-per-click mechanisms stimulates the prosperity of the mobile advertisement network, fraudulent ad clicks result in huge financial losses for advertisers. Extensive studies identify click fraud according to click/traffic patterns based on dynamic analysis. However, in this study, we identify a novel click fraud, named humanoid attack, which can circumvent existing detection schemes by generating fraudulent clicks with similar patterns to normal clicks. We implement the first tool ClickScanner to detect humanoid attacks on Android apps based on static analysis and variational AutoEncoders (VAEs) with limited knowledge of fraudulent examples. We define novel features to characterize the patterns of humanoid attacks in the apps' bytecode level. ClickScanner builds a data dependency graph (DDG) based on static analysis to extract these key features and form a feature vector. We then propose a classification model only trained on benign datasets to overcome the limited knowledge of humanoid attacks. We leverage ClickScanner to conduct the first large-scale measurement on app markets (i.e., 120,000 apps from Google Play and Huawei AppGallery) and reveal several unprecedented phenomena. First, even for the top-rated 20,000 apps, ClickScanner still identifies 157 apps as fraudulent, which shows the prevalence of humanoid attacks. Second, it is observed that the ad SDK-based attack (i.e., the fraudulent codes are in the third-party ad SDKs) is now a dominant attack approach. Third, the manner of attack is notably different across apps of various categories and popularities. Finally, we notice there are several existing variants of the humanoid attack. Additionally, our measurements demonstrate the proposed ClickScanner is accurate and time-efficient (i.e., the detection overhead is only 15.35% of those of existing schemes).",
        "files": {
            "openAccessPdf": "http://arxiv.org/pdf/2105.11103"
        },
        "abstract_zh": "尽管点击付费机制的使用刺激了移动广告网络的繁荣，但是欺诈性的广告点击给广告商带来了巨大的经济损失。大量研究根据基于动态分析的点击/流量模式来识别点击欺诈。然而，在这项研究中，我们发现了一种新的点击欺诈，称为人形攻击，它可以通过生成与正常点击模式相似的欺诈性点击来规避现有的检测方案。我们实现了第一个工具ClickScanner，用于检测基于静态分析和可变自动编码器(VAEs)的Android应用程序上的人形攻击，这些攻击具有有限的欺诈示例知识。我们在应用程序的字节码级别定义了新的特征来描述人形攻击的模式。ClickScanner基于静态分析构建数据依赖图(DDG)，提取这些关键特征，形成特征向量。然后，我们提出了一个只在良性数据集上训练的分类模型，以克服人形攻击的有限知识。我们利用ClickScanner对应用市场进行了首次大规模测量(即来自Google Play和华为AppGallery的12万个应用)，揭示了几个前所未有的现象。首先，即使对于排名最高的20，000个应用程序，ClickScanner仍将157个应用程序识别为欺诈性的，这表明了人形攻击的流行。其次，据观察，基于ad SDK的攻击(即欺诈性代码在第三方ad SDK中)现在是一种主要的攻击方法。第三，不同类别和流行度的应用程序受到攻击的方式明显不同。最后，我们注意到人形攻击有几种现有的变种。此外，我们的测量表明，所提出的点击扫描器是准确的和时间有效的(即，检测开销仅为现有方案的15.35%)。",
        "title_zh": "解剖野外的点击欺诈自治",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2021.html",
        "conf_title": "27th CCS 2021: Virtual Event, Korea",
        "conf_url": "https://doi.org/10.1145/3460120",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3460120.3484733",
        "title": "Wireless Charging Power Side-Channel Attacks",
        "authors": "Alexander S. La Cour, Khurram K. Afridi, G. Edward Suh",
        "abstract": "This paper demonstrates that today's wireless charging interface is vulnerable to power side-channel attacks; a smartphone that charges wirelessly leaks information about its activity to the wireless charger transmitter. We present a website fingerprinting attack and other preliminary attacks through the wireless charging side channel on iOS and Android devices. The website fingerprinting attack monitors the current draw of a wireless charger while the smartphone it charges loads a website from the Alexa top sites list. Our classifier identifies the website loaded on an iPhone 11 or a Google Pixel 4 with over 90% accuracy using wireless charging current traces. This attack represents a considerable security threat because wireless charging will always initiate when a compatible device is within the range of a charging transmitter. We find that the performance of the attack deteriorates as the contents of websites change over time. Additionally, this study finds that the wireless charging side channel is comparable to the wired USB charging side channel. Information leakage in both interfaces heavily depends on the battery level; minimal information leaks at low battery levels.",
        "files": {
            "openAccessPdf": "https://dl.acm.org/doi/pdf/10.1145/3460120.3484733"
        },
        "abstract_zh": "本文论证了当今的无线充电接口容易受到电源侧信道攻击；无线充电的智能手机会将其活动信息泄露给无线充电器发射器。我们通过iOS和Android设备上的无线充电端通道，提出了一个网站指纹攻击和其他初步攻击。网站指纹攻击会监控无线充电器的电流消耗，而它所充电的智能手机会加载Alexa热门网站列表中的网站。我们的分类器使用无线充电电流跟踪识别iPhone 11或谷歌Pixel 4上加载的网站，准确率超过90%。这种攻击代表了相当大的安全威胁，因为当兼容设备在充电发射器的范围内时，无线充电总是会启动。我们发现，随着网站内容的变化，攻击的性能会下降。此外，这项研究发现，无线充电侧通道与有线USB充电侧通道相当。两个接口中的信息泄漏严重依赖于电池电量；电池电量低时，信息泄露最少。",
        "title_zh": "无线充电电源侧信道攻击",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2021.html",
        "conf_title": "27th CCS 2021: Virtual Event, Korea",
        "conf_url": "https://doi.org/10.1145/3460120",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3460120.3484798",
        "title": "Statically Discovering High-Order Taint Style Vulnerabilities in OS Kernels",
        "authors": "Hang Zhang, Weiteng Chen, Yu Hao, Guoren Li, Yizhuo Zhai, Xiaochen Zou, Zhiyun Qian",
        "abstract": "Static analysis is known to yield numerous false alarms when used in bug finding, especially for complex vulnerabilities in large code bases like the Linux kernel. One important class of such complex vulnerabilities is what we call \"high-order taint style vulnerability\", where the taint flow from the user input to the vulnerable site crosses the boundary of a single entry function invocation (i.e., syscall). Due to the large scope and high precision requirement, few have attempted to solve the problem. In this paper, we present SUTURE, a highly precise and scalable static analysis tool capable of discovering high-order vulnerabilities in OS kernels. SUTURE employs a novel summary-based high-order taint flow construction approach to efficiently enumerate the cross-entry taint flows, while incorporating multiple innovative enhancements on analysis precision that are unseen in existing tools, resulting in a highly precise inter-procedural flow-, context-, field-, index-, and opportunistically path-sensitive static taint analysis. We apply SUTURE to discover high-order taint vulnerabilities in multiple Android kernels from mainstream vendors (e.g., Google, Samsung, Huawei), the results show that SUTURE can both confirm known high-order vulnerabilities and uncover new ones. So far, SUTURE generates 79 true positive warning groups, of which 19 have been confirmed by the vendors, including a high severity vulnerability rated by Google. SUTURE also achieves a reasonable false positive rate (51.23%) perceived by users of our tool.",
        "files": {
            "openAccessPdf": "https://dl.acm.org/doi/pdf/10.1145/3460120.3484798"
        },
        "abstract_zh": "众所周知，静态分析在用于bug查找时会产生大量错误警报，尤其是对于像Linux内核这样的大型代码库中的复杂漏洞。这种复杂漏洞的一个重要类别是我们所谓的“高阶污点风格漏洞”，其中从用户输入到易受攻击站点的污点流跨越了单入口函数调用(即syscall)的边界。由于大范围和高精度的要求，很少有人试图解决这个问题。在本文中，我们介绍了缝合，一个高度精确和可扩展的静态分析工具，能够发现操作系统内核中的高阶漏洞。缝合采用了一种新的基于摘要的高阶污染流构建方法来有效地枚举交叉条目污染流，同时结合了现有工具中未见过的多种创新的分析精度增强，从而实现了高度精确的过程间流、上下文、字段、索引和机会路径敏感的静态污染分析。我们应用缝合线发现了主流厂商(如谷歌、三星、华为)的多个Android内核中的高阶污点漏洞，结果表明缝合线既能确认已知的高阶漏洞，又能发现新的高阶漏洞。到目前为止，缝合生成了79个真正的正面警告组，其中19个已被供应商确认，包括一个由谷歌评级的高严重性漏洞。缝合还实现了一个合理的假阳性率(51.23%)，由我们的工具的用户感知。",
        "title_zh": "静态发现操作系统内核中的高阶污点式漏洞",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2021.html",
        "conf_title": "27th CCS 2021: Virtual Event, Korea",
        "conf_url": "https://doi.org/10.1145/3460120",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3460120.3485366",
        "title": "This Sneaky Piggy Went to the Android Ad Market: Misusing Mobile Sensors for Stealthy Data Exfiltration",
        "authors": "Michalis Diamantaris, Serafeim Moustakas, Lichao Sun, Sotiris Ioannidis, Jason Polakis",
        "abstract": "Mobile sensors have transformed how users interact with modern smartphones and enhance their overall experience. However, the absence of sufficient access control for protecting these sensors enables a plethora of threats. As prior work has shown, malicious apps and sites can deploy a wide range of attacks that use data captured from sensors. Unfortunately, as we demonstrate, in the modern app ecosystem where most apps fetch and render third-party web content, attackers can use ads for delivering attacks. In this paper, we introduce a novel attack vector that misuses the advertising ecosystem for delivering sophisticated and stealthy attacks that leverage mobile sensors. These attacks do not depend on any special app permissions or specific user actions, and affect all Android apps that contain in-app advertisements due to the improper access control of sensor data in WebView. We outline how motion sensor data can be used to infer users' sensitive touch input (e.g., credit card information) in two distinct attack scenarios, namely intra-app and inter-app data exfiltration. While the former targets the app displaying the ad, the latter affects every other Android app running on the device. To make matters worse, we have uncovered serious flaws in Android's app isolation, life cycle management, and access control mechanisms that enable persistent data exfiltration even after the app showing the ad is moved to the background or terminated by the user. Furthermore, as in-app ads can \"piggyback\" on the permissions intended for the app's core functionality, they can also obtain information from protected sensors such as the camera, microphone and GPS. To provide a comprehensive assessment of this emerging threat, we conduct a large-scale, end-to-end, dynamic analysis of ads shown in apps available in the official Android Play Store. Our study reveals that ads in the wild are already accessing and leaking data obtained from motion sensors, thus highlighting the need for stricter access control policies and isolation mechanisms.",
        "files": {
            "openAccessPdf": "https://dl.acm.org/doi/pdf/10.1145/3460120.3485366"
        },
        "abstract_zh": "移动传感器改变了用户与现代智能手机的交互方式，并增强了他们的整体体验。然而，由于缺乏足够的访问控制来保护这些传感器，导致了大量的威胁。正如之前的工作所显示的，恶意应用和网站可以利用从传感器捕获的数据进行广泛的攻击。不幸的是，正如我们所展示的，在现代应用生态系统中，大多数应用获取并呈现第三方web内容，攻击者可以使用广告进行攻击。在本文中，我们介绍了一种新的攻击载体，它滥用广告生态系统来提供利用移动传感器的复杂和隐蔽的攻击。这些攻击不依赖于任何特殊的应用权限或特定的用户操作，并由于WebView中传感器数据的不当访问控制而影响所有包含应用内广告的Android应用。我们概述了如何在两种不同的攻击场景中使用运动传感器数据来推断用户的敏感触摸输入(如信用卡信息)，即应用内和应用间数据泄漏。虽然前者针对显示广告的应用程序，但后者会影响设备上运行的所有其他Android应用程序。更糟糕的是，我们发现了Android应用隔离、生命周期管理和访问控制机制中的严重缺陷，即使在显示广告的应用被移至后台或被用户终止后，这些机制也能实现持久的数据泄漏。此外，由于应用内广告可以“附带”应用核心功能的许可，它们也可以从受保护的传感器(如摄像头、麦克风和GPS)获取信息。为了对这一新兴威胁进行全面评估，我们对官方Android Play商店应用中显示的广告进行了大规模、端到端的动态分析。我们的研究表明，野外广告已经在访问和泄露从运动传感器获得的数据，因此强调了更严格的访问控制政策和隔离机制的必要性。",
        "title_zh": "这只狡猾的小猪去了安卓广告市场:滥用移动传感器进行秘密数据泄露",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2021.html",
        "conf_title": "27th CCS 2021: Virtual Event, Korea",
        "conf_url": "https://doi.org/10.1145/3460120",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3460120.3484774",
        "title": "Android on PC: On the Security of End-user Android Emulators",
        "authors": "Fenghao Xu, Siyu Shen, Wenrui Diao, Zhou Li, Yi Chen, Rui Li, Kehuan Zhang",
        "abstract": "Android emulators today are not only acting as a debugging tool for developers but also serving the massive end-users. These end-user Android emulators have attracted millions of users due to their advantages of running mobile apps on desktops and are especially appealing for mobile game players who demand larger screens and better performance. Besides, they commonly provide some customized assistant functionalities to improve the user experience, such as keyboard mapping and app installation from the host. To implement these services, emulators inevitably introduce communication channels between host OS and Android OS (in the Virtual Machine), thus forming a unique architecture which mobile phone does not have. However, it is unknown whether this architecture brings any new security risks to emulators. This paper performed a systematic study on end-user Android emulators and discovered a series of security flaws on communication channel authentication, permission control, and open interfaces. Attackers could exploit these flaws to bypass Android security mechanisms and escalate their privileges inside emulators, ultimately invading users' privacy, such as stealing valuable game accounts and credentials. To understand the impact of our findings, we studied six popular emulators and measured their flaws. The results showed that the issues are pervasive and could cause severe security consequences. We believe our work just shows the tip of the iceberg, and further research can be done to improve the security of this ecosystem.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "今天的Android模拟器不仅作为开发者的调试工具，也服务于大量的终端用户。这些终端用户Android模拟器因其在桌面上运行移动应用程序的优势而吸引了数百万用户，尤其对要求更大屏幕和更高性能的移动游戏玩家有吸引力。此外，它们通常提供一些定制的助手功能来改善用户体验，如键盘映射和从主机安装应用程序。为了实现这些服务，仿真器不可避免地在主机操作系统和Android操作系统之间引入通信通道(在虚拟机中)，从而形成手机所不具备的独特架构。但是，这种架构是否会给仿真器带来任何新的安全风险还是未知数。本文对终端用户Android模拟器进行了系统研究，发现其在通信通道认证、权限控制和开放接口等方面存在一系列安全缺陷。攻击者可以利用这些缺陷来绕过Android安全机制，并提升他们在模拟器中的权限，最终侵犯用户的隐私，例如窃取有价值的游戏帐户和凭据。为了理解我们的发现的影响，我们研究了六个流行的模拟器并测量了它们的缺陷。结果表明，这些问题普遍存在，可能会导致严重的安全后果。我们相信我们的工作只是展示了冰山一角，可以做进一步的研究来提高这个生态系统的安全性。",
        "title_zh": "PC上的Android:终端用户Android模拟器的安全性",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2021.html",
        "conf_title": "27th CCS 2021: Virtual Event, Korea",
        "conf_url": "https://doi.org/10.1145/3460120",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3460120.3484801",
        "title": "Ghost in the Binder: Binder Transaction Redirection Attacks in Android System Services",
        "authors": "Xiaobo Xiang, Ren Zhang, Hanxiang Wen, Xiaorui Gong, Baoxu Liu",
        "abstract": "Binder, the main mechanism for Android applications to access system services, adopts a client-server role model in its design, assuming the system service as the server and the application as the client. However, a growing number of scenarios require the system service to act as a Binder client and to send queries to a Binder server possibly instantiated by the application. Departing from this role-reversal possibility, this paper proposes the Binder Transaction Redirection (BiTRe) attacks, where the attacker induces the system service to transact with a customized Binder server and then attacks from the Binder server---an often unprotected direction. We demonstrate the scale of the attack surface by enumerating the utilizable Binder interfaces in BiTRe, and discover that the attack surface grows with the Android release version. In Android 11, more than 70% of the Binder interfaces are affected by or can be utilized in BiTRe. We prove the attacks' feasibility by (1) constructing a prototype system that can automatically generate executable programs to reach a substantial part of the attack surface, and (2) identifying a series of vulnerabilities, which are acknowledged by Google and assigned ten CVEs.",
        "files": {
            "openAccessPdf": "https://dl.acm.org/doi/pdf/10.1145/3460120.3484801"
        },
        "abstract_zh": "Android应用程序访问系统服务的主要机制Binder在设计上采用了客户端-服务器角色模型，假设系统服务为服务器，应用程序为客户端。然而，越来越多的场景要求系统服务充当绑定器客户端，并向可能由应用程序实例化的绑定器服务器发送查询。从这种角色互换的可能性出发，本文提出了Binder事务重定向(BiTRe)攻击，攻击者诱导系统服务与定制的Binder服务器进行事务处理，然后从Binder服务器发起攻击——这通常是一个不受保护的方向。我们通过列举BiTRe中可利用的绑定器接口来展示攻击面的规模，并发现攻击面随着Android发布版本而增长。在Android 11中，超过70%的Binder接口受到BiTRe的影响或可以在BiTRe中使用。我们通过以下方式证明了攻击的可行性:( 1)构建一个原型系统，该系统可以自动生成可执行程序以到达攻击面的大部分,( 2)识别一系列漏洞，这些漏洞被Google确认并分配了10个CVE。",
        "title_zh": "活页夹中的幽灵:Android系统服务中的活页夹事务重定向攻击",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2021.html",
        "conf_title": "27th CCS 2021: Virtual Event, Korea",
        "conf_url": "https://doi.org/10.1145/3460120",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3460120.3485374",
        "title": "Dissecting Residual APIs in Custom Android ROMs",
        "authors": "Zeinab El-Rewini, Yousra Aafer",
        "abstract": "Many classic software vulnerabilities (e.g., Heartbleed) are rooted in unused code. In this work, we aim to understand whether unused Android functionality may similarly open unnecessary attack opportunities. Our study focuses on OEM-introduced APIs, which are added and removed erratically through different device models and releases. This instability contributes to the production of bloated custom APIs, some of which may not even be used on a particular device. We call such unused APIs Residuals. In this work, we conduct the first large-scale investigation of custom Android Residuals to understand whether they may lead to access control vulnerabilities. Our investigation is driven by the intuition that it is challenging for vendor developers to ensure proper protection of Residuals. Since they are deemed unnecessary, Residuals are naturally overlooked during integration and maintenance. This is particularly exacerbated by the complexities of Android's ever-evolving access control mechanism. To facilitate the study at large, we propose a set of analysis techniques that detect and evaluate Residuals' access control enforcement. Our techniques feature a synergy between application and framework program analysis to recognize potential Residuals in specially curated ROM samples. The Residual implementations are then statically analyzed to detect potential evolution-induced access control vulnerabilities. Our study reveals that Residuals are prevalent among OEMs. More importantly, we find that their presence may even lead to security-critical vulnerabilities.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "许多经典软件漏洞(例如Heartbleed)都源于未使用的代码。在这项工作中，我们旨在了解未使用的Android功能是否会同样打开不必要的攻击机会。我们的研究集中于OEM引入的API，这些API通过不同的设备型号和版本被不规则地添加和删除。这种不稳定性导致了臃肿的定制API的产生，其中一些甚至不能在特定的设备上使用。我们称这种未使用的API为残余。在这项工作中，我们首次对定制Android残余进行了大规模调查，以了解它们是否可能导致访问控制漏洞。我们的调查是由直觉驱动的，即对于供应商开发人员来说，确保对残差的适当保护具有挑战性。因为残差被认为是不必要的，所以在集成和维护过程中自然会被忽略。Android不断发展的访问控制机制的复杂性尤其加剧了这种情况。为了便于研究，我们提出了一套检测和评估剩余访问控制执行的分析技术。我们的技术以应用程序和框架程序分析之间的协同作用为特征，以识别特别策划的ROM样本中的潜在残差。然后静态地分析剩余的实现，以检测潜在的由进化引起的访问控制漏洞。我们的研究表明，原始设备制造商中普遍存在残留。更重要的是，我们发现它们的存在甚至可能导致安全关键漏洞。",
        "title_zh": "剖析定制Android ROMs中的残余API",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2021.html",
        "conf_title": "27th CCS 2021: Virtual Event, Korea",
        "conf_url": "https://doi.org/10.1145/3460120",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3460120.3484582",
        "title": "With a Little Help from My Friends: Constructing Practical Anonymous Credentials",
        "authors": "Lucjan Hanzlik, Daniel Slamanig",
        "abstract": "Anonymous credentials (ACs) are a powerful cryptographic tool for the secure use of digital services, when simultaneously aiming for strong privacy guarantees of users combined with strong authentication guarantees for providers of services. They allow users to selectively prove possession of attributes encoded in a credential without revealing any other meaningful information about themselves. While there is a significant body of research on AC systems, modern use-cases of ACs such as mobile applications come with various requirements not sufficiently considered so far. These include preventing the sharing of credentials and coping with resource constraints of the platforms (e.g., smart cards such as SIM cards in smartphones). Such aspects are typically out of scope of AC constructions, and, thus AC systems that can be considered entirely practical have been elusive so far. In this paper we address this problem by introducing and formalizing the notion of core/helper anonymous credentials (CHAC). The model considers a constrained core device (e.g., a SIM card) and a powerful helper device (e.g., a smartphone). The key idea is that the core device performs operations that do not depend on the size of the credential or the number of attributes, but at the same time the helper device is unable to use the credential without its help. We present a provably secure generic construction of CHACs using a combination of signatures with flexible public keys (SFPK) and the novel notion of aggregatable attribute-based equivalence class signatures (AAEQ) along with a concrete instantiation. The key characteristics of our scheme are that the size of showing tokens is independent of the number of attributes in the credential(s) and that the core device only needs to compute a single elliptic curve scalar multiplication, regardless of the number of attributes. We confirm the practical efficiency of our CHACs with an implementation of our scheme on a Multos smart card as the core and an Android smartphone as the helper device. A credential showing requires less than 500 ms on the smart card and around 200 ms on the smartphone (even for a credential with 1000 attributes).",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "匿名证书(ACs)是安全使用数字服务的强大加密工具，同时旨在为用户提供强大的隐私保证，并为服务提供商提供强大的身份验证保证。它们允许用户有选择地证明拥有编码在凭证中的属性，而不暴露任何其他关于他们自己的有意义的信息。虽然有大量关于交流系统的研究，但交流系统的现代使用案例(如移动应用)有各种各样的要求，迄今尚未得到充分考虑。这些包括防止凭证共享和应对平台的资源限制(例如，智能卡，如智能手机中的SIM卡)。这些方面典型地超出了AC构造的范围，因此，可以被认为是完全实用的AC系统至今还难以捉摸。在本文中，我们通过引入和形式化核心/助手匿名证书(CHAC)的概念来解决这个问题。该模型考虑了受限的核心设备(例如，SIM卡)和强大的辅助设备(例如，智能手机)。关键思想是核心设备执行不依赖于凭证大小或属性数量的操作，但同时助手设备在没有其帮助的情况下不能使用凭证。我们提出了一个可证明安全的CHACs的一般构造，它使用了具有灵活公钥的签名(SFPK)和基于属性的等价类签名(AAEQ)的新概念以及一个具体的实例。我们的方案的关键特征是显示令牌的大小与凭证中属性的数量无关，并且核心设备只需要计算一次椭圆曲线标量乘法，而与属性的数量无关。我们以Multos智能卡为核心，Android智能手机为辅助设备，通过实现我们的方案来验证我们的CHACs的实际效率。凭据显示在智能卡上需要不到500毫秒，在智能手机上需要大约200毫秒(即使凭据具有1000个属性)。",
        "title_zh": "在朋友们的帮助下:构建实用的匿名凭证",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2021.html",
        "conf_title": "27th CCS 2021: Virtual Event, Korea",
        "conf_url": "https://doi.org/10.1145/3460120",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3460120.3485353",
        "title": "An Ontology-driven Knowledge Graph for Android Malware",
        "authors": "Christian Ryan, Sharmishtha Dutta, Youngja Park, Nidhi Rastogi",
        "abstract": "We present MalONT2.0 -- an ontology for malware threat intelligence [4]. New classes (attack patterns, infrastructural resources to enable attacks, malware analysis to incorporate static analysis, and dynamic analysis of binaries) and relations have been added following a broadened scope of core competency questions. MalONT2.0 allows researchers to extensively capture all requisite classes and relations that gather semantic and syntactic characteristics of an android malware attack. This ontology forms the basis for the malware threat intelligence knowledge graph, MalKG, which we exemplify using three different, non-overlapping demonstrations. Malware features have been extracted from openCTI reports on android threat intelligence shared on the Internet and written in the form of unstructured text. Some of these sources are blogs, threat intelligence reports, tweets, and news articles. The smallest unit of information that captures malware features is written as triples comprising head and tail entities, each connected with a relation. In the poster and demonstration, we discuss MalONT2.0 and MalKG.",
        "files": {
            "openAccessPdf": "http://arxiv.org/pdf/2109.01544"
        },
        "abstract_zh": "我们提出MalONT2.0 -恶意软件威胁情报的本体[4]。随着核心能力问题范围的扩大，增加了新的类别(攻击模式、支持攻击的基础设施资源、包含静态分析的恶意软件分析以及二进制文件的动态分析)和关系。MalONT2.0允许研究人员广泛地捕获所有必要的类和关系，以收集android恶意软件攻击的语义和语法特征。这个本体形成了恶意软件威胁情报知识图MalKG的基础，我们使用三个不同的、非重叠的演示来举例说明。恶意软件特征是从互联网上分享的关于android威胁情报的openCTI报告中提取的，并以非结构化文本的形式编写。这些来源包括博客、威胁情报报告、推文和新闻文章。捕获恶意软件特征的最小信息单元被写成由头部和尾部实体组成的三元组，每个实体与一个关系相连接。在海报和演示中，我们讨论MalONT2.0和MalKG。",
        "title_zh": "一种本体驱动的Android恶意软件知识图",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2021.html",
        "conf_title": "27th CCS 2021: Virtual Event, Korea",
        "conf_url": "https://doi.org/10.1145/3460120",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3460120.3484536",
        "title": "Consistency Analysis of Data-Usage Purposes in Mobile Apps",
        "authors": "Duc Bui, Yuan Yao, Kang G. Shin, Jong-Min Choi, Junbum Shin",
        "abstract": "While privacy laws and regulations require apps and services to disclose the purposes of their data collection to the users (i.e., why do they collect my data?), the data usage in an app's actual behavior does not always comply with the purposes stated in its privacy policy. Automated techniques have been proposed to analyze apps' privacy policies and their execution behavior, but they often overlooked the purposes of the apps' data collection, use and sharing. To mitigate this oversight, we propose PurPliance, an automated system that detects the inconsistencies between the data-usage purposes stated in a natural language privacy policy and those of the actual execution behavior of an Android app. PurPliance analyzes the predicate-argument structure of policy sentences and classifies the extracted purpose clauses into a taxonomy of data purposes. Purposes of actual data usage are inferred from network data traffic. We propose a formal model to represent and verify the data usage purposes in the extracted privacy statements and data flows to detect policy contradictions in a privacy policy and flow-to-policy inconsistencies between network data flows and privacy statements. Our evaluation results of end-to-end contradiction detection have shown PurPliance to improve detection precision from 19% to 95% and recall from 10% to 50% compared to a state-of-the-art method. Our analysis of 23.1k Android apps has also shown PurPliance to detect contradictions in 18.14% of privacy policies and flow-to-policy inconsistencies in 69.66% of apps, indicating the prevalence of inconsistencies of data practices in mobile apps.",
        "files": {
            "openAccessPdf": "https://dl.acm.org/doi/pdf/10.1145/3460120.3484536"
        },
        "abstract_zh": "虽然隐私法律和法规要求应用程序和服务向用户披露其数据收集的目的(即，他们为什么收集我的数据？)，应用程序实际行为中的数据使用并不总是符合其隐私政策中规定的目的。有人提出了自动化技术来分析应用程序的隐私政策及其执行行为，但它们往往忽略了应用程序数据收集、使用和共享的目的。为了减轻这种疏忽，我们提出了PurPliance，这是一个自动系统，可以检测自然语言隐私政策中声明的数据使用目的和Android应用程序实际执行行为之间的不一致。PurPliance分析策略语句的谓词-论元结构，并将提取的目的子句分类到数据目的的分类中。实际数据使用的目的是从网络数据流量中推断出来的。我们提出了一种形式化模型来表示和验证提取的隐私声明和数据流中的数据使用目的，以检测隐私策略中的策略矛盾以及网络数据流和隐私声明之间的流到策略不一致。我们对端到端矛盾检测的评估结果表明，与最先进的方法相比，检测精度从19%提高到95%,召回率从10%提高到50%。我们对23.1k Android应用程序的分析还显示，18.14%的应用程序中检测到隐私政策的矛盾，69.66%的应用程序中检测到流程与政策的不一致，这表明移动应用程序中普遍存在数据实践的不一致。",
        "title_zh": "移动应用中数据使用目的的一致性分析",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2021.html",
        "conf_title": "27th CCS 2021: Virtual Event, Korea",
        "conf_url": "https://doi.org/10.1145/3460120",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3460120.3484544",
        "title": "Towards Transparent and Stealthy Android OS Sandboxing via Customizable Container-Based Virtualization",
        "authors": "Wenna Song, Jiang Ming, Lin Jiang, Yi Xiang, Xuanchen Pan, Jianming Fu, Guojun Peng",
        "abstract": "A fast-growing demand from smartphone users is mobile virtualization.This technique supports running separate instances of virtual phone environments on the same device. In this way, users can run multiple copies of the same app simultaneously,and they can also run an untrusted app in an isolated virtual phone without causing damages to other apps. Traditional hypervisor-based virtualization is impractical to resource-constrained mobile devices.Recent app-level virtualization efforts suffer from the weak isolation mechanism. In contrast, container-based virtualization offers an isolated virtual environment with superior performance.However, existing Android containers do not meet the anti-evasion requirement for security applications: their designs are inherently incapable of providing transparency or stealthiness. In this paper, we present VPBox, a novel Android OS-level sandbox framework via container-based virtualization. We integrate the principle of anti-virtual-machine detection into VPBox's design from two aspects.First, we improve the state-of-the-art Android container work significantly for transparency.We are the first to offer complete device virtualization on mainstream Android versions.To minimize the fingerprints of VPBox's presence, we enable all virtualization components (i.e., kernel-level device and user level device virtualization) to be executed outside of virtual phones (VPs).Second, we offer new functionality that security analysts can customize device artifacts (e.g., phone model, kernel version, and hardware profiles) without user-level hooking. This capability prevents the tested apps from detecting the particular mobile device (e.g., Google Pixel phone) that runs an Android container.Our performance evaluation on five VPs shows that VPBox runs different benchmark apps at native speed.Compared with other Android sandboxes, VPBox is the only one that can bypass a set of virtual environment detection heuristics. At last, we demonstrate VPBox's flexibility in testing environment-sensitive malware that tries to evade sandboxes.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "智能手机用户快速增长的需求是移动虚拟化。这种技术支持在同一设备上运行不同的虚拟电话环境实例。通过这种方式，用户可以同时运行同一应用的多个副本，也可以在隔离的虚拟手机中运行不可信的应用，而不会对其他应用造成损害。传统的基于虚拟机管理程序的虚拟化对于资源受限的移动设备来说不切实际。最近的应用级虚拟化努力受到弱隔离机制的影响。相比之下，基于容器的虚拟化提供了一个性能卓越的隔离虚拟环境。然而，现有的Android容器不符合安全应用程序的反规避要求:它们的设计天生无法提供透明性或隐秘性。在本文中，我们通过基于容器的虚拟化提出了一种新的Android操作系统级沙盒框架VPBox。我们从两个方面将反虚拟机检测的原理融入到VPBox的设计中。首先，我们显著改进了最先进的Android容器工作，以提高透明度。我们率先在主流Android版本上提供完整的设备虚拟化。为了最大限度地减少VPBox的存在，我们允许所有虚拟化组件(即内核级设备和用户级设备虚拟化)在虚拟电话(VP)之外执行。其次，我们提供了新的功能，安全分析师可以定制设备工件(例如，手机型号、内核版本和硬件配置文件)，而无需用户级挂钩。这种功能可以防止测试的应用程序检测到运行Android容器的特定移动设备(例如，Google Pixel phone)。我们在五个虚拟处理器上的性能评估显示，VPBox以本机速度运行不同的基准应用程序。与其他Android沙盒相比，VPBox是唯一一个可以绕过一套虚拟环境检测试探法的沙盒。最后，我们展示了VPBox在测试试图规避沙箱的环境敏感型恶意软件方面的灵活性。",
        "title_zh": "通过可定制的基于容器的虚拟化实现透明和隐秘的Android操作系统沙箱",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2021.html",
        "conf_title": "27th CCS 2021: Virtual Event, Korea",
        "conf_url": "https://doi.org/10.1145/3460120",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3460120.3485387",
        "title": "Structural Attack against Graph Based Android Malware Detection",
        "authors": "Kaifa Zhao, Hao Zhou, Yulin Zhu, Xian Zhan, Kai Zhou, Jianfeng Li, Le Yu, Wei Yuan, Xiapu Luo",
        "abstract": "Malware detection techniques achieve great success with deeper insight into the semantics of malware. Among existing detection techniques, function call graph (FCG) based methods achieve promising performance due to their prominent representations of malware's functionalities. Meanwhile, recent adversarial attacks not only perturb feature vectors to deceive classifiers (i.e., feature-space attacks) but also investigate how to generate real evasive malware (i.e., problem-space attacks). However, existing problem-space attacks are limited due to their inconsistent transformations between feature space and problem space. In this paper, we propose the first structural attack against graph-based Android malware detection techniques, which addresses the inverse-transformation problem [1] between feature-space attacks and problem-space attacks. We design a Heuristic optimization model integrated with Reinforcement learning framework to optimize our structural ATtack (HRAT). HRAT includes four types of graph modifications (i.e., inserting and deleting nodes, adding edges and rewiring) that correspond to four manipulations on apps (i.e., inserting and deleting methods, adding call relation, rewiring). Through extensive experiments on over 30k Android apps, HRAT demonstrates outstanding attack performance on both feature space (over 90% attack success rate) and problem space (up to 100% attack success rate in most cases). Besides, the experiment results show that combing multiple attack behaviors strategically makes the attack more effective and efficient.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "随着对恶意软件语义的深入了解，恶意软件检测技术取得了巨大成功。在现有的检测技术中，基于函数调用图(FCG)的方法由于其对恶意软件功能的突出表现而获得了有希望的性能。同时，最近的对抗性攻击不仅扰乱特征向量以欺骗分类器(即特征空间攻击)，而且研究如何生成真正的规避恶意软件(即问题空间攻击)。然而，现有的问题空间攻击由于它们在特征空间和问题空间之间的不一致转换而受到限制。在本文中，我们针对基于图的Android恶意软件检测技术提出了第一个结构化攻击，它解决了特征空间攻击和问题空间攻击之间的逆变换问题[1]。我们设计了一个与强化学习框架相结合的启发式优化模型来优化我们的结构攻击(HRAT)。HRAT包括四种类型的图形修改(即插入和删除节点、添加边和重新布线)，对应于应用程序上的四种操作(即插入和删除方法、添加调用关系、重新布线)。通过在超过3万个Android应用上的大量实验，HRAT在特征空间(超过90%的攻击成功率)和问题空间(大多数情况下高达100%的攻击成功率)上都表现出了出色的攻击性能。此外，实验结果表明，多种攻击行为的策略组合使得攻击更加有效和高效。",
        "title_zh": "基于图的Android恶意软件检测的结构化攻击",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2021.html",
        "conf_title": "27th CCS 2021: Virtual Event, Korea",
        "conf_url": "https://doi.org/10.1145/3460120",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3548606.3559388",
        "title": "Understanding Real-world Threats to Deep Learning Models in Android Apps",
        "authors": "Zizhuang Deng, Kai Chen, Guozhu Meng, Xiaodong Zhang, Ke Xu, Yao Cheng",
        "abstract": "Famous for its superior performance, deep learning (DL) has been popularly used within many applications, which also at the same time attracts various threats to the models. One primary threat is from adversarial attacks. Researchers have intensively studied this threat for several years and proposed dozens of approaches to create adversarial examples (AEs). But most of the approaches are only evaluated on limited models and datasets (e.g., MNIST, CIFAR-10). Thus, the effectiveness of attacking real-world DL models is not quite clear. In this paper, we perform the first systematic study of adversarial attacks on real-world DNN models and provide a real-world model dataset named RWM. Particularly, we design a suite of approaches to adapt current AE generation algorithms to the diverse real-world DL models, including automatically extracting DL models from Android apps, capturing the inputs and outputs of the DL models in apps, generating AEs and validating them by observing the apps' execution. For black-box DL models, we design a semantic-based approach to build suitable datasets and use them for training substitute models when performing transfer-based attacks. After analyzing 245 DL models collected from 62,583 real-world apps, we have a unique opportunity to understand the gap between real-world DL models and contemporary AE generation algorithms. To our surprise, the current AE generation algorithms can only directly attack 6.53% of the models. Benefiting from our approach, the success rate upgrades to 47.35%.",
        "files": {
            "openAccessPdf": "https://dl.acm.org/doi/pdf/10.1145/3548606.3559388"
        },
        "abstract_zh": "深度学习以其优越的性能而闻名，在许多应用中得到了广泛的应用，同时也吸引了各种对模型的威胁。一个主要威胁来自对抗性攻击。研究人员对这种威胁进行了数年的深入研究，并提出了数十种创建对抗性实例(AEs)的方法。但是大多数方法仅在有限的模型和数据集上进行评估(例如，MNIST、CIFAR-10)。因此，攻击真实世界DL模型的有效性并不十分清楚。在本文中，我们对真实世界的DNN模型进行了首次系统的攻击研究，并提供了一个名为RWM的真实世界模型数据集。特别是，我们设计了一套方法来使当前的AE生成算法适应不同的现实世界DL模型，包括从Android应用程序中自动提取DL模型，捕获应用程序中DL模型的输入和输出，生成AE并通过观察应用程序的执行来验证它们。对于黑盒DL模型，我们设计了一种基于语义的方法来建立合适的数据集，并在执行基于转移的攻击时使用它们来训练替代模型。在分析了从62，583个现实世界应用中收集的245个DL模型后，我们有一个独特的机会来了解现实世界DL模型和当代AE生成算法之间的差距。让我们惊讶的是，目前的AE生成算法只能直接攻击6.53%的模型。受益于我们的方法，成功率提升到47.35%。",
        "title_zh": "了解Android应用中深度学习模型的现实威胁",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2022.html",
        "conf_title": "28th CCS 2022: Los Angeles, CA, USA",
        "conf_url": "https://doi.org/10.1145/3548606",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3548606.3560666",
        "title": "Watch Out for Race Condition Attacks When Using Android External Storage",
        "authors": "Shaoyong Du, Xin Liu, Guoqing Lai, Xiangyang Luo",
        "abstract": "Currently, in Android, applications (apps for short) rely heavily on external storage to provide their services. Race conditions are introduced by the inappropriate file operations. Through race conditions, the malicious app can manipulate the file content and induce the victim app to perform unexpected actions, which we callrace condition attack. Race condition attack can cause a series of security problems and prior work has already implemented some of them. From Android 10, Google has introduced scoped storage to defend against attacks based on external storage. However, considering current market shares of different Android versions, it is still a long way to have scoped storage deployed on each device. To protect current users from this kind of attack, it is essential to raise app developers' security awareness. Therefore, we conduct a comprehensive survey on race condition attack to learn about its current status over Android apps. We propose an analysis engine, named RECAST, which gathers file operation events on external storage and infers the associated file operation processes. With RECAST, we collect 5,359,339 file operation events over 105,963 files. From the analysis result, we find that, with the limited kinds of events, a tremendous number of unique file operating patterns (1,977) are constituted. Over these file operating patterns, the time window is much common and available to launch a series of attacks (94.26% of the tested files are vulnerable to this problem). Consequently, race condition attack has become a non-negligible issue for app developers when using Android external storage.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "目前，在Android中，应用程序(简称为apps)严重依赖外部存储来提供服务。不适当的文件操作引入了竞争条件。通过竞争条件，恶意应用程序可以操纵文件内容，并诱导受害应用程序执行意外操作，我们称之为竞争条件攻击。竞争条件攻击会导致一系列的安全问题，先前的工作已经实现了其中的一些。从Android 10开始，谷歌引入了作用域存储来抵御基于外部存储的攻击。然而，考虑到不同Android版本的当前市场份额，要在每个设备上部署范围存储还有很长的路要走。为了保护当前用户免受这种攻击，提高应用程序开发人员的安全意识至关重要。因此，我们对竞争条件攻击进行了全面的调查，以了解其在Android应用程序中的现状。我们提出了一个名为RECAST的分析引擎，它收集外部存储上的文件操作事件，并推断相关的文件操作过程。使用RECAST，我们在105，963个文件中收集了5，359，339个文件操作事件。从分析结果中，我们发现有限种类的事件构成了大量独特的文件操作模式(1977)。在这些文件操作模式中，时间窗口非常常见，可用于发起一系列攻击(94.26%的测试文件易受此问题攻击)。因此，竞争条件攻击已经成为应用程序开发人员在使用Android外部存储时不可忽视的问题。",
        "title_zh": "使用Android外部存储时，请小心竞争条件攻击",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2022.html",
        "conf_title": "28th CCS 2022: Los Angeles, CA, USA",
        "conf_url": "https://doi.org/10.1145/3548606",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3548606.3560710",
        "title": "Poirot: Probabilistically Recommending Protections for the Android Framework",
        "authors": "Zeinab El-Rewini, Zhuo Zhang, Yousra Aafer",
        "abstract": "Inconsistent security policy enforcement within the Android framework can allow malicious actors to improperly access sensitive resources. A number of prominent inconsistency detection approaches have been proposed in and across various layers of the Android operating system. However, the existing approaches suffer from high false positive rates as they rely solely on simplistic convergence analysis and reachability based relations to reason about the validity of access control enforcement. We observe that resource-to-access control associations are highly uncertain in the context of Android. Thus, we introduce Poirot, a next-generation inconsistency detection tool that leverages probabilistic inference to generate a comprehensive set of protection recommendations for Android framework APIs. We evaluate Poirot on four Android images and detect 26 total inconsistencies.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android框架内不一致的安全策略实施会允许恶意行为者不正当地访问敏感资源。在Android操作系统的各层中以及跨各层已经提出了许多显著的不一致性检测方法。然而，现有的方法遭受高的假阳性率，因为它们仅仅依靠简单的收敛分析和基于可达性的关系来推理访问控制实施的有效性。我们观察到，在Android环境中，资源到访问控制的关联是高度不确定的。因此，我们引入了下一代不一致性检测工具波洛，它利用概率推理为Android框架API生成一套全面的保护建议。我们在四个机器人图像上评估了波洛，发现了26处不一致之处。",
        "title_zh": "波洛:概率上建议保护Android框架",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2022.html",
        "conf_title": "28th CCS 2022: Los Angeles, CA, USA",
        "conf_url": "https://doi.org/10.1145/3548606",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3548606.3559371",
        "title": "Collect Responsibly But Deliver Arbitrarily?: A Study on Cross-User Privacy Leakage in Mobile Apps",
        "authors": "Shuai Li, Zhemin Yang, Nan Hua, Peng Liu, Xiaohan Zhang, Guangliang Yang, Min Yang",
        "abstract": "Recent years have witnessed the interesting trend that modern mobile apps perform more and more likely as user-to-user platforms, where app users can be freely and conveniently connected. Upon these platforms, rich and diverse data is often delivered across users, which brings users great conveniences and plentiful services, but also introduces privacy security concerns. While prior work has primarily studied illegitimate personal data collection problems in mobile apps, few paid little attention to the security of this emerging user-to-user platform feature, thus providing a rather limited understanding of the privacy risks in this aspect. In this paper, we focus on the security of the user-to-user platform feature and shed light on its caused insufficiently-studied but critical privacy risk, which is brought forward by cross-user personal data over-delivery (denoted as XPO). For the first time, this paper reveals the landscape of such XPO risk in wild, along with prevalence and severity assessment. To achieve this, we design a novel automated risk detection framework, named XPOChecker, that leverages the advantages of machine learning and program analysis to extensively and precisely identify potential privacy risks during user-to-user connections, and regulate whether the delivered data is legitimate or not. By applying XPOChecker on 13,820 real-world popular Android apps, we find that XPO is prevalent in practice, with 1,902 apps (13.76%) being affected. In addition to the mere exposure of diverse private user data which causes serious and broad privacy infringement, we demonstrate that the XPO exploits can invalidate privacy preservation mechanisms, leak business secrets, and even restore the sensitive membership of victims which potentially poses personal safety threats. Furthermore, we also confirm the existence of XPO risks in iOS apps for the first time. Last, to help understand and prevent XPO, we have responsibly launched two notification campaigns to inform the developers of the affected apps, with the conclusion of five underlying lessons from developers' feedback. We hope our work can make up for the deficiency of the understandings of XPO, help developers avoid XPO, and motivate further researches.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "近年来见证了一个有趣的趋势，即现代移动应用越来越像用户对用户的平台，应用用户可以自由方便地连接。在这些平台上，丰富多样的数据经常在用户之间传递，这给用户带来了极大的便利和丰富的服务，但也带来了隐私安全问题。虽然之前的工作主要研究了移动应用中的非法个人数据收集问题，但很少有人关注这种新兴的用户对用户平台功能的安全性，因此对这方面的隐私风险的理解相当有限。在本文中，我们关注用户对用户平台特性的安全性，并揭示其引起的未被充分研究但非常重要的隐私风险，这种风险是由跨用户个人数据过度传递(表示为XPO)引起的。这篇论文第一次揭示了这种XPO风险在野外的情况，以及患病率和严重性评估。为了实现这一点，我们设计了一种新的自动化风险检测框架，名为XPOChecker，它利用机器学习和程序分析的优势，在用户到用户的连接过程中广泛而精确地识别潜在的隐私风险，并监管交付的数据是否合法。通过对13，820个现实世界中流行的Android应用程序应用XPOChecker，我们发现XPO在实践中普遍存在，有1，902个应用程序(13.76%)受到影响。除了导致严重和广泛的隐私侵犯的各种私人用户数据的暴露之外，我们还证明了XPO利用可以使隐私保护机制无效，泄露商业秘密，甚至恢复受害者的敏感成员资格，这可能会造成人身安全威胁。此外，我们还首次证实了iOS应用中XPO风险的存在。最后，为了帮助理解和预防XPO，我们负责任地发起了两次通知活动，通知开发者受影响的应用，并从开发者的反馈中总结了五条基本经验。我们希望我们的工作能够弥补对XPO认识的不足，帮助开发者避免XPO，并激励进一步的研究。",
        "title_zh": "负责任的收却随意的送？移动应用中跨用户隐私泄露的研究",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2022.html",
        "conf_title": "28th CCS 2022: Los Angeles, CA, USA",
        "conf_url": "https://doi.org/10.1145/3548606",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3548606.3560572",
        "title": "Overo: Sharing Private Audio Recordings",
        "authors": "Jaemin Lim, Kiyeon Kim, Hyunwoo Yu, Suk-Bok Lee",
        "abstract": "The use of smartphones as voice recorders has made it easy to record audios as proof of conversations, but sharing of such audio evidence incurs speech and voice privacy risks. However, protecting speech/voice privacy without losing audio authenticity is challenging. The conventional post-process redaction and voice conversion of audio recordings, which invalidate their original signatures, make the audio unverifiable and prone to tampering. In this paper, we present Overo, an audio recording/sharing solution that supports privacy processing without losing audio authenticity. Overo records a realtime audio stream in the standard AAC-encoded format and allows privacy post-processing prior to sharing of audios while keeping their original signatures valid (even after the post redaction and voice conversion), guaranteeing no tampering since the time of their recording. Therefore, users can post-process their recordings to desired levels of privacy on speech (what content to redact) and speakers (whose voice to disguise) at the time of audio release, and still prove their authenticity. Overo is readily implementable in today's commodity smartphones. Our prototype on iPhones/Android phones demonstrates the production of AAC-compliant, tamperproof, and self-authenticating audios with speech/voice privacy protected based on users' post-recording decisions.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "使用智能手机作为语音记录器使得记录音频作为对话的证据变得很容易，但分享这种音频证据会带来语音和声音隐私风险。然而，在不损失音频真实性的情况下保护语音隐私是具有挑战性的。音频记录的常规后处理编辑和语音转换使其原始签名无效，使得音频不可验证并且易于被篡改。在本文中，我们介绍了Overo，这是一个音频录制/共享解决方案，它支持隐私处理，而不会丢失音频真实性。Overo以标准AAC编码格式录制实时音频流，并允许在共享音频之前进行隐私后处理，同时保持其原始签名有效(即使在后期编辑和语音转换之后)，保证自录制之时起没有篡改。因此，用户可以在音频发布时对他们的录音进行后处理，以达到所需的语音(编辑什么内容)和说话者(伪装谁的声音)隐私级别，并仍然可以证明其真实性。Overo很容易在今天的商用智能手机中实现。我们在iphone/Android手机上的原型演示了AAC兼容、防篡改和自我认证音频的制作，并根据用户的录音后决策保护语音/声音隐私。",
        "title_zh": "Overo:共享私人录音",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2022.html",
        "conf_title": "28th CCS 2022: Los Angeles, CA, USA",
        "conf_url": "https://doi.org/10.1145/3548606",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3548606.3560564",
        "title": "Freely Given Consent?: Studying Consent Notice of Third-Party Tracking and Its Violations of GDPR in Android Apps",
        "authors": "Trung Tin Nguyen, Michael Backes, Ben Stock",
        "abstract": "Adopted in May 2018, the European Union's General Data Protection Regulation (GDPR) requires the consent for processing users' personal data to be freely given, specific, informed, and unambiguous. While prior work has shown that this often is not given through automated network traffic analysis, no research has systematically studied how consent notices are currently implemented and whether they conform to GDPR in mobile apps. To close this research gap, we perform the first large-scale study into consent notices for third-party tracking in Android apps to understand the current practices and the current state of GDPR's consent violations. Specifically, we propose a mostly automated and scalable approach to identify the currently implemented consent notices and apply it to a set of 239,381 Android apps. As a result, we recognize four widely implemented mechanisms to interact with the consent user interfaces from 13,082 apps. We then develop a tool that automatically detects users' personal data sent out to the Internet with different consent conditions based on the identified mechanisms. Doing so, we find 30,160 apps do not even attempt to implement consent notices for sharing users' personal data with third-party data controllers, which mandate explicit consent under GDPR. In contrast, out of 13,082 apps implemented consent notices, we identify 2,688 (20.54%) apps violate at least one of the GDPR consent requirements, such as trying to deceive users into accepting all data sharing or even continuously transmitting data when users have explicitly opted out. To allow developers to address the problems, we send emails to notify affected developers and gather insights from their responses. Our study shows the urgent need for more transparent processing of personal data and supporting developers in this endeavor to comply with legislation, ensuring users can make free and informed choices regarding their data.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "2018年5月通过的欧盟通用数据保护条例(GDPR)要求对处理用户个人数据的同意必须是自由、具体、知情和明确的。虽然之前的工作表明这通常不是通过自动网络流量分析给出的，但是没有研究系统地研究同意通知当前是如何实施的，以及它们是否符合移动应用中的GDPR。为了填补这一研究空白，我们对Android应用中的第三方跟踪同意通知进行了首次大规模研究，以了解当前的做法和GDPR违反同意的现状。具体来说，我们提出了一种自动化和可扩展的方法来识别当前实现的同意通知，并将其应用于一组239，381个Android应用程序。因此，我们认识到有四种广泛实施的机制可以与来自13，082个应用程序的同意用户界面进行交互。然后，我们开发了一个工具，可以根据已识别的机制，自动检测用户在不同同意条件下发送到互联网的个人数据。我们发现，在与第三方数据控制者共享用户个人数据时，有30，160个应用甚至没有尝试执行同意通知，根据GDPR，这需要明确同意。相比之下，在13，082个实施同意通知的应用中，我们发现2，688个(20.54%)应用违反了至少一项GDPR同意要求，例如试图欺骗用户接受所有数据共享，甚至在用户明确选择退出时继续传输数据。为了让开发人员解决问题，我们会发送电子邮件通知受影响的开发人员，并从他们的回复中收集见解。我们的研究表明，迫切需要更透明的个人数据处理，并支持开发者努力遵守法律，确保用户可以对其数据做出自由和知情的选择。",
        "title_zh": "自愿同意？:研究Android应用中第三方跟踪的同意通知及其违反GDPR的情况",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2022.html",
        "conf_title": "28th CCS 2022: Los Angeles, CA, USA",
        "conf_url": "https://doi.org/10.1145/3548606",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3548606.3560665",
        "title": "Hidden in Plain Sight: Exploring Encrypted Channels in Android Apps",
        "authors": "Sajjad Pourali, Nayanamana Samarasinghe, Mohammad Mannan",
        "abstract": "As privacy features in Android operating system improve, privacy-invasive apps may gradually shift their focus to non-standard and covert channels for leaking private user/device information. Such leaks also remain largely undetected by state-of-the-art privacy analysis tools, which are very effective in uncovering privacy exposures via regular HTTP and HTTPS channels. In this study, we design and implement, ThirdEye, to significantly extend the visibility of current privacy analysis tools, in terms of the exposures that happen across various non-standard and covert channels, i.e., via any protocol over TCP/UDP (beyond HTTP/S), and using multi-layer custom encryption over HTTP/S and non-HTTP protocols. Besides network exposures, we also consider covert channels via storage media that also leverage custom encryption layers. Using ThirdEye, we analyzed 12,598 top-apps in various categories from Androidrank, and found that 2887/12,598 (22.92%) apps used custom encryption/decryption for network transmission and storing content in shared device storage, and 2465/2887 (85.38%) of those apps sent device information (e.g., advertising ID, list of installed apps) over the network that can fingerprint users. Besides, 299 apps transmitted insecure encrypted content over HTTP/non-HTTP protocols; 22 apps that used authentication tokens over HTTPS, happen to expose them over insecure (albeit custom encrypted) HTTP/non-HTTP channels. We found non-standard and covert channels with multiple levels of obfuscation (e.g., encrypted data over HTTPS, encryption at nested levels), and the use of vulnerable keys and cryptographic algorithms. Our findings can provide valuable insights into the evolving field of non-standard and covert channels, and help spur new countermeasures against such privacy leakage and security issues.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "随着Android操作系统中隐私功能的改善，侵犯隐私的应用程序可能会逐渐将注意力转移到泄露私人用户/设备信息的非标准和隐蔽渠道。这种泄漏在很大程度上仍未被最先进的隐私分析工具检测到，这些工具在通过常规HTTP和HTTPS渠道发现隐私暴露方面非常有效。在本研究中，我们设计并实现了ThirdEye，以显著扩展当前隐私分析工具的可见性，即在各种非标准和隐蔽通道上发生的暴露，即通过TCP/UDP上的任何协议(HTTP/S之外)，以及在HTTP/S和非HTTP协议上使用多层自定义加密。除了网络暴露，我们还考虑了通过存储介质的隐蔽通道，这些通道也利用了自定义加密层。使用ThirdEye，我们分析了Androidrank的12，598个不同类别的热门应用程序，发现2887/12，598 (22.92%)个应用程序使用自定义加密/解密进行网络传输并将内容存储在共享设备存储中，其中2465/2887 (85.38%)个应用程序通过网络发送设备信息(如广告ID、已安装应用程序列表)，可以对用户进行指纹识别。此外，299个应用程序通过HTTP/非HTTP协议传输不安全的加密内容；22个通过HTTPS使用身份验证令牌的应用程序碰巧通过不安全的(尽管是自定义加密的)HTTP/非HTTP通道暴露了它们。我们发现了具有多级模糊处理(例如，HTTPS上的加密数据、嵌套级加密)的非标准和隐蔽通道，以及易受攻击的密钥和加密算法的使用。我们的发现可以为不断发展的非标准和隐蔽渠道领域提供有价值的见解，并有助于刺激针对此类隐私泄露和安全问题的新对策。",
        "title_zh": "隐藏在众目睽睽之下:探索Android应用程序中的加密频道",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2022.html",
        "conf_title": "28th CCS 2022: Los Angeles, CA, USA",
        "conf_url": "https://doi.org/10.1145/3548606",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3548606.3560607",
        "title": "Detecting and Measuring Misconfigured Manifests in Android Apps",
        "authors": "Yuqing Yang, Mohamed Elsabagh, Chaoshun Zuo, Ryan Johnson, Angelos Stavrou, Zhiqiang Lin",
        "abstract": "The manifest file of an Android app is crucial for app security as it declares sensitive app configurations, such as access permissions required to access app components. Surprisingly, we noticed a number of widely-used apps (some with over 500 million downloads) containing misconfigurations in their manifest files that can result in severe security issues. This paper presents ManiScope, a tool to automatically detect misconfigurations of manifest files when given an Android APK. The key idea is to build a manifest XML Schema by extracting ManiScope constraints from the manifest documentation with novel domain-aware NLP techniques and rules, and validate manifest files against the schema to detect misconfigurations. We have implemented ManiScope, with which we have identified 609,428 (33.20%) misconfigured Android apps out of 1,853,862 apps from Google Play, and 246,658 (35.64%) misconfigured ones out of 692,106 pre-installed apps from 4,580 Samsung firmwares, respectively. Among them, 84,117 (13.80%) of misconfigured Google Play apps and 56,611 (22.95%) of misconfigured pre-installed apps have various security implications including app defrauding, message spoofing, secret data leakage, and component hijacking.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android应用程序的清单文件对于应用程序的安全性至关重要，因为它声明了敏感的应用程序配置，例如访问应用程序组件所需的访问权限。令人惊讶的是，我们注意到许多广泛使用的应用程序(有些下载量超过5亿次)在其清单文件中包含错误配置，这可能会导致严重的安全问题。本文介绍了ManiScope，这是一个在给定Android APK时自动检测清单文件错误配置的工具。主要思想是通过使用新颖的领域感知NLP技术和规则从清单文档中提取ManiScope约束来构建清单XML模式，并根据模式验证清单文件以检测错误配置。我们已经实施了ManiScope，使用它我们分别从Google Play的1，853，862个应用程序中识别出609，428个(33.20%)配置错误的Android应用程序，从4，580个三星固件的692，106个预装应用程序中识别出246，658个(35.64%)配置错误的应用程序。其中，84，117个(13.80%)错误配置的Google Play应用和56，611个(22.95%)错误配置的预装应用存在各种安全隐患，包括应用欺诈、消息欺骗、秘密数据泄露和组件劫持。",
        "title_zh": "检测和测量Android应用中的错误配置清单",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2022.html",
        "conf_title": "28th CCS 2022: Los Angeles, CA, USA",
        "conf_url": "https://doi.org/10.1145/3548606",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3548606.3560601",
        "title": "Uncovering Intent based Leak of Sensitive Data in Android Framework",
        "authors": "Hao Zhou, Xiapu Luo, Haoyu Wang, Haipeng Cai",
        "abstract": "To prevent unauthorized apps from retrieving the sensitive data, Android framework enforces a permission based access control. However, it has long been known that, to bypass the access control, unauthorized apps can intercept the Intent objects which are sent by authorized apps and carry the retrieved sensitive data. We find that there is a new (previously unknown) attack surface in Android framework that can be exploited by unauthorized apps to violate the access control. Specifically, we discover that part of Intent objects that are sent by Android framework and carry sensitive data can be received by unauthorized apps, resulting in the leak of sensitive data. In this paper, we conduct the first systematic investigation on the new attack surface namely the Intent based leak of sensitive data in Android framework. To automatically uncover such kind of vulnerability in Android framework, we design and develop a new tool named LeakDetector, which finds the Intent objects sent by Android framework that can be received by unauthorized apps and carry the sensitive data. Applying LeakDetector to 10 commercial Android systems, we find that it can effectively uncover the Intent based leak of sensitive data in Android framework. Specifically, we discover 36 exploitable cases of such kind of data leak, which can be abused by unauthorized apps to steal the sensitive data, violating the access control. At the time of writing, 16 of them have been confirmed by Google, Samsung, and Xiaomi, and we received bug bounty rewards from these mobile vendors.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "为了防止未经授权的应用程序检索敏感数据，Android框架实施了基于权限的访问控制。然而，人们早就知道，为了绕过访问控制，未经授权的应用程序可以拦截授权应用程序发送的意图对象，并携带检索到的敏感数据。我们发现Android框架中有一个新的(以前未知的)攻击面，可以被未授权的应用程序利用来违反访问控制。具体来说，我们发现部分Android框架发送的携带敏感数据的意向对象会被未授权的应用接收，导致敏感数据泄露。本文首次系统地研究了Android框架下基于意图的敏感数据泄漏这一新的攻击面。为了自动发现Android框架中的此类漏洞，我们设计并开发了一个名为LeakDetector的新工具，该工具可以发现Android框架发送的可能被未授权应用程序接收并携带敏感数据的意图对象。将LeakDetector应用于10个商业Android系统，我们发现它可以有效地发现Android框架中敏感数据的有意泄漏。具体来说，我们发现了36个可利用的此类数据泄漏案例，未经授权的应用程序可以滥用这些案例来窃取敏感数据，违反访问控制。在撰写本文时，其中16个已经得到了谷歌、三星和小米的确认，我们收到了这些移动供应商的bug bounty奖励。",
        "title_zh": "揭露Android框架中基于意图的敏感数据泄漏",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2022.html",
        "conf_title": "28th CCS 2022: Los Angeles, CA, USA",
        "conf_url": "https://doi.org/10.1145/3548606",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3548606.3563527",
        "title": "Poster: TaintGrep: A Static Analysis Tool for Detecting Vulnerabilities of Android Apps Supporting User-defined Rules",
        "authors": "Ruiguo Yang, Jiajin Cai, Xinhui Han",
        "abstract": "In this poster, we present TaintGrep, a novel static analysis approach to detect vulnerabilities of Android applications. This approach combines the advantages of semantic pattern matching and taint analysis to get better accuracy and be able to detect cross-function vulnerabilities. Compared with many traditional tools, TaintGrep does not require the full source code or building environment to analyze. Moreover, it supports users in defining their customized matching rules using their vulnerability mining experience, which makes this approach more flexible and scalable. In the preliminary experiment, we give a detailed analysis of the rules of two typical vulnerabilities: generic DoS and arbitrary file read/write, and have detected 77 0day vulnerabilities with these rules in 16 well-known Android applications.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "在这篇文章中，我们展示了TaintGrep，这是一种新颖的静态分析方法，用于检测Android应用程序的漏洞。这种方法结合了语义模式匹配和污点分析的优点，以获得更好的准确性，并能够检测跨功能漏洞。与许多传统工具相比，TaintGrep不需要完整的源代码或构建环境来进行分析。此外，它支持用户使用他们的漏洞挖掘经验来定义他们定制的匹配规则，这使得该方法更加灵活和可扩展。在初步实验中，我们详细分析了一般DoS和任意文件读/写两种典型漏洞的规则，并利用这些规则在16个知名Android应用中检测出77个0day漏洞。",
        "title_zh": "海报:TaintGrep:一个静态分析工具，用于检测支持用户定义规则的Android应用程序的漏洞",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2022.html",
        "conf_title": "28th CCS 2022: Los Angeles, CA, USA",
        "conf_url": "https://doi.org/10.1145/3548606",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3338498.3358650",
        "title": "MagneticSpy: Exploiting Magnetometer in Mobile Devices for Website and Application Fingerprinting",
        "authors": "Nikolay Matyunin, Yujue Wang, Tolga Arul, Kristian Kullmann, Jakub Szefer, Stefan Katzenbeisser",
        "abstract": "Recent studies have shown that aggregate CPU usage and power consumption traces on smartphones can leak information about applications running on the system or websites visited. In response, access to such data has been blocked for mobile applications starting from Android 8. In this work, we explore a new source of side-channel leakage for this class of attacks. Our method is based on the fact that electromagnetic activity caused by mobile processors leads to noticeable disturbances in magnetic sensor measurements on mobile devices, with the amplitude being proportional to the CPU workload. Therefore, recorded sensor data can be analyzed to reveal information about ongoing activities. The attack works on a number of devices: we evaluated 80 models of modern smartphones and tablets and observed the reaction of the magnetometer to the CPU activity on 56 of them. On selected devices we were able to successfully identify which application has been opened (with up to 90% accuracy) or which web page has been loaded (up to 91% accuracy). The presented side channel poses a significant risk to end users' privacy, as the sensor data can be recorded from native apps or even from web pages without user permissions. Finally, we discuss possible countermeasures to prevent the presented information leakage.",
        "files": {
            "openAccessPdf": "http://arxiv.org/pdf/1906.11117"
        },
        "abstract_zh": "最近的研究表明，智能手机上的总CPU使用率和功耗跟踪可能会泄露系统上运行的应用程序或访问的网站的信息。作为回应，从Android 8开始，移动应用程序对这些数据的访问被禁止。在这项工作中，我们探索了这类攻击的新的旁道泄漏源。我们的方法基于这样一个事实，即移动处理器引起的电磁活动会导致移动设备上磁传感器测量中的明显干扰，其幅度与CPU工作负载成比例。因此，可以分析记录的传感器数据，以揭示关于正在进行的活动的信息。攻击在许多设备上起作用:我们评估了80种现代智能手机和平板电脑，并观察了磁力计对其中56种设备的CPU活动的反应。在选定的设备上，我们能够成功识别哪个应用程序已经打开(准确率高达90%)或哪个网页已经加载(准确率高达91%)。所呈现的侧信道对终端用户的隐私造成了显著的风险，因为传感器数据可以在没有用户许可的情况下从本地应用甚至从网页中被记录。最后，我们讨论了防止信息泄露的可能对策。",
        "title_zh": "MagneticSpy:利用移动设备中的磁力计进行网站和应用程序指纹识别",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wpes/wpes2019.html",
        "conf_title": "WPES@CCS 2019: London, UK",
        "conf_url": "https://dl.acm.org/citation.cfm?id=3338498",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3319535.3354197",
        "title": "Hardware-Backed Heist: Extracting ECDSA Keys from Qualcomm's TrustZone",
        "authors": "Keegan Ryan",
        "abstract": "Trusted Execution Environments (TEEs) such as ARM TrustZone are in widespread use in both mobile and embedded devices, and they are used to protect sensitive secrets while often sharing the same computational hardware as untrusted code. Although there has been limited research in the area, the threat of microarchitectural attacks against ARM TrustZone has not been thoroughly studied. This is not the case for other TEEs, such as Intel SGX, where the security promises of the TEE have been violated numerous times by the academic community, showing that it is possible to use side-channel attacks to gain detailed insight into the microarchitectural behavior of trusted code. In this work, we show that TrustZone is susceptible to similar attacks, and we demonstrate the ability to achieve cache attacks with high temporal precision, high spatial precision, and low noise. These tools make it easy to monitor the data flow and code flow of TrustZone code with great resolution, and we apply our techniques to investigate the security of a real-world application. We examine ECDSA signing in Qualcomm's implementation of Android's hardware-backed keystore and identify a series of vulnerabilities that leak sensitive cryptographic information through shared microarchitectural structures. By using the powerful attacks developed in this paper, we are able to successfully extract this sensitive information and fully recover a 256-bit private key from Qualcomm's version of the hardware-backed keystore.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "ARM TrustZone等可信执行环境(tee)在移动和嵌入式设备中广泛使用，它们用于保护敏感机密，同时通常与不可信代码共享相同的计算硬件。尽管该领域的研究有限，但针对ARM TrustZone的微体系结构攻击的威胁尚未得到彻底研究。对于其他TEE而言，情况并非如此，例如英特尔SGX，TEE的安全承诺已经被学术界多次违反，这表明可以使用旁道攻击来获得对可信代码的微体系结构行为的详细了解。在这项工作中，我们表明TrustZone容易受到类似的攻击，并且我们展示了以高时间精度、高空间精度和低噪声实现缓存攻击的能力。这些工具使得以高分辨率监控TrustZone代码的数据流和代码流变得容易，并且我们应用我们的技术来调查真实世界应用的安全性。我们研究了高通实现的Android硬件支持的密钥库的ECDSA签名，并发现了一系列通过共享微体系结构泄漏敏感加密信息的漏洞。通过使用本文中开发的强大攻击，我们能够成功提取这些敏感信息，并从高通版本的硬件支持的密钥库中完全恢复256位私钥。",
        "title_zh": "硬件支持的盗窃:从高通的信任区提取ECDSA密钥",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2019.html",
        "conf_title": "26th CCS 2019: London, UK",
        "conf_url": "https://doi.org/10.1145/3319535",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3319535.3354201",
        "title": "VoltJockey: Breaching TrustZone by Software-Controlled Voltage Manipulation over Multi-core Frequencies",
        "authors": "Pengfei Qiu, Dongsheng Wang, Yongqiang Lyu, Gang Qu",
        "abstract": "ARM TrustZone builds a trusted execution environment based on the concept of hardware separation. It has been quite successful in defending against various software attacks and forcing attackers to explore vulnerabilities in interface designs and side channels. The recently reported CLKscrew attack breaks TrustZone through software by overclocking CPU to generate hardware faults. However, overclocking makes the processor run at a very high frequency, which is relatively easy to detect and prevent, for example by hardware frequency locking. In this paper, we propose an innovative software-controlled hardware fault-based attack, VoltJockey, on multi-core processors that adopt dynamic voltage and frequency scaling (DVFS) techniques for energy efficiency. Unlike CLKscrew, we manipulate the voltages rather than the frequencies via DVFS unit to generate hardware faults on the victim cores, which makes VoltJockey stealthier and harder to prevent than CLKscrew. We deliberately control the fault generation to facilitate differential fault analysis to break TrustZone. The entire attack process is based on software without any involvement of hardware. We implement VoltJockey on an ARM-based Krait processor from a commodity Android phone and demonstrate how to reveal the AES key from TrustZone and how to breach the RSA-based TrustZone authentication. These results suggest that VoltJockey has a comparable efficiency to side channels in obtaining TrustZone-guarded credentials, as well as the potential of bypassing the RSA-based verification to load untrusted applications into TrustZone. We also discuss both hardware-based and software-based countermeasures and their limitations.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "ARM TrustZone基于硬件分离的概念构建可信执行环境。它在抵御各种软件攻击和迫使攻击者探索界面设计和侧通道中的漏洞方面相当成功。最近报道的CLKscrew攻击通过超频CPU产生硬件故障，通过软件攻破TrustZone。然而，超频使处理器以非常高的频率运行，这相对容易检测和防止，例如通过硬件频率锁定。在本文中，我们提出了一种创新的软件控制的基于硬件故障的攻击VoltJockey，针对采用动态电压和频率调节(DVFS)技术提高能效的多核处理器。与CLKscrew不同，我们通过DVFS单元操纵电压而不是频率来在受害者内核上产生硬件故障，这使得VoltJockey比CLKscrew更加隐蔽，也更难防范。我们有意控制故障生成，以便于差分故障分析来打破信任区。整个攻击过程是基于软件的，没有任何硬件的参与。我们在商用Android手机上基于ARM的Krait处理器上实现了VoltJockey，并演示了如何揭示来自TrustZone的AES密钥以及如何破解基于RSA的TrustZone身份验证。这些结果表明，VoltJockey在获取TrustZone保护的凭据方面具有与侧通道相当的效率，并且有可能绕过基于RSA的验证将不受信任的应用程序加载到TrustZone中。我们还讨论了基于硬件和基于软件的对策及其局限性。",
        "title_zh": "VoltJockey:通过软件控制多核频率上的电压操纵突破信任区",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2019.html",
        "conf_title": "26th CCS 2019: London, UK",
        "conf_url": "https://doi.org/10.1145/3319535",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3319535.3345659",
        "title": "CryptoGuard: High Precision Detection of Cryptographic Vulnerabilities in Massive-sized Java Projects",
        "authors": "Sazzadur Rahaman, Ya Xiao, Sharmin Afrose, Fahad Shaon, Ke Tian, Miles Frantz, Murat Kantarcioglu, Danfeng (Daphne) Yao",
        "abstract": "Cryptographic API misuses, such as exposed secrets, predictable random numbers, and vulnerable certificate verification, seriously threaten software security. The vision of automatically screening cryptographic API calls in massive-sized (e.g., millions of LoC) programs is not new. However, hindered by the practical difficulty of reducing false positives without compromising analysis quality, this goal has not been accomplished. CryptoGuard is a set of detection algorithms that refine program slices by identifying language-specific irrelevant elements. The refinements reduce false alerts by 76% to 80% in our experiments. Running our tool, CryptoGuard, on 46 high-impact large-scale Apache projects and 6,181 Android apps generated many security insights. Our findings helped multiple popular Apache projects to harden their code, including Spark, Ranger, and Ofbiz. We also have made progress towards the science of analysis in this space, including manually analyzing 1,295 Apache alerts, confirming 1,277 true positives (98.61% precision), and in-depth comparison with leading solutions including CrySL, SpotBugs, and Coverity.",
        "files": {
            "openAccessPdf": "https://dl.acm.org/doi/pdf/10.1145/3319535.3345659"
        },
        "abstract_zh": "密码API误用，如暴露的秘密、可预测的随机数和易受攻击的证书验证，严重威胁软件安全。在大规模(例如，数百万LoC)程序中自动筛选加密API调用的设想并不新鲜。然而，由于在不损害分析质量的情况下减少假阳性的实际困难，这个目标还没有实现。CryptoGuard是一组检测算法，通过识别特定语言的无关元素来细化程序切片。在我们的实验中，这些改进减少了76%到80%的错误警报。在46个高影响力的大规模Apache项目和6，181个Android应用上运行我们的工具CryptoGuard，产生了许多安全见解。我们的发现帮助多个流行的Apache项目强化了它们的代码，包括Spark、Ranger和Ofbiz。我们还在这一领域的分析科学方面取得了进展，包括手动分析1，295个Apache警报，确认1，277个真阳性(98.61%的精确度)，以及与包括CrySL、SpotBugs和Coverity在内的领先解决方案进行深入比较。",
        "title_zh": "CryptoGuard:大规模Java项目中加密漏洞的高精度检测",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2019.html",
        "conf_title": "26th CCS 2019: London, UK",
        "conf_url": "https://doi.org/10.1145/3319535",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3319535.3363250",
        "title": "Force vs. Nudge: Comparing Users' Pattern Choices on SysPal and TinPal",
        "authors": "Harshal Tupsamudre, Sukanya Vaddepalli, Vijayanand Banahatti, Sachin Lodha",
        "abstract": "Android's 3X3 graphical pattern lock scheme is one of the widely used authentication method on smartphone devices. However, users choose 3X3 patterns from a small subspace of all possible 389,112 patterns. The two recently proposed interfaces, SysPal by Cho et al. and TinPal by the authors, demonstrate that it is possible to influence users 3X3 pattern choices by making small modifications in the existing interface. While SysPal forces users to include one, two or three system-assigned random dots in their pattern, TinPal employs highlighting mechanism to inform users about the set of reachable dots from the current selected dot. Both interfaces improved the security of 3X3 patterns without affecting usability, but no comparison between SysPal and TinPal was presented. To address this gap, we conduct a new user study with 147 participants and collect patterns on three SysPal interfaces, 1-dot, 2-dot and 3-dot. We compare SysPal and TinPal patterns using a range of security and usability metrics including pattern length, stroke length, guessability, recall time and login attempts. Overall, we found that patterns created on TinPal were significantly longer and offered more resistance to guessing attacks.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android的3X3图形模式锁方案是智能手机设备上广泛使用的身份验证方法之一。然而，用户从所有可能的389，112个模式的小的子空间中选择3×3的模式。最近提出的两个接口，Cho等人的SysPal和作者的TinPal，证明了通过对现有接口进行小的修改来影响用户的3X3模式选择是可能的。SysPal强制用户在他们的图案中包含一个、两个或三个系统分配的随机点，而TinPal采用高亮机制来通知用户关于从当前选择的点可到达的点的集合。两个接口都在不影响可用性的情况下提高了3X3模式的安全性，但是没有给出SysPal和TinPal之间的比较。为了弥补这一差距，我们对147名参与者进行了一项新的用户研究，并收集了三种SysPal界面(1点、2点和3点)的模式。我们使用一系列安全性和可用性指标来比较SysPal和TinPal模式，包括模式长度、笔画长度、可猜测性、回忆时间和登录尝试。总的来说，我们发现在TinPal上创建的模式要长得多，对猜测攻击的抵抗力也更强。",
        "title_zh": "强制与微调:比较用户在SysPal和TinPal上的模式选择",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2019.html",
        "conf_title": "26th CCS 2019: London, UK",
        "conf_url": "https://doi.org/10.1145/3319535",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3319535.3363252",
        "title": "Poster: Deployment-quality and Accessible Solutions for Cryptography Code Development",
        "authors": "Sazzadur Rahaman, Ya Xiao, Sharmin Afrose, Ke Tian, Miles Frantz, Na Meng, Barton P. Miller, Fahad Shaon, Murat Kantarcioglu, Danfeng (Daphne) Yao",
        "abstract": "Cryptographic API misuses seriously threaten software security. Automatic screening of cryptographic misuse vulnerabilities has been a popular and important line of research over the years. However, the vision of producing a scalable detection tool that developers can routinely use to screen millions of line of code has not been achieved yet. Our main technical goal is to attain a high precision and high throughput approach based on specialized program analysis. Specifically, we design inter-procedural program slicing on top of a new on-demand flow-, context- and field- sensitive data flow analysis. Our current prototype named CryptoGuard can detect a wide range of Java cryptographic API misuses with a precision of 98.61%,, when evaluated on 46 complex Apache Software Foundation projects (including, Spark, Ranger, and Ofbiz). Our evaluation on 6,181 Android apps also generated many security insights. We created a comprehensive benchmark named CryptoAPI-Bench with 40-unit basic cases and 131-unit advanced cases for in-depth comparison with leading solutions (e.g., SpotBugs, CrySL, Coverity). To make CryptoGuard widely accessible, we are in the process of integrating CryptoGuard with the Software Assurance Marketplace (SWAMP). SWAMP is a popular no-cost service for continuous software assurance and static code analysis.",
        "files": {
            "openAccessPdf": "https://dl.acm.org/doi/pdf/10.1145/3319535.3363252"
        },
        "abstract_zh": "密码API滥用严重威胁软件安全。密码误用漏洞的自动筛选多年来一直是流行且重要的研究方向。然而，开发一个可扩展的检测工具，让开发人员可以常规地使用它来筛选数百万行代码的愿景还没有实现。我们的主要技术目标是获得基于专门程序分析的高精度和高通量方法。具体来说，我们在新的按需流、上下文和字段敏感的数据流分析的基础上设计了过程间程序切片。我们当前名为CryptoGuard的原型在46个复杂的Apache Software Foundation项目(包括Spark、Ranger和Ofbiz)上进行评估时，可以以98.61%的精度检测各种Java加密API误用。我们对6，181个Android应用的评估也产生了许多安全见解。我们创建了一个名为CryptoAPI-Bench的综合基准，其中包含40个单元的基本案例和131个单元的高级案例，用于与领先的解决方案(如SpotBugs、CrySL、Coverity)进行深入比较。为了使CryptoGuard能够被广泛使用，我们正在将CryptoGuard与软件保障市场(SWAMP)进行整合。SWAMP是一个流行的免费服务，用于持续的软件保证和静态代码分析。",
        "title_zh": "海报:加密代码开发的部署质量和可访问的解决方案",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2019.html",
        "conf_title": "26th CCS 2019: London, UK",
        "conf_url": "https://doi.org/10.1145/3319535",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3319535.3363255",
        "title": "Kerberoid: A Practical Android App Decompilation System with Multiple Decompilers",
        "authors": "Heejun Jang, Beomjin Jin, Sangwon Hyun, Hyoungshick Kim",
        "abstract": "Decompilation is frequently used to analyze binary programs. In Android, however, decompilers all perform differently with varying apps due to their own characteristics. Obviously, there is no universal solution in all conditions. Based on this observation, we present a practical Android app decompilation system (called Kerberoid) that automatically stitches the results from multiple decompilers together to maximize the coverage and the accuracy of decompiled codes. We evaluate the performance of Kerberoid with 151 Android apps in which their corresponding source codes are publicly available. Kerberoid fully recovered all functions for 17% of the apps tested and gained a similarity score over 50% for 40% of the apps tested, increased by 7% and 9%, respectively, compared with the best existing decompiler.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "反编译经常被用来分析二进制程序。然而，在Android中，由于自身的特点，反编译程序对不同的应用程序都有不同的表现。显然，没有在所有条件下通用的解决方案。基于这一观察，我们提出了一个实用的Android应用程序反编译系统(称为Kerberoid)，该系统自动将多个反编译程序的结果缝合在一起，以最大化反编译代码的覆盖率和准确性。我们用151个Android应用程序评估了Kerberoid的性能，这些应用程序的相应源代码是公开的。Kerberoid完全恢复了17%的测试应用程序的所有功能，并在40%的测试应用程序中获得了超过50%的相似性分数，与现有的最佳反编译器相比，分别提高了7%和9%。",
        "title_zh": "Kerberoid:一个实用的Android应用程序反编译系统，具有多个反编译程序",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2019.html",
        "conf_title": "26th CCS 2019: London, UK",
        "conf_url": "https://doi.org/10.1145/3319535",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3133956.3134009",
        "title": "Mass Discovery of Android Traffic Imprints through Instantiated Partial Execution",
        "authors": "Yi Chen, Wei You, Yeonjoon Lee, Kai Chen, XiaoFeng Wang, Wei Zou",
        "abstract": "Monitoring network behaviors of mobile applications, controlling their resource access and detecting potentially harmful apps are becoming increasingly important for the security protection within today's organizational, ISP and carriers. For this purpose, apps need to be identified from their communication, based upon their individual traffic signatures (called imprints in our research). Creating imprints for a large number of apps is nontrivial, due to the challenges in comprehensively analyzing their network activities at a large scale, for millions of apps on today's rapidly-growing app marketplaces. Prior research relies on automatic exploration of an app's user interfaces (UIs) to trigger its network activities, which is less likely to scale given the cost of the operation (at least 5 minutes per app) and its effectiveness (limited coverage of an app's behaviors). In this paper, we present Tiger (Traffic Imprint Generator), a novel technique that makes comprehensive app imprint generation possible in a massive scale. At the center of Tiger is a unique instantiated slicing technique, which aggressively prunes the program slice extracted from the app's network-related code by evaluating each variable's impact on possible network invariants, and removing those unlikely to contribute through assigning them concrete values. In this way, Tiger avoids exploring a large number of program paths unrelated to the app's identifiable traffic, thereby reducing the cost of the code analysis by more than one order of magnitude, in comparison with the conventional slicing and execution approach. Our experiments show that Tiger is capable of recovering an app's full network activities within 18 seconds, achieving over 98% coverage of its identifiable packets and 0.742% false detection rate on app identification. Further running the technique on over 200,000 real-world Android apps (including 78.23% potentially harmful apps) leads to the discovery of surprising new types of traffic invariants, including fake device information, hardcoded time values, session IDs and credentials, as well as complicated trigger conditions for an app's network activities, such as human involvement, Intent trigger and server-side instructions. Our findings demonstrate that many network activities cannot easily be invoked through automatic UI exploration and code-analysis based approaches present a promising alternative.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "监视移动应用程序的网络行为，控制其资源访问并检测潜在有害应用程序对当今组织，ISP和运营商中的安全保护变得越来越重要。 为此，需要根据他们的个人交通签名（称为我们的研究中的烙印）从其沟通中识别应用程序。 由于在当今快速增长的应用程序市场上，为数百万个应用程序全面分析其网络活动所面临的挑战，为许多应用程序创建烙印并非平底。 先前的研究依赖于对应用程序的用户界面（UI）的自动探索来触发其网络活动，因为操作的成本（每个应用程序至少5分钟）及其有效性（对应用程序行为的覆盖率有限）不太可能扩展。 ）。 在本文中，我们提出了Tiger（交通烙印生成器），这是一种新颖的技术，它使综合的应用程序印记以巨大的规模成为可能。 Tiger的中心是一种独特的实例化切片技术，它通过评估每个变量对可能的网络不变性的影响，并删除那些不太可能通过分配它们的混凝土值来删除那些不太可能做出贡献的程序，从而积极地介绍从应用程序与网络相关的代码中提取的程序。 这样，老虎避免探索与应用程序可识别流量无关的大量程序路径，从而将代码分析的成本降低了一个以上的数量级，与常规的切片和执行方法相比。 我们的实验表明，Tiger能够在18秒内恢复应用程序的完整网络活动，从而获得超过98％的可识别数据包的覆盖范围，并且在应用程序识别上获得了0.742％的错误检测率。 进一步运行超过200,000个现实世界的Android应用程序（包括78.23％的潜在有害应用程序），导致发现令人惊讶的新型流量不变性，包括伪造的设备信息，硬编码的时间值，会话ID和凭据以及复杂的 触发应用程序网络活动的条件，例如人类参与，意图触发和服务器端说明。 我们的发现表明，通过自动UI探索和基于代码分析的方法，许多网络活动都无法轻易调用。",
        "title_zh": "通过实例化部分执行大量发现Android流量印记",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2017.html",
        "conf_title": "24th CCS 2017: Dallas, TX, USA",
        "conf_url": "https://doi.org/10.1145/3133956",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3133956.3133989",
        "title": "T/Key: Second-Factor Authentication From Secure Hash Chains",
        "authors": "Dmitry Kogan, Nathan Manohar, Dan Boneh",
        "abstract": "Time-based one-time password (TOTP) systems in use today require storing secrets on both the client and the server. As a result, an attack on the server can expose all second factors for all users in the system. We present T/Key, a time-based one-time password system that requires no secrets on the server. Our work modernizes the classic S/Key system and addresses the challenges in making such a system secure and practical. At the heart of our construction is a new lower bound analyzing the hardness of inverting hash chains composed of independent random functions, which formalizes the security of this widely used primitive. Additionally, we develop a near-optimal algorithm for quickly generating the required elements in a hash chain with little memory on the client. We report on our implementation of T/Key as an Android application. T/Key can be used as a replacement for current TOTP systems, and it remains secure in the event of a server-side compromise. The cost, as with S/Key, is that one-time passwords are longer than the standard six characters used in TOTP.",
        "files": {
            "openAccessPdf": "http://dl.acm.org/ft_gateway.cfm?id=3133989&type=pdf"
        },
        "abstract_zh": "基于时间的一次性密码（TOTP）系统今天使用的是在客户端和服务器上存储秘密。 结果，对服务器的攻击可以暴露系统中所有用户的所有第二个因素。 我们提供T/键，这是一个基于时间的一次性密码系统，在服务器上不需要秘密。 我们的工作使经典的S/关键系统现代化，并解决了使这种系统安全和实用的挑战。 我们构造的核心是一个新的下限，分析了由独立随机函数组成的反相哈希链的硬度，该函数正式化了这种广泛使用的原始功能的安全性。 此外，我们开发了一种近乎最佳的算法，用于快速在客户端上几乎没有内存的哈希链中生成所需的元素。 我们报告了将T/键作为Android应用程序的实施。 T/键可以用作当前TOTP系统的替换，并且在服务器端妥协的情况下，它仍然安全。 与S/键一样，成本是一次性密码比TOTP中使用的标准六个字符更长。",
        "title_zh": "T/Key:来自安全散列链的第二因素认证",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2017.html",
        "conf_title": "24th CCS 2017: Dallas, TX, USA",
        "conf_url": "https://doi.org/10.1145/3133956",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3133956.3134064",
        "title": "The ART of App Compartmentalization: Compiler-based Library Privilege Separation on Stock Android",
        "authors": "Jie Huang, Oliver Schranz, Sven Bugiel, Michael Backes",
        "abstract": "Third-party libraries are commonly used by app developers for alleviating the development efforts and for monetizing their apps. On Android, the host app and its third-party libraries reside in the same sandbox and share all privileges awarded to the host app by the user, putting the users' privacy at risk of intrusions by third-party libraries. In this paper, we introduce a new privilege separation approach for third-party libraries on stock Android. Our solution partitions Android applications at compile-time into isolated, privilege-separated compartments for the host app and the included third-party libraries. A particular benefit of our approach is that it leverages compiler-based instrumentation available on stock Android versions and thus abstains from modification of the SDK, the app bytecode, or the device firmware. A particular challenge for separating libraries from their host apps is the reconstruction of the communication channels and the preservation of visual fidelity between the now separated app and its libraries. We solve this challenge through new IPC-based protocols to synchronize layout and lifecycle management between different sandboxes. Finally, we demonstrate the efficiency and effectiveness of our solution by applying it to real world apps from the Google Play Store that contain advertisements.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "应用程序开发人员通常使用第三方图书馆来减轻开发工作并获利其应用程序。 在Android上，主机应用程序及其第三方库位于同一沙箱中，并共享用户授予主机应用程序的所有特权，使用户的隐私风险由第三方库侵入。 在本文中，我们为库存Android的第三方库引入了一种新的特权分离方法。 我们的解决方案分区的Android应用程序在编译时应用于主机应用程序和随附的第三方库的孤立的，特权分隔的隔间。 我们方法的一个特殊好处是，它利用基于编译器的仪器可在库存Android版本上使用，从而避免修改SDK，应用程序字节码或设备固件的修改。 将库与主机应用分开的一个特殊挑战是对通信渠道的重建以及现在分开的应用程序及其库之间的视觉保真度。 我们通过新的基于IPC的协议来解决这一挑战，以同步不同的沙箱之间的布局和生命周期管理。 最后，我们通过将其应用于包含广告的Google Play商店的现实世界应用程序，以证明解决方案的效率和有效性。",
        "title_zh": "应用划分的艺术:基于编译器的Android库权限分离",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2017.html",
        "conf_title": "24th CCS 2017: Dallas, TX, USA",
        "conf_url": "https://doi.org/10.1145/3133956",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3133956.3133975",
        "title": "Vulnerable Implicit Service: A Revisit",
        "authors": "Lingguang Lei, Yi He, Kun Sun, Jiwu Jing, Yuewu Wang, Qi Li, Jian Weng",
        "abstract": "The services in Android applications can be invoked either explicitly or implicitly before Android 5.0. However, since the implicit service invocations suffer service hijacking attacks and thus lead to sensitive information leakage, they have been forbidden since Android 5.0. Thereafter since the Android system will simply throw an exception and crash the application that still invokes services implicitly, it was expected that application developers will be forced to convert the implicit service invocations to explicit ones by specifying the package name of the service to be called. In this paper, we revisit the service invocations by analyzing two sets of the same 1390 applications downloaded from Google Play Store before and after the the implicit service forbidden policy is enforced. We develop a static analysis framework called ISA to perform our study. Our analysis results show that the forbidden policy effectively reduces the number of vulnerable service invocations from 643 to 112, namely, 82.58% reduction. However, after a detailed analysis of the remaining 112 vulnerable invocations, we discover that the forbidden policy fails to resolve the service hijacking attacks. Among the 1390 applications downloaded in May 2017, we find 36 popular applications still vulnerable to service hijacking attacks, which can lead to the loss of user bank account and VPN login credentials, etc. Moreover, we find that the forbidden policy introduces a new type of denial of service attacks. Finally, we discuss the root challenges on resolving service hijacking attacks and propose countermeasures to help mitigate the service hijacking attacks.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "可以在Android 5.0之前明确或隐式调用Android应用程序中的服务。 但是，由于隐式服务调用遭受了劫持攻击的服务，因此导致敏感信息泄漏，因此自Android 5.0以来，它们被禁止。 此后，由于Android系统只会引发异常并崩溃仍然隐含的服务的应用程序，因此预计应用程序开发人员将被迫通过指定要调用服务的软件包名称来将隐式服务调用转换为显式。 在本文中，我们通过在执行隐式服务禁止策略之前和之后分析从Google Play商店下载的两组相同的1390个应用程序来重新审视服务调用。 我们开发了一个称为ISA的静态分析框架来进行我们的研究。 我们的分析结果表明，禁止的政策有效地减少了脆弱的服务调用数量从643减少到112，即减少了82.58％。 但是，在对剩下的112个脆弱的调用进行详细分析之后，我们发现禁止的策略无法解决服务劫持攻击。 在2017年5月下载的1390个应用程序中，我们发现36个流行应用程序仍然容易受到服务劫持攻击的影响，这可能导致用户银行帐户和VPN登录凭据等。此外，我们发现禁止的政策引入了一种新类型 拒绝服务攻击。 最后，我们讨论了解决服务劫持攻击的根源挑战，并提出对策以减轻服务劫持攻击。",
        "title_zh": "易受攻击的隐式服务:重新审视",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2017.html",
        "conf_title": "24th CCS 2017: Dallas, TX, USA",
        "conf_url": "https://doi.org/10.1145/3133956",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3133956.3133977",
        "title": "A Stitch in Time: Supporting Android Developers in WritingSecure Code",
        "authors": "Duc Cuong Nguyen, Dominik Wermke, Yasemin Acar, Michael Backes, Charles Weir, Sascha Fahl",
        "abstract": "Despite security advice in the official documentation and an extensive body of security research about vulnerabilities and exploits, many developers still fail to write secure Android applications. Frequently, Android developers fail to adhere to security best practices, leaving applications vulnerable to a multitude of attacks. We point out the advantage of a low-time-cost tool both to teach better secure coding and to improve app security. Using the FixDroid IDE plug-in, we show that professional and hobby app developers can work with and learn from an in-environment tool without it impacting their normal work; and by performing studies with both students and professional developers, we identify key UI requirements and demonstrate that code delivered with such a tool by developers previously inexperienced in security contains significantly less security problems. Perfecting and adding such tools to the Android development environment is an essential step in getting both security and privacy for the next generation of apps.",
        "files": {
            "openAccessPdf": "https://eprints.lancs.ac.uk/id/eprint/88075/1/CCS_FixDroid_CR.pdf"
        },
        "abstract_zh": "尽管官方文档中的安全建议以及有关漏洞和漏洞的大量安全研究，但许多开发人员仍然无法编写安全的Android应用程序。 通常，Android开发人员无法遵守安全性最佳实践，因此应用程序容易受到多种攻击的影响。 我们指出，低廉成本工具的优势既可以教授更好的安全编码并提高应用程序安全性。 使用FixDroid IDE插件，我们表明专业和爱好应用程序开发人员可以与环境内的工具一起工作，而不会影响其正常工作； 通过与学生和专业开发人员进行研究，我们确定了关键的UI需求，并证明了以前没有经验的开发人员使用此类工具提供的代码包含的安全问题大大降低了。 在Android开发环境中完善和添加此类工具是获得下一代应用程序安全和隐私的重要步骤。",
        "title_zh": "及时修补:支持Android开发者编写安全代码",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2017.html",
        "conf_title": "24th CCS 2017: Dallas, TX, USA",
        "conf_url": "https://doi.org/10.1145/3133956",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3133956.3134027",
        "title": "Key Reinstallation Attacks: Forcing Nonce Reuse in WPA2",
        "authors": "Mathy Vanhoef, Frank Piessens",
        "abstract": "We introduce the key reinstallation attack. This attack abuses design or implementation flaws in cryptographic protocols to reinstall an already-in-use key. This resets the key's associated parameters such as transmit nonces and receive replay counters. Several types of cryptographic Wi-Fi handshakes are affected by the attack. All protected Wi-Fi networks use the 4-way handshake to generate a fresh session key. So far, this 14-year-old handshake has remained free from attacks, and is even proven secure. However, we show that the 4-way handshake is vulnerable to a key reinstallation attack. Here, the adversary tricks a victim into reinstalling an already-in-use key. This is achieved by manipulating and replaying handshake messages. When reinstalling the key, associated parameters such as the incremental transmit packet number (nonce) and receive packet number (replay counter) are reset to their initial value. Our key reinstallation attack also breaks the PeerKey, group key, and Fast BSS Transition (FT) handshake. The impact depends on the handshake being attacked, and the data-confidentiality protocol in use. Simplified, against AES-CCMP an adversary can replay and decrypt (but not forge) packets. This makes it possible to hijack TCP streams and inject malicious data into them. Against WPA-TKIP and GCMP the impact is catastrophic: packets can be replayed, decrypted, and forged. Because GCMP uses the same authentication key in both communication directions, it is especially affected. Finally, we confirmed our findings in practice, and found that every Wi-Fi device is vulnerable to some variant of our attacks. Notably, our attack is exceptionally devastating against Android 6.0: it forces the client into using a predictable all-zero encryption key.",
        "files": {
            "openAccessPdf": "https://lirias.kuleuven.be/bitstream/123456789/620017/1/ccs2017.pdf"
        },
        "abstract_zh": "我们介绍了钥匙恢复攻击。 此攻击滥用加密协议中的设计或实现缺陷，以重新安装已经使用的密钥。 这将重置密钥的关联参数，例如发送Nonces并接收重播计数器。 攻击影响了几种类型的加密Wi-Fi握手。 所有受保护的Wi-Fi网络都使用4向握手来生成新的会话密钥。 到目前为止，这种14岁的握手仍然没有攻击，甚至被证明是安全的。 但是，我们表明，四向握手容易受到钥匙恢复攻击的影响。 在这里，对手欺骗了受害者重新安装已经使用的钥匙。 这是通过操纵和重播握手消息来实现的。 重新安装密钥时，关联的参数，例如增量发送数据包号（NONCE）和接收数据包号（重播计数器）已重置为其初始值。 我们的钥匙恢复攻击也打破了同伴，组密钥和快速BSS Transition（FT）握手。 影响取决于被攻击的握手以及使用的数据相互源协议。 简化，针对对手可以重播和解密（但不是伪造）数据包的AES-CCMP。 这使得可以劫持TCP流并将恶意数据注入其中。 针对WPA-TKIP和GCMP，撞击是灾难性的：可以重播，解密和伪造的数据包。 由于GCMP在两个通信方向上都使用相同的身份验证密钥，因此特别受到影响。 最后，我们在实践中确认了我们的发现，发现每个Wi-Fi设备都容易受到我们攻击的某些变体的影响。 值得注意的是，我们的攻击是针对Android 6.0的毁灭性的：它迫使客户使用可预测的全零加密密钥。",
        "title_zh": "密钥重新安装攻击:在WPA2强制随机数重用",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2017.html",
        "conf_title": "24th CCS 2017: Dallas, TX, USA",
        "conf_url": "https://doi.org/10.1145/3133956",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3133956.3134069",
        "title": "DIFUZE: Interface Aware Fuzzing for Kernel Drivers",
        "authors": "Jake Corina, Aravind Machiry, Christopher Salls, Yan Shoshitaishvili, Shuang Hao, Christopher Kruegel, Giovanni Vigna",
        "abstract": "Device drivers are an essential part in modern Unix-like systems to handle operations on physical devices, from hard disks and printers to digital cameras and Bluetooth speakers. The surge of new hardware, particularly on mobile devices, introduces an explosive growth of device drivers in system kernels. Many such drivers are provided by third-party developers, which are susceptible to security vulnerabilities and lack proper vetting. Unfortunately, the complex input data structures for device drivers render traditional analysis tools, such as fuzz testing, less effective, and so far, research on kernel driver security is comparatively sparse. In this paper, we present DIFUZE, an interface-aware fuzzing tool to automatically generate valid inputs and trigger the execution of the kernel drivers. We leverage static analysis to compose correctly-structured input in the userspace to explore kernel drivers. DIFUZE is fully automatic, ranging from identifying driver handlers, to mapping to device file names, to constructing complex argument instances. We evaluate our approach on seven modern Android smartphones. The results show that DIFUZE can effectively identify kernel driver bugs, and reports 32 previously unknown vulnerabilities, including flaws that lead to arbitrary code execution.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "设备驱动程序是现代UNIX型系统的重要组成部分，可以处理从硬盘和打印机到数码相机和蓝牙扬声器的物理设备的操作。 新硬件的激增，尤其是在移动设备上，引入了系统内核中设备驱动器的爆炸性增长。 许多这样的驾驶员由第三方开发人员提供，这些开发人员容易受到安全漏洞的影响并且缺乏适当的审查。 不幸的是，设备驱动程序的复杂输入数据结构呈现传统的分析工具，例如模糊测试，效率较低，到目前为止，对内核驱动程序安全性的研究相对较少。 在本文中，我们提出了Difuze，这是一种接口感知的模糊工具，可自动生成有效的输入并触发内核驱动程序的执行。 我们利用静态分析在用户空间中正确结构结构的输入来探索内核驱动程序。 Difuze是完全自动的，从识别驱动程序处理程序到映射到设备文件名，再到构建复杂的参数实例。 我们评估了七台现代Android智能手机的方法。 结果表明，Difuze可以有效地识别内核驱动程序错误，并报告32先前未知的漏洞，包括导致任意代码执行的缺陷。",
        "title_zh": "DIFUZE:内核驱动的接口感知模糊化",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2017.html",
        "conf_title": "24th CCS 2017: Dallas, TX, USA",
        "conf_url": "https://doi.org/10.1145/3133956",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3133956.3134059",
        "title": "Keep me Updated: An Empirical Study of Third-Party Library Updatability on Android",
        "authors": "Erik Derr, Sven Bugiel, Sascha Fahl, Yasemin Acar, Michael Backes",
        "abstract": "Third-party libraries in Android apps have repeatedly been shown to be hazards to the users' privacy and an amplification of their host apps' attack surface. A particularly aggravating factor to this situation is that the libraries' version included in apps are very often outdated. This paper makes the first contribution towards solving the problem of library outdatedness on Android. First, we conduct a survey with 203 app developers from Google Play to retrieve first-hand information about their usage of libraries and requirements for more effective library updates. With a subsequent study of library providers' semantic versioning practices, we uncover that those providers are likely a contributing factor to the app developers' abstinence from library updates in order to avoid ostensible re-integration efforts and version incompatibilities. Further, we conduct a large-scale library updatability analysis of 1,264,118 apps to show that, based on the library API usage, 85.6% of the libraries could be upgraded by at least one version without modifying the app code, 48.2% even to the latest version. Particularly alarming are our findings that 97.8% out of 16,837 actively used library versions with a known security vulnerability could be easily fixed through a drop-in replacement of the vulnerable library with the fixed version. Based on these results, we conclude with a thorough discussion of solutions and actionable items for different actors in the app ecosystem to effectively remedy this situation.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android应用程序中的第三方库反复被证明是对用户隐私的危害，并放大了主机应用程序的攻击表面。 对这种情况的一个特别严重的因素是，应用程序中包含的库的版本通常过时。 本文为解决Android上的图书馆过时而做出了首要的贡献。 首先，我们与Google Play的203个应用程序开发人员进行了一项调查，以检索有关其图书馆使用的第一手信息以及更有效的图书馆更新的要求。 随后对图书馆提供商的语义版本练习进行了研究，我们发现这些提供商可能是应用程序开发人员免除图书馆更新的因素，以避免表面上的重新融合工作和版本不兼容。 此外，我们对1,264,118个应用程序进行了大规模的库可更新性分析，以表明，根据库API使用，至少可以通过一个版本升级85.6％的库，而无需修改App Code，即使是最新的48.2％ 版本。 特别令人震惊的是，我们的发现是，在16,837个积极使用的具有已知安全漏洞的库版本中，有97.8％可以通过使用固定版本的易受伤害库的倒数替换来固定。 基于这些结果，我们以对应用程序生态系统中不同参与者的解决方案和可行的项目进行了详尽的讨论，以有效地纠正这种情况。",
        "title_zh": "随时更新:Android平台上第三方库可更新性的实证研究",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2017.html",
        "conf_title": "24th CCS 2017: Dallas, TX, USA",
        "conf_url": "https://doi.org/10.1145/3133956",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3133956.3138838",
        "title": "POSTER: Semi-supervised Classification for Dynamic Android Malware Detection",
        "authors": "Li Chen, Mingwei Zhang, Chih-Yuan Yang, Ravi Sahita",
        "abstract": "Manually labeling the large number of samples of Android APKs into benign or different malicious families requires tremendous human effort, while it is comparably easy and cheap to obtain a large amount of unlabeled APKs from various sources. Moreover, the fast-paced evolution of Android malware continuously generates derivative and new malware families. These families often contain new signatures, which can escape detection that uses static analysis. These practical challenges can also cause classical supervised machine learning algorithms to degrade in performance. We propose a framework that uses model-based semi-supervised (MBSS) classification scheme built using dynamic Android API call logs. The semi-supervised approach efficiently uses the labeled and unlabeled APKs to estimate a finite mixture model of Gaussian distributions via conditional expectation-maximization and efficiently detects malware during out-of-sample testing. We compare MBSS with the popular malware detection classifiers such as support vector machine (SVM), k-nearest neighbor (kNN) and linear discriminant analysis (LDA). Under the ideal classification setting, MBSS has competitive performance with 98% accuracy and very low false positive rate for in-sample classification. For out-of-sample testing, the out-of-sample test data exhibit similar behavior of retrieving phone information and sending to the network, compared with in-sample training set. When this similarity is strong, MBSS and SVM with linear kernel maintain 90% detection rate while kNN and LDA suffer great performance degradation. When this similarity is slightly weaker, all classifiers degrade in performance, but MBSS still performs significantly better than other classifiers.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "手动将大量的Android APK样本标记为良性或不同的恶意家庭需要巨大的努力，而从各种来源获得大量未标记的APK则相当容易且便宜。 此外，Android恶意软件的快节奏演变不断生成导数和新的恶意软件系列。 这些家庭通常包含新的签名，可以逃脱使用静态分析的检测。 这些实际挑战还可能导致经典的监督机器学习算法降低性能。 我们提出了一个框架，该框架使用基于模型的半监督（MBS）分类方案，该方案使用动态Android API呼叫日志构建。 半监督的方法有效地使用标记和未标记的APK来估计高斯分布的有限混合模型通过有条件的预期 - 搭配最大化，并在样本外测试中有效地检测到恶意软件。 我们将MBS与流行的恶意软件检测分类器（例如支持向量机（SVM），K-Nearest邻居（KNN）和线性判别分析（LDA）进行比较。 在理想的分类设置下，MBSS具有竞争性能，精度为98％，样本中分类的假阳性非常低。 对于样本外测试，与样本中的培训集相比，样本外测试数据表现出类似的检索电话信息和发送到网络的行为。 当这种相似性很强时，线性内核的MBS和SVM保持90％的检测率，而KNN和LDA的性能降低也很大。 当这种相似性稍弱时，所有分类器都会降低性能，但是MBS的性能仍然比其他分类器要好得多。",
        "title_zh": "海报:用于动态Android恶意软件检测的半监督分类",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2017.html",
        "conf_title": "24th CCS 2017: Dallas, TX, USA",
        "conf_url": "https://doi.org/10.1145/3133956",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3133956.3138847",
        "title": "POSTER: Covert Channel Based on the Sequential Analysis in Android Systems",
        "authors": "Jun-Won Ho, KyungRok Won, Jee Sun Kim",
        "abstract": "Due to the wide spread of android smartphones, different types of attacks have emerged against android systems and accordingly many researches have been accomplished in the android security. In particular, a variety of covert channels have been recently developed in android systems. They are usually built up by utilizing physical media and distinct characteristics of systems in the literature. To the best of our information, however, we do not find out any research work establishing covert channels in android systems on basis of the sequential analysis, which is a kind of statistical decision theory. This is mainly because the sequential analysis has been conventionally treated as defense technique in terms of security. In contrast to this common application of the sequential analysis, we discover a new covert channel based on the sequential analysis in android systems. The key idea of newly devised covert channel is to harness the sequential analysis in order to encode (resp. decode) private information bits to (resp. from) multiple sequences of randomly selected data. Through simulation, we demonstrate that our developed covert channel works efficiently and thus it could be substantial threat to android systems.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "由于Android智能手机广泛传播，因此已经出现了不同类型的攻击，因此在Android安全方面已经完成了许多研究。 特别是，最近在Android系统中开发了各种秘密通道。 它们通常是通过利用物理媒体和文献中系统的不同特征而建立的。 但是，根据我们的信息，我们没有根据顺序分析发现任何研究工作在Android系统中建立秘密渠道的研究，这是一种统计决策理论。 这主要是因为在安全方面，顺序分析通常被视为防御技术。 与顺序分析的这种常见应用相反，我们根据Android系统中的顺序分析发现了一个新的掩盖通道。 新设计的秘密通道的关键思想是利用顺序分析，以编码（分解）私人信息位，以（分别为）随机选择的数据的多个序列。 通过模拟，我们证明了我们发达的秘密渠道有效地工作，因此对Android系统可能是重大威胁。",
        "title_zh": "海报:基于Android系统时序分析的隐蔽通道",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2017.html",
        "conf_title": "24th CCS 2017: Dallas, TX, USA",
        "conf_url": "https://doi.org/10.1145/3133956",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3133956.3138831",
        "title": "POSTER: Watch Out Your Smart Watch When Paired",
        "authors": "Youngjoo Lee, WonSeok Yang, Taekyoung Kwon",
        "abstract": "We coin a new term called \\textit{data transfusion} as a phenomenon that a user experiences when pairing a wearable device with the host device. A large amount of data stored in the host device (e.g., a smartphone) is forcibly copied to the wearable device (e.g., a smart watch) due to pairing while the wearable device is usually less attended. To the best of knowledge, there is no previous work that manipulates how sensitive data is transfused even without user's consent and how users perceive and behave regarding such a phenomenon for smart watches. We tackle this problem by conducting an experimental study of data extraction from commodity devices, such as in Android Wear, watchOS, and Tizen platforms, and a following survey study with 205 smart watch users, in two folds. The experimental studies have shown that a large amount of sensitive data was transfused, but there was not enough user notification. The survey results have shown that users have lower perception on smart watches for security and privacy than smartphones, but they tend to set the same passcode on both devices when needed. Based on the results, we perform risk assessment and discuss possible mitigation that involves volatile transfusion.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "我们将一个称为\\ textit {数据输血}的新术语创造为用户在将可穿戴设备与主机设备配对时所经历的现象。 由于配对，因此在主机设备中存储的大量数据（例如，智能手机）被强行复制到可穿戴设备（例如，智能手表），而可穿戴设备通常较少。 据《最好的知识》，没有以前的工作能够操纵敏感数据即使没有用户的同意，以及用户对智能手表的这种现象的看法和行为。 我们通过对来自Android Wear，WatchOS和Tizen平台等商品设备的数据提取的数据提取，以及对205个智能手表用户进行的调查研究，以两倍的折叠来解决这个问题。 实验研究表明，大量敏感数据被输血，但是没有足够的用户通知。 调查结果表明，与智能手机相比，用户对智能手表的安全性和隐私感的看法较低，但是在需要时他们倾向于在两个设备上设置相同的密码。 根据结果，我们进行风险评估，并讨论涉及挥发输血的可能缓解措施。",
        "title_zh": "海报:配对时小心你的智能手表",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2017.html",
        "conf_title": "24th CCS 2017: Dallas, TX, USA",
        "conf_url": "https://doi.org/10.1145/3133956",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3133956.3138836",
        "title": "POSTER: Inaudible Voice Commands",
        "authors": "Liwei Song, Prateek Mittal",
        "abstract": "Voice assistants like Siri enable us to control IoT devices conveniently with voice commands, however, they also provide new attack opportunities for adversaries. Previous papers attack voice assistants with obfuscated voice commands by leveraging the gap between speech recognition system and human voice perception. The limitation is that these obfuscated commands are audible and thus conspicuous to device owners. In this poster, we propose a novel mechanism to directly attack the microphone used for sensing voice data with inaudible voice commands. We show that the adversary can exploit the microphone's non-linearity and play well-designed inaudible ultrasounds to cause the microphone to record normal voice commands, and thus control the victim device inconspicuously. We demonstrate via end-to-end real-world experiments that our inaudible voice commands can attack an Android phone and an Amazon Echo device with high success rates at a range of 2-3 meters.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "像Siri这样的语音助手使我们能够通过语音命令方便地控制IoT设备，但是，他们还为对手提供了新的攻击机会。 以前的论文通过利用语音识别系统与人类语音感知之间的差距来攻击具有混淆语音命令的语音助手。 限制是这些混淆的命令是可听见的，因此对设备所有者显眼。 在此海报中，我们提出了一种新型机制，可以直接攻击用听不清语音命令传感语音数据的麦克风。 我们表明，对手可以利用麦克风的非线性，并播放精心设计的不可察觉的超声波，从而导致麦克风记录正常的语音命令，从而不明显地控制受害者设备。 我们通过端到端的现实世界实验证明，我们听不清的语音命令可以攻击Android手机和Amazon Echo设备，其成功率很高，范围为2-3米。",
        "title_zh": "海报:听不见的语音命令",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2017.html",
        "conf_title": "24th CCS 2017: Dallas, TX, USA",
        "conf_url": "https://doi.org/10.1145/3133956",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3139550.3139561",
        "title": "Notify Assist: Balancing Privacy and Convenience in Delivery of Notifications on Android Smartphones",
        "authors": "Raj Vardhan, Ameya Sanzgiri, Dattatraya Kulkarni, Piyush Joshi, Srikanth Nalluri",
        "abstract": "Today, notifications have become a popular medium for mobile applications to inform users about a variety of events. Android supports lock screen notifications to aid the convenience of users in viewing notification content. To address privacy concerns, Android provides platform support to applications so that they can mark sensitive notifications as private. For users, Android provides settings so that users can choose whether content of sensitive notifications should be visible on lock screen or kept hidden. However, we found that majority of the applications mark most of their notifications as private. Consequently, in choosing a particular notification setting, users face a major trade-off between privacy and convenience. In this paper, we present a system called Notify Assist, that helps users balance privacy and convenience in consuming notifications. We discuss results obtained from one year of field study, during which Notify Assist was available in Google Play Store, and a one month lab study with 60 Android users where we obtained more detailed data to supplement the field study.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "如今，通知已成为移动应用程序的流行媒体，以告知用户各种事件。 Android支持锁定屏幕通知，以帮助用户在查看通知内容方面的便利性。 为了解决隐私问题，Android为应用程序提供了平台支持，以便它们可以将敏感通知标记为私人。 对于用户，Android提供设置，以便用户可以选择敏感通知内容应在锁定屏幕上可见还是隐藏。 但是，我们发现大多数应用程序都标志着它们的大多数通知是私人的。 因此，在选择特定的通知设置时，用户面临隐私和便利之间的重大权衡。 在本文中，我们提出了一个名为Notify Assist的系统，该系统可帮助用户在消费通知中平衡隐私和便利性。 我们讨论了从一年的现场研究中获得的结果，在此期间，在Google Play商店中可以使用Notify Assist，并与60个Android用户进行了一个月的实验室研究，我们获得了更多详细的数据来补充现场研究。",
        "title_zh": "通知助手:在Android智能手机上发送通知时平衡隐私和便利",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wpes/wpes2017.html",
        "conf_title": "WPES@CCS 2017: Dallas, TX, USA",
        "conf_url": "http://dl.acm.org/citation.cfm?id=3139550",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3139550.3139568",
        "title": "Is Bob Sending Mixed Signals?",
        "authors": "Michael Schliep, Ian Kariniemi, Nicholas Hopper",
        "abstract": "Demand for end-to-end secure messaging has been growing rapidly and companies have responded by releasing applications that implement end-to-end secure messaging protocols. Signal and protocols based on Signal dominate the secure messaging applications. In this work we analyze conversational security properties provided by the Signal Android application against a variety of real world adversaries. We identify vulnerabilities that allow the Signal server to learn the contents of attachments, undetectably re-order and drop messages, and add and drop participants from group conversations. We then perform proof-of-concept attacks against the application to demonstrate the practicality of these vulnerabilities, and suggest mitigations that can detect our attacks. The main conclusion of our work is that we need to consider more than confidentiality and integrity of messages when designing future protocols. We also stress that protocols must protect against compromised servers and at a minimum implement a trust but verify model.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "对端到端安全消息传递的需求一直在迅速增长，公司通过释放实施端到端安全消息传递协议的应用程序做出了回应。 基于信号的信号和协议主导了安全的消息传递应用程序。 在这项工作中，我们分析了信号Android应用程序对各种现实世界对手提供的对话安全属性。 我们确定了允许信号服务器学习附件内容，不可检测的重新排序和删除消息的漏洞，并将参与者从组对话中添加和删除。 然后，我们对应用程序进行概念验证攻击，以证明这些漏洞的实用性，并提出可以检测我们攻击的缓解。 我们工作的主要结论是，在设计未来协议时，我们需要考虑消息的保密性和完整性。 我们还强调，协议必须防止折衷的服务器，并至少实现信任，但要验证模型。",
        "title_zh": "鲍勃发出的是混合信号吗？",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wpes/wpes2017.html",
        "conf_title": "WPES@CCS 2017: Dallas, TX, USA",
        "conf_url": "http://dl.acm.org/citation.cfm?id=3139550",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3139550.3139552",
        "title": "SweetDroid: Toward a Context-Sensitive Privacy Policy Enforcement Framework for Android OS",
        "authors": "Xin Chen, Heqing Huang, Sencun Zhu, Qing Li, Quanlong Guan",
        "abstract": "Android privacy control is an important but difficult problem to solve. Previously, there was much research effort either focusing on extending the Android permission model with better policies or modifying the Android framework for fine-grained access control. In this work, we take an integral approach by designing and implementing SweetDroid, a calling-context-sensitive privacy policy enforcement framework. SweetDroid combines automated policy generation with automated policy enforcement. The automatically generated policies in SweetDroid are based on the calling contexts of privacy sensitive APIs; hence, SweetDroid is able to tell whether a particular API (e.g., getLastKnownLocation) under a certain execution path is leaking private information. The policy enforcement in SweetDroid is also fine-grained - it is at the individual API level, not at the permission level. We implement and evaluate the system based on thousands of Android apps, including those from a third-party market and malicious apps from VirusTotal. Our experiment results show that SweetDroid can successfully distinguish and enforce different privacy policies based on calling contexts, and the current design is both developer hassle-free and user transparent. SweetDroid is also efficient because it only introduces small storage and computational overhead.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android隐私控制是一个重要但困难的问题。 以前，有很多研究工作重点是通过更好的策略扩展Android许可模型，或者修改Android框架以进行细粒度的访问控制。 在这项工作中，我们通过设计和实施SweetDroid（一种呼叫语义敏感的隐私政策执法框架）采用了不可或缺的方法。 SweetDroid将自动化政策的生成与自动化政策执法相结合。 SweetDroid中自动生成的策略是基于隐私敏感API的呼叫上下文； 因此，SweetDroid能够判断在某个执行路径下的特定API（例如，GetLastnoylocation）是否正在泄漏私人信息。 SweetDroid中的政策执法也是细粒度的 - 它在单个API级别，而不是在许可级别。 我们基于数千个Android应用程序，包括来自第三方市场的Android应用程序以及Virustotal的恶意应用程序，实施和评估该系统。 我们的实验结果表明，SweetDroid可以基于呼叫上下文成功区分和执行不同的隐私政策，而当前的设计既是开发人员无麻烦，也是用户透明的。 SweetDroid也很有效，因为它仅引入小型存储空间和计算开销。",
        "title_zh": "SweetDroid:面向Android操作系统的上下文敏感隐私策略实施框架",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wpes/wpes2017.html",
        "conf_title": "WPES@CCS 2017: Dallas, TX, USA",
        "conf_url": "http://dl.acm.org/citation.cfm?id=3139550",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3141235.3141239",
        "title": "ReDroid: Prioritizing Data Flows and Sinks for App Security Transformation",
        "authors": "Ke Tian, Gang Tan, Danfeng Daphne Yao, Barbara G. Ryder",
        "abstract": "Security transformation is to transfer applications to meet security guarantees. How to prioritize Android apps and find suitable transformation options is a challenging problem. Typical real-world apps have a large number of sensitive flows and sinks. Thus, security analysts need to prioritize these flows and data sinks according to their risks, i.e., flow ranking and sink ranking. We present an efficient graph-algorithm based risk metric for prioritizing risky flows and sinks in Android grayware apps. Our risk prioritization produces orderings that are consistent with published security reports. We demonstrate a new automatic app transformation framework that utilizes the above prioritization technique to improve app security. The framework provides more rewriting options than the state-of-art solutions by supporting flow-and sink-based security checks. Our prototype ReDroid is designed for security analysts who manage organizational app repositories and customize third-party apps to satisfy organization imposed security requirements. Our framework enables application transformation for both benchmark apps and real-world grayware to strengthen their security guarantees.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "安全转换是转移申请以满足安全保证。 如何优先考虑Android应用程序并找到合适的转换选项是一个具有挑战性的问题。 典型的现实世界应用具有大量敏感流和水槽。 因此，安全分析师需要根据其风险（即流量排名和下沉式排名）确定这些流量和数据沉没的优先级。 我们提出了一个有效的基于图形的风险度量标准，用于优先考虑Android Grayware应用中的风险流和汇。 我们的风险优先级会产生与已发表的安全报告一致的顺序。 我们演示了一个新的自动应用转换框架，该框架利用上述优先级技术来提高应用程序安全性。 该框架通过支持基于流和接收器的安全检查，提供了比最先进的解决方案的重写选项。 我们的原型Redroid专为管理组织应用程序存储库并自定义第三方应用程序的安全分析师设计，以满足组织强加的安全要求。 我们的框架可以为基准应用程序和现实世界中的灰色软件进行应用程序转换，以增强其安全保证。",
        "title_zh": "ReDroid:为应用程序安全转型区分数据流和接收器的优先级",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/feast2017.html",
        "conf_title": "2nd FEAST@CCS 2017: Dallas, TX, USA",
        "conf_url": "http://dl.acm.org/citation.cfm?id=3141235",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3243734.3243785",
        "title": "ClickShield: Are You Hiding Something? Towards Eradicating Clickjacking on Android",
        "authors": "Andrea Possemato, Andrea Lanzi, Simon Pak Ho Chung, Wenke Lee, Yanick Fratantonio",
        "abstract": "In the context of mobile-based user-interface (UI) attacks, the common belief is that clickjacking is a solved problem. On the contrary, this paper shows that clickjacking is still an open problem for mobile devices. In fact, all known academic and industry solutions are either not effective or not applicable in the real-world for backward compatibility reasons. This work shows that, as a consequence, even popular and sensitive apps like Google Play Store remain, to date, completely unprotected from clickjacking attacks. After gathering insights into how apps use the user interface, this work performs a systematic exploration of the design space for an effective and practical protection against clickjacking attacks. We then use this exploration to guide the design of ClickShield, a new defensive mechanism. To address backward compatibility issues, our design allows for overlays to cover the screen, and we employ image analysis techniques to determine whether the user could be confused. We have implemented a prototype and we have tested it against ClickBench, a newly developed benchmark specifically tailored to stress-test clickjacking protection solutions. This dataset is constituted by 104 test cases, and it includes real-world and simulated benign and malicious examples that evaluate the system across a wide range of legitimate and attack scenarios. The results show that our system is able to address backward compatibility concerns, to detect all known attacks (including a never-seen-before real-world malware that was published after we have developed our solution), and it introduces a negligible overhead.",
        "files": {
            "openAccessPdf": "https://dl.acm.org/doi/pdf/10.1145/3243734.3243785"
        },
        "abstract_zh": "在基于移动的用户界面（UI）攻击的上下文中，普遍的信念是，点击夹克是解决问题的问题。 相反，本文表明，Click Jacking对于移动设备仍然是一个开放的问题。 实际上，出于向后兼容的原因，所有已知的学术和行业解决方案要么无效，要么不适用于现实世界中。 这项工作表明，因此，即使是Google Play商店（如迄今为止），仍然没有受到关注的攻击，即使是Google Play商店（如Google Play商店）仍然没有保护。 在收集了有关应用程序如何使用用户界面的洞察力之后，此工作对设计空间进行了系统的探索，以进行有效而实践的保护，以防止点击夹克攻击。 然后，我们使用此探索来指导新的防御机制Clickshield的设计。 为了解决向后兼容性问题，我们的设计允许叠加层覆盖屏幕，我们采用图像分析技术来确定是否可以混淆用户。 我们已经实施了一个原型，并且已经针对ClickBench进行了测试，这是一种新开发的基准，专门针对压力测试的Click-Jacking Protection Solutions量身定制。 该数据集由104个测试用例构成，其中包括现实世界和模拟的良性和恶意示例，可在广泛的合法和攻击方案中评估系统。 结果表明，我们的系统能够解决向后的兼容性问题，以检测所有已知的攻击（包括在我们开发解决方案后出版的现实世界中从未发现的攻击），并且它引入了可忽略的开销。",
        "title_zh": "ClickShield:你在隐藏什么吗？努力根除Android上的点击劫持",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2018.html",
        "conf_title": "25th CCS 2018: Toronto, ON, Canada",
        "conf_url": "http://dl.acm.org/citation.cfm?id=3243734",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3243734.3243835",
        "title": "JN-SAF: Precise and Efficient NDK/JNI-aware Inter-language Static Analysis Framework for Security Vetting of Android Applications with Native Code",
        "authors": "Fengguo Wei, Xingwei Lin, Xinming Ou, Ting Chen, Xiaosong Zhang",
        "abstract": "Android allows application developers to use native language (C/C++) to implement a part or the complete program. Recent research and our own statistics show that native payloads are commonly used in both benign and malicious apps. Current state-of-the-art Android static analysis tools, such as Amandroid, FlowDroid, DroidSafe, IccTA, and CHEX avoid handling native method invocation and apply conservative models for their data-flow behavior. None of those tools have capability to capture the inter-language dataflow. We propose a new approach to conduct inter-language dataflow analysis for security vetting of Android apps, and build an analysis framework, called JN-SAF to compute flow and context-sensitive inter-language points-to information in an efficient way. We show that: 1) Precise and efficient inter-language dataflow analysis is completely feasible with support of a summary-based bottom-up dataflow analysis (SBDA) algorithm, 2) A comprehensive model of Java Native Interface (JNI) and Native Development Kit (NDK) for binary analysis is essential as none of the existing binary analysis frameworks is able to handle Android binaries, 3) JN-SAF is capable of capturing inter-language security issues in real-world Android apps as demonstrated by our evaluation result.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android允许应用程序开发人员使用母语（C/C ++）来实现零件或完整程序。 最近的研究和我们自己的统计数据表明，本机有效载荷通常在良性和恶意应用程序中使用。 当前最新的Android静态分析工具，例如Amandroid，FlowDroid，DroidSafe，ICCTA和CHEX，避免处理本机方法调用，并将保守模型应用于其数据流程。 这些工具都没有能力捕获语言数据流。 我们提出了一种新方法，以进行语言间的数据流分析，以进行Android应用程序的安全审查，并建立一个称为JN-SAF的分析框架，以高效的方式计算流程和上下文敏感的语言中语言点。 我们表明：1）在支持基于摘要的自下而上数据流分析（SBDA）算法的情况下，精确有效的语言数据流量分析是完全可行的，2）一个Java天然界面（JNI）和天然发展套件的综合模型 （NDK）对于二进制分析是必不可少的，因为现有的二进制分析框架都无法处理Android二进制文件，3）JN-SAF能够在我们的评估结果中证明，JN-SAF能够捕获现实世界中Android应用程序中的语言安全性问题。",
        "title_zh": "JN-SAF:精确高效的NDK/JNI感知的跨语言静态分析框架，用于对带有本机代码的Android应用程序进行安全审查",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2018.html",
        "conf_title": "25th CCS 2018: Toronto, ON, Canada",
        "conf_url": "http://dl.acm.org/citation.cfm?id=3243734",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3243734.3243842",
        "title": "Precise Android API Protection Mapping Derivation and Reasoning",
        "authors": "Yousra Aafer, Guanhong Tao, Jianjun Huang, Xiangyu Zhang, Ninghui Li",
        "abstract": "The Android research community has long focused on building an Android API permission specification, which can be leveraged by app developers to determine the optimum set of permissions necessary for a correct and safe execution of their app. However, while prominent existing efforts provide a good approximation of the permission specification, they suffer from a few shortcomings. Dynamic approaches cannot generate complete results, although accurate for the particular execution. In contrast, static approaches provide better coverage, but produce imprecise mappings due to their lack of path-sensitivity. In fact, in light of Android's access control complexity, the approximations hardly abstract the actual co-relations between enforced protections. To address this, we propose to precisely derive Android protection specification in a path-sensitive fashion, using a novel graph abstraction technique. We further showcase how we can apply the generated maps to tackle security issues through logical satisfiability reasoning. Our constructed maps for 4 Android Open Source Project (AOSP) images highlight the significance of our approach, as ~41% of APIs' protections cannot be correctly modeled without our technique.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android研究社区长期以来一直专注于构建Android API许可规范，应用程序开发人员可以利用该规范来确定正确且安全执行其应用程序所需的最佳权限集。 但是，尽管现有的主要努力可以很好地近似许可规范，但它们却遭受了一些缺陷。 动态方法无法生成完整的结果，尽管对于特定执行是准确的。 相反，静态方法提供了更好的覆盖范围，但由于缺乏路径敏感性而产生不精确的映射。 实际上，鉴于Android的访问控制复杂性，近似值几乎不能抽象强制保护之间的实际共同关系。 为了解决这个问题，我们建议使用一种新型的图形抽象技术以途径敏感的方式精确地得出Android保护规范。 我们进一步展示了如何通过逻辑满足推理应用生成的地图来解决安全问题。 我们针对4个Android开源项目（AOSP）图像的构建的地图突出了我们方法的重要性，因为如果没有我们的技术，就无法正确对API的保护量的41％进行建模。",
        "title_zh": "精确的Android API保护映射推导和推理",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2018.html",
        "conf_title": "25th CCS 2018: Toronto, ON, Canada",
        "conf_url": "http://dl.acm.org/citation.cfm?id=3243734",
        "keywords": [
            "AOSP",
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3243734.3243843",
        "title": "Invetter: Locating Insecure Input Validations in Android Services",
        "authors": "Lei Zhang, Zhemin Yang, Yuyu He, Zhenyu Zhang, Zhiyun Qian, Geng Hong, Yuan Zhang, Min Yang",
        "abstract": "Android integrates an increasing number of features into system services to manage sensitive resources, such as location, medical and social network information. To prevent untrusted apps from abusing the services, Android implements a comprehensive set of access controls to ensure proper usage of sensitive resources. Unlike explicit permission-based access controls that are discussed extensively in the past, our paper focuses on the widespread yet undocumented input validation problem. As we show in the paper, there are in fact more input validations acting as security checks than permission checks, rendering them a critical foundation for Android framework. Unfortunately, these validations are unstructured, ill-defined, and fragmented, making it challenging to analyze. To this end, we design and implement a tool, called Invetter, that combines machine learning and static analysis to locate sensitive input validations that are problematic in system services. By applying Invetter to 4 different AOSP codebases and 4 vendor-customized images, we locate 103 candidate insecure validations. Among the true positives, we are able to confirm that at least 20 of them are truly exploitable vulnerabilities by constructing various attacks such as privilege escalation and private information leakage.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android将越来越多的功能集成到系统服务中，以管理敏感资源，例如位置，医疗和社交网络信息。 为了防止不受信任的应用程序滥用服务，Android实施了一组全面的访问控件，以确保适当使用敏感资源。 与过去广泛讨论的明确基于权限的访问控件不同，我们的论文着重于广泛但无证件的输入验证问题。 正如我们在论文中显示的那样，实际上，与许可检查相比，有更多的输入验证作为安全检查，这使它们成为Android框架的关键基础。 不幸的是，这些验证是非结构化的，不确定的和分散的，使得分析具有挑战性。 为此，我们设计并实施了一种称为Invetter的工具，该工具将机器学习和静态分析结合在一起，以找到在系统服务中有问题的敏感输入验证。 通过将开机器应用于4个不同的AOSP代码库和4个供应商的图像，我们找到了103个候选人不安全验证。 在真正的积极因素中，我们能够确认，其中至少有20个是通过构建各种攻击（例如特权升级和私人信息泄漏）来真正可利用的漏洞。",
        "title_zh": "Invetter:定位Android服务中不安全的输入验证",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2018.html",
        "conf_title": "25th CCS 2018: Toronto, ON, Canada",
        "conf_url": "http://dl.acm.org/citation.cfm?id=3243734",
        "keywords": [
            "AOSP",
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3243734.3243808",
        "title": "EviHunter: Identifying Digital Evidence in the Permanent Storage of Android Devices via Static Analysis",
        "authors": "Chris Chao-Chun Cheng, Chen Shi, Neil Zhenqiang Gong, Yong Guan",
        "abstract": "Crimes, both physical and cyber, increasingly involve smartphones due to their ubiquity. Therefore, digital evidence on smartphones plays an increasingly important role in crime investigations. Digital evidence could reside in the memory and permanent storage of a smartphone. While we have witnessed significant progresses on memory forensics recently, identifying evidence in the permanent storage is still an underdeveloped research area. Most existing studies on permanent-storage forensics rely on manual analysis or keyword-based scanning of the permanent storage. Manual analysis is costly, while keyword matching often misses the evidentiary data that do not have interesting keywords. In this work, we develop a tool called EviHunter to automatically identify evidentiary data in the permanent storage of an Android device. There could be thousands of files on the permanent storage of a smartphone. A basic question a forensic investigator often faces is which files could store evidentiary data. EviHunter aims to answer this question. Our intuition is that the evidentiary data were produced by apps; and an app's code has rich information about the types of data the app may write to a permanent storage and the files the data are written to. Therefore, EviHunter first pre-computes an App Evidence Database (AED) via static analysis of a large number of apps. The AED includes the types of evidentiary data and files that store them for each app. Then, EviHunter matches the files on a smartphone's permanent storage against the AED to identify the files that could store evidentiary data. We evaluate EviHunter on benchmark apps and 8,690 real-world apps. Our results show that EviHunter can precisely identify both the types of evidentiary data and the files that store them.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "由于无处不在，犯罪越来越多地涉及智能手机。 因此，关于智能手机的数字证据在犯罪调查中起着越来越重要的作用。 数字证据可以存在于智能手机的内存和永久存储中。 尽管我们最近目睹了记忆取证方面的重大进展，但在永久存储中确定证据仍然是一个欠发达的研究领域。 关于永久存储法医学的大多数现有研究都取决于对永久存储的手动分析或基于关键字的扫描。 手动分析成本很高，而关键字匹配通常会错过没有有趣关键字的证据数据。 在这项工作中，我们开发了一种称为Evihunter的工具，可以在永久存储Android设备中自动识别证据数据。 智能手机的永久存储可能有数千个文件。 法医研究者经常面临的一个基本问题是哪些文件可以存储证据数据。 Evihunter旨在回答这个问题。 我们的直觉是，证据数据是由应用程序生成的。 应用程序的代码具有有关应用程序可能写入永久存储的数据类型的丰富信息，并且数据写入的文件。 因此，Evihunter首先通过对大量应用程序的静态分析来预计应用程序证据数据库（AED）。 AED包括为每个应用程序存储它们的证据数据和文件的类型。 然后，Evihunter将智能手机永久存储的文件与AED匹配，以识别可以存储证据数据的文件。 我们在基准应用程序和8,690个现实世界应用程序上评估Evihunter。 我们的结果表明，Evihunter可以精确地识别证据数据的类型和存储它们的文件。",
        "title_zh": "EviHunter:通过静态分析识别Android设备永久存储中的数字证据",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2018.html",
        "conf_title": "25th CCS 2018: Toronto, ON, Canada",
        "conf_url": "http://dl.acm.org/citation.cfm?id=3243734",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3243734.3243777",
        "title": "PatternListener: Cracking Android Pattern Lock Using Acoustic Signals",
        "authors": "Man Zhou, Qian Wang, Jingxiao Yang, Qi Li, Feng Xiao, Zhibo Wang, Xiaofeng Chen",
        "abstract": "Pattern lock has been widely used for authentication to protect user privacy on mobile devices (e.g., smartphones and tablets). Several attacks have been constructed to crack the lock. However, these approaches require the attackers to be either physically close to the target device or able to manipulate the network facilities (e.g., wifi hotspots) used by the victims. Therefore, the effectiveness of the attacks is highly sensitive to the setting of the environment where the users use the mobile devices. Also, these attacks are not scalable since they cannot easily infer patterns of a large number of users. Motivated by an observation that fingertip motions on the screen of a mobile device can be captured by analyzing surrounding acoustic signals on it, we propose PatternListener, a novel acoustic attack that cracks pattern lock by leveraging and analyzing imperceptible acoustic signals reflected by the fingertip. It leverages speakers and microphones of the victim's device to play imperceptible audio and record the acoustic signals reflected from the fingertip. In particular, it infers each unlock pattern by analyzing individual lines that are the trajectories of the fingertip and composed of the pattern. We propose several algorithms to construct signal segments for each line and infer possible candidates of each individual line according to the signal segments. Finally, we produce a tree to map all line candidates into grid patterns and thereby obtain the candidates of the entire unlock pattern. We implement a PatternListener prototype by using off-the-shelf smartphones and thoroughly evaluate it using 130 unique patterns. The real experimental results demonstrate that PatternListener can successfully exploit over 90% patterns in five attempts.",
        "files": {
            "openAccessPdf": "http://arxiv.org/pdf/1810.02242"
        },
        "abstract_zh": "模式锁已被广泛用于身份验证，以保护移动设备（例如智能手机和平板电脑）上的用户隐私。 已经构建了几次攻击来破解锁。 但是，这些方法要求攻击者在物理上靠近目标设备，或者能够操纵受害者使用的网络设施（例如，WiFi热点）。 因此，攻击的有效性对用户使用移动设备的环境的设置高度敏感。 同样，这些攻击无法扩展，因为它们无法轻易推断大量用户的模式。 通过观察到，可以通过分析周围的声学信号来捕获移动设备屏幕上的指尖动作的动机，我们提出了一种新型的声学攻击，这是一种新颖的声学攻击，通过利用和分析触摸架反射的不可察觉的声学信号来破裂模式锁定。 它利用受害者设备的扬声器和麦克风播放不可察觉的音频，并记录从指尖反射的声学信号。 特别是，它通过分析是指尖的轨迹并由模式组成的单个线条来渗透每个解锁模式。 我们提出了几种算法，以根据信号段来构造每条线的信号段，并根据信号段推断每条线的可能候选者。 最后，我们生产一棵树将所有候选线映射到网格模式中，从而获得整个解锁模式的候选者。 我们通过使用现成的智能手机来实现模式列表原型，并使用130种独特的模式对其进行彻底评估。 真正的实验结果表明，五次尝试中的模式单体可以成功利用超过90％的模式。",
        "title_zh": "PatternListener:使用声音信号破解Android模式锁",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2018.html",
        "conf_title": "25th CCS 2018: Toronto, ON, Canada",
        "conf_url": "http://dl.acm.org/citation.cfm?id=3243734",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3243734.3243778",
        "title": "Phishing Attacks on Modern Android",
        "authors": "Simone Aonzo, Alessio Merlo, Giulio Tavella, Yanick Fratantonio",
        "abstract": "Modern versions of Android have introduced a number of features in the name of convenience. This paper shows how two of these features, mobile password managers and Instant Apps, can be abused to make phishing attacks that are significantly more practical than existing ones. We have studied the leading password managers for mobile and we uncovered a number of design issues that leave them open to attacks. For example, we show it is possible to trick password managers into auto-suggesting credentials associated with arbitrary attacker-chosen websites. We then show how an attacker can abuse the recently introduced Instant Apps technology to allow a remote attacker to gain full UI control and, by abusing password managers, to implement an end-to-end phishing attack requiring only few user's clicks. We also found that mobile password managers are vulnerable to \"hidden fields\" attacks, which makes these attacks even more practical and problematic. We conclude this paper by proposing a new secure-by-design API that avoids common errors and we show that the secure implementation of autofill functionality will require a community-wide effort, which this work hopes to inspire.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android的现代版本以便利的名义引入了许多功能。 本文展示了这些功能中的两个，移动密码管理器和即时应用程序如何滥用，以进行网络钓鱼攻击，这些攻击比现有的攻击更为实用。 我们研究了移动设备的领先密码管理器，并发现了许多设计问题，使它们持开放态度。 例如，我们表明可以将密码管理器欺骗到与任意攻击者选择的网站相关的自动符合凭据。 然后，我们展示攻击者如何滥用最近引入的即时应用程序技术，以允许远程攻击者获得完整的UI控件，并通过滥用密码管理器，实施端到端的网络钓鱼攻击，仅需要几个用户的点击。 我们还发现，移动密码管理器容易受到“隐藏字段”攻击的攻击，这使得这些攻击更加实用和有问题。 我们通过提出了一种避免常见错误的新安全性API来结束本文，我们表明，自动填充功能的安全实施将需要社区范围内的努力，这项工作希望这能激发它。",
        "title_zh": "现代Android上的网络钓鱼攻击",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2018.html",
        "conf_title": "25th CCS 2018: Toronto, ON, Canada",
        "conf_url": "http://dl.acm.org/citation.cfm?id=3243734",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3243734.3278484",
        "title": "An Effective Android Code Coverage Tool",
        "authors": "Aleksandr Pilgun, Olga Gadyatskaya, Stanislav Dashevskyi, Yury Zhauniarovich, Artsiom Kushniarou",
        "abstract": "The deluge of Android apps from third-party developers calls for sophisticated security testing and analysis techniques to inspect suspicious apps without accessing their source code. Code coverage is an important metric used in these techniques to evaluate their effectiveness, and even as a fitness function to help achieving better results in evolutionary and fuzzy approaches. Yet, so far there are no reliable tools for measuring fine-grained bytecode coverage of Android apps. In this work we present ACVTool that instruments Android apps and measures the smali code coverage at the level of classes, methods, and instructions. Tool repository: https://github.com/pilgun/acvtool",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "第三方开发人员的Android应用程序泛滥，要求进行复杂的安全测试和分析技术，以检查可疑应用程序而无需访问其源代码。 代码覆盖范围是这些技术用于评估其有效性的重要指标，即使是有助于获得进化和模糊方法更好的适应性功能。 但是，到目前为止，还没有可靠的工具来测量Android应用程序的细粒字节覆盖范围。 在这项工作中，我们介绍了AcvTool，以启动Android应用程序并在类，方法和说明级别上衡量SMALI代码覆盖范围。 工具存储库：https：//github.com/pilgun/acvtool",
        "title_zh": "一个有效的Android代码覆盖工具",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2018.html",
        "conf_title": "25th CCS 2018: Toronto, ON, Canada",
        "conf_url": "http://dl.acm.org/citation.cfm?id=3243734",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3243734.3278524",
        "title": "The Influence of Code Coverage Metrics on Automated Testing Efficiency in Android",
        "authors": "Stanislav Dashevskyi, Olga Gadyatskaya, Aleksandr Pilgun, Yury Zhauniarovich",
        "abstract": "Code coverage is an important metric that is used by automated Android testing and security analysis tools to guide the exploration of applications and to assess efficacy. Yet, there are many different variants of this metric and there is no agreement within the Android community on which are the best to work with. In this paper, we report on our preliminary study using the state-of-the-art automated test design tool Sapienz. Our results suggest a viable hypothesis that combining different granularities of code coverage metrics can be beneficial for achieving better results in automated testing of Android applications.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "代码覆盖范围是一个重要的指标，由自动化的Android测试和安全分析工具用于指导应用程序探索并评估功效。 但是，该指标有许多不同的变体，并且在Android社区中没有达成共识，可以最好地使用。 在本文中，我们使用最先进的自动测试设计工具Sapienz报告了初步研究。 我们的结果表明，可行的假设是，将不同的代码覆盖范围指标相结合可能有益于在Android应用的自动测试中获得更好的结果。",
        "title_zh": "代码覆盖度量对Android自动化测试效率的影响",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2018.html",
        "conf_title": "25th CCS 2018: Toronto, ON, Canada",
        "conf_url": "http://dl.acm.org/citation.cfm?id=3243734",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3243734.3278494",
        "title": "Aggregated Machine Learning on Indicators of Compromise in Android Devices",
        "authors": "John M. San Miguel, Megan E. M. Kline, Roger A. Hallman, Scott M. Slayback, Alexis Rogers, Stefanie S. F. Chang",
        "abstract": "Malware mitigation for mobile technology is a long-standing problem for which there is not yet a good solution. In this paper, we focus on identifying malicious applications, and verifying the absence of malicious or vulnerable code in applications that agencies seek to utilize. Our analysis toolbox includes static analysis and permissions risk scoring as pre-installation vetting techniques designed to prevent malware from being installed on devices on an enterprise network. However, dynamic code-loading techniques and changing security requirements mean that applications which previously passed the static analysis verification process, and have been installed on devices, may no longer meet security standards, and may be malicious. To identify these apps, and prevent their future malfeasance, we propose a crowd-sourced behavioral analysis (CSBA) technique, using machine learning to identify anomalous activity by examining patterns in power consumption, network behavior, and sequences of system calls. These techniques apply effectively to a single user's device over time, as well as to individual devices within an enterprise network.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "缓解移动技术的恶意软件是一个长期存在的问题，目前尚无良好的解决方案。 在本文中，我们专注于确定恶意应用程序，并验证代理商寻求使用的应用程序中缺少恶意或脆弱的代码。 我们的分析工具箱包括静态分析和权限风险评分，作为旨在防止恶意软件安装在企业网络上的设备上的预安装审查技术。 但是，动态代码加载技术和更改安全要求意味着先前通过静态分析验证过程并已安装在设备上的应用程序可能不再符合安全标准，并且可能是恶意的。 为了识别这些应用程序并防止其未来的渎职行为，我们提出了人群的行为分析（CSBA）技术，使用机器学习来通过检查功耗，网络行为和系统调用序列的模式来识别异常活动。 随着时间的推移，这些技术有效地适用于单个用户的设备以及企业网络中的单个设备。",
        "title_zh": "基于Android设备危害指标的聚合机器学习",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2018.html",
        "conf_title": "25th CCS 2018: Toronto, ON, Canada",
        "conf_url": "http://dl.acm.org/citation.cfm?id=3243734",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2976749.2978297",
        "title": "The Misuse of Android Unix Domain Sockets and Security Implications",
        "authors": "Yuru Shao, Jason Ott, Yunhan Jack Jia, Zhiyun Qian, Zhuoqing Morley Mao",
        "abstract": "In this work, we conduct the first systematic study in understanding the security properties of the usage of Unix domain sockets by both Android apps and system daemons as an IPC (Inter-process Communication) mechanism, especially for cross-layer communications between the Java and native layers. We propose a tool called SInspector to expose potential security vulnerabilities in using Unix domain sockets through the process of identifying socket addresses, detecting authentication checks, and performing data flow analysis. Our in-depth analysis revealed some serious vulnerabilities in popular apps and system daemons, such as root privilege escalation and arbitrary file access. Based on our findings, we propose countermeasures and improved practices for utilizing Unix domain sockets on Android.",
        "files": {
            "openAccessPdf": "http://dl.acm.org/ft_gateway.cfm?id=2978297&type=pdf"
        },
        "abstract_zh": "在这项工作中，我们进行了第一项系统研究，以了解Android应用程序和系统守护程序对UNIX域插座使用的安全性，作为IPC（过程间通信）机制，尤其是对于Java和Java之间的跨层通信 本地层。 我们提出了一种称为Sinspector的工具，可以通过识别套接字地址，检测身份验证检查并执行数据流量分析的过程来暴露使用UNIX域插座的潜在安全漏洞。 我们的深入分析揭示了流行的应用程序和系统守护程序中的一些严重漏洞，例如根特权升级和任意文件访问。 根据我们的发现，我们提出了对策和改进的实践，以利用Android上的UNIX域插座。",
        "title_zh": "Android Unix域套接字的误用及其安全隐患",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2016.html",
        "conf_title": "23rd CCS 2016: Vienna, Austria",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2976749",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2976749.2978342",
        "title": "Call Me Back!: Attacks on System Server and System Apps in Android through Synchronous Callback",
        "authors": "Kai Wang, Yuqing Zhang, Peng Liu",
        "abstract": "Android is the most commonly used mobile device operation system. The core of Android, the System Server (SS), is a multi-threaded process that provides most of the system services. Based on a new understanding of the security risks introduced by the callback mechanism in system services, we have discovered a general type of design flaw. A vulnerability detection tool has been designed and implemented based on static taint analysis. We applied the tool on all the 80 system services in the SS of Android 5.1.0. With its help, we have discovered six previously unknown vulnerabilities, which are further confirmed on Android 2.3.7-6.0.1. According to our analysis, about 97.3% of the entire 1.4 billion real-world Android devices are vulnerable. Our proof-of-concept attack proves that the vulnerabilities can enable a malicious app to freeze critical system functionalities or soft-reboot the system immediately. It is a neat type of denial-of-service at-tack. We also proved that the attacks can be conducted at mission critical moments to achieve meaningful goals, such as anti anti-virus, anti process-killer, hindering app updates or system patching. After being informed, Google confirmed our findings promptly. Several suggestions on how to use callbacks safely are also proposed to Google.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android是最常用的移动设备操作系统。 Android的核心系统服务器（SS）是一个多线程的过程，可提供大多数系统服务。 基于对系统服务中回调机制引入的安全风险的新理解，我们发现了一般类型的设计缺陷。 基于静态污染分析设计和实施了脆弱性检测工具。 我们将该工具应用于Android 5.1.0 SS中的所有80个系统服务。 在它的帮助下，我们发现了六个以前未知的漏洞，这些漏洞在Android 2.3.7-6.0.1上得到了进一步确认。 根据我们的分析，整个14亿个现实世界设备中，约有97.3％的易受伤害。 我们的概念验证攻击证明，漏洞可以使恶意应用程序立即冻结关键系统功能或对系统进行软启动。 这是一种整洁的拒绝服务的类型。 我们还证明，可以在任务关键时刻进行攻击，以实现有意义的目标，例如反病毒，反过程杀手，阻碍应用程序更新或系统修补。 通知后，Google迅速确认了我们的发现。 还向Google提出了一些有关如何安全使用回调的建议。",
        "title_zh": "给我回电话！:通过同步回调攻击Android中的系统服务器和系统应用",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2016.html",
        "conf_title": "23rd CCS 2016: Vienna, Austria",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2976749",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2976749.2978322",
        "title": "Draco: A System for Uniform and Fine-grained Access Control for Web Code on Android",
        "authors": "Güliz Seray Tuncay, Soteris Demetriou, Carl A. Gunter",
        "abstract": "In-app embedded browsers are commonly used by app developers to display web content without having to redirect the user to heavy-weight web browsers. Just like the conventional web browsers, embedded browsers can allow the execution of web code. In addition, they provide mechanisms (viz., JavaScript bridges) to give web code access to internal app code that might implement critical functionalities and expose device resources. This is intrinsically dangerous since there is currently no means for app developers to perform origin-based access control on the JavaScript bridges, and any web code running in an embedded browser is free to use all the exposed app and device resources. Previous work that addresses this problem provided access control solutions that work only for apps that are built using hybrid frameworks. Additionally, these solutions focused on protecting only the parts of JavaScript bridges that expose permissions-protected resources. In this work, our goal is to provide a generic solution that works for all apps that utilize embedded web browsers and protects all channels that give access to internal app and device resources. Towards realizing this goal, we built Draco, a uniform and fine-grained access control framework for web code running on Android embedded browsers (viz., WebView). Draco provides a declarative policy language that allows developers to define policies to specify the desired access characteristics of web origins in a fine-grained fashion, and a runtime system that dynamically enforces the policies. In contrast with previous work, we do not assume any modifications to the Android operating system, and implement Draco in the Chromium Android System WebView app to enable seamless deployment. Our evaluation of the the Draco runtime system shows that Draco incurs negligible overhead, which is in the order of microseconds.",
        "files": {
            "openAccessPdf": "http://dl.acm.org/ft_gateway.cfm?id=2978322&type=pdf"
        },
        "abstract_zh": "应用程序开发人员通常使用应用程序内嵌入式浏览器来显示Web内容，而无需将用户重定向到重量重量Web浏览器。 就像传统的Web浏览器一样，嵌入式浏览器可以允许执行Web代码。 此外，它们还提供了机制（即JavaScript桥），以使Web代码访问可能实施关键功能并揭示设备资源的内部应用程序代码。 这是本质上危险的，因为当前应用程序开发人员无法在JavaScript桥上执行基于原始的访问控制，并且在嵌入式浏览器中运行的任何Web代码都可以免费使用所有曝光的应用程序和设备资源。 解决此问题的先前工作提供了仅适用于使用混合框架构建的应用程序的访问控制解决方案。 此外，这些解决方案的重点是仅保护暴露于权限保护资源的JavaScript桥的部分。 在这项工作中，我们的目标是提供一个通用解决方案，该解决方案适用于使用嵌入式Web浏览器的所有应用程序，并保护所有可访问内部应用程序和设备资源的渠道。 为了实现这一目标，我们构建了Draco，这是在Android嵌入式浏览器上运行的Web代码的统一且细粒度的访问控制框架（Viz。，WebView）。 Draco提供了一种声明的政策语言，该语言允许开发人员定义策略，以精细元素的方式指定Web起源的所需访问特性，以及一个动态执行策略的运行时系统。 与以前的工作相反，我们不对Android操作系统进行任何修改，而是在Android System WebView应用程序中实现Draco来实现无缝部署。 我们对DRACO运行时系统的评估表明，Draco的开销可忽略不计，这是微秒的顺序。",
        "title_zh": "Draco:一个在Android上对Web代码进行统一和细粒度访问控制的系统",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2016.html",
        "conf_title": "23rd CCS 2016: Vienna, Austria",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2976749",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2976749.2978344",
        "title": "AUDACIOUS: User-Driven Access Control with Unmodified Operating Systems",
        "authors": "Talia Ringer, Dan Grossman, Franziska Roesner",
        "abstract": "User-driven access control improves the coarse-grained access control of current operating systems (particularly in the mobile space) that provide only all-or-nothing access to a resource such as the camera or the current location. By granting appropriate permissions only in response to explicit user actions (for example, pressing a camera button), user-driven access control better aligns application actions with user expectations. Prior work on user-driven access control has relied in essential ways on operating system (OS) modifications to provide applications with uncompromisable access control gadgets, distinguished user interface (UI) elements that can grant access permissions. This work presents a design, implementation, and evaluation of user-driven access control that works with no OS modifications, thus making deployability and incremental adoption of the model more feasible. We develop (1) a user-level trusted library for access control gadgets, (2) static analyses to prevent malicious creation of UI events, illegal flows of sensitive information, and circumvention of our library, and (3) dynamic analyses to ensure users are not tricked into granting permissions. In addition to providing the original user-driven access control guarantees, we use static information flow to limit where results derived from sensitive sources may flow in an application. Our implementation targets Android applications. We port open-source applications that need interesting resource permissions to use our system. We determine in what ways user-driven access control in general and our implementation in particular are good matches for real applications. We demonstrate that our system is secure against a variety of attacks that malware on Android could otherwise mount.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "用户驱动的访问控制可改善当前操作系统（尤其是在移动空间中）的粗粒访问控制，这些操作系统（尤其是在移动空间中）仅提供对诸如相机或当前位置之类的资源的全或全部访问。 通过仅对明确的用户操作（例如，按下相机按钮）授予适当的权限，用户驱动的访问控制可以更好地使应用程序操作与用户期望相结合。 在用户驱动的访问控制上的先前工作以操作系统（OS）修改的基本方式依赖，以提供应用程序不合适的访问控制小工具，可授予访问权限的杰出用户界面（UI）元素。 这项工作介绍了无需修改的用户驱动访问控制的设计，实现和评估，从而使模型的可部署性和逐步采用更可行。 我们开发（1）一个用于访问控制小工具的用户级信任库，（2）静态分析，以防止恶意创建UI事件，非法敏感信息的非法流以及我们库的规避，以及（3）动态分析以确保用户 不被欺骗授予权限。 除了提供原始的用户驱动访问控制保证金外，我们还使用静态信息流以限制从敏感来源衍生的结果可能在应用程序中流动的地方。 我们的实施目标是Android应用程序。 我们向需要有趣的资源权限来使用我们的系统的开源应用程序。 我们确定通常以用户驱动的访问控制方式，尤其是我们的实现是真实应用程序的良好匹配。 我们证明，我们的系统可抵抗Android上的恶意软件可能会安装的各种攻击。",
        "title_zh": "大胆:用户驱动的访问控制，无需修改操作系统",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2016.html",
        "conf_title": "23rd CCS 2016: Vienna, Austria",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2976749",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2976749.2978343",
        "title": "TaintART: A Practical Multi-level Information-Flow Tracking System for Android RunTime",
        "authors": "Mingshen Sun, Tao Wei, John C. S. Lui",
        "abstract": "Mobile operating systems like Android failed to provide sufficient protection on personal data, and privacy leakage becomes a major concern. To understand the security risks and privacy leakage, analysts have to carry out data-flow analysis. In 2014, Android upgraded with a fundamentally new design known as Android RunTime (ART) environment in Android 5.0. ART adopts ahead-of-time compilation strategy and replaces previous virtual-machine-based Dalvik. Unfortunately, many data-flow analysis systems like TaintDroid were designed for the legacy Dalvik environment. This makes data-flow analysis of new apps and malware infeasible. We design a multi-level information-flow tracking system for the new Android system called TaintART. TaintART employs a multi-level taint analysis technique to minimize the taint tag storage. Therefore, taint tags can be stored in processor registers to provide efficient taint propagation operations. We also customize the ART compiler to maximize performance gains of the ahead-of-time compilation optimizations. Based on the general design of TaintART, we also implement a multi-level privacy enforcement to prevent sensitive data leakage. We demonstrate that TaintART only incurs less than 15% overheads on a CPU-bound microbenchmark and negligible overhead on built-in or third-party applications. Compared to legacy Dalvik environment in Android 4.4, TaintART achieves about 99.7% faster performance for Java runtime benchmark.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "诸如Android之类的移动操作系统未能对个人数据提供足够的保护，而隐私泄漏成为主要问题。 要了解安全风险和隐私泄漏，分析师必须进行数据流分析。 2014年，Android升级了Android 5.0中的Android Runtime（ART）环境的根本新设计。 艺术采用提前汇编策略，并取代了以前的基于虚拟机器的Dalvik。 不幸的是，许多数据流分析系统（如塔特德病）都是为传统Dalvik环境设计的。 这使得对新应用程序和恶意软件的数据流分析不可行。 我们为新的Android系统设计了一个多级信息流跟踪系统，称为Taintart。 Taintart采用多层污染分析技术来最大程度地减少污点存储。 因此，可以将污染标签存储在处理器寄存器中，以提供有效的污点传播操作。 我们还自定义了艺术编译器，以最大程度地提前提前汇编优化。 根据Taintart的一般设计，我们还实施了多层隐私执法，以防止敏感的数据泄漏。 我们证明，Taintart在CPU结合的Microbenchmench上仅造成不到15％的开销，并且在内置或第三方应用程序上却可以忽略不计。 与Android 4.4中的传统Dalvik环境相比，Taintart在Java运行时基准中的性能快于99.7％。",
        "title_zh": "TaintART:一个实用的Android运行时多层次信息流跟踪系统",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2016.html",
        "conf_title": "23rd CCS 2016: Vienna, Austria",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2976749",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2976749.2978422",
        "title": "Statistical Deobfuscation of Android Applications",
        "authors": "Benjamin Bichsel, Veselin Raychev, Petar Tsankov, Martin T. Vechev",
        "abstract": "This work presents a new approach for deobfuscating Android APKs based on probabilistic learning of large code bases (termed \"Big Code\"). The key idea is to learn a probabilistic model over thousands of non-obfuscated Android applications and to use this probabilistic model to deobfuscate new, unseen Android APKs. The concrete focus of the paper is on reversing layout obfuscation, a popular transformation which renames key program elements such as classes, packages, and methods, thus making it difficult to understand what the program does. Concretely, the paper: (i) phrases the layout deobfuscation problem of Android APKs as structured prediction in a probabilistic graphical model, (ii) instantiates this model with a rich set of features and constraints that capture the Android setting, ensuring both semantic equivalence and high prediction accuracy, and (iii) shows how to leverage powerful inference and learning algorithms to achieve overall precision and scalability of the probabilistic predictions. We implemented our approach in a tool called DeGuard and used it to: (i) reverse the layout obfuscation performed by the popular ProGuard system on benign, open-source applications, (ii) predict third-party libraries imported by benign APKs (also obfuscated by ProGuard), and (iii) rename obfuscated program elements of Android malware. The experimental results indicate that DeGuard is practically effective: it recovers 79.1% of the program element names obfuscated with ProGuard, it predicts third-party libraries with accuracy of 91.3%, and it reveals string decoders and classes that handle sensitive data in Android malware.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "这项工作提出了一种基于大型代码库的概率学习（称为“大型代码”）的概率学习，用于消除Android APK的新方法。 关键思想是学习成千上万个非弹性的Android应用程序的概率模型，并使用此概率模型来消除新的，看不见的Android APK。 本文的具体重点是逆转布局混淆，这是一种流行的转换，它重命名了关键程序元素，例如类，软件包和方法，因此很难理解该程序的作用。 具体而言，论文：（i）用概率图形模型中的Android APK作为结构化预测的布局去量扰动问题，（ii）用丰富的特征和约束来实现该模型，可捕获Android设置，确保语义等效性和语义等效性，以及语义等效性和约束 高预测准确性，（iii）显示了如何利用强大的推理和学习算法来实现概率预测的总体精度和可扩展性。 我们在称为DeGuard的工具中实现了方法，并将其用于：（i）扭转流行的Proguard系统在良性的开源应用程序上执行的布局混淆，（ii）预测良性APKS进口的第三方库（也是混淆） 由Proguard）和（iii）重命名为Android恶意软件的程序元素。 实验结果表明，DeGuard实际上是有效的：它恢复了与Proguard混淆的程序元素名称的79.1％，它可以准确地预测第三方库的精度为91.3％，并且揭示了在Android恶意软件中处理敏感数据的字符串解码器和类。",
        "title_zh": "Android应用的统计去模糊",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2016.html",
        "conf_title": "23rd CCS 2016: Vienna, Austria",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2976749",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2976749.2978333",
        "title": "Reliable Third-Party Library Detection in Android and its Security Applications",
        "authors": "Michael Backes, Sven Bugiel, Erik Derr",
        "abstract": "Third-party libraries on Android have been shown to be security and privacy hazards by adding security vulnerabilities to their host apps or by misusing inherited access rights. Correctly attributing improper app behavior either to app or library developer code or isolating library code from their host apps would be highly desirable to mitigate these problems, but is impeded by the absence of a third-party library detection that is effective and reliable in spite of obfuscated code. This paper proposes a library detection technique that is resilient against common code obfuscations and that is capable of pinpointing the exact library version used in apps. Libraries are detected with profiles from a comprehensive library database that we generated from the original library SDKs. We apply our technique to the top apps on Google Play and their complete histories to conduct a longitudinal study of library usage and evolution in apps. Our results particularly show that app developers only slowly adapt new library versions, exposing their end-users to large windows of vulnerability. For instance, we discovered that two long-known security vulnerabilities in popular libs are still present in the current top apps. Moreover, we find that misuse of cryptographic APIs in advertising libs, which increases the host apps' attack surface, affects 296 top apps with a cumulative install base of 3.7bn devices according to Play. To the best of our knowledge, our work is first to quantify the security impact of third-party libs on the Android ecosystem.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android上的第三方库已被证明是安全性和隐私危害，通过在其主机应用程序中增加安全性漏洞或滥用继承的访问权限。 正确地将不正确的应用程序行为归因于应用程序或库开发人员代码或将库代码与主机应用程序隔离是非常需要缓解这些问题的，但是由于缺乏第三方库检测而受到阻碍 混淆的代码。 本文提出了一种库检测技术，该技术反对常见的代码混淆，并且能够查明应用程序中使用的确切库版本。 通过我们从原始库SDK生成的综合库数据库中的配置文件检测库。 我们将技术应用于Google Play及其完整历史的顶级应用程序，以对应用程序中的图书馆使用和进化进行纵向研究。 我们的结果尤其表明，应用程序开发人员仅慢慢地调整新的库版本，将其最终用户暴露于大型脆弱性窗口中。 例如，我们发现当前顶级应用程序中仍然存在两个流行液化液中的两个长期以来的安全漏洞。 此外，我们发现在广告液中滥用加密API，这增加了主机应用程序的攻击表面，并以Play的累积安装基础为296个顶级应用程序。 据我们所知，我们的工作首先是量化第三方LIB对Android生态系统的安全影响。",
        "title_zh": "Android中可靠的第三方库检测及其安全应用",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2016.html",
        "conf_title": "23rd CCS 2016: Vienna, Austria",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2976749",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2976749.2978418",
        "title": "Computational Soundness for Dalvik Bytecode",
        "authors": "Michael Backes, Robert Künnemann, Esfandiar Mohammadi",
        "abstract": "Automatically analyzing information flow within Android applications that rely on cryptographic operations with their computational security guarantees imposes formidable challenges that existing approaches for understanding an app's behavior struggle to meet. These approaches do not distinguish cryptographic and non-cryptographic operations, and hence do not account for cryptographic protections: f(m) is considered sensitive for a sensitive message m irrespective of potential secrecy properties offered by a cryptographic operation f. These approaches consequently provide a safe approximation of the app's behavior, but they mistakenly classify a large fraction of apps as potentially insecure and consequently yield overly pessimistic results. In this paper, we show how cryptographic operations can be faithfully included into existing approaches for automated app analysis. To this end, we first show how cryptographic operations can be expressed as symbolic abstractions within the comprehensive Dalvik bytecode language. These abstractions are accessible to automated analysis and can be conveniently added to existing app analysis tools using minor changes in their semantics. Second, we show that our abstractions are faithful by providing the first computational soundness result for Dalvik bytecode, i.e., the absence of attacks against our symbolically abstracted program entails the absence of any attacks against a suitable cryptographic program realization. We cast our computational soundness result in the CoSP framework, which makes the result modular and composable.",
        "files": {
            "openAccessPdf": "http://arxiv.org/pdf/1608.04362"
        },
        "abstract_zh": "自动分析Android应用程序中依赖加密操作的信息流及其计算安全性的保证，构成了强大的挑战，即现有方法以理解应用程序的行为努力满足。 这些方法不能区分加密和非晶体学操作，因此不考虑加密保护：F（m）被认为对敏感信息m被认为是敏感的m，而不论密码操作提供了潜在的保密性f。 因此，这些方法提供了对应用程序行为的安全近似，但是它们错误地将大部分应用程序分类为潜在的不安全，因此产生了过于悲观的结果。 在本文中，我们展示了如何将加密操作忠实地包括在自动化应用分析的现有方法中。 为此，我们首先展示了如何将加密操作表示为综合Dalvik字节码语言中的符号抽象。 自动分析可以访问这些抽象，并且可以使用其语义中的次要更改方便地添加到现有的应用分析工具中。 其次，我们证明了我们的抽象是通过为Dalvik字节码提供的第一个计算声音结果，即，对我们象征抽象的程序没有攻击，这意味着没有任何针对合适的加密程序实现的攻击。 我们在COSP框架中施放了计算声音结果，这使得结果模块化且可组合。",
        "title_zh": "Dalvik字节码的计算可靠性",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2016.html",
        "conf_title": "23rd CCS 2016: Vienna, Austria",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2976749",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2976749.2978304",
        "title": "FeatureSmith: Automatically Engineering Features for Malware Detection by Mining the Security Literature",
        "authors": "Ziyun Zhu, Tudor Dumitras",
        "abstract": "Malware detection increasingly relies on machine learning techniques, which utilize multiple features to separate the malware from the benign apps. The effectiveness of these techniques primarily depends on the manual feature engineering process, based on human knowledge and intuition. However, given the adversaries' efforts to evade detection and the growing volume of publications on malware behaviors, the feature engineering process likely draws from a fraction of the relevant knowledge. We propose an end-to-end approach for automatic feature engineering. We describe techniques for mining documents written in natural language (e.g. scientific papers) and for representing and querying the knowledge about malware in a way that mirrors the human feature engineering process. Specifically, we first identify abstract behaviors that are associated with malware, and then we map these behaviors to concrete features that can be tested experimentally. We implement these ideas in a system called FeatureSmith, which generates a feature set for detecting Android malware. We train a classifier using these features on a large data set of benign and malicious apps. This classifier achieves a 92.5% true positive rate with only 1% false positives, which is comparable to the performance of a state-of-the-art Android malware detector that relies on manually engineered features. In addition, FeatureSmith is able to suggest informative features that are absent from the manually engineered set and to link the features generated to abstract concepts that describe malware behaviors.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "恶意软件检测越来越多地依赖于机器学习技术，该技术利用多个功能将恶意软件与良性应用程序分开。 这些技术的有效性主要取决于基于人类知识和直觉的手动特征工程过程。 但是，鉴于对手为逃避检测的努力和恶意软件行为的出版物量的越来越多，功能工程过程可能会借鉴相关知识的一小部分。 我们为自动功能工程提出了一种端到端方法。 我们描述了用自然语言（例如科学论文）编写的采矿文档的技术，并以反映人类特征工程过程的方式来表示和查询有关恶意软件的知识。 具体而言，我们首先识别与恶意软件相关的抽象行为，然后将这些行为映射到可以通过实验测试的具体特征。 我们在一个名为“功能史密斯”的系统中实现了这些想法，该系统生成了用于检测Android恶意软件的功能。 我们在大量的良性和恶意应用程序集中使用这些功能培训分类器。 该分类器仅以1％的假阳性实现了92.5％的真实正率，这与依赖手动设计功能的最先进的Android恶意软件检测器的性能相当。 此外，功能史密斯能够建议使用手动设计的集合中缺少的内容丰富的功能，并将生成的功能与描述恶意软件行为的抽象概念联系起来。",
        "title_zh": "FeatureSmith:通过挖掘安全文献自动设计恶意软件检测功能",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2016.html",
        "conf_title": "23rd CCS 2016: Vienna, Austria",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2976749",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2976749.2978360",
        "title": "Return-Oriented Flush-Reload Side Channels on ARM and Their Implications for Android Devices",
        "authors": "Xiaokuan Zhang, Yuan Xiao, Yinqian Zhang",
        "abstract": "Cache side-channel attacks have been extensively studied on x86 architectures, but much less so on ARM processors. The technical challenges to conduct side-channel attacks on ARM, presumably, stem from the poorly documented ARM cache implementations, such as cache coherence protocols and cache flush operations, and also the lack of understanding of how different cache implementations will affect side-channel attacks. This paper presents a systematic exploration of vectors for flush-reload attacks on ARM processors. flush-reload attacks are among the most well-known cache side-channel attacks on x86. It has been shown in previous work that they are capable of exfiltrating sensitive information with high fidelity. We demonstrate in this work a novel construction of flush-reload side channels on last-level caches of ARM processors, which, particularly, exploits return-oriented programming techniques to reload instructions. We also demonstrate several attacks on Android OS (e.g., detecting hardware events and tracing software execution paths) to highlight the implications of such attacks for Android devices.",
        "files": {
            "openAccessPdf": "http://dl.acm.org/ft_gateway.cfm?id=2978360&type=pdf"
        },
        "abstract_zh": "缓存侧通道攻击已经在X86架构上进行了广泛的研究，但在ARM处理器上却少得多。 进行侧向通道攻击的技术挑战，大概是源于记录不足的ARM缓存实现，例如高速缓存相干协议和缓存齐平操作，以及对不同的缓存实施如何影响侧向通道攻击的理解缺乏了解 。 本文介绍了对手臂处理器冲洗弹药攻击的向量的系统探索。 冲洗弹药攻击是X86上最著名的高速缓存侧通道攻击之一。 在先前的工作中已经显示，他们能够以高保真度去除敏感信息。 我们在这项工作中证明了在最后一级缓存的手臂处理器上进行冲洗额侧渠道的新颖构造，尤其是，该频道利用了面向返回的编程技术来重新加载说明。 我们还展示了对Android OS（例如，检测硬件事件和跟踪软件执行路径）的几次攻击，以突出此类攻击对Android设备的影响。",
        "title_zh": "ARM上面向返回的刷新-重新加载侧通道及其对Android设备的影响",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2016.html",
        "conf_title": "23rd CCS 2016: Vienna, Austria",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2976749",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2976749.2978366",
        "title": "UniSan: Proactive Kernel Memory Initialization to Eliminate Data Leakages",
        "authors": "Kangjie Lu, Chengyu Song, Taesoo Kim, Wenke Lee",
        "abstract": "Operating system kernel is the de facto trusted computing base for most computer systems. To secure the OS kernel, many security mechanisms, e.g., kASLR and StackGuard, have been increasingly deployed to defend against attacks (e.g., code reuse attack). However, the effectiveness of these protections has been proven to be inadequate-there are many information leak vulnerabilities in the kernel to leak the randomized pointer or canary, thus bypassing kASLR and StackGuard. Other sensitive data in the kernel, such as cryptographic keys and file caches, can also be leaked. According to our study, most kernel information leaks are caused by uninitialized data reads. Unfortunately, existing techniques like memory safety enforcements and dynamic access tracking tools are not adequate or efficient enough to mitigate this threat. In this paper, we propose UniSan, a novel, compiler-based approach to eliminate all information leaks caused by uninitialized read in the OS kernel. UniSan achieves this goal using byte-level, flow-sensitive, context-sensitive, and field-sensitive initialization analysis and reachability analysis to check whether an allocation has been fully initialized when it leaves kernel space; if not, it automatically instruments the kernel to initialize this allocation. UniSan's analyses are conservative to avoid false negatives and are robust by preserving the semantics of the OS kernel. We have implemented UniSan as passes in LLVM and applied it to the latest Linux kernel (x86_64) and Android kernel (AArch64). Our evaluation showed that UniSan can successfully prevent 43 known and many new uninitialized data leak vulnerabilities. Further, 19 new vulnerabilities in the latest kernels have been confirmed by Linux and Google. Our extensive performance evaluation with LMBench, ApacheBench, Android benchmarks, and the SPEC benchmarks also showed that UniSan imposes a negligible performance overhead.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "操作系统内核是大多数计算机系统的事实上值得信赖的计算基础。 为了保护OS内核，例如Kaslr和StackGuard的许多安全机制已越来越多地部署以防止攻击（例如，代码重用攻击）。 但是，这些保护的有效性已被证明是不充分的 - 内核中有许多信息泄漏漏洞泄漏随机指针或金丝雀，因此绕过了kaslr和stackguard。 内核中的其他敏感数据（例如加密密钥和文件缓存）也可以泄漏。 根据我们的研究，大多数内核信息泄漏是由非初始化的数据读取引起的。 不幸的是，现有的技术（例如内存安全执行和动态访问跟踪工具）不足或有效地减轻这种威胁。 在本文中，我们提出了Unisan，这是一种基于新颖的编译器方法，以消除OS内核中非初始化读取引起的所有信息泄漏。 Unisan使用字节级，流动敏感，上下文敏感和现场敏感的初始化分析和可及性分析来实现此目标，以检查分配在离开内核空间时是否已完全初始化； 如果没有，它会自动启动内核来初始化此分配。 Unisan的分析是保守的，可以避免虚假负面因素，并通过保留OS内核的语义来稳健。 我们已经在LLVM中实现了Unisan，并将其应用于最新的Linux内核（X86_64）和Android内核（AARCH64）。 我们的评估表明，Unisan可以成功防止43个已知和许多新的非初始化数据泄漏漏洞。 此外，Linux和Google确认了最新内核中的19个新漏洞。 我们对LMBench，Apachebench，Android基准和规格基准的广泛绩效评估也表明，Unisan施加了可忽略不计的开销。",
        "title_zh": "UniSan:主动内核内存初始化以消除数据泄漏",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2016.html",
        "conf_title": "23rd CCS 2016: Vienna, Austria",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2976749",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2976749.2978353",
        "title": "ECDSA Key Extraction from Mobile Devices via Nonintrusive Physical Side Channels",
        "authors": "Daniel Genkin, Lev Pachmanov, Itamar Pipman, Eran Tromer, Yuval Yarom",
        "abstract": "We show that elliptic-curve cryptography implementations on mobile devices are vulnerable to electromagnetic and power side-channel attacks. We demonstrate full extraction of ECDSA secret signing keys from OpenSSL and CoreBitcoin running on iOS devices, and partial key leakage from OpenSSL running on Android and from iOS's CommonCrypto. These non-intrusive attacks use a simple magnetic probe placed in proximity to the device, or a power probe on the phone's USB cable. They use a bandwidth of merely a few hundred kHz, and can be performed cheaply using an audio card and an improvised magnetic probe.",
        "files": {
            "openAccessPdf": "http://dl.acm.org/ft_gateway.cfm?id=2978353&type=pdf"
        },
        "abstract_zh": "我们表明，移动设备上的椭圆曲线加密实现很容易受到电磁和电力侧通道攻击的影响。 我们证明了从OpenSSL和iOS设备上运行的CoreBitcoin的ECDSA秘密签名密钥的全部提取，以及在Android和iOS的CommonCrypto上运行的OpenSSL的部分键泄漏。 这些非侵入性攻击使用了与设备接近的简单磁探针，或者手机USB电缆上的电源探测器。 他们仅使用几百kHz的带宽，可以使用音频卡和即兴磁探针来廉价地执行。",
        "title_zh": "经由非侵入性物理辅助信道从移动设备提取ECDSA密钥",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2016.html",
        "conf_title": "23rd CCS 2016: Vienna, Austria",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2976749",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2976749.2978320",
        "title": "Android ION Hazard: the Curse of Customizable Memory Management System",
        "authors": "Hang Zhang, Dongdong She, Zhiyun Qian",
        "abstract": "ION is a unified memory management interface for Android that is widely used on virtually all ARM based Android devices. ION attempts to achieve several ambitious goals that have not been simultaneously achieved before (not even on Linux). Different from managing regular memory in the system, ION is designed to share and manage memory with special constraints, e.g., physically contiguous memory. Despite the great flexibility and performance benefits offered, such a critical subsystem, as we discover, unfortunately has flawed security assumptions and designs. In this paper, we systematically analyze ION related vulnerabilities from conceptual root causes to detailed implementation decisions. Since ION is often customized heavily for different Android devices, the specific vulnerabilities often manifest themselves differently. By conducting a range of runtime testing as well as static analysis, we are able to uncover a large number of serious vulnerabilities on the latest Android devices (e.g., Nexus 6P running Android 6.0 and 7.0 preview) such as denial-of-service and dumping memory from the system and arbitrary applications (e.g., email content, passwords). Finally, we offer suggestions on how to redesign the ION subsystem to eliminate these flaws. We believe that the lessons learned can help guide the future design of similar memory management subsystems.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "离子是Android的统一内存管理接口，几乎在所有基于ARM的Android设备上广泛使用。 离子试图实现几个雄心勃勃的目标，这些目标曾经同时实现（甚至在Linux上）。 与管理系统中的常规内存不同，离子旨在通过特殊约束（例如物理连续内存）共享和管理内存。 尽管提供了极大的灵活性和性能优势，但不幸的是，这是一个关键的子系统，但安全的假设和设计有缺陷。 在本文中，我们系统地分析了与离子相关的漏洞，从概念根本原因到详细的实施决策。 由于离子通常是针对不同的Android设备进行大量定制的，因此特定的漏洞通常以不同的方式表现出来。 通过进行一系列运行时测试以及静态分析，我们能够在最新的Android设备（例如，Nexus 6p运行Android 6.0和7.0预览）上发现大量的严重漏洞，例如拒绝服务和倾销 来自系统和任意应用程序的内存（例如，电子邮件内容，密码）。 最后，我们提供有关如何重新设计离子子系统以消除这些缺陷的建议。 我们认为，所学习的教训可以帮助指导类似的内存管理子系统的未来设计。",
        "title_zh": "Android ION Hazard:可定制内存管理系统的诅咒",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2016.html",
        "conf_title": "23rd CCS 2016: Vienna, Austria",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2976749",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2976749.2978406",
        "title": "Drammer: Deterministic Rowhammer Attacks on Mobile Platforms",
        "authors": "Victor van der Veen, Yanick Fratantonio, Martina Lindorfer, Daniel Gruss, Clémentine Maurice, Giovanni Vigna, Herbert Bos, Kaveh Razavi, Cristiano Giuffrida",
        "abstract": "Recent work shows that the Rowhammer hardware bug can be used to craft powerful attacks and completely subvert a system. However, existing efforts either describe probabilistic (and thus unreliable) attacks or rely on special (and often unavailable) memory management features to place victim objects in vulnerable physical memory locations. Moreover, prior work only targets x86 and researchers have openly wondered whether Rowhammer attacks on other architectures, such as ARM, are even possible. We show that deterministic Rowhammer attacks are feasible on commodity mobile platforms and that they cannot be mitigated by current defenses. Rather than assuming special memory management features, our attack, DRAMMER, solely relies on the predictable memory reuse patterns of standard physical memory allocators. We implement DRAMMER on Android/ARM, demonstrating the practicability of our attack, but also discuss a generalization of our approach to other Linux-based platforms. Furthermore, we show that traditional x86-based Rowhammer exploitation techniques no longer work on mobile platforms and address the resulting challenges towards practical mobile Rowhammer attacks. To support our claims, we present the first Rowhammer-based Android root exploit relying on no software vulnerability, and requiring no user permissions. In addition, we present an analysis of several popular smartphones and find that many of them are susceptible to our DRAMMER attack. We conclude by discussing potential mitigation strategies and urging our community to address the concrete threat of faulty DRAM chips in widespread commodity platforms.",
        "files": {
            "openAccessPdf": "https://vvdveen.com/publications/drammer.pdf"
        },
        "abstract_zh": "最近的工作表明，Rowhammer硬件错误可用于制作强大的攻击并完全颠覆系统。 但是，现有的努力要么描述概率（因此不可靠）攻击，要么依靠特殊（通常不可用的）内存管理功能将受害物体放置在脆弱的物理记忆位置。 此外，先前的工作仅针对X86，研究人员公开怀疑Rowhammer对其他建筑（例如ARM）是否有可能进行攻击。 我们表明，确定性的Rowhammer攻击在商品移动平台上是可行的，并且无法通过当前的防御能力来减轻它们。 我们的攻击不是假设特殊的内存管理功能，而是仅依赖于标准物理内存分配器的可预测内存重复使用模式。 我们在Android/ARM上实施Drammer，证明了我们的攻击的实用性，但也讨论了我们对其他基于Linux的平台的方法的概括。 此外，我们表明，传统的基于X86的RowHammer开发技术不再在移动平台上使用，并应对实用的移动行动锤攻击所带来的挑战。 为了支持我们的索赔，我们提出了第一个基于Rowhammer的Android root Exploit，依靠不依赖软件漏洞，不需要用户权限。 此外，我们还对几种流行的智能手机进行了分析，发现其中许多人容易受到我们的Drammer攻击的影响。 最后，我们通过讨论潜在的缓解策略，并敦促我们的社区应对广泛的商品平台中的DRAM芯片有故障的具体威胁。",
        "title_zh": "Drammer:移动平台上的确定性Rowhammer攻击",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2016.html",
        "conf_title": "23rd CCS 2016: Vienna, Austria",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2976749",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2976749.2989055",
        "title": "POSTER: Accuracy vs. Time Cost: Detecting Android Malware through Pareto Ensemble Pruning",
        "authors": "Lingling Fan, Minhui Xue, Sen Chen, Lihua Xu, Haojin Zhu",
        "abstract": "This paper proposes Begonia, a malware detection system through Pareto ensemble pruning. We convert the malware detection problem into the bi-objective Pareto optimization, aiming to trade off the classification accuracy and the size of classifiers as two objectives. We automatically generate several groups of base classifiers using SVM and generate solutions through bi-objective Pareto optimization. We then select the ensembles with highest accuracy of each group to form the final solutions, among which we hit the optimal solution where the combined loss function is minimal considering the trade-off between accuracy and time cost. We expect users to provide different trade-off levels to their different requirements to select the best solution. Experimental results show that Begonia can achieve higher accuracy with relatively lower overhead compared to the ensemble containing all the classifiers and can make a good trade-off to different requirements.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "本文提出了通过Pareto Ensemble修剪的恶意软件检测系统Obonia。 我们将恶意软件检测问题转换为双目标帕累托优化，旨在将分类准确性和分类器的大小作为两个目标进行权衡。 我们使用SVM自动生成几组基本分类器，并通过双向目标帕累托优化生成解决方案。 然后，我们选择每个组精确度最高的合奏来形成最终解决方案，其中我们达到了最佳解决方案，在该解决方案中，考虑到准确性和时间成本之间的权衡，合并的损耗函数的最低限度。 我们希望用户为他们的不同要求提供不同的权衡水平，以选择最佳解决方案。 实验结果表明，与包含所有分类器的集合相比，秋海大型可以实现更高的精度，而开销相对较低，并且可以在不同的要求方面做出良好的权衡。",
        "title_zh": "海报:准确性与时间成本:通过帕累托集成剪枝检测Android恶意软件",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2016.html",
        "conf_title": "23rd CCS 2016: Vienna, Austria",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2976749",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2976749.2989038",
        "title": "POSTER: Insights of Antivirus Relationships when Detecting Android Malware: A Data Analytics Approach",
        "authors": "Ignacio Martín, José Alberto Hernández, Sergio de los Santos, Antonio Guzmán",
        "abstract": "This work performs a deep analysis on the behaviour of Anti-Virus (AV) engines regarding Android malware detection. A large dataset, with more than 80K apk files tagged as Malware by one or many AV engines is used in the analysis. With the help of association rule learning, we show interesting patterns and dependencies between different AV engines.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "这项工作对Android恶意软件检测的反病毒（AV）发动机的行为进行了深入的分析。 分析中使用了一个大数据集，其中包含由一个或多个AV引擎标记为恶意软件的80k APK文件。 在协会规则学习的帮助下，我们展示了不同AV引擎之间有趣的模式和依赖性。",
        "title_zh": "海报:检测Android恶意软件时反病毒关系的见解:数据分析方法",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2016.html",
        "conf_title": "23rd CCS 2016: Vienna, Austria",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2976749",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2976749.2989056",
        "title": "POSTER: The ART of App Compartmentalization",
        "authors": "Michael Backes, Sven Bugiel, Jie Huang, Oliver Schranz",
        "abstract": "On Android, advertising libraries are commonly integrated with their host apps. Since the host and advertising components share the application's sandbox, advertisement code inherits all permissions and can access host resources with no further approval needed. Motivated by the privacy risks of advertisement libraries as already shown in the literature, this poster introduces an Android Runtime (ART) based app compartmentalization mechanism to achieve separation between trusted app code and untrusted library code without system modification and application rewriting. With our approach, advertising libraries will be isolated from the host app and the original app will be partitioned into two sub-apps that run independently, with the host app's resources and permissions being protected by Android's app sandboxing mechanism. ARTist [1], a compiler-based Android app instrumentation framework, is utilized here to recreate the communication channels between host and advertisement library. The result is a robust toolchain on device which provides a clean separation of developer-written app code and third-party advertisement code, allowing for finer-grained access control policies and information flow control without OS customization and application rebuilding.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "在Android上，广告库通常与其主机应用程序集成在一起。 由于主机和广告组件共享应用程序的沙箱，因此广告代码继承了所有权限，并且无需进一步批准就可以访问主机资源。 该海报在文献中已经显示的广告库的隐私风险的激励，该海报介绍了基于Android运行时（ART）的应用程序隔间化机制，以实现受信任的应用程序代码和不信任的库代码之间的分离，而无需系统修改和应用程序重写。 通过我们的方法，广告库将与主机应用程序隔离，原始应用程序将分为两个独立运行的子应用程序，主机应用程序的资源和权限受Android的应用程序沙箱机制保护。 Artist [1]是一家基于编译器的Android App Instrumentation框架，在此使用来重新创建主机和广告库之间的通信渠道。 结果是设备上的强大工具链，可清理开发人员编写的应用程序代码和第三方广告代码，从而允许无需OS自定义和应用程序重建即可获得更细粒度的访问控制策略和信息流控制。",
        "title_zh": "海报:应用划分的艺术",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2016.html",
        "conf_title": "23rd CCS 2016: Vienna, Austria",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2976749",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2976749.2989032",
        "title": "DEMO: Starving Permission-Hungry Android Apps Using SecuRank",
        "authors": "Vincent F. Taylor, Ivan Martinovic",
        "abstract": "We demonstrate SecuRank, a tool that can be employed by Android smartphone users to replace their currently installed apps with functionally-similar ones that require less sensitive access to their device. SecuRank works by using text mining on the app store description of apps to perform groupings by functionality. Once groups of functionally-similar apps are found, SecuRank uses contextual permission usage within groups to identify those apps that are less permission-hungry. Our demonstration will showcase both the Android app version of SecuRank and the web-based version. Participants will see the effectiveness of SecuRank as a tool for finding and replacing apps with less permission-hungry alternatives.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "我们演示了Securank，这是一种可以由Android智能手机用户使用的工具，可以用功能相似的应用程序替换其当前安装的应用程序，这些应用程序需要对设备的敏感访问较低。 Securank通过在应用程序商店描述上使用文本挖掘来进行逐步进行逐步执行分组。 一旦找到了功能相似的应用程序组，Securank就会在组中使用上下文权限使用量来识别那些少于许可的应用程序。 我们的演示将展示Android App版本的Securank和基于Web的版本。 参与者将看到Securanc的有效性是寻找和更换少数许可的替代方案的工具。",
        "title_zh": "演示:使用SecuRank饥饿权限饥渴的Android应用程序",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2016.html",
        "conf_title": "23rd CCS 2016: Vienna, Austria",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2976749",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "http://dl.acm.org/citation.cfm?id=2994470",
        "title": "Secure Containers in Android: The Samsung KNOX Case Study",
        "authors": "Uri Kanonov, Avishai Wool",
        "abstract": "Bring Your Own Device (BYOD) is a growing trend among enterprises, aiming to improve workers' mobility and productivity via their smartphones. The threats and dangers posed by the smartphones to the enterprise are also ever-growing. Such dangers can be mitigated by running the enterprise software inside a \"secure container\" on the smartphone. In our work we present a systematic assessment of security critical areas in design and implementation of a secure container for Android using reverse engineering and attacker-inspired methods. We do this through a case-study of Samsung KNOX, a real-world product deployed on millions of devices. Our research shows how KNOX security features work behind the scenes and lets us compare the vendor's public security claims against reality. Along the way we identified several design weaknesses and a few vulnerabilities that were disclosed to Samsung.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "带上自己的设备（BYOD）是企业之间的增长趋势，旨在通过其智能手机提高工人的移动性和生产力。 智能手机对企业构成的威胁和危险也在不断增长。 通过在智能手机上的“安全容器”中运行企业软件，可以通过运行企业软件来减轻这种危险。 在我们的工作中，我们介绍了使用反向工程和攻击者启发的方法在设计和实施Android的安全容器时进行安全关键领域的系统评估。 我们通过三星·诺克斯（Samsung Knox）的案例研究，这是一种现实世界中的产品，该产品部署在数百万个设备上。 我们的研究表明，诺克斯安全功能如何在幕后工作，并让我们比较供应商与现实的公共安全主张。 在此过程中，我们确定了几个设计弱点和一些向三星披露的漏洞。",
        "title_zh": "Android中的安全容器:三星KNOX案例研究",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/spsm2016.html",
        "conf_title": "6th SPSM@CCS 2016: Vienna, Austria",
        "conf_url": "https://doi.org/10.1145/2994459",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "http://dl.acm.org/citation.cfm?id=2994472",
        "title": "What You See Isn't Always What You Get: A Measurement Study of Usage Fraud on Android Apps",
        "authors": "Wei Liu, Yueqian Zhang, Zhou Li, Hai-Xin Duan",
        "abstract": "We studied a new type of fraudulent activities, usage fraud, on Android platform in this paper. Different from previous fraud on mobile platforms targeting advertisers or mobile users, usage fraud was invented to boost usage statistics on third-party analytics platforms like Google Analytics to cheat investors. To understand the business model and infrastructures employed by the fraudsters, we infiltrated two underground services, Laicaimao and Anzhibao. A number of insights have been gained during this course, including the use of emulators and manipulation of user identifiers. In addition, we evaluated the efficacy of the existing fraud services and the defense status quo on 8 popular analytics platforms. Our result indicates that the fraud services are indeed capable of crafting valid usage numbers and the basic checks are missed by analytics platforms. We give several recommendations in the end and call for the contribution from the community to fight against this new type of fraud.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "我们在本文的Android平台上研究了一种新型的欺诈活动，即使用欺诈。 与以前针对广告商或移动用户的移动平台上的欺诈不同，使用欺诈是为了提高诸如Google Analytics（分析）等第三方分析平台上的使用统计信息，以欺骗投资者。 为了了解欺诈者采用的商业模式和基础设施，我们渗透了两种地下服务，即莱卡莫和安兹希摩。 在本课程中，已经获得了许多见解，包括使用模拟器和操纵用户标识符。 此外，我们评估了现有的欺诈服务和国防现状在8个流行分析平台上的功效。 我们的结果表明，欺诈服务确实能够制定有效的用法编号，并且分析平台错过了基本检查。 我们最终提出了一些建议，并呼吁社区贡献与这种新型欺诈作斗争。",
        "title_zh": "你所看到的并不总是你所得到的:Android应用程序使用欺诈的测量研究",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/spsm2016.html",
        "conf_title": "6th SPSM@CCS 2016: Vienna, Austria",
        "conf_url": "https://doi.org/10.1145/2994459",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "http://dl.acm.org/citation.cfm?id=2994473",
        "title": "CRiOS: Toward Large-Scale iOS Application Analysis",
        "authors": "Damilola Orikogbo, Matthias Büchler, Manuel Egele",
        "abstract": "Mobile applications - or apps - are one of the main reasons for the unprecedented success smart phones and tablets have experienced over the last decade. Apps are the main interfaces that users deal with when engaging in online banking, checking travel itineraries, or browsing their social network profiles while on the go. Previous research has studied various aspects of mobile application security including data leakage and privilege escalation through confused deputy attacks. However, the vast majority of mobile application research targets Google's Android platform. Few research papers analyze iOS applications and those that focus on the Apple environment perform their analysis on comparatively small datasets (i.e., thousands in iOS vs. hundreds of thousands in Android). As these smaller datasets call into question how representative the gained results are, we propose, implement, and evaluate CRiOS, a fully-automated system that allows us to amass comprehensive datasets of iOS applications which we subject to large-scale analysis. To advance academic research into the iOS platform and its apps, we plan on releasing CRiOS as an open source project. We also use CRiOS to aggregate a dataset of 43,404 iOS applications. Equipped with this dataset we analyze the collected apps to identify third-party libraries that are common among many applications. We also investigate the network communication endpoints referenced by the applications with respect to the endpoints' correct use of TLS/SSL certificates. In summary, we find that the average iOS application consists of 60.2% library classes and only 39.8% developer-authored content. Furthermore, we find that 9.32% of referenced network connection endpoints either entirely omit to cryptographically protect network communications or present untrustworthy SSL certificates.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "移动应用程序（或应用程序）是智能手机和平板电脑在过去十年中经历过的前所未有的成功的主要原因之一。 应用程序是用户在进行在线银行业务，检查旅行行程或浏览其社交网络配置文件时处理的主要接口。 先前的研究研究了移动应用程序安全性的各个方面，包括通过困惑的副攻击，包括数据泄漏和特权升级。 但是，绝大多数移动应用程序研究都针对Google的Android平台。 很少有研究论文分析iOS应用程序，而专注于苹果环境的应用程序对相对较小的数据集进行了分析（即iOS中的成千上万的iOS与Android中的数十万）。 当这些较小的数据集提出质疑所获得的结果的代表性时，我们提出，实施和评估CRIOS是一个完全自动化的系统，它使我们能够积累经过大规模分析的iOS应用程序的全面数据集。 为了推进iOS平台及其应用程序的学术研究，我们计划将CRIOS作为开源项目发布。 我们还使用CRIO来汇总43,404个iOS应用程序的数据集。 配备了此数据集，我们分析了收集的应用程序，以识别许多应用程序中常见的第三方库。 我们还研究了应用程序对端点的正确使用TLS/SSL证书所引用的网络通信终点。 总而言之，我们发现平均iOS应用程序包括60.2％的图书馆类别，只有39.8％的开发人员撰写内容。 此外，我们发现9.32％的参考网络连接端点要么完全省略以保护网络通信，要么呈现不信任的SSL证书。",
        "title_zh": "CRiOS:面向大规模iOS应用分析",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/spsm2016.html",
        "conf_title": "6th SPSM@CCS 2016: Vienna, Austria",
        "conf_url": "https://doi.org/10.1145/2994459",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "http://dl.acm.org/citation.cfm?id=2994474",
        "title": "SecuRank: Starving Permission-Hungry Apps Using Contextual Permission Analysis",
        "authors": "Vincent F. Taylor, Ivan Martinovic",
        "abstract": "Competition among app developers has caused app stores to be permeated with many groups of general-purpose apps that are functionally-similar. Examples are the many flashlight or alarm clock apps to choose from. Within groups of functionally-similar apps, however, permission usage by individual apps sometimes varies widely. Although (run-time) permission warnings inform users of the sensitive access required by apps, many users continue to ignore these warnings due to conditioning or a lack of understanding. Thus, users may inadvertently expose themselves to additional privacy and security risks by installing a more permission-hungry app when there was a functionally-similar alternative that used less permissions. We study the variation in permission usage across 50,000 Google Play Store search results for 2500 searches each yielding a group of 20 functionally-similar apps. Using fine-grained contextual analysis of permission usage within groups of apps, we identified over 3400 (potentially) over-privileged apps, approximately 7% of the studied dataset. We implement our contextual permission analysis framework as a tool, called SecuRank, and release it to the general public in the form of an Android app and website. SecuRank allows users to audit their list of installed apps to determine whether any of them can be replaced with a functionally-similar alternative that requires less sensitive access to their device. By running SecuRank on the entire Google Play Store, we discovered that up to 50% of apps can be replaced with preferable alternative, with free apps and very popular apps more likely to have such alternatives.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "应用程序开发人员之间的竞争已导致应用程序存储在功能相似的一系列通用应用程序中渗透。 示例是可供选择的许多手电筒或闹钟应用程序。 但是，在功能相似的应用程序组中，单个应用程序的权限使用有时会有很大差异。 尽管（运行时）许可警告将应用程序要求的敏感访问告知用户，但由于条件或缺乏理解，许多用户继续忽略这些警告。 因此，当有一个功能相似的替代方案使用较少的权限时，用户可以通过安装更具许可的应用程序来无意间暴露于额外的隐私和安全风险。 我们研究了50,000个Google Play商店搜索结果的2500个搜索结果中的许可使用变化，每个搜索结果都产生了20个功能相似的应用程序。 我们使用应用程序组中许可使用的细粒度上下文分析，我们确定了超过3400个（潜在的）过度私有的应用程序，约占研究数据集的7％。 我们将上下文许可分析框架作为一种工具，称为Securank，并以Android应用程序和网站的形式将其发布给公众。 Securank允许用户审核其已安装的应用程序列表，以确定是否可以用功能相似的替代方案来替换任何一个，该替代方案需要对其设备的敏感访问较低。 通过在整个Google Play商店中运行Securank，我们发现最多50％的应用程序可以用可疑的替代方案代替，免费应用程序和非常受欢迎的应用程序更有可能具有此类替代方案。",
        "title_zh": "SecuRank:使用上下文权限分析来饿死渴望权限的应用程序",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/spsm2016.html",
        "conf_title": "6th SPSM@CCS 2016: Vienna, Austria",
        "conf_url": "https://doi.org/10.1145/2994459",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "http://dl.acm.org/citation.cfm?id=2994462",
        "title": "Hardened Setup of Personalized Security Indicators to Counter Phishing Attacks in Mobile Banking",
        "authors": "Claudio Marforio, Ramya Jayaram Masti, Claudio Soriente, Kari Kostiainen, Srdjan Capkun",
        "abstract": "Application phishing attacks are rooted in users inability to distinguish legitimate applications from malicious ones. Previous work has shown that personalized security indicators can help users in detecting application phishing attacks in mobile platforms. A personalized security indicator is a visual secret, shared between the user and a security-sensitive application (e.g., mobile banking). The user sets up the indicator when the application is started for the first time. Later on, the application displays the indicator to authenticate itself to the user. Despite their potential, no previous work has addressed the problem of how to securely setup a personalized security indicator -- a procedure that can itself be the target of phishing attacks. In this paper, we propose a setup scheme for personalized security indicators. Our solution allows a user to identify the legitimate application at the time she sets up the indicator, even in the presence of malicious applications. We implement and evaluate a prototype of the proposed solution for the Android platform. We also provide the results of a small-scale user study aimed at evaluating the usability and security of our solution.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "应用网络钓鱼攻击源于用户无法区分合法应用程序和恶意应用程序的攻击。 先前的工作表明，个性化的安全指标可以帮助用户检测移动平台中的应用网络钓鱼攻击。 个性化的安全指标是一个视觉秘密，用户与对安全敏感的应用程序之间共享（例如，移动银行）。 第一次启动应用程序时，用户设置了指示器。 稍后，该应用程序将显示指标，以对用户进行身份验证。 尽管有潜力，但以前没有工作解决了如何安全设置个性化安全指标的问题 - 该程序本身可以成为网络钓鱼攻击的目标。 在本文中，我们为个性化安全指标提出了一个设置方案。 我们的解决方案允许用户在设置指标时识别合法应用程序，即使在存在恶意应用程序的情况下。 我们为Android平台实施并评估建议解决方案的原型。 我们还提供了一项小型用户研究的结果，旨在评估解决方案的可用性和安全性。",
        "title_zh": "加强个性化安全指示器的设置，以应对移动银行中的网络钓鱼攻击",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/spsm2016.html",
        "conf_title": "6th SPSM@CCS 2016: Vienna, Austria",
        "conf_url": "https://doi.org/10.1145/2994459",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "http://dl.acm.org/citation.cfm?id=2994467",
        "title": "Picasso: Lightweight Device Class Fingerprinting for Web Clients",
        "authors": "Elie Bursztein, Artem Malyshev, Tadek Pietraszek, Kurt Thomas",
        "abstract": "In this work we present Picasso: a lightweight device class fingerprinting protocol that allows a server to verify the software and hardware stack of a mobile or desktop client. As an example, Picasso can distinguish between traffic sent by an authentic iPhone running Safari on iOS from an emulator or desktop client spoofing the same configuration. Our fingerprinting scheme builds on unpredictable yet stable noise introduced by a client's browser, operating system, and graphical stack when rendering HTML5 canvases. Our algorithm is resistant to replay and includes a hardware-bound proof of work that forces a client to expend a configurable amount of CPU and memory to solve challenges. We demonstrate that Picasso can distinguish 52 million Android, iOS, Windows, and OSX clients running a diversity of browsers with 100% accuracy. We discuss applications of Picasso in abuse fighting, including protecting the Play Store or other mobile app marketplaces from inorganic interactions; or identifying login attempts to user accounts from previously unseen device classes.",
        "files": {
            "openAccessPdf": "http://dl.acm.org/ft_gateway.cfm?id=2994467&type=pdf"
        },
        "abstract_zh": "在这项工作中，我们介绍了毕加索：一种轻巧的设备类指纹协议，该协议允许服务器验证移动或桌面客户端的软件和硬件堆栈。 例如，毕加索可以从iOS上运行Safari的真实iPhone发送的流量与模拟器或桌面客户端欺骗相同配置的流量。 我们的指纹识别方案建立在渲染HTML5画布时客户的浏览器，操作系统和图形堆栈引入的不可预测但稳定的噪声上。 我们的算法可以抵抗重播，并包含一个限制硬件的工作证明，该证明迫使客户花费大量的CPU和内存来解决挑战。 我们证明，毕加索可以区分5200万个Android，iOS，Windows和OSX客户端，以100％准确性地运行各种浏览器。 我们讨论毕加索在虐待战斗中的应用，包括保护Play商店或其他移动应用市场市场免受无机互动的侵害； 或从以前看不见的设备类中识别登录尝试。",
        "title_zh": "Picasso:用于Web客户端的轻量级设备级指纹识别",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/spsm2016.html",
        "conf_title": "6th SPSM@CCS 2016: Vienna, Austria",
        "conf_url": "https://doi.org/10.1145/2994459",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "http://dl.acm.org/citation.cfm?id=2994469",
        "title": "Detecting Misuse of Google Cloud Messaging in Android Badware",
        "authors": "Mansour Ahmadi, Battista Biggio, Steven Arzt, Davide Ariu, Giorgio Giacinto",
        "abstract": "Google Cloud Messaging (GCM) is a widely-used and reliable mechanism that helps developers to build more efficient Android applications; in particular, it enables sending push notifications to an application only when new information is available for it on its servers. For this reason, GCM is now used by more than 60\\% among the most popular Android applications. On the other hand, such a mechanism is also exploited by attackers to facilitate their malicious activities; e.g., to abuse functionality of advertisement libraries in adware, or to command and control bot clients. However, to our knowledge, the extent to which GCM is used in malicious Android applications (badware, for short) has never been evaluated before. In this paper, we do not only aim to investigate the aforementioned issue, but also to show how traces of GCM flows in Android applications can be exploited to improve Android badware detection. To this end, we first extend Flowdroid to extract GCM flows from Android applications. Then, we embed those flows in a vector space, and train different machine-learning algorithms to detect badware that use GCM to perform malicious activities. We demonstrate that combining different classifiers trained on the flows originated from GCM services allows us to improve the detection rate up to 2.4%, while decreasing the false positive rate by 1.9%, and, more interestingly, to correctly detect 14 never-before-seen badware applications.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Google云消息传递（GCM）是一种广泛使用且可靠的机制，可帮助开发人员构建更有效的Android应用程序； 特别是，仅当在其服务器上提供新信息时，它才能将推送通知发送到应用程序。 因此，在最受欢迎的Android应用中，GCM现在被60 \\％使用。 另一方面，攻击者还利用这种机制来促进其恶意活动。 例如，滥用广告库在广告软件中的功能，或命令和控制机器人客户端。 但是，据我们所知，GCM在恶意Android应用中使用的程度（简而言之）从未得到评估过。 在本文中，我们不仅旨在调查上述问题，还要展示如何利用Android应用程序中的GCM流量来改善Android坏软件检测。 为此，我们首先扩展流动型以从Android应用中提取GCM流。 然后，我们将这些流动嵌入矢量空间中，并训练不同的机器学习算法，以检测使用GCM进行恶意活动的坏软件。 我们证明，在源自GCM服务的流量上培训的不同分类器组合不同的分类器使我们能够提高检测率高达2.4％，同时将误报率降低1.9％，更有趣的是，可以正确检测14个从未见过的。 坏软件应用。",
        "title_zh": "检测Android恶意软件中谷歌云消息的滥用",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/spsm2016.html",
        "conf_title": "6th SPSM@CCS 2016: Vienna, Austria",
        "conf_url": "https://doi.org/10.1145/2994459",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "http://dl.acm.org/citation.cfm?id=2994468",
        "title": "On the CCA (in)Security of MTProto",
        "authors": "Jakob Jakobsen, Claudio Orlandi",
        "abstract": "Telegram is a popular messaging app which supports end-to-end encrypted communication. In Spring 2015 we performed an audit of Telegram's Android source code. This short paper summarizes our findings. Our main discovery is that the symmetric encryption scheme used in Telegram -- known as MTProto -- is not IND-CCA secure, since it is possible to turn any ciphertext into a different ciphertext that decrypts to the same message. We stress that this is a theoretical attack on the definition of security and we do not see any way of turning the attack into a full plaintext-recovery attack. At the same time, we see no reason why one should use a less secure encryption scheme when more secure (and at least as efficient) solutions exist. The take-home message (once again) is that well-studied, provably secure encryption schemes that achieve strong definitions of security (e.g., authenticated-encryption) are to be preferred to home-brewed encryption schemes.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "电报是一个流行的消息传递应用程序，支持端到端加密通信。 2015年春季，我们对Telegram的Android源代码进行了审核。 这篇简短的论文总结了我们的发现。 我们的主要发现是，在电信中使用的对称加密方案（称为mtproto）并不是安全的，因为可以将任何ciphertext转换为将解密到同一消息的不同密文。 我们强调，这是对安全性定义的理论攻击，我们看不到将攻击变成完整的明文恢复攻击的任何方法。 同时，我们没有理由在存在更安全（至少是高效）解决方案时使用较不安全的加密方案。 带回家的消息（再次）是实现强大的安全性定义（例如，身份验证的加密）的经过深入的，可证明的安全加密方案，而不是自制的加密方案。",
        "title_zh": "MTProto的CCA (in)安全性研究",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/spsm2016.html",
        "conf_title": "6th SPSM@CCS 2016: Vienna, Austria",
        "conf_url": "https://doi.org/10.1145/2994459",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2995306.2995315",
        "title": "Reactive Attestation: Automatic Detection and Reaction to Software Tampering Attacks",
        "authors": "Alessio Viticchié, Cataldo Basile, Andrea Avancini, Mariano Ceccato, Bert Abrath, Bart Coppens",
        "abstract": "Anti-tampering is a form of software protection conceived to detect and avoid the execution of tampered programs. Tamper detection assesses programs' integrity with load or execution-time checks. Avoidance reacts to tampered programs by stopping or rendering them unusable. General purpose reactions (such as halting the execution) stand out like a lighthouse in the code and are quite easy to defeat by an attacker. More sophisticated reactions, which degrade the user experience or the quality of service, are less easy to locate and remove but are too tangled with the program's business logic, and are thus difficult to automate by a general purpose protection tool. In the present paper, we propose a novel approach to anti-tampering that (i) fully automatically applies to a target program, (ii) uses Remote Attestation for detection purposes and (iii) adopts a server-side reaction that is difficult to block by an attacker. By means of Client/Server Code Splitting, a crucial part of the program is removed from the client and executed on a remote trusted server in sync with the client. If a client program provides evidences of its integrity, the part moved to the server is executed. Otherwise, a server-side reaction logic may (temporarily or definitely) decide to stop serving it. Therefore, a tampered client application can not continue its execution. We assessed our automatic protection tool on a case study Android application. Experimental results show that all the original and tampered executions are correctly detected, reactions are promptly applied, and execution overhead is on an acceptable level.",
        "files": {
            "openAccessPdf": "https://biblio.ugent.be/publication/8507798/file/8507808.pdf"
        },
        "abstract_zh": "反篡改是一种旨在检测和避免执行篡改程序的软件保护形式。 篡改检测通过负载或执行时间检查评估程序的完整性。 避免通过停止或使其无法使用来对篡改程序做出反应。 通用反应（例如停止执行）像代码中的灯塔一样脱颖而出，很容易被攻击者击败。 降低用户体验或服务质量的更复杂的反应不太容易找到和删除，但与该程序的业务逻辑过于纠结，因此很难通过通用保护工具自动化。 在本文中，我们提出了一种新颖的反她耐力方法，即（i）完全适用于目标程序，（ii）将远程证明用于检测目的，并且（iii）采用服务器端反应，难以阻止该反应 由攻击者。 通过客户端/服务器代码拆分，从客户端删除了程序的关键部分，并在与客户端同步的远程信任服务器上执行。 如果客户端程序提供了其完整性的证据，则将移动到服务器的零件将执行。 否则，服务器端反应逻辑可能（暂时或绝对）决定停止使用它。 因此，篡改的客户端应用程序无法继续执行。 我们在案例研究Android应用程序上评估了自动保护工具。 实验结果表明，正确检测到所有原始和篡改的执行，迅速应用反应，并且执行开销处于可接受的水平。",
        "title_zh": "反应式证明:对软件篡改攻击的自动检测和反应",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/spro2016.html",
        "conf_title": "2nd SPRO@CCS 2016: Vienna, Austria",
        "conf_url": "https://doi.org/10.1145/2995306",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2995306.2995316",
        "title": "The ASPIRE Framework for Software Protection",
        "authors": "Bjorn De Sutter, Cataldo Basile, Mariano Ceccato, Paolo Falcarin, Michael Zunke, Brecht Wyseur, Jérôme d'Annoville",
        "abstract": "In the ASPIRE research project, a software protection tool flow was designed and prototyped that targets native ARM Android code. This tool flow supports the deployment of a number of protections against man-at-the-end attacks. In this tutorial, an overview of the tool flow will be presented and attendants will participate to a hands-on demonstration. In addition, we will present an overview of the decision support systems developed in the project to facilitate the use of the protection tool flow.",
        "files": {
            "openAccessPdf": "https://biblio.ugent.be/publication/8501992/file/8504522.pdf"
        },
        "abstract_zh": "在Aspire研究项目中，设计并原型设计了针对本机Arm Android代码的软件保护工具流。 该工具流支持部署许多防止人工攻击的保护措施。 在本教程中，将介绍该工具流的概述，并将参加动手演示。 此外，我们将介绍项目中开发的决策支持系统，以促进使用保护工具流。",
        "title_zh": "ASPIRE软件保护框架",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/spro2016.html",
        "conf_title": "2nd SPRO@CCS 2016: Vienna, Austria",
        "conf_url": "https://doi.org/10.1145/2995306",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2808783.2808786",
        "title": "Mobile App Security Assessment with the MAVeriC Dynamic Analysis Module",
        "authors": "Alessandro Armando, Gianluca Bocci, Gabriele Costa, Rocco Mammoliti, Alessio Merlo, Silvio Ranise, Riccardo Traverso, Andrea Valenza",
        "abstract": "The security assessment of mobile applications is of paramount importance for both the service providers and their customers. As a matter of fact, nowadays smartphones are the primary access mean for the internet of services. Needless to say, malicious or flawed applications can disruptively compromise the sensitive data they handle. As a major stakeholder, Poste Italiane has invested a considerable amount of resources for new analysis tools. One of them is the MAVeriC platform. The goal of MAVeriC is to implement a unified service which takes advantage of the state-of-the-art technologies for creating detailed risk profiles of mobile applications. In this paper we present the Dynamic Analysis Module (DAM) of the MAVeriC platform. Briefly, its objective is to interact with a running Android application for inferring as much information as possible about its behavior. The interaction is carried out by simulating the activity of the user. In the meanwhile, monitoring modules observe the operations executed by the application, i.e., network usage and file access. Finally, a modeling module factorizes the gathered information for providing the analysis with an abstract representation of the application behavior.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "移动应用程序的安全评估对服务提供商及其客户而言至关重要。 实际上，如今的智能手机是服务互联网的主要访问均值。 不用说，恶意或有缺陷的应用程序会破坏其处理的敏感数据。 作为主要利益相关者，意大利邮政为新分析工具投入了大量资源。 其中之一是小牛平台。 Maveric的目标是实施统一的服务，该服务利用最先进的技术来创建移动应用程序的详细风险配置文件。 在本文中，我们介绍了Maveric平台的动态分析模块（DAM）。 简而言之，其目标是与运行的Android应用程序进行交互，以推断其行为的尽可能多的信息。 通过模拟用户的活动来进行交互。 同时，监视模块观察应用程序执行的操作，即网络使用和文件访问。 最后，建模模块将收集的信息分配给用于分析的分析，以抽象的应用程序行为表示。",
        "title_zh": "使用MAVeriC动态分析模块进行移动应用安全评估",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/mist2015.html",
        "conf_title": "7th MIST@CCS 2015: Denver, Colorado, USA",
        "conf_url": "https://doi.org/10.1145/2808783",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2808783.2808795",
        "title": "Cyber Threats to Industrial Control Systems",
        "authors": "Kangbin Yim, Aniello Castiglione, Jeong Hyun Yi, Mauro Migliardi, Ilsun You",
        "abstract": "Cyber attacks have been a crucial problem on the Internet for more than a couple of decades. As information and communication technologies have been applied to the field systems in the traditional industries, they also have become connected and more vulnerable to the existing cyber attack techniques. To make matters worse, a practical malicious software suite was exposed from Italian hacking team by another leakage incident, which is noted by somebody as an insider's rip. Now, we worry about social problems caused by copycats. Nevertheless, more concerns have been arisen among experts about that this tendency is getting more serious when IoT (Internet of Things) environment has been realized. In an IoT environment, every device will be massively connected to each other. We can classify the IoT devices roughly into two categories, which are leaf devices and gateways. In this environment, anonymous devices may usually participate as a authorized consumer or producer for a service in the same domain with a gateway. The gateway may take a role for some devices as a delegate for specific services. Insider's exposure problem will be more serious concern in this situation. At a user's point of view, smart-phones for wearable devices, the AVN (Audio Visual Navigation) on smart cars and HMI host for ICS (Industrial Control Systems) are considered as gateways for IoT environments. In this situation, a canonical form of large scale IoT devices should be smart cars. The smart cars are going to include more software-incorporated electric components for intelligent safety functions adopted at the vacancy of the combustion engine and are also becoming connected and remotely controllable. This means these mobile devices cannot be free from the cyber security threats, which is solicited by insider devices [Stephen:CEA]. For a recent example, commercial networked vehicles were remotely hacked and controlled without any wired connections. In this panel, we will discuss current hot issues related to the malicious software in various aspects. In the existing mobile network and the connected smart devices, Android-based mobile malware is a big trouble. Combined malware is another problem among the emerging all-connected ICS equipment. Detecting these malicious behavior is one of the new IT challenges. We will share perspective ideas related to these topics among panelists and audiences through a professional discussion.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "几十年来，网络攻击一直是互联网上关键问题。 随着信息和通信技术已应用于传统行业的现场系统，它们也已经与现有的网络攻击技术变得更加紧密相关。 更糟糕的是，另一个泄漏事件从意大利黑客团队中暴露了一个实用的恶意软件套件，有人将其视为内部人士的RIP。 现在，我们担心模仿者引起的社会问题。 然而，专家之间已经引起了更多的关注，因为已经实现了物联网（物联网）环境，这种趋势越来越严重。 在物联网环境中，每个设备都将彼此之间密切相互连接。 我们可以将物联网设备大约分为两个类别，即叶设备和网关。 在这种环境中，匿名设备通常可以作为授权的消费者或与网关在同一域中服务的授权消费者参与。 网关可能会为某些设备作为特定服务的代表发挥作用。 在这种情况下，内部人士的暴露问题将更加严重。 从用户的角度来看，可穿戴设备的智能手机，智能汽车上的AVN（视听导航）和ICS HMI主机（工业控制系统）被视为物联网环境的网关。 在这种情况下，大规模物联网设备的规范形式应该是智能汽车。 这些智能汽车将包括更多配合软件的电动组件，用于燃烧引擎空缺时采用的智能安全功能，并且也正在连接和远程控制。 这意味着这些移动设备不能摆脱网络安全威胁，这是由内部设备[Stephen：CEA]征求的。 在最近的一个例子中，商业网络车辆被远程黑客入侵和控制，没有任何有线连接。 在此面板中，我们将在各个方面讨论与恶意软件有关的当前热门问题。 在现有的移动网络和连接的智能设备中，基于Android的移动恶意软件是一个很大的麻烦。 合并的恶意软件是新兴的全连接IC设备中的另一个问题。 检测这些恶意行为是新的IT挑战之一。 我们将通过专业讨论在小组成员和观众之间分享与这些主题有关的观点。",
        "title_zh": "工业控制系统面临的网络威胁",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/mist2015.html",
        "conf_title": "7th MIST@CCS 2015: Denver, Colorado, USA",
        "conf_url": "https://doi.org/10.1145/2808783",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2809826.2809832",
        "title": "Policy Specialization to Support Domain Isolation",
        "authors": "Simone Mutti, Enrico Bacis, Stefano Paraboschi",
        "abstract": "The exponential growth of modern information systems has introduced several new challenges in the management of security requirements. Nowadays, the technological scenario has evolved and the introduction of MAC models provides a better isolation among software components and reduces the damages that the malicious or defective ones can cause to the systems. On one hand it is important to confine applications and limit the privileges that they can request. On the other hand we want to let applications benefit from the flexibility given by MAC models, such as SELinux. In this paper we show how the constructs already available in SELinux and the specialization of security domains can be leveraged to define boundaries where the applications are confined but still able to introduce sophisticated security patterns, such as application isolation and the least privilege principle. After defining the proposed model, we describe how it can be integrated into real systems through the use of examples on Android and Apache Web Server.",
        "files": {
            "openAccessPdf": "https://aisberg.unibg.it/bitstream/10446/57967/1/Policy_Specialization.pdf"
        },
        "abstract_zh": "现代信息系统的指数增长引入了安全要求管理方面的几个新挑战。 如今，技术方案已经发展，Mac模型的引入提供了更好的隔离软件组件，并减少了恶意或有缺陷的损害可能对系统造成的损害。 一方面，重要的是要限制应用程序并限制他们可以要求的特权。 另一方面，我们希望使应用程序受益于Mac模型（例如Selinux）的灵活性。 在本文中，我们展示了如何利用SELINUX中已经可用的构造以及安全域的专业化来定义限制应用程序的边界，但仍然能够引入复杂的安全模式，例如应用程序隔离和最低特权原则。 定义了提出的模型后，我们描述了如何通过使用Android和Apache Web服务器上的示例将其集成到实际系统中。",
        "title_zh": "支持域隔离的策略专门化",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/safeconfig/safeconfig2015.html",
        "conf_title": "SafeConfig@CCS 2015: Denver, Colorado, USA",
        "conf_url": "https://doi.org/10.1145/2809826",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2810103.2813650",
        "title": "GUITAR: Piecing Together Android App GUIs from Memory Images",
        "authors": "Brendan Saltaformaggio, Rohit Bhatia, Zhongshu Gu, Xiangyu Zhang, Dongyan Xu",
        "abstract": "An Android app's graphical user interface (GUI) displays rich semantic and contextual information about the smartphone's owner and app's execution. Such information provides vital clues to the investigation of crimes in both cyber and physical spaces. In real-world digital forensics however, once an electronic device becomes evidence most manual interactions with it are prohibited by criminal investigation protocols. Hence investigators must resort to \"image-and-analyze\" memory forensics (instead of browsing through the subject phone) to recover the apps' GUIs. Unfortunately, GUI reconstruction is still largely impossible with state-of-the-art memory forensics techniques, which tend to focus only on individual in-memory data structures. An Android GUI, however, displays diverse visual elements each built from numerous data structure instances. Furthermore, whenever an app is sent to the background, its GUI structure will be explicitly deallocated and disintegrated by the Android framework. In this paper, we present GUITAR, an app-independent technique which automatically reassembles and redraws all apps' GUIs from the multitude of GUI data elements found in a smartphone's memory image. To do so, GUITAR involves the reconstruction of (1) GUI tree topology, (2) drawing operation mapping, and (3) runtime environment for redrawing. Our evaluation shows that GUITAR is highly accurate (80-95% similar to original screenshots) at reconstructing GUIs from memory images taken from a variety of Android apps on popular phones. Moreover, GUITAR is robust in reconstructing meaningful GUIs even when facing GUI data loss.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android应用程序的图形用户界面（GUI）显示有关智能手机所有者和应用程序执行的丰富语义和上下文信息。 这些信息为研究网络和物理空间中犯罪的研究提供了重要的线索。 然而，在现实世界中的数字取证中，一旦电子设备成为证据，大多数手动互动都会由刑事调查协议禁止。 因此，调查人员必须诉诸“图像和分析”记忆取证（而不是浏览主题电话）以恢复应用程序的GUIS。 不幸的是，对于最先进的记忆取证技术，GUI重建仍然是不可能的，这些技术倾向于仅关注单个内存数据结构。 但是，Android GUI显示各种视觉元素，每种视觉元素都由众多数据结构实例构建。 此外，每当将应用程序发送到后台时，其GUI结构将被Android框架明确处理和解体。 在本文中，我们提出吉他，这是一种独立于应用程序的技术，它会自动重新组装并从智能手机的内存图像中发现的多种GUI数据元素中自动重新组合并重新绘制所有应用程序的吉他。 为此，吉他涉及（1）GUI树拓扑，（2）绘制操作映射和（3）重绘的运行时环境的重建。 我们的评估表明，吉他在从流行手机上的各种Android应用程序中从内存图像中重建吉他时高度准确（与原始屏幕截图相似）。 此外，即使面对GUI数据丢失，吉他也可以重建有意义的吉尼斯。",
        "title_zh": "吉他:从记忆图像中拼凑Android应用图形用户界面",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2015.html",
        "conf_title": "22nd CCS 2015: Denver, CO, USA",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2810103",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2810103.2813656",
        "title": "WebCapsule: Towards a Lightweight Forensic Engine for Web Browsers",
        "authors": "Christopher Neasbitt, Bo Li, Roberto Perdisci, Long Lu, Kapil Singh, Kang Li",
        "abstract": "Performing detailed forensic analysis of real-world web security incidents targeting users, such as social engineering and phishing attacks, is a notoriously challenging and time-consuming task. To reconstruct web-based attacks, forensic analysts typically rely on browser cache files and system logs. However, cache files and logs provide only sparse information often lacking adequate detail to reconstruct a precise view of the incident. To address this problem, we need an always-on and lightweight (i.e., low overhead) forensic data collection system that can be easily integrated with a variety of popular browsers, and that allows for recording enough detailed information to enable a full reconstruction of web security incidents, including phishing attacks. To this end, we propose WebCapsule, a novel record and replay forensic engine for web browsers. WebCapsule functions as an always-on system that aims to record all non-deterministic inputs to the core web rendering engine embedded in popular browsers, including all user interactions with the rendered web content, web traffic, and non-deterministic signals and events received from the runtime environment. At the same time, WebCapsule aims to be lightweight and introduce low overhead. In addition, given a previously recorded trace, WebCapsule allows a forensic analyst to fully replay and analyze past web browsing sessions in a controlled isolated environment. We design WebCapsule to also be portable, so that it can be integrated with minimal or no changes into a variety of popular web-rendering applications and platforms. To achieve this goal, we build WebCapsule as a self-contained instrumented version of Google's Blink rendering engine and its tightly coupled V8 JavaScript engine. We evaluate WebCapsule on numerous real-world phishing attack instances, and demonstrate that such attacks can be recorded and fully replayed. In addition, we show that WebCapsule can record complex browsing sessions on popular websites and different platforms (e.g., Linux and Android) while imposing reasonable overhead, thus making always-on recording practical.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "对针对用户等现实世界的Web安全事件进行详细的法医分析，例如社交工程和网络钓鱼攻击，是一项挑战和耗时的任务。 为了重建基于Web的攻击，法医分析师通常依赖浏览器缓存文件和系统日志。 但是，缓存文件和日志仅提供稀疏信息，通常缺乏足够的细节来重建事件的精确视图。 为了解决这个问题，我们需要始终轻巧（即低开销）法医数据收集系统，该系统可以轻松地与各种流行的浏览器集成在一起，并且允许记录足够的详细信息以实现Web的完整重建 安全事件，包括网络钓鱼攻击。 为此，我们提出了WebCapsule，这是一个新颖的记录和用于Web浏览器的大型重播法医引擎。 WebCapsule作为一个始终在线系统的功能，旨在将所有非确定性输入记录到嵌入流行浏览器中的Core Web渲染引擎中，包括与渲染的Web内容，网络流量和非确定性信号和从收到的所有用户交互 运行时环境。 同时，WebCapsule的目标是轻量级并引入低空费用。 此外，鉴于先前记录的跟踪，WebCapsule允许法医分析师在受控的隔离环境中完全重播和分析过去的Web浏览会话。 我们设计的WebCapsule也可以是便携式的，因此可以将其集成到最小或没有更改为各种流行的Web渲染应用程序和平台。 为了实现这一目标，我们将WebCapsule构建为Google闪烁渲染引擎的独立乐器版本及其紧密耦合的V8 JavaScript引擎。 我们在众多现实世界的网络钓鱼攻击实例上评估了WebCapsule，并证明可以记录并完全重播此类攻击。 此外，我们表明WebCapsule可以在流行的网站和不同的平台（例如Linux和Android）上记录复杂的浏览会话，同时施加合理的开销，从而使始终在录制中实用。",
        "title_zh": "WebCapsule:面向Web浏览器的轻量级取证引擎",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2015.html",
        "conf_title": "22nd CCS 2015: Denver, CO, USA",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2810103",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2810103.2813720",
        "title": "VCR: App-Agnostic Recovery of Photographic Evidence from Android Device Memory Images",
        "authors": "Brendan Saltaformaggio, Rohit Bhatia, Zhongshu Gu, Xiangyu Zhang, Dongyan Xu",
        "abstract": "The ubiquity of modern smartphones means that nearly everyone has easy access to a camera at all times. In the event of a crime, the photographic evidence that these cameras leave in a smartphone's memory becomes vital pieces of digital evidence, and forensic investigators are tasked with recovering and analyzing this evidence. Unfortunately, few existing forensics tools are capable of systematically recovering and inspecting such in-memory photographic evidence produced by smartphone cameras. In this paper, we present VCR, a memory forensics technique which aims to fill this void by enabling the recovery of all photographic evidence produced by an Android device's cameras. By leveraging key aspects of the Android framework, VCR extends existing memory forensics techniques to improve vendor-customized Android memory image analysis. Based on this, VCR targets application-generic artifacts in an input memory image which allow photographic evidence to be collected no matter which application produced it. Further, VCR builds upon the Android framework's existing image decoding logic to both automatically recover and render any located evidence. Our evaluation with commercially available smartphones shows that VCR is highly effective at recovering all forms of photographic evidence produced by a variety of applications across several different Android platforms.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "现代智能手机的无处不在意味着几乎每个人都可以随时轻松访问相机。 在发生犯罪的情况下，这些相机在智能手机记忆中留下的摄影证据成为至关重要的数字证据，法医调查人员的任务是恢复和分析这一证据。 不幸的是，很少有现有的取证工具能够系统地恢复和检查智能手机摄像机产生的这种记忆中的摄影证据。 在本文中，我们提出了VCR，这是一种记忆取证技术，旨在通过恢复Android设备摄像机产生的所有摄影证据来填补这一空白。 通过利用Android框架的关键方面，VCR扩展了现有的内存取证技术，以改善供应商定制的Android内存图像分析。 基于此，VCR针对输入记忆图像中的应用程序生物伪像，无论应用哪种应用都可以收集摄影证据。 此外，VCR建立在Android框架现有的图像解码逻辑上，以自动恢复并渲染任何位置的证据。 我们使用市售智能手机的评估表明，VCR在恢复各种不同Android平台的各种应用程序产生的所有形式的摄影证据方面非常有效。",
        "title_zh": "VCR:应用程序无关的从Android设备内存图像中恢复照片证据",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2015.html",
        "conf_title": "22nd CCS 2015: Denver, CO, USA",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2810103",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2810103.2813637",
        "title": "From Collision To Exploitation: Unleashing Use-After-Free Vulnerabilities in Linux Kernel",
        "authors": "Wen Xu, Juanru Li, Junliang Shu, Wenbo Yang, Tianyi Xie, Yuanyuan Zhang, Dawu Gu",
        "abstract": "Since vulnerabilities in Linux kernel are on the increase, attackers have turned their interests into related exploitation techniques. However, compared with numerous researches on exploiting use-after-free vulnerabilities in the user applications, few efforts studied how to exploit use-after-free vulnerabilities in Linux kernel due to the difficulties that mainly come from the uncertainty of the kernel memory layout. Without specific information leakage, attackers could only conduct a blind memory overwriting strategy trying to corrupt the critical part of the kernel, for which the success rate is negligible. In this work, we present a novel memory collision strategy to exploit the use-after-free vulnerabilities in Linux kernel reliably. The insight of our exploit strategy is that a probabilistic memory collision can be constructed according to the widely deployed kernel memory reuse mechanisms, which significantly increases the success rate of the attack. Based on this insight, we present two practical memory collision attacks: An object-based attack that leverages the memory recycling mechanism of the kernel allocator to achieve freed vulnerable object covering, and a physmap-based attack that takes advantage of the overlap between the physmap and the SLAB caches to achieve a more flexible memory manipulation. Our proposed attacks are universal for various Linux kernels of different architectures and could successfully exploit systems with use-after-free vulnerabilities in kernel. Particularly, we achieve privilege escalation on various popular Android devices (kernel version>=4.3) including those with 64-bit processors by exploiting the CVE-2015-3636 use-after-free vulnerability in Linux kernel. To our knowledge, this is the first generic kernel exploit for the latest version of Android. Finally, to defend this kind of memory collision, we propose two corresponding mitigation schemes.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "由于Linux内核中的漏洞正在增加，因此攻击者将他们的兴趣转变为相关的剥削技术。 但是，与在用户应用程序中利用无用的无用漏洞的许多研究相比，很少有努力研究如何利用Linux内核中的无用使用漏洞，因为这主要来自内核内存布局的不确定性。 没有特定的信息泄漏，攻击者只能执行盲目的记忆覆盖策略，试图破坏内核的关键部分，因为成功率可以忽略不计。 在这项工作中，我们提出了一种新颖的记忆碰撞策略，以可靠地利用Linux内核中的无使用漏洞。 我们的利用策略的见解是，可以根据广泛部署的内核内存重用机制来构建概率内存碰撞，从而大大提高了攻击的成功率。 基于这种见解，我们提出了两种实际的内存碰撞攻击：基于对象的攻击，它利用内核分配器的内存回收机制来实现释放的易受伤害的对象覆盖物，以及一种利用Physmap之间重叠的基于物理图的攻击 和平板缓存以实现更灵活的内存操作。 我们提出的攻击对于不同体系结构的各种Linux内核都是通用的，并且可以成功利用内核中使用无用漏洞的系统。 特别是，我们通过利用CVE-2015-3636在Linux内核中利用CVE-2015-3636使用CVE-2015-3636，在各种流行的Android设备（内核版本> 4.3）上实现特权升级。 据我们所知，这是最新版本的Android的第一个通用内核利用。 最后，为了捍卫这种记忆碰撞，我们提出了两个相应的缓解方案。",
        "title_zh": "从冲突到利用:释放Linux内核中的释放后使用漏洞",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2015.html",
        "conf_title": "22nd CCS 2015: Denver, CO, USA",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2810103",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2810103.2813669",
        "title": "Towards Automatic Generation of Security-Centric Descriptions for Android Apps",
        "authors": "Mu Zhang, Yue Duan, Qian Feng, Heng Yin",
        "abstract": "To improve the security awareness of end users, Android markets directly present two classes of literal app information: 1) permission requests and 2) textual descriptions. Unfortunately, neither can serve the needs. A permission list is not only hard to understand but also inadequate; textual descriptions provided by developers are not security-centric and are significantly deviated from the permissions. To fill in this gap, we propose a novel technique to automatically generate security-centric app descriptions, based on program analysis. We implement a prototype system, DescribeME, and evaluate our system using both DroidBench and real-world Android apps. Experimental results demonstrate that DescribeME enables a promising technique which bridges the gap between descriptions and permissions. A further user study shows that automatically produced descriptions are not only readable but also effectively help users avoid malware and privacy-breaching apps.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "为了提高最终用户的安全意识，Android市场直接提供两类的文字应用信息：1）权限请求和2）文本描述。 不幸的是，这两个都无法满足需求。 许可清单不仅很难理解，而且不足； 开发人员提供的文本描述不是以安全性为中心，并且与权限大大偏离。 为了填补这一空白，我们提出了一种基于程序分析的新技术来自动生成以安全为中心的应用程序描述。 我们使用DroidBench和现实世界Android应用程序实现了原型系统，描述并评估了我们的系统。 实验结果表明，描述Eme可以实现一种有希望的技术，该技术弥合了描述和权限之间的差距。 一项进一步的用户研究表明，自动产生的描述不仅可以阅读，而且有效地帮助用户避免恶意软件和露出隐私的应用程序。",
        "title_zh": "面向自动生成以安全为中心的Android应用描述",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2015.html",
        "conf_title": "22nd CCS 2015: Denver, CO, USA",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2810103",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2810103.2813689",
        "title": "AUTOREB: Automatically Understanding the Review-to-Behavior Fidelity in Android Applications",
        "authors": "Deguang Kong, Lei Cen, Hongxia Jin",
        "abstract": "Along with the increasing popularity of mobile devices, there exist severe security and privacy concerns for mobile apps. On Google Play, user reviews provide a unique understanding of security/privacy issues of mobile apps from users' perspective, and in fact they are valuable feedbacks from users by considering users' expectations. To best assist the end users, in this paper, we automatically learn the security/privacy related behaviors inferred from analysis on user reviews, which we call review-to-behavior fidelity. We design the system AUTOREB that automatically assesses the review-to-behavior fidelity of mobile apps. AUTOREB employs the state-of-the-art machine learning techniques to infer the relations between users' reviews and four categories of security-related behaviors. Moreover, it uses a crowdsourcing approach to automatically aggregate the security issues from review-level to app-level. To our knowledge, AUTOREB is the first work that explores the user review information and utilizes the review semantics to predict the risky behaviors at both review-level and app-level. We crawled a real-world dataset of 2,614,186 users, 12,783 apps and 13,129,783 reviews from Google play, and use it to comprehensively evaluate AUTOREB. The experiment result shows that our method can predict the mobile app behaviors at user-review level with accuracy as high as 94.05%, and also it can predict the security issues at app-level by aggregating the predictions at review-level. Our research offers an insight into understanding the mobile app security concerns from users' perspective, and helps bridge the gap between the security issues and users' perception.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "随着移动设备的日益普及，移动应用程序存在严重的安全性和隐私问题。 从用户的角度来看，在Google Play上，用户评论从用户的角度提供了对移动应用程序的安全/隐私问题的独特理解，实际上，通过考虑用户的期望，它们是用户的宝贵反馈。 为了最好地帮助最终用户，在本文中，我们会自动学习从用户评论分析中推断出的安全性/隐私与行为相关的行为，我们称之为审核行为忠诚度。 我们设计了自动评估移动应用程序审查的系统自动重新布置。 AutoreB采用最先进的机器学习技术来推断用户评论与安全相关行为的四种类别之间的关系。 此外，它使用众包方法自动汇总了从评论级别到应用程序级别的安全问题。 据我们所知，Autoreb是探索用户评论信息并利用审核语义来预测评论级别和应用程序级别的风险行为的第一项工作。 我们从Google Play中爬了一个由2,614,186位用户，12,783个应用程序和13,129,783个评论的现实数据集，并使用它来全面评估自动化。 实验结果表明，我们的方法可以准确地预测用户审视级别的移动应用程序行为，高达94.05％，并且可以通过汇总评论级别的预测来预测应用程序级别的安全问题。 我们的研究提供了从用户的角度了解移动应用程序安全问题的见解，并有助于弥合安全问题和用户感知之间的差距。",
        "title_zh": "AUTOREB:自动理解Android应用程序中从评论到行为的保真度",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2015.html",
        "conf_title": "22nd CCS 2015: Denver, CO, USA",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2810103",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2810103.2813714",
        "title": "Android Root and its Providers: A Double-Edged Sword",
        "authors": "Hang Zhang, Dongdong She, Zhiyun Qian",
        "abstract": "Android root is the voluntary and legitimate process of gaining the highest privilege and full control over a user's Android device. To facilitate the popular demand, a unique Android root ecosystem has formed where a variety of root providers begin to offer root as a service. Even though legitimate, many convenient one-click root methods operate by exploiting vulnerabilities in the Android system. If not carefully controlled, such exploits can be abused by malware author to gain unauthorized root privilege. To understand such risks, we undertake a study on a number of popular yet mysterious Android root providers focusing on 1) if their exploits are adequately protected. 2) the relationship between their proprietary exploits and publicly available ones. We find that even though protections are usually employed, the effort is substantially undermined by a few systematic and sometimes obvious weaknesses we discover. From one large provider, we are able to extract more than 160 exploit binaries that are well-engineered and up-to date, corresponding to more than 50 families, exceeding the number of exploits we can find publicly. We are able to identify at least 10 device driver exploits that are never reported in the public. Besides, for a popular kernel vulnerability (futex bug), the provider has engineered 89 variants to cover devices with different Android versions and configurations. Even worse, we find few of the exploit binaries can be detected by mobile antivirus software.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android Root是获得对用户Android设备的最高特权和完全控制的自愿和合法过程。 为了促进大众需求，独特的Android根生态系统已经形成了各种根提供者开始提供根源作为服务的地方。 即使合法，许多方便的一键根方法通过利用Android系统中的漏洞来运行。 如果未仔细控制，恶意软件作者可能会滥用此类利用来获得未经授权的根特权。 为了了解这种风险，我们对许多受欢迎但神秘的Android根提供者进行了研究，专注于1）如果他们的利用得到了充分的保护。 2）他们专有的利用与公开可用的关系之间的关系。 我们发现，即使通常采用了保护措施，我们发现的一些系统的，有时甚至是明显的弱点会大大破坏了努力。 从一个大型提供商那里，我们能够提取160多个剥削性二进制文件，这些二进制文件经过精心设计，最新的二进制文件，对应于50多个家庭，超过了我们可以公开找到的利用数量。 我们能够识别至少10个从未在公众中报告的设备驱动程序。 此外，对于流行的内核漏洞（FUTEX错误），提供商已经设计了89种变体，以覆盖具有不同Android版本和配置的设备。 更糟糕的是，我们发现几乎没有移动防病毒软件可以检测到的利用二进制文件。",
        "title_zh": "Android Root及其提供商:一把双刃剑",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2015.html",
        "conf_title": "22nd CCS 2015: Denver, CO, USA",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2810103",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2810103.2813606",
        "title": "From System Services Freezing to System Server Shutdown in Android: All You Need Is a Loop in an App",
        "authors": "Heqing Huang, Sencun Zhu, Kai Chen, Peng Liu",
        "abstract": "The Android OS not only dominates 78.6% of the worldwide smartphone market in 2014, but importantly has been widely used for mission critical tasks (e.g., medical devices, auto/aircraft navigators, embedded in satellite project). The core of Android, System Server (SS), is a multi-threaded process that contains most of the system services and provides the essential functionalities to support applications (apps). Considering the complicated design of the SS and its easily-accessible system services (e.g., via Android APIs), we conjecture that the SS may face DoS attacks. As the SS plays the important role in Android, serious DoS attacks could cause single-point-of-failure to the phone system. By studying the source code, we discovered a general design trait in the concurrency control mechanism of the SS that could be vulnerable to DoS attacks. To validate our hypothesis, we design a tool to cost efficiently explore high-risk methods in the SS. After a systematic analysis of 2,154 candidate-risky methods, we found four unknown vulnerabilities in critical services (e.g., the ActivityManager and the WindowManager), which are named the Android Stroke Vulnerabilities ({\\it ASVs}). Exploiting the ASVs would continuously block all other requests for system services, followed by killing the SS and soft-rebooting the OS. Results of a further threat analysis show that by writing a loop to invoke Android APIs in an app, an attacker can continually freeze (reboot) the device at targeted critical moments (e.g., when patching vulnerable apps). Furthermore, ASVs can be exploited to enhance malware with anti-removal capability or to design the ransomware by putting the devices into continuous DoS loops. After being informed, Google confirmed our findings promptly. We also proposed to their Android framework team several improvements in their concurrency control design and a fine-grained failure recovery mechanism for the SS.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android OS不仅在2014年占全球智能手机市场的78.6％，而且重要的是，已广泛用于任务关键任务（例如，医疗设备，汽车/飞机导航员，嵌入了卫星项目中）。 Android的核心系统服务器（SS）是一个多线程的过程，包含大多数系统服务，并提供了支持应用程序（APPS）的基本功能。 考虑到SS的复杂设计及其易于访问的系统服务（例如，通过Android API），我们猜想SS可能会面临DOS攻击。 由于SS在Android中起着重要作用，因此严重的DOS攻击可能会导致电话系统单点失败。 通过研究源代码，我们发现了SS的并发控制机制中的一般设计特征，可能容易受到DOS攻击的影响。 为了验证我们的假设，我们设计了一种工具来有效地探索SS中的高风险方法。 在对2,154种候选危险方法进行系统分析之后，我们发现了关键服务中的四个未知漏洞（例如ActivityManager和WindowManager），这些漏洞被命名为Android Stroke漏洞（{\\ IT ASVS}）。 利用ASV将不断阻止所有对系统服务的所有其他请求，然后杀死SS并进行软启动操作系统。 进一步的威胁分析的结果表明，通过编写循环以调用应用程序中的Android API，攻击者可以在目标关键时刻（例如，在修补脆弱的应用程序时）不断冻结（重新启动）设备。 此外，可以利用ASV来利用反拆除能力来增强恶意软件，或通过将设备放入连续的DOS循环来设计勒索软件。 通知后，Google迅速确认了我们的发现。 我们还向他们的Android框架团队提出了一些改进的并发控制设计以及SS的细粒失败恢复机制。",
        "title_zh": "在Android中，从系统服务冻结到系统服务器关闭:你所需要的只是应用程序中的一个循环",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2015.html",
        "conf_title": "22nd CCS 2015: Denver, CO, USA",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2810103",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2810103.2813648",
        "title": "Hare Hunting in the Wild Android: A Study on the Threat of Hanging Attribute References",
        "authors": "Yousra Aafer, Nan Zhang, Zhongwen Zhang, Xiao Zhang, Kai Chen, XiaoFeng Wang, Xiao-yong Zhou, Wenliang Du, Michael Grace",
        "abstract": "Android is characterized by the complicated relations among its components and apps, through which one party interacts with the other (e.g., starting its activity) by referring to its attributes like package, activity, service, action names, authorities and permissions. Such relations can be easily compromised during a customization: e.g., when an app is removed to fit an Android version to a new device model, while references to the app remain inside that OS. This conflict between the decentralized, unregulated Android customization process and the interdependency among different Android components and apps leads to the pervasiveness of hanging attribute references (Hares), a type of vulnerabilities never investigated before. In our research, we show that popular Android devices are riddled with such flaws, which often have serious security implications: when an attribute (e.g., a package/authority/action name) is used on a device but the party defining it has been removed, a malicious app can fill the gap to acquire critical system capabilities, by simply disguising as the owner of the attribute. More specifically, we discovered in our research that on various Android devices, the malware can exploit their Hares to steal the user's voice notes, control the screen unlock process, replace Google Email's account settings activity and collect or even modify the user's contact without proper permissions. We further designed and implemented Harehunter, a new tool for automatic detection of Hares by comparing attributes defined with those used, and analyzing the references to undefined attributes to determine whether they have been protected (e.g., by signature checking). On the factory images for 97 most popular Android devices, Harehunter discovered 21557 likely Hare flaws, demonstrating the significant impacts of the problem. To mitigate the hazards, we further developed an app for detecting the attempts to exploit Hares on different devices and provide the guidance for avoiding this pitfall when building future systems.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android的特征是其组件和应用之间的复杂关系，一个方与另一方相互作用（例如，启动其活动）通过其属性，例如包装，活动，服务，行动名称，权威和权限。 在自定义过程中，可以轻松地将这种关系妥协：例如，当删除应用程序以将Android版本拟合到新设备模型时，而对应用程序的引用保留在该操作系统中。 分散的，不受监管的Android定制过程与不同的Android组件和应用之间的相互依赖性之间的冲突导致悬挂属性参考（Hares）的普遍性，这是以前从未研究过的一种漏洞。 在我们的研究中，我们表明流行的Android设备充满了这样的缺陷，这种缺陷通常具有严重的安全性含义：当设备上使用属性（例如，包装/权威/操作名称）时 ，恶意应用程序可以通过简单地掩饰为属性的所有者来填补空白以获得关键的系统功能。 更具体地说，我们在研究中发现，在各种Android设备上，恶意软件可以利用其野兔窃取用户的语音笔记，控制屏幕解锁过程，替换Google Email Email的帐户设置活动，并收集甚至在没有适当权限的情况下进行收集甚至修改用户的联系 。 我们进一步设计和实施了Harehunter，这是一种通过将定义的属性与所使用的属性进行比较，并分析对未定义属性的引用以确定它们是否已受到保护（例如，通过签名检查）来自动检测野兔的新工具。 在97个最受欢迎的Android设备的工厂图像上，Harehunter发现了21557可能的野兔缺陷，证明了该问题的重大影响。 为了减轻危害，我们进一步开发了一个应用程序，用于检测在不同设备上开发野兔的尝试，并在构建未来系统时为避免这种陷阱提供指导。",
        "title_zh": "野生机器人中的野兔狩猎:悬挂属性引用的威胁研究",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2015.html",
        "conf_title": "22nd CCS 2015: Denver, CO, USA",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2810103",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2810103.2813645",
        "title": "Mitigating Storage Side Channels Using Statistical Privacy Mechanisms",
        "authors": "Qiuyu Xiao, Michael K. Reiter, Yinqian Zhang",
        "abstract": "A storage side channel occurs when an adversary accesses data objects influenced by another, victim computation and infers information about the victim that it is not permitted to learn directly. We bring advances in privacy for statistical databases to bear on storage side-channel defense, and specifically demonstrate the feasibility of applying differentially private mechanisms to mitigate storage side channels in procfs, a pseudo file system broadly used in Linux and Android kernels. Using a principled design with quantifiable security, our approach injects noise into kernel data-structure values that are used to generate procfs contents, but also reestablishes invariants on these noised values so as to not violate assumptions on which procfs or its clients depend. We show that our modifications to procfs can be configured to mitigate known storage side channels while preserving its utility for monitoring and diagnosis.",
        "files": {
            "openAccessPdf": "http://dl.acm.org/ft_gateway.cfm?id=2813645&type=pdf"
        },
        "abstract_zh": "当对手访问受另一个受害者计算影响的数据对象并渗透有关受害者的信息时，就会发生存储侧渠道。 我们为统计数据库提供了隐私的进步，可以在存储侧渠道防御上进行统计数据库，并特别证明了将差异私有机制应用于Procfs中的存储侧通道的可行性，procfs incofs和android内核中广泛使用了伪文件系统。 使用具有可量化安全性的原则设计，我们的方法将噪声注入用于生成procfs内容的内核数据结构值，但也重新建立了对这些NONISE值的不变性，以免违反Procfs或其客户端的依赖的假设。 我们表明，我们对Procfs的修改可以配置为减轻已知的存储侧通道，同时保留其用于监视和诊断的实用性。",
        "title_zh": "使用统计隐私机制减轻存储侧信道",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2015.html",
        "conf_title": "22nd CCS 2015: Denver, CO, USA",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2810103",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2810103.2810129",
        "title": "POSTER: Towards Compiler-Assisted Taint Tracking on the Android Runtime (ART)",
        "authors": "Michael Backes, Oliver Schranz, Philipp von Styp-Rekowsky",
        "abstract": "Dynamic analysis and taint tracking on Android was typically implemented by instrumenting the Dalvik Virtual Machine. However, the new Android Runtime (ART) introduced in Android 5 replaces the interpreter with an on-device compiler suite. Therefore as of Android 5, the applicability of interpreter instrumentation-based approaches like TaintDroid is limited to Android versions up to 4.4 Kitkat. In this poster, we present ongoing work on re-enabling taint tracking for apps by instrumenting the Optimizing backend, used by the new ART compiler suite for code generation. As Android now compiles apps ahead-of-time from dex bytecode to platform specific native code on the device itself, an instrumented compiler provides the opportunity to emit additional instructions that enable the actual taint tracking. The result is a custom compiler that takes arbitrary app APKs and transforms them into self-taint tracking native code, executable by the Android Runtime.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "通常通过仪器来实现Android上的动态分析和污点跟踪。 但是，Android 5中引入的新的Android运行时（ART）用设备编译器套件取代了解释器。 因此，从Android 5开始，基于解释器仪器的方法（例如塔特德病）的适用性仅限于高达4.4 kitkat的Android版本。 在这张海报中，我们通过启动新艺术编译器套件用于代码生成的优化后端来介绍对应用程序进行污点跟踪的持续工作。 由于Android现在将应用程序提前从DEX字节码到设备本身上的平台特定本机代码编译，因此仪器编译器提供了发出其他说明的机会，以实现实际的污点跟踪。 结果是一个自定义编译器，该编译器采用任意应用程序APK并将其转换为自动跟踪本机代码，可通过Android运行时执行。",
        "title_zh": "海报:Android运行时上编译器辅助的污点跟踪(ART)",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2015.html",
        "conf_title": "22nd CCS 2015: Denver, CO, USA",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2810103",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2810103.2810108",
        "title": "POSTER: biTheft: Stealing Your Secrets by Bidirectional Covert Channel Communication with Zero-Permission Android Application",
        "authors": "JingZheng Wu, Yanjun Wu, Mutian Yang, Zhifei Wu, Tianyue Luo, Yongji Wang",
        "abstract": "Android has 81.5% of the smartphone market now, and it is also suffering from the explosive growth of malicious applications (or apps). These apps steal users' secret data and transmit it out of the phones. By analyzing the required permissions and the abnormal behaviors, some malicious apps may be easily detected. However, in this paper, we present a bidirectional covert channel in Android, named biTheft, which steals secrets and privacies covertly without any permission. biTheft firstly collects secret data from a set of unprotected shared resources in Android system. Then, it analyzes and infers secrets from the data. With the Intent mechanism, biTheft transmits secrets by legally launching some activities of other apps without requiring any permission itself. biTheft also monitors the usages and statuses of the shared resources to receive commands from remote server. We implement a biTheft scenario, and demonstrate that some types of secrets can be stolen and transmitted out. With pre-agreement, biTheft dynamically adjusts according with the remote server commands. Comparing with the traditional covert channels, biTheft is more practical in the real world scenarios.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android现在拥有81.5％的智能手机市场，并且还遭受了恶意应用（或应用程序）的爆炸性增长。 这些应用程序窃取了用户的秘密数据并将其传输到手机中。 通过分析所需的权限和异常行为，可以轻松检测到一些恶意应用程序。 但是，在本文中，我们提出了Android中的双向秘密频道，名为Bitheft，该渠道未经任何许可就窃取了秘密和私人秘密。 Bitheft首先从Android系统中的一组未保护的共享资源中收集秘密数据。 然后，它分析并从数据中分析秘密。 有了意图机制，Bitheft通过合法启动其他应用程序的某些活动而无需任何许可本身来传输秘密。 Bitheft还监视共享资源的使用和状态，以从远程服务器接收命令。 我们实施了一个Bitheft方案，并证明某些类型的秘密可以被盗和传播。 通过预先介绍，Bitheft通过远程服务器命令动态调整。 与传统的秘密频道相比，在现实世界中，Bitheft更为实用。",
        "title_zh": "海报:biTheft:通过与零权限Android应用程序的双向隐蔽通道通信来窃取您的秘密",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/ccs2015.html",
        "conf_title": "22nd CCS 2015: Denver, CO, USA",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2810103",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2808138.2808146",
        "title": "On the Unicity of Smartphone Applications",
        "authors": "Jagdish Prasad Achara, Gergely Ács, Claude Castelluccia",
        "abstract": "Prior works have shown that the list of apps installed by a user reveal a lot about user interests and behavior. These works rely on the semantics of the installed apps and show that various user traits could be learnt automatically using off-the-shelf machine-learning techniques. In this work, we focus on the re-identifiability issue and thoroughly study the unicity of smartphone apps on a dataset containing 54,893 Android users collected over a period of 7 months. Our study finds that any 4 apps installed by a user are enough (more than 95% times) for the re-identification of the user in our dataset. As the complete list of installed apps is unique for 99% of the users in our dataset, it can be easily used to track/profile the users by a service such as Twitter that has access to the whole list of installed apps of users. As our analyzed dataset is small as compared to the total population of Android users, we also study how unicity would vary with larger datasets. This work emphasizes the need of better privacy guards against collection, use and release of the list of installed apps.",
        "files": {
            "openAccessPdf": "http://arxiv.org/pdf/1507.07851"
        },
        "abstract_zh": "先前的工作表明，用户安装的应用程序列表揭示了有关用户兴趣和行为的很多信息。 这些作品依赖于已安装应用程序的语义，并表明可以使用现成的机器学习技术自动学习各种用户特征。 在这项工作中，我们专注于重新识别性问题，并在包含7个月内收集的54,893个Android用户的数据集上彻底研究智能手机应用程序的统一性。 我们的研究发现，用户安装的任何4个应用程序都足够（超过95％），可以在我们的数据集中重新识别用户。 由于已安装应用程序的完整列表对于我们数据集中的99％的用户是唯一的，因此可以轻松地通过诸如Twitter之类的服务跟踪/配置用户，该服务可以访问已安装的用户应用程序的整个列表。 与Android用户的总人群相比，我们的分析数据集很小，我们还研究了较大数据集的独立性如何变化。 这项工作强调需要更好的隐私警卫，以防止安装应用程序列表的收集，使用和发布。",
        "title_zh": "智能手机应用的单一性",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/wpes/wpes2015.html",
        "conf_title": "WPES@CCS 2015: Denver, Colorado, USA",
        "conf_url": "https://doi.org/10.1145/2808138",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2808414.2808418",
        "title": "Characterizing Composite User-Device Touchscreen Physical Unclonable Functions (PUFs) for Mobile Device Authentication",
        "authors": "Ryan A. Scheel, Akhilesh Tyagi",
        "abstract": "Mobile systems have unique authentication requirements. A composite user-device identity that is computationally difficult to decompose into its user and device contribution is better suited for mobile context authentication for services such as Google wallet. We base such a composite identity in a composition of human user biometric and device silicon biometric realized as a user-device (UD-) physical unclonable function (PUF). This UD-PUF is derived from the touch screen of a mobile device. Challenge is a shape drawn on the screen, which the human user traces. The pressure values generated in the resulting touch events reflect the device level variability of the underlying transistor array. These pressure sequences can be quantized into an appropriate response. We characterize such a composite PUF for both its variability and reproducibility. We illustrate 0 bits of error in reproducibility for the (same device, same user, same challenge) scenario with the use of an innovative statistical concentrator serving the role of ECC (error correcting codes) in traditional PUFs. For the (same device, same user, different challenge), (same device, different user, same challenge), (different device, same user, same challenge), we benefit from as large a variability in the response as possible. We show 60+ bits Hamming distance in the composite UD-PUF responses of length 128 bits when variability is expected. We also demonstrate the promise of these PUFs to serve as biometric hardware pseudorandom number generators (PRGs) by putting them through Montreal TESTU01 suite of tests. Our best PUFs pass all the tests except occasionally failing 3. This PUF was implemented on Nexus 7 devices running Android.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "移动系统具有独特的身份验证要求。 在计算上很难将其分解成其用户的复合用户设备身份，设备贡献更适合于Google Wallet等服务的移动上下文身份验证。 我们将这种复合身份以人用户生物识别和设备硅生物特征的组成为基础，该硅生物识别识别为用户磁盘（UD-）物理不封函数（PUF）。 此UD-PUF源自移动设备的触摸屏。 挑战是人类用户跟踪的屏幕上的形状。 在结果触摸事件中产生的压力值反映了基础晶体管阵列的设备级别可变性。 这些压力序列可以被量化为适当的响应。 我们将这种复合PUF表征为其可变性和可重复性。 我们说明了使用创新的统计集中器（同一设备，相同用户，相同的挑战）方案的可重复性错误的0位，该方案使用创新的统计集中器，扮演传统PUF中ECC（错误校正代码）的作用。 对于（同一设备，相同用户，不同的挑战）（相同的设备，不同的用户，相同的挑战）（不同的设备，相同的用户，相同的挑战），我们受益于响应的巨大可变性。 当预期可变性时，我们在长度128位的复合UD-PUF响应中显示了60多个位均值距离。 我们还证明了这些PUF通过将其通过蒙特利尔Testu01测试套件来充当生物识别硬件伪数量生成器（PRG）的希望。 我们最好的PUF通过了所有测试，除了偶尔失败3。此PUF是在运行Android的Nexus 7设备上实现的。",
        "title_zh": "表征用于移动设备认证的复合用户设备触摸屏物理不可克隆功能(puf)",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/trusted2015.html",
        "conf_title": "5th TrustED@CCS 2015: Denver, Colorado, USA",
        "conf_url": "https://doi.org/10.1145/2808414",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2808117.2808126",
        "title": "Android Rooting: Methods, Detection, and Evasion",
        "authors": "San-Tsai Sun, Andrea Cuadros, Konstantin Beznosov",
        "abstract": "Android rooting enables device owners to freely customize their own devices and run useful apps that require root privileges. While useful, rooting weakens the security of Android devices and opens the door for malware to obtain privileged access easily. Thus, several rooting prevention mechanisms have been introduced by vendors, and sensitive or high-value mobile apps perform rooting detection to mitigate potential security exposures on rooted devices. However, there is a lack of understanding whether existing rooting prevention and detection methods are effective. To fill this knowledge gap, we studied existing Android rooting methods and performed manual and dynamic analysis on 182 selected apps, in order to identify current rooting detection methods and evaluate their effectiveness. Our results suggest that these methods are ineffective. We conclude that reliable methods for detecting rooting must come from integrity-protected kernels or trusted execution environments, which are difficult to bypass.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android生根使设备所有者能够自由自定义自己的设备并运行需要根特权的有用应用程序。 虽然有用，但扎根会削弱Android设备的安全性，并为恶意软件打开了门以轻松获得特权访问。 因此，供应商已经引入了几种生根预防机制，敏感或高价值移动应用程序执行生根检测以减轻根系设备上的潜在安全性暴露。 但是，缺乏了解现有的预防生根和检测方法是否有效。 为了填补这一知识差距，我们研究了现有的Android生根方法，并对182个选定的应用程序进行了手动和动态分析，以识别当前的生根检测方法并评估其有效性。 我们的结果表明这些方法无效。 我们得出的结论是，用于检测生根的可靠方法必须来自以完整性保护的内核或受信任的执行环境，这很难绕过。",
        "title_zh": "Android生根:方法、检测和规避",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/spsm2015.html",
        "conf_title": "5th SPSM@CCS 2015: Denver, Colorado, USA",
        "conf_url": "https://doi.org/10.1145/2808117",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2808117.2808120",
        "title": "PrivacyGuard: A VPN-based Platform to Detect Information Leakage on Android Devices",
        "authors": "Yihang Song, Urs Hengartner",
        "abstract": "More and more people rely on mobile devices to access the Internet, which also increases the amount of private information that can be gathered from people's devices. Although today's smartphone operating systems are trying to provide a secure environment, they fail to provide users with adequate control over and visibility into how third-party applications use their private data. Whereas there are a few tools that alert users when applications leak private information, these tools are often hard to use by the average user or have other problems. To address these problems, we present PrivacyGuard, an open-source VPN-based platform for intercepting the network traffic of applications. PrivacyGuard requires neither root permissions nor any knowledge about VPN technology from its users. PrivacyGuard does not significantly increase the trusted computing base since PrivacyGuard runs in its entirety on the local device and traffic is not routed through a remote VPN server. We implement PrivacyGuard on the Android platform by taking advantage of the VPNService class provided by the Android SDK. PrivacyGuard is configurable, extensible, and useful for many different purposes. We investigate its use for detecting the leakage of multiple types of sensitive data, such as a phone's IMEI number or location data. PrivacyGuard also supports modifying the leaked information and replacing it with crafted data for privacy protection. According to our experiments, PrivacyGuard can detect more leakage incidents by applications and advertisement libraries than TaintDroid. We also demonstrate that PrivacyGuard has reasonable overhead on network performance and almost no overhead on battery consumption.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "越来越多的人依靠移动设备访问互联网，这也增加了可以从人们的设备中收集的私人信息的数量。 尽管当今的智能手机操作系统试图提供一个安全的环境，但它们无法为用户提供对第三方应用程序如何使用其私人数据的充分控制和可见性。 尽管有一些工具在应用程序泄漏私人信息时提醒用户，但这些工具通常很难由普通用户或其他问题使用。 为了解决这些问题，我们提出了PrivacyGuard，这是一个基于开源VPN的平台，用于拦截应用程序的网络流量。 PrivacyGuard不需要根本权限，也不需要对用户的VPN技术知识。 私密守护人不会显着增加受信任的计算基础，因为PrivacyGuard在本地设备上的整体运行，并且流量未通过远程VPN服务器路由。 我们通过利用Android SDK提供的VPNService类，在Android平台上实现PrivacyGuard。 PrivacyGuard可配置，可扩展且可用于许多不同的目的。 我们研究了其用于检测多种敏感数据的泄漏的用途，例如电话的IMEI号码或位置数据。 PrivacyGuard还支持修改泄漏的信息，并用精心设计的数据替换它以保护隐私。 根据我们的实验，隐私守护人可以通过应用程序和广告库来检测到更多的泄漏事件，而不是塔特德病。 我们还证明，隐私护理在网络性能方面具有合理的开销，几乎没有电池消耗的开销。",
        "title_zh": "PrivacyGuard:一个基于VPN的平台，用于检测Android设备上的信息泄漏",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/spsm2015.html",
        "conf_title": "5th SPSM@CCS 2015: Denver, Colorado, USA",
        "conf_url": "https://doi.org/10.1145/2808117",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2808117.2808122",
        "title": "NJAS: Sandboxing Unmodified Applications in non-rooted Devices Running stock Android",
        "authors": "Antonio Bianchi, Yanick Fratantonio, Christopher Kruegel, Giovanni Vigna",
        "abstract": "Malware poses a serious threat to the Android ecosystem. Moreover, even benign applications can sometimes constitute security and privacy risks to their users, as they might contain vulnerabilities, or they might perform unwanted actions. Previous research has shown that the current Android security model is not sufficient to protect against these threats, and several solutions have been proposed to enable the specification and enforcing of finer-grained security policies. Unfortunately, many existing solutions suffer from several limitations: they require modifications to the Android framework, root access to the device, to create a modified version of an existing app that cannot be installed without enabling unsafe options, or they cannot completely sandbox native code components. In this work, we propose a novel approach that aims to sandbox arbitrary Android applications. Our solution, called NJAS, works by executing an Android application within the context of another one, and it achieves sandboxing by means of system call interposition. In this paper, we show that our solution overcomes major limitations that affect existing solutions. In fact, it does not require any modification to the framework, does not require root access to the device, and does not require the user to enable unsafe options. Moreover, the core sandboxing mechanism cannot be evaded by using native code components.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "恶意软件对Android生态系统构成了严重威胁。 此外，即使是良性应用程序，有时也可能构成其用户的安全和隐私风险，因为它们可能包含漏洞，或者他们可能执行不必要的操作。 先前的研究表明，当前的Android安全模型不足以防止这些威胁，并且已经提出了一些解决方案来实现更精细的安全策略的规范和执行。 不幸的是，许多现有解决方案都有几个局限性：它们需要对Android框架进行修改，即对设备的root访问，以创建一个现有应用的修改版本，而无需启用不安全的选项就无法安装，否则它们无法完全沙盒本机代码组件 。 在这项工作中，我们提出了一种新的方法，旨在用于沙盒任意的Android应用。 我们的解决方案称为NJAS，通过在另一个上下文的上下文中执行Android应用程序，并通过系统呼叫插入来实现沙箱。 在本文中，我们表明我们的解决方案克服了影响现有解决方案的主要限制。 实际上，它不需要对框架进行任何修改，不需要对设备的根访问，也不需要用户启用不安全的选项。 此外，不能通过使用本机代码组件来避免核心沙箱机制。",
        "title_zh": "NJAS:在运行安卓系统的非根设备上运行未经修改的应用程序",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/spsm2015.html",
        "conf_title": "5th SPSM@CCS 2015: Denver, Colorado, USA",
        "conf_url": "https://doi.org/10.1145/2808117",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2808117.2808125",
        "title": "AutoPPG: Towards Automatic Generation of Privacy Policy for Android Applications",
        "authors": "Le Yu, Tao Zhang, Xiapu Luo, Lei Xue",
        "abstract": "A privacy policy is a statement informing users how their information will be collected, used, and disclosed. Failing to provide a correct privacy policy may result in a fine. However, writing privacy policy is tedious and error-prone, because the author may not well understand the source code, which could be written by others (e.g., outsourcing), or does not know the internals of third-party libraries without source codes. In this paper, we propose and develop a novel system named AutoPPG to automatically construct correct and readable descriptions to facilitate the generation of privacy policy for Android applications (i.e., apps). Given an app, AutoPPG first conducts various static code analyses to characterize its behaviors related to users' private information and then applies natural language processing techniques to generating correct and accessible sentences for describing these behaviors. The experimental results using real apps and crowdsourcing indicate that: (1) AutoPPG creates correct and easy-to-understand descriptions for privacy policies; and (2) the privacy policies constructed by AutoPPG usually reveal more operations related to users' private information than existing privacy policies.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "隐私政策是一份声明，告知用户如何收集，使用和披露其信息。 未能提供正确的隐私政策可能会导致罚款。 但是，编写隐私策略非常乏味且容易出错，因为作者可能不太了解源代码，这些源代码可以由他人（例如外包）编写，或者不知道没有源代码的第三方库的内部。 在本文中，我们提出并开发了一个名为AUTOPPG的新型系统，以自动构建正确且可读性的描述，以促进为Android应用程序（即应用程序）生成隐私政策。 给定一个应用程序，AUTOPPG首先进行了各种静态代码分析，以表征其与用户私人信息相关的行为，然后应用自然语言处理技术来生成正确且可访问的句子以描述这些行为。 使用真实应用程序和众包的实验结果表明：（1）自动驾驶为隐私政策创建正确且易于理解的描述； （2）AUTOPPG构建的隐私政策通常揭示与用户私人信息相关的操作，而不是现有的隐私政策。",
        "title_zh": "AutoPPG:面向Android应用的隐私策略自动生成",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/spsm2015.html",
        "conf_title": "5th SPSM@CCS 2015: Denver, Colorado, USA",
        "conf_url": "https://doi.org/10.1145/2808117",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2808117.2808124",
        "title": "Supporting Privacy-Conscious App Update Decisions with User Reviews",
        "authors": "Yuan Tian, Bin Liu, Weisi Dai, Blase Ur, Patrick Tague, Lorrie Faith Cranor",
        "abstract": "Smartphone app updates are critical to user security and privacy. New versions may fix important security bugs, which is why users should usually update their apps. However, occasionally apps turn malicious or radically change features in a way users dislike. Users should not necessarily always update in those circumstances, but current update processes are largely automatic. Therefore, it is important to understand user behaviors around updating apps and help them to make security-conscious choices. We conducted two related studies in this area. First, to understand users' current update decisions, we conducted an online survey of user attitudes toward updates. Based on the survey results, we then designed a notification scheme integrating user reviews, which we tested in a field study. Participants installed an Android app that simulated update notifications, enabling us to collect users' update decisions and reactions. We compared the effectiveness of our review-based update notifications with the permission-based notifications. Compared to notifications with permission descriptions only, we found our review-based update notification was more effective at alerting users of invasive or malicious app updates, especially for less trustworthy apps.",
        "files": {
            "openAccessPdf": "http://dl.acm.org/ft_gateway.cfm?id=2808124&type=pdf"
        },
        "abstract_zh": "智能手机应用程序更新对用户安全和隐私至关重要。 新版本可能会修复重要的安全错误，这就是为什么用户通常应该更新其应用程序的原因。 但是，有时应用程序会以某种方式变化或根本变化的功能。 在这种情况下，用户不一定总是更新，但是当前的更新过程很大程度上是自动的。 因此，重要的是要了解更新应用程序的用户行为并帮助他们做出安全意识的选择。 我们在该领域进行了两项相关研究。 首先，为了了解用户当前的更新决策，我们对用户对更新的态度进行了在线调查。 基于调查结果，我们设计了一个集成用户评论的通知方案，我们在现场研究中进行了测试。 参与者安装了一个模拟更新通知的Android应用程序，使我们能够收集用户的更新决策和反应。 我们将基于审查的更新通知的有效性与基于许可的通知进行了比较。 与仅具有权限说明的通知相比，我们发现基于审核的更新通知更有效地警告用户侵入性或恶意应用程序更新，尤其是对于不值得信赖的应用程序。",
        "title_zh": "通过用户评论支持注重隐私的应用更新决策",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/spsm2015.html",
        "conf_title": "5th SPSM@CCS 2015: Denver, Colorado, USA",
        "conf_url": "https://doi.org/10.1145/2808117",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2808117.2808123",
        "title": "Understanding the Service Life Cycle of Android Apps: An Exploratory Study",
        "authors": "Kobra Khanmohammadi, Mohammad Reza Rejali, Abdelwahab Hamou-Lhadj",
        "abstract": "The fast growing use of the Android platform has been accompanied with an increase of malwares in Android applications. A popular way in distributing malwares in the mobile world is through repackaging legitimate apps, embedding malicious code in them, and publishing them in app stores. Therefore, examining the similarity between the behavior of malicious and normal apps can help detect malwares due to repacking. Malicious apps operate by keeping their operations invisible to the user. They also run long enough to perform their malicious tasks. One way to detect malicious apps is to examine their service life cycle. In this paper, we examine the service life cycle of apps. We extract various features of app services. We use these features to classify over 250 normal and malicious apps. Our findings show that malicious apps tend to use services to do their malicious operation and have no communication with the other components of the app, whereas the services in normal apps are usually bound to other components and send messages to notify users about the operations they perform. The results of this exploratory study can be used in the future to design techniques for detecting malicious apps using the classification of their service features.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android平台的快速增长伴随着Android应用中的Malwares的增加。 在移动世界中分发Malwares的一种流行方式是重新包装合法应用程序，将恶意代码嵌入其中，并将其发布到App Store中。 因此，检查恶意和正常应用程序的行为之间的相似性可以帮助检测由于重新包装而导致的恶性肿瘤。 恶意应用程序通过使用户不可见操作来运行。 他们的运行时间足够长，可以执行恶意任务。 检测恶意应用程序的一种方法是检查其使用寿命周期。 在本文中，我们检查了应用程序的使用寿命周期。 我们提取应用服务的各种功能。 我们使用这些功能对超过250个普通和恶意应用程序进行分类。 我们的发现表明，恶意应用程序倾向于使用服务来执行恶意操作，并且与该应用程序的其他组件没有通信，而普通应用程序中的服务通常绑定到其他组件并发送消息以通知用户有关他们执行操作的操作 。 这项探索性研究的结果将来可以用于设计用于使用其服务功能分类来检测恶意应用程序的技术。",
        "title_zh": "了解Android应用的服务生命周期:一项探索性研究",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/spsm2015.html",
        "conf_title": "5th SPSM@CCS 2015: Denver, Colorado, USA",
        "conf_url": "https://doi.org/10.1145/2808117",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2808117.2808118",
        "title": "Security Metrics for the Android Ecosystem",
        "authors": "Daniel R. Thomas, Alastair R. Beresford, Andrew C. Rice",
        "abstract": "The security of Android depends on the timely delivery of updates to fix critical vulnerabilities. In this paper we map the complex network of players in the Android ecosystem who must collaborate to provide updates, and determine that inaction by some manufacturers and network operators means many handsets are vulnerable to critical vulnerabilities. We define the FUM security metric to rank the performance of device manufacturers and network operators, based on their provision of updates and exposure to critical vulnerabilities. Using a corpus of 20 400 devices we show that there is significant variability in the timely delivery of security updates across different device manufacturers and network operators. This provides a comparison point for purchasers and regulators to determine which device manufacturers and network operators provide security updates and which do not. We find that on average 87.7% of Android devices are exposed to at least one of 11 known critical vulnerabilities and, across the ecosystem as a whole, assign a FUM security score of 2.87 out of 10. In our data, Nexus devices do considerably better than average with a score of 5.17; and LG is the best manufacturer with a score of 3.97.",
        "files": {
            "openAccessPdf": "https://strathprints.strath.ac.uk/69644/1/Thomas_etal_SPSM2015_Security_metrics_Android_ecosystem.pdf"
        },
        "abstract_zh": "Android的安全性取决于及时提供更新以修复关键漏洞。 在本文中，我们绘制了必须协作以提供更新的Android生态系统中复杂的玩家网络，并确定某些制造商和网络运营商的无所作为意味着许多手机容易受到关键漏洞的影响。 我们根据提供更新和暴露于关键漏洞的情况，定义FUM安全度量标准，以对设备制造商和网络运营商的性能进行排名。 使用20 400个设备的语料库，我们表明，在不同设备制造商和网络运营商之间的安全更新及时交付时，存在显着差异。 这为购买者和监管机构提供了一个比较点，以确定哪些设备制造商和网络运营商提供安全更新，哪些不提供安全更新。 我们发现，平均有87.7％的Android设备暴露于11个已知的关键漏洞中的至少一个，并且在整个生态系统中，分配了2.87的FUM Security Corce。 比平均得分为5.17； LG是最佳制造商，得分为3.97。",
        "title_zh": "Android生态系统的安全指标",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ccs/spsm2015.html",
        "conf_title": "5th SPSM@CCS 2015: Denver, Colorado, USA",
        "conf_url": "https://doi.org/10.1145/2808117",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3381991.3395608",
        "title": "Parallel Space Traveling: A Security Analysis of App-Level Virtualization in Android",
        "authors": "Deshun Dai, Ruixuan Li, Junwei Tang, Ali Davanian, Heng Yin",
        "abstract": "App-level virtualization becomes increasingly popular. It allows multiple instances of an application to run simultaneously on the same Android system, without requiring modification of the Android firmware. These virtualization-capable apps are used by more than 100 million users worldwide. We conduct a systematic study of the implementation of app-level virtualization and the security threats that their users may face. First, we survey more than 160 apps collected from several popular app markets which can provide application virtualization capability. We find that these apps are implemented based on a similar design, and apps running in such a virtual environment are not completely isolated from each other. Second, we analyze malicious virtualized guest apps, and identify several areas of potential attack vectors, including privilege escalation, code injection, ransomware, etc. Malicious virtualized guest apps can launch reference hijacking attacks. Once a legitimate app is running in the virtual context, all of its sensitive data will be exposed to the host app. Third, we find a new type of repackaging attack. In our collection of 2 million app data set, we find that 68 apps pack and load malwares by using the virtualization technology to evade antivirus detection, 91 apps pack some legal apps for the purpose of wide distribution, and insert screen ads to gain profits at its startup. Finally, we discuss a variety of mitigation solutions for users, developers and vendors.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "应用级虚拟化变得越来越流行。它允许一个应用程序的多个实例在同一个Android系统上同时运行，而不需要修改Android固件。这些支持虚拟化的应用程序被全球超过1亿用户使用。我们对应用级虚拟化的实施及其用户可能面临的安全威胁进行了系统研究。首先，我们调查了从几个热门应用程序市场收集的160多个应用程序，这些应用程序可以提供应用程序虚拟化功能。我们发现这些应用程序是基于类似的设计实现的，并且在这样的虚拟环境中运行的应用程序彼此之间并不完全隔离。其次，我们分析恶意虚拟化访客应用程序，并确定潜在攻击媒介的几个方面，包括权限提升、代码注入、勒索软件等。恶意虚拟化来宾应用程序可以发起引用劫持攻击。一旦合法应用在虚拟环境中运行，其所有敏感数据将暴露给主机应用。第三，我们发现一种新型的重新打包攻击。在我们收集的200万个应用程序数据集中，我们发现68个应用程序通过使用虚拟化技术来包装和加载恶意软件以逃避防病毒检测，91个应用程序包装一些合法应用程序以进行广泛分发，并在启动时插入屏幕广告以获取利润。最后，我们讨论了针对用户、开发人员和供应商的各种缓解解决方案。",
        "title_zh": "平行空间旅行:Android应用级虚拟化的安全性分析",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sacmat/sacmat2020.html",
        "conf_title": "SACMAT 2020: Barcelona, Spain",
        "conf_url": "https://doi.org/10.1145/3381991",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3381991.3395612",
        "title": "Security and Privacy Analysis of Android Family Locator Apps",
        "authors": "Khalid Alkhattabi, Ahmed Alshehri, Chuan Yue",
        "abstract": "Families are increasingly using Family Locator (FL) apps for convenience and safety purposes. Such FL apps often collect a lot of sensitive information, such as user location and contacts, to improve their usability and functionality. However, it is not clear if they provide strong protections to the collected sensitive information or not. This paper presents the findings on the first security and privacy analysis of FL apps. We select 41 FL apps from the Google Play store. We first analyze the permissions requested by the FL apps to understand the types of sensitive information they would collect. Then, we analyze the network traffic and local storage of these apps to identify potentially sensitive information leakage. Our analysis demonstrates that significant security and privacy vulnerabilities exist among FL apps. Specifically, 80.4% of the 41 FL apps leak sensitive information or join codes in plaintext. A join code would allow an attacker to join a family's group to perform a wide range of malicious activities. Meanwhile, we found that 15.1% of the 33 apps leak sensitive information from their back-end servers due to authentication and authorization vulnerabilities. We provide suggestions to users and developers of FL apps to improve security and privacy. We responsibly disclosed our findings to the developers of the 33 vulnerable apps. Nine of the developers confirmed our findings and showed interest in addressing them in their next updates. The feedback from our responsible disclosures shows that our analysis makes an impact on the security and privacy of FL apps.",
        "files": {
            "openAccessPdf": "https://dl.acm.org/doi/pdf/10.1145/3381991.3395612"
        },
        "abstract_zh": "出于方便和安全的目的，越来越多的家庭使用家庭定位器(FL)应用程序。此类FL应用通常会收集大量敏感信息，如用户位置和联系人，以提高其可用性和功能性。然而，不清楚它们是否为收集的敏感信息提供了强有力的保护。本文介绍了FL应用程序的首次安全和隐私分析的结果。我们从Google Play商店中选择了41个FL应用程序。我们首先分析FL应用程序请求的权限，以了解它们将收集的敏感信息的类型。然后，我们分析这些应用的网络流量和本地存储，以识别潜在的敏感信息泄漏。我们的分析表明，FL应用程序中存在严重的安全和隐私漏洞。具体来看，41款FL apps中有80.4%泄露敏感信息或明文加入代码。加入代码将允许攻击者加入一个家庭的组来执行各种各样的恶意活动。与此同时，我们发现33个应用程序中有15.1%由于身份验证和授权漏洞而从后端服务器泄露敏感信息。我们向FL应用程序的用户和开发者提供建议，以提高安全性和隐私性。我们负责任地向33个易受攻击应用的开发者披露了我们的发现。九个开发者证实了我们的发现，并表示有兴趣在他们的下一次更新中解决这些问题。来自我们负责任的披露的反馈表明，我们的分析对FL应用的安全性和隐私性产生了影响。",
        "title_zh": "Android家庭定位器应用的安全性和隐私性分析",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sacmat/sacmat2020.html",
        "conf_title": "SACMAT 2020: Barcelona, Spain",
        "conf_url": "https://doi.org/10.1145/3381991",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3381991.3395603",
        "title": "Accept - Maybe - Decline: Introducing Partial Consent for the Permission-based Access Control Model of Android",
        "authors": "Nurul Momen, Sven Bock, Lothar Fritsch",
        "abstract": "The consent to personal data sharing is an integral part of modern access control models on smart devices. This paper examines the possibility of registering conditional consent which could potentially increase trust in data sharing. We introduce an indecisive state of consenting to policies that will enable consumers to evaluate data services before fully committing to their data sharing policies. We address technical, regulatory, social, individual and economic perspectives for inclusion of partial consent within an access control mechanism. Then, we look into the possibilities to integrate it within the access control model of Android by introducing an additional button in the interface--Maybe. This article also presents a design for such implementation and demonstrates feasibility by showcasing a prototype built on Android platform. Our effort is exploratory and aims to shed light on the probable research direction.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "同意个人数据共享是智能设备上现代访问控制模型不可或缺的一部分。本文研究了注册有条件同意的可能性，这可能会增加对数据共享的信任。我们引入了一种优柔寡断的状态，即是否同意让消费者在完全承诺他们的数据共享政策之前评估数据服务的政策。我们从技术、法规、社会、个人和经济的角度探讨了将部分同意纳入访问控制机制的问题。然后，我们通过在界面中引入一个额外的按钮来研究将它集成到Android的访问控制模型中的可能性。本文还介绍了这种实现的设计，并通过展示一个构建在Android平台上的原型来证明其可行性。我们的努力是探索性的，旨在阐明可能的研究方向。",
        "title_zh": "接受-也许-拒绝:为Android基于权限的访问控制模型引入部分同意",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sacmat/sacmat2020.html",
        "conf_title": "SACMAT 2020: Barcelona, Spain",
        "conf_url": "https://doi.org/10.1145/3381991",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3381991.3395396",
        "title": "Analysis of Access Control Enforcement in Android",
        "authors": "William Enck",
        "abstract": "Over the past decade, the Android operating system install-base has proliferated to billions of devices, rivaling Microsoft Windows as a top computing platform. One of the most attractive aspects of Android is its vast collection of applications, available from application stores such as Google's Play Store. Developers have been drawn to Android due to its semantically-rich runtime APIs, which simplify the creation of third-party applications. Many of these APIs provide access to security- and privacy-sensitive information and resources such as the device's geographic location, audio recorded from the device's microphone, and the ability to send and receive SMS messages. In providing these APIs to third-party applications, the Android OS has implicitly taken responsibility for their protection, increasing its access control burden. As a result, current versions of Android have thousands of manually placed access control checks throughout the platform. The goal of this talk is to motivate the need for and utility of semi-automated tools to analyze and validate the access control checks that occur within Android's system code. The challenges are two-fold. First, analysis of Android's middleware code is more challenging than that of third-party applications, which has been studied in-depth over the past decade [3-5]. The code spans hundreds of system services, which are implemented in a combination of Java, C++, and C. The system services also have heavy inter-dependencies with one another, frequently invoking entry points in each other using Android's Binder inter-process communication (IPC) framework within the Linux kernel. Second, identifying what is an access control check is nontrivial. While there are well-known checks based on user-authorized permissions and Linux-layer user and group identifiers, system services also use an array of different service-specific checks that must be captured and modeled to assess the correctness of access control enforcement. In this talk, we will discuss these challenges in the context of two case studies. We will begin by discussing ACMiner [6], a tool designed to assess the correctness of access control checks in Android's middleware using consistency analysis. For each Binder entry point in each system service, ACMiner statically analyzes the code to identify all potential access control checks. To do so, ACMiner uses the names of methods and variables and the values of constant strings used in conditional statements to infer the security-semantics of each check on the control-flow path to instructions that throw a SecurityException. ACMiner then uses association rule mining to identify not only which entry points have inconsistent access control checks, but also to suggest what checks should be added. In applying ACMiner to the Android Open Source Project (AOSP), we found the suggestions to be invaluable when determining whether or not an inconsistency was a vulnerability. Next, we discuss the Android Re-Delegation Finder (ARF) [7]. When designing ACMiner, we optimized our static program analysis by terminating the control-flow analysis of an entry point when the execution reaches another entry point in the same or different system service. Upon further study, we found that entry points frequently call one another, often changing the protection domain of execution when they do (e.g., by explicitly clearing the calling identity, or calling the entry point of a system service executing in a different process). As with most modern operating systems, Android uses deputies (i.e., system services) to safely perform privileged functionality on behalf of third-party applications. Deputies are inherently necessary for the protection of system resources. However, by losing the calling identity, entry points to Android's system services can become confused deputies. ARF builds on the access control policy extracted by ACMiner to identify potential confused deputy vulnerabilities. Neither ACMiner or ARF were designed to eliminate all false positives. In a code-base as vast as Android, it is unrealistic to expect every nuance can be captured programmatically. Instead, ACMiner and ARF were designed to be semi-automated. Our goal is to drastically reduce the amount of time it takes for a security analyst with domain expertise to identify and fix vulnerabilities. Over the course of our research, we have applied our tools to AOSP versions~7, 8, and 9, discovering many vulnerabilities, seven of which have been assigned CVEs by Google. Moving forward, we hope that our tools can be used not only to identify new vulnerabilities, but also to aid regression testing as new versions of Android are released. Both tools have been made open-source and are hosted on Github [1,2].",
        "files": {
            "openAccessPdf": "https://dl.acm.org/doi/pdf/10.1145/3381991.3395396"
        },
        "abstract_zh": "在过去的十年里，Android操作系统的安装基础已经激增到数十亿台设备，作为顶级计算平台与微软Windows相抗衡。Android最吸引人的一个方面是其庞大的应用程序集合，可从应用程序商店(如谷歌的Play Store)获得。由于Android语义丰富的运行时API，简化了第三方应用程序的创建，开发人员已经被它所吸引。其中许多API提供对安全和隐私敏感信息和资源的访问，如设备的地理位置、从设备麦克风录制的音频以及发送和接收SMS消息的能力。在向第三方应用程序提供这些API时，Android操作系统隐含地承担了保护它们的责任，增加了其访问控制负担。因此，当前版本的Android在整个平台上有数以千计的手动访问控制检查。本次演讲的目标是激发半自动工具的需求和效用，以分析和验证Android系统代码中发生的访问控制检查。挑战是双重的。首先，分析Android的中间件代码比分析第三方应用程序更具挑战性，第三方应用程序在过去十年中已经得到了深入研究[3-5]。代码跨越了数百个系统服务，这些服务是用Java、C++和C的组合实现的。系统服务之间也有很强的相互依赖性，经常使用Android的Binder进程间通信(IPC)框架在Linux内核中调用彼此的入口点。第二，识别什么是访问控制检查是很重要的。虽然存在基于用户授权许可和Linux层用户和组标识符的众所周知的检查，但是系统服务还使用一系列不同的特定于服务的检查，必须对这些检查进行捕获和建模，以评估访问控制实施的正确性。在本次讲座中，我们将通过两个案例研究来讨论这些挑战。我们将从讨论ACMiner [6]开始，这是一个使用一致性分析评估Android中间件中访问控制检查正确性的工具。对于每个系统服务中的每个绑定器入口点，ACMiner静态地分析代码，以识别所有潜在的访问控制检查。为此，ACMiner使用方法和变量的名称以及条件语句中使用的常量字符串的值来推断抛出SecurityException的指令的控制流路径上每个检查的安全语义。然后，ACMiner使用关联规则挖掘不仅识别哪些入口点具有不一致的访问控制检查，还建议应该添加哪些检查。在将ACMiner应用于Android开源项目(AOSP)的过程中，我们发现在确定不一致性是否是一个漏洞时，这些建议是非常宝贵的。接下来，我们讨论Android再授权查找器(ARF) [7]。在设计ACMiner时，我们通过在执行到达相同或不同系统服务中的另一个入口点时终止入口点的控制流分析来优化我们的静态程序分析。通过进一步研究，我们发现入口点频繁地相互调用，当它们这样做时，经常改变执行的保护域(例如，通过显式地清除调用标识，或者调用在不同进程中执行的系统服务的入口点)。与大多数现代操作系统一样，Android使用代理(即系统服务)来代表第三方应用程序安全地执行特权功能。副手是保护系统资源的内在需要。然而，由于失去了呼叫身份，Android系统服务的入口点可能会成为困惑的代理。ARF建立在ACMiner提取的访问控制策略的基础上，以识别潜在的混淆代理漏洞。ACMiner和ARF都不是为消除所有假阳性而设计的。在像Android这样庞大的代码库中，期望通过编程来捕捉每一个细微差别是不现实的。相反，ACMiner和ARF被设计成半自动的。我们的目标是大幅减少具有领域专业知识的安全分析师识别和修复漏洞所需的时间。在我们的研究过程中，我们已经将我们的工具应用于AOSP版本7、8和9，发现了许多漏洞，其中七个被Google指定为CVE。展望未来，我们希望我们的工具不仅可以用于识别新的漏洞，还可以在新版本Android发布时帮助回归测试。这两个工具都是开源的，托管在Github上[1，2]。",
        "title_zh": "Android中的访问控制实施分析",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sacmat/sacmat2020.html",
        "conf_title": "SACMAT 2020: Barcelona, Spain",
        "conf_url": "https://doi.org/10.1145/3381991",
        "keywords": [
            "AOSP",
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3322431.3326449",
        "title": "Verifying OAuth Implementations Through Encrypted Network Analysis",
        "authors": "Josh Talkington, Ram Dantu, Kirill Morozov",
        "abstract": "Verifying protocol implementations via application analysis can be cumbersome. Rapid development cycles of both the protocol and applications that use it can hinder up-to-date analysis. A better approach is to use formal models to characterize the applications platform and then verify the protocol through analysis of the network traffic tied to the models. To test this method, the popular protocol OAuth is considered. Currently, formal models of OAuth do not take into consideration the mobile environment, and implementation verification is largely based on code analysis. Our preliminary results are two fold; we sketch an extension to a formal model that incorporates the specifics of the Android platform and classify OAuth device types using machine learning on encrypted VPN traffic.",
        "files": {
            "openAccessPdf": "https://dl.acm.org/doi/pdf/10.1145/3322431.3326449"
        },
        "abstract_zh": "通过应用程序分析来验证协议实现可能很麻烦。协议和应用程序的快速开发周期会阻碍最新的分析。更好的方法是使用正式模型来描述应用程序平台，然后通过分析与模型相关的网络流量来验证协议。为了测试这种方法，考虑流行的协议OAuth。目前，OAuth的形式化模型没有考虑移动环境，实现验证主要基于代码分析。我们的初步结果有两个方面:我们草拟了一个正式模型的扩展，它包含了Android平台的细节，并使用加密VPN流量的机器学习对OAuth设备类型进行分类。",
        "title_zh": "通过加密网络分析验证OAuth实现",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sacmat/sacmat2019.html",
        "conf_title": "SACMAT 2019: Toronto, ON, Canada",
        "conf_url": "https://dl.acm.org/citation.cfm?id=3322431",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3078861.3078872",
        "title": "On Risk in Access Control Enforcement",
        "authors": "Giuseppe Petracca, Frank Capobianco, Christian Skalka, Trent Jaeger",
        "abstract": "While we have long had principles describing how access control enforcement should be implemented, such as the reference monitor concept, imprecision in access control mechanisms and access control policies leads to risks that may enable exploitation. In practice, least privilege access control policies often allow information flows that may enable exploits. In addition, the implementation of access control mechanisms often tries to balance security with ease of use implicitly (e.g., with respect to determining where to place authorization hooks) and approaches to tighten access control, such as accounting for program context, are ad hoc. In this paper, we define four types of risks in access control enforcement and explore possible approaches and challenges in tracking those types of risks. In principle, we advocate runtime tracking to produce risk estimates for each of these types of risk. To better understand the potential of risk estimation for authorization, we propose risk estimate functions for each of the four types of risk, finding that benign program deployments accumulate risks in each of the four areas for ten Android programs examined. As a result, we find that tracking of relative risk may be useful for guiding changes to security choices, such as authorized unsafe operations or placement of authorization checks, when risk differs from that expected.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "虽然我们早就有了描述应该如何实施访问控制实施的原则，例如引用监视器概念，但访问控制机制和访问控制策略的不精确性会导致可能被利用的风险。实际上，最低特权访问控制策略通常允许可能导致漏洞的信息流。此外，访问控制机制的实现通常试图隐式地平衡安全性与易用性(例如，关于确定在何处放置授权挂钩)，并且诸如考虑程序上下文之类的加强访问控制的方法是特别的。在本文中，我们定义了访问控制实施中的四种风险类型，并探讨了跟踪这些风险类型的可能方法和挑战。原则上，我们提倡运行时跟踪来为每种类型的风险产生风险估计。为了更好地理解授权风险评估的潜力，我们为四种风险类型中的每一种提出了风险评估函数，发现良性的程序部署会在所研究的十个Android程序的四个领域中的每一个领域中累积风险。因此，我们发现，当风险与预期不同时，跟踪相对风险可能有助于指导安全选择的变化，例如授权的不安全操作或授权检查的放置。",
        "title_zh": "论访问控制实施中的风险",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sacmat/sacmat2017.html",
        "conf_title": "SACMAT 2017: Indianapolis, IN, USA",
        "conf_url": "https://doi.org/10.1145/3078861",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3078861.3084161",
        "title": "Poster: A Location-Privacy Approach for Continuous Queries",
        "authors": "Douglas Steiert, Dan Lin, Quincy Conduff, Wei Jiang",
        "abstract": "With the prevalence of smartphones, mobile apps have become more and more popular. However, many mobile apps request location information of the user. If there is nothing in place for location privacy, these mobile app users are in great risk of being tracked by malicious parties. Although the location privacy problem has been studied extensively by resorting to a third-party location anonymizer, there is very little work that allows the users to fully control the disclosure of their data using their smartphones alone. In this paper, we propose a novel Android App called MoveWithMe which automatically generates mocking locations. Most importantly, these mocking locations are not random like those generated by original Android location mocking function. The proposed MoveWithMe app generates k traces of mocking locations and ensures that each trace looks like a trace of a real human and each trace is semantically different from the real user's trace.",
        "files": {
            "openAccessPdf": "http://dl.acm.org/ft_gateway.cfm?id=3084161&type=pdf"
        },
        "abstract_zh": "随着智能手机的普及，手机应用变得越来越流行。然而，许多移动应用程序需要用户的位置信息。如果位置隐私没有到位，这些移动应用程序用户将面临被恶意方跟踪的巨大风险。尽管已经通过求助于第三方位置匿名器对位置隐私问题进行了广泛的研究，但是很少有工作允许用户单独使用智能手机来完全控制其数据的公开。在本文中，我们提出了一个新颖的Android应用程序MoveWithMe，它可以自动生成嘲讽位置。最重要的是，这些嘲讽位置不像原始Android位置嘲讽功能生成的那些位置那样是随机的。提议的MoveWithMe应用程序生成k个模仿位置的轨迹，并确保每个轨迹看起来像真实人类的轨迹，并且每个轨迹在语义上不同于真实用户的轨迹。",
        "title_zh": "海报:连续查询的位置隐私方法",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sacmat/sacmat2017.html",
        "conf_title": "SACMAT 2017: Indianapolis, IN, USA",
        "conf_url": "https://doi.org/10.1145/3078861",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3078861.3084175",
        "title": "NTApps: A Network Traffic Analyzer of Android Applications",
        "authors": "Rodney Rodriguez, Shaikh Mostafa, Xiaoyin Wang",
        "abstract": "Application-level network-traffic classification is important for many security-related tasks in network management. With the knowledge of which application certain network traffic belongs to, the network managers are able to allow/block certain applications in the network (whitelisting/blacklisting), or to locate known malicious applications in the network. To support application level network-traffic classification, the network managers require a network-signature for each possible applications in the network, so that they can match these signatures with the network traffic at runtime to identify the ownership of the traffic. The traditional approaches to generating network-signatures for applications require either manual inspection of the application or accumulated annotated network traffic of the application. These approaches are not efficient enough nowadays, given the recent emergence of mobile application markets, where hundreds to thousands of mobile apps are added everyday. In this paper, we present a fully automatic tool called NTApps to generate network signatures for the mobile apps in android market. NTApps is based on string analysis, and generates network signatures by statically estimating the possible values of network API arguments.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "应用层网络流量分类对于网络管理中许多与安全相关的任务非常重要。知道了特定网络流量属于哪个应用，网络管理员就能够允许/阻止网络中的特定应用(白名单/黑名单)，或者定位网络中已知的恶意应用。为了支持应用级网络流量分类，网络管理员需要网络中每个可能的应用的网络签名，以便他们可以在运行时将这些签名与网络流量进行匹配，以识别流量的所有权。为应用程序生成网络签名的传统方法要么需要人工检查应用程序，要么需要累积应用程序的带注释的网络流量。考虑到最近出现的移动应用市场，这些方法现在还不够有效，每天都有成百上千的移动应用被添加进来。在本文中，我们提出了一个名为NTApps的全自动工具，用于为android市场中的移动应用程序生成网络签名。NTApps基于字符串分析，通过静态估计网络API参数的可能值来生成网络签名。",
        "title_zh": "NTA PPS:Android应用程序的网络流量分析器",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sacmat/sacmat2017.html",
        "conf_title": "SACMAT 2017: Indianapolis, IN, USA",
        "conf_url": "https://doi.org/10.1145/3078861",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2752952.2752974",
        "title": "SPA: Inviting Your Friends to Help Set Android Apps",
        "authors": "Zeqing Guo, Weili Han, Liangxing Liu, Wenyuan Xu, Ruiqi Bu, Minyue Ni",
        "abstract": "More and more powerful personal smart devices take users, especially the elder, into a disaster of policy administration where users are forced to set personal management policies in these devices. Considering a real case of this issue in the Android security, it is hard for users, even some programmers, to generally identify malicious permission requests when they install a third-party application. Motivated by the popularity of mutual assistance among friends (including family members) in the real world, we propose a novel framework for policy administration, referring to Socialized Policy Administration (SPA for short), to help users manage the policies in widely deployed personal devices. SPA leverages a basic idea that a user may invite his or her friends to help set the applications. Especially, when the size of invited friends increases, the setting result can be more resilient to a few malicious or unprofessional friends. We define the security properties of SPA, and propose an enforcement framework where users' friends can help users set applications without the leakage of friends' preferences with the supports of a privacy preserving mechanism. In our prototype, we only leverage partially homomorphic encryption cryptosystems to implement our framework, because the fully homomorphic encryption is not acceptable to be deployed in a practical service at the moment. Based on our prototype and performance evaluation, SPA is promising to support major types of policies in current popular applications with acceptable performance.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "越来越多功能强大的个人智能设备将用户(尤其是老年人)带入策略管理的灾难中，用户被迫在这些设备中设置个人管理策略。考虑到Android安全中这一问题的真实案例，当用户安装第三方应用程序时，即使是一些程序员也很难识别恶意的权限请求。受现实世界中朋友(包括家庭成员)之间互助流行的激励，我们提出了一种新的策略管理框架，称为社会化策略管理(简称SPA)，以帮助用户管理广泛部署的个人设备中的策略。SPA利用了一个基本思想，即用户可以邀请他或她的朋友来帮助设置应用程序。尤其是当被邀请好友的规模增大时，设置结果可以对少数恶意或者不专业的好友更有弹性。我们定义了SPA的安全属性，并提出了一个实施框架，用户的朋友可以在隐私保护机制的支持下帮助用户设置应用程序，而不会泄露朋友的偏好。在我们的原型中，我们仅利用部分同态加密密码系统来实现我们的框架，因为完全同态加密目前在实际服务中部署是不可接受的。基于我们的原型和性能评估，SPA有望以可接受的性能支持当前流行应用中的主要策略类型。",
        "title_zh": "SPA:邀请你的朋友帮助设置Android应用程序",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sacmat/sacmat2015.html",
        "conf_title": "SACMAT 2015: Vienna, Austria",
        "conf_url": "https://doi.org/10.1145/2752952",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2914642.2914645",
        "title": "An Application Restriction System for Bring-Your-Own-Device Scenarios",
        "authors": "Oyindamola Oluwatimi, Elisa Bertino",
        "abstract": "Different containerization techniques have been developed to ensure the separation of enterprise content and personal data on an end-user's device. Although the enterprise manages the environment in which work-related activities are conducted, referred to as a work persona, third-party applications installed on the mobile devices may make the enterprise content vulnerable to misuse or exfiltration. It is thus critical that enterprises be given the ability to restrict the capabilities of third-party applications that reside in the work persona. In mobile systems, applications typically request to use a list of capabilities on the device prior to being installed on the device, and alll capabilities must be granted in order for the applications to be installed. Our approach, that we refer to as DroidARM, focuses on post-installation application restriction policies. Such policies dynamically restrict the capabilities of mobile applications at run-time. An application restriction policy is configured through our Application Restriction Manager (ARM) Policy Manager that allows one to set different restrictions for each installed application. Adhering to the policy, our ARM system limits the capabilities of an application by restricting access to data and system resources contained within the work persona. Data shadowing is a data and system resource protection technique we have chosen to leverage. We have implemented DroidARM and integrated it into the Android operating system. Our experimental results show that our approach is efficient and effective.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "已经开发了不同的容器化技术来确保在最终用户的设备上分离企业内容和个人数据。尽管企业管理着执行工作相关活动的环境(称为工作角色),但安装在移动设备上的第三方应用程序可能会使企业内容容易被滥用或渗透。因此，让企业能够限制工作角色中第三方应用程序的功能是至关重要的。在移动系统中，应用程序在被安装到设备上之前，通常会请求使用设备上的一系列功能，并且为了安装应用程序，必须授予所有功能。我们的方法，我们称之为DroidARM，侧重于安装后的应用程序限制策略。这种策略在运行时动态地限制移动应用程序的能力。应用程序限制策略是通过我们的应用程序限制管理器(ARM)策略管理器配置的，它允许用户为每个已安装的应用程序设置不同的限制。根据该政策，我们的ARM系统通过限制对工作角色中包含的数据和系统资源的访问来限制应用程序的功能。数据隐藏是我们选择利用的一种数据和系统资源保护技术。我们已经实现了DroidARM，并将其集成到Android操作系统中。实验结果表明我们的方法是有效的。",
        "title_zh": "用于自带设备场景的应用限制系统",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sacmat/sacmat2016.html",
        "conf_title": "SACMAT 2016: Shanghai, China",
        "conf_url": "https://doi.org/10.1145/2914642",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3589608.3595083",
        "title": "Demo: A Multimodal Behavioral Biometric Scheme for Smartphone User Authentication (MBBS)",
        "authors": "Attaullah Buriro, Samuele Ceol",
        "abstract": "In this demo paper, we introduce MBBS - a tetra-model behavioral biometric authentication scheme for smartphones. MBBS leverages four modalities: the way a smartphone user (i) swipes on the touchscreen, (ii) taps any combination of ''text-independent\" 8-digit numbers, (iii) writes his name on the touchscreen, and (iv) the hand's micro-movements he makes during this entry process, to authenticate users. Additionally, MBBS includes a Generative Adversarial Network (GAN) powered data augmentation architecture to enhance overall accuracy and security. To this end, we aim to demonstrate the effectiveness of MBBS firstly on ''real'' users' samples and later on the augmented samples comprising of ''real'' and ''GAN-generated'' samples, on a real Android device. MBBS is likely to enjoy maximum usability since it does not require users to remember any secret. Further, it exploits the users' familiarity with the processes and it increases the accuracy (by employing GAN in real time) without requiring a large sample size from users. Preliminary results in terms of performance, security, and usability analysis also show a positive opinion about our developed mechanism.",
        "files": {
            "openAccessPdf": "https://dl.acm.org/doi/pdf/10.1145/3589608.3595083"
        },
        "title_zh": "演示:智能手机用户认证(MBBS)的多模态行为生物识别方案",
        "abstract_zh": "在这篇演示论文中，我们介绍了MBBS -一种用于智能手机的tetra模型行为生物认证方案。MBBS利用四种模式:智能手机用户(I)在触摸屏上滑动，(ii)点击“与文本无关”的8位数字的任意组合，(iii)在触摸屏上写下自己的名字，以及(iv)在输入过程中手的微动，来验证用户。此外，MBBS包括一个生成对抗网络(GAN)供电的数据增强架构，以提高整体准确性和安全性。为此，我们的目标是在真实的Android设备上，首先在“真实的”用户样本上，然后在由“真实的”和“GAN生成的”样本组成的扩充样本上，证明MBBS的有效性。MBBS可能享有最大的可用性，因为它不需要用户记住任何秘密。此外，它利用了用户对过程的熟悉程度，并提高了精度(通过实时采用GAN ),而无需用户提供大量样本。在性能、安全性和可用性分析方面的初步结果也显示了对我们开发的机制的积极评价。",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sacmat/sacmat2023.html",
        "conf_title": "SACMAT 2023:\nTrento, Italy",
        "conf_url": "https://doi.org/10.1145/3589608",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3503463",
        "title": "A Deep Dive Inside DREBIN: An Explorative Analysis beyond Android Malware Detection Scores",
        "authors": "Nadia Daoudi, Kevin Allix, Tegawendé François D. Assise Bissyandé, Jacques Klein",
        "abstract": "Machine learning advances have been extensively explored for implementing large-scale malware detection. When reported in the literature, performance evaluation of machine learning based detectors generally focuses on highlighting the ratio of samples that are correctly or incorrectly classified, overlooking essential questions on why/how the learned models can be demonstrated as reliable. In the Android ecosystem, several recent studies have highlighted how evaluation setups can carry biases related to datasets or evaluation methodologies. Nevertheless, there is little work attempting to dissect the produced model to provide some understanding of its intrinsic characteristics. In this work, we fill this gap by performing a comprehensive analysis of a state-of-the-art Android malware detector, namely DREBIN, which constitutes today a key reference in the literature. Our study mainly targets an in-depth understanding of the classifier characteristics in terms of (1) which features actually matter among the hundreds of thousands that DREBIN extracts, (2) whether the high scores of the classifier are dependent on the dataset age, and (3) whether DREBIN’s explanations are consistent within malware families, among others. Overall, our tentative analysis provides insights into the discriminatory power of the feature set used by DREBIN to detect malware. We expect our findings to bring about a systematisation of knowledge for the community.",
        "files": {
            "openAccessPdf": "https://dl.acm.org/doi/pdf/10.1145/3503463"
        },
        "abstract_zh": "机器学习的进步已经被广泛探索用于实现大规模恶意软件检测。当在文献中报道时，基于机器学习的检测器的性能评估通常集中于突出正确或错误分类的样本的比率，忽略了关于为什么/如何可以证明学习的模型是可靠的基本问题。在Android生态系统中，最近的几项研究强调了评估设置可能会带来与数据集或评估方法相关的偏差。然而，很少有工作试图剖析生产模型，以提供对其内在特征的一些理解。在这项工作中，我们通过对最先进的Android恶意软件检测器(即DREBIN)进行全面分析来填补这一空白，该检测器是当今文献中的重要参考。我们的研究主要旨在从以下方面深入了解分类器特征:(1)在DREBIN提取的数十万个特征中，哪些特征实际上很重要，(2)分类器的高分是否取决于数据集年龄，以及(3)DREBIN的解释在恶意软件家族中是否一致，等等。总的来说，我们的尝试性分析提供了对DREBIN用来检测恶意软件的特征集的区分能力的见解。我们期望我们的发现能为社区带来知识的系统化。",
        "title_zh": "深入垃圾箱:超越安卓恶意软件检测分数的探索性分析",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tissec/tissec25.html",
        "conf_title": "ACM Transactions on Privacy and Security, Volume 25",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3439802",
        "title": "Systematic Mutation-Based Evaluation of the Soundness of Security-Focused Android Static Analysis Techniques",
        "authors": "Amit Seal Ami, Kaushal Kafle, Kevin Moran, Adwait Nadkarni, Denys Poshyvanyk",
        "abstract": "Mobile application security has been a major area of focus for security research over the course of the last decade. Numerous application analysis tools have been proposed in response to malicious, curious, or vulnerable apps. However, existing tools, and specifically, static analysis tools, trade soundness of the analysis for precision and performance and are hence soundy. Unfortunately, the specific unsound choices or flaws in the design of these tools is often not known or well documented, leading to misplaced confidence among researchers, developers, and users. This article describes the Mutation-Based Soundness Evaluation (μSE) framework, which systematically evaluates Android static analysis tools to discover, document, and fix flaws, by leveraging the well-founded practice of mutation analysis. We implemented μSE and applied it to a set of prominent Android static analysis tools that detect private data leaks in apps. In a study conducted previously, we used μSE to discover 13 previously undocumented flaws in FlowDroid, one of the most prominent data leak detectors for Android apps. Moreover, we discovered that flaws also propagated to other tools that build upon the design or implementation of FlowDroid or its components. This article substantially extends our μSE framework and offers a new in-depth analysis of two more major tools in our 2020 study; we find 12 new, undocumented flaws and demonstrate that all 25 flaws are found in more than one tool, regardless of any inheritance-relation among the tools. Our results motivate the need for systematic discovery and documentation of unsound choices in soundy tools and demonstrate the opportunities in leveraging mutation testing in achieving this goal.",
        "files": {
            "openAccessPdf": "http://arxiv.org/pdf/2102.06829"
        },
        "abstract_zh": "在过去的十年中，移动应用程序安全一直是安全研究的主要关注领域。为了应对恶意、好奇或易受攻击的应用程序，已经提出了许多应用程序分析工具。然而，现有的工具，特别是静态分析工具，在精度和性能上牺牲了分析的可靠性，因此是可靠的。不幸的是，这些工具设计中具体的不合理选择或缺陷通常不为人知或没有很好的记录，导致研究人员、开发人员和用户的信心错位。本文描述了基于突变的可靠性评估(μSE)框架，它系统地评估Android静态分析工具，通过利用突变分析的良好实践来发现、记录和修复缺陷。我们实现了μSE，并将其应用于一组著名的Android静态分析工具，这些工具可以检测应用程序中的私人数据泄漏。在之前进行的一项研究中，我们使用μSE发现了FlowDroid中13个之前未记录的缺陷，FlowDroid是Android应用程序最重要的数据泄漏检测器之一。此外，我们发现缺陷还会传播到基于FlowDroid或其组件的设计或实现的其他工具。这篇文章大大扩展了我们的μSE框架，并对我们2020年研究中的另外两个主要工具进行了新的深入分析；我们发现了12个新的、未记录的缺陷，并证明了所有25个缺陷都是在不止一个工具中发现的，不管这些工具之间的继承关系如何。我们的结果激发了对系统发现和记录合理工具中不合理选择的需求，并展示了利用突变测试实现这一目标的机会。",
        "title_zh": "基于突变的系统化安全Android静态分析技术的可靠性评估",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tissec/tissec24.html",
        "conf_title": "ACM Transactions on Privacy and Security, Volume 24",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3448609",
        "title": "The Android Platform Security Model",
        "authors": "René Mayrhofer, Jeffrey Vander Stoep, Chad Brubaker, Nick Kralevich",
        "abstract": "Android is the most widely deployed end-user focused operating system. With its growing set of use cases encompassing communication, navigation, media consumption, entertainment, finance, health, and access to sensors, actuators, cameras, or microphones, its underlying security model needs to address a host of practical threats in a wide variety of scenarios while being useful to non-security experts. The model needs to strike a difficult balance between security, privacy, and usability for end users, assurances for app developers, and system performance under tight hardware constraints. While many of the underlying design principles have implicitly informed the overall system architecture, access control mechanisms, and mitigation techniques, the Android security model has previously not been formally published. This article aims to both document the abstract model and discuss its implications. Based on a definition of the threat model and Android ecosystem context in which it operates, we analyze how the different security measures in past and current Android implementations work together to mitigate these threats. There are some special cases in applying the security model, and we discuss such deliberate deviations from the abstract model.",
        "files": {
            "openAccessPdf": "https://dl.acm.org/doi/pdf/10.1145/3448609"
        },
        "abstract_zh": "Android是部署最广泛的以最终用户为中心的操作系统。随着越来越多的用例涵盖通信、导航、媒体消费、娱乐、金融、健康以及对传感器、执行器、摄像头或麦克风的访问，其底层安全模型需要解决各种场景中的大量实际威胁，同时对非安全专家也很有用。该模型需要在最终用户的安全性、隐私和可用性、应用程序开发人员的保证以及严格硬件约束下的系统性能之间达成艰难的平衡。虽然许多底层设计原则隐含了整个系统架构、访问控制机制和缓解技术，但Android安全模型此前并未正式发布。本文旨在记录抽象模型并讨论其含义。基于威胁模型的定义及其运行的Android生态系统环境，我们分析了过去和当前Android实施中的不同安全措施如何协同工作来减轻这些威胁。在应用安全模型时有一些特殊情况，我们将讨论这种对抽象模型的故意偏离。",
        "title_zh": "Android平台安全模型",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tissec/tissec24.html",
        "conf_title": "ACM Transactions on Privacy and Security, Volume 24",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3465361",
        "title": "Maat: Automatically Analyzing VirusTotal for Accurate Labeling and Effective Malware Detection",
        "authors": "Aleieldin Salem, Sebastian Banescu, Alexander Pretschner",
        "abstract": "The malware analysis and detection research community relies on the online platform VirusTotal to label Android apps based on the scan results of around 60 antiviral scanners. Unfortunately, there are no standards on how to best interpret the scan results acquired from VirusTotal, which leads to the utilization of different threshold-based labeling strategies (e.g., if ten or more scanners deem an app malicious, it is considered malicious). While some of the utilized thresholds may be able to accurately approximate the ground truths of apps, the fact that VirusTotal changes the set and versions of the scanners it uses makes such thresholds unsustainable over time. We implemented a method, Maat, that tackles these issues of standardization and sustainability by automatically generating a Machine Learning (ML)-based labeling scheme, which outperforms threshold-based labeling strategies. Using the VirusTotal scan reports of 53K Android apps that span one year, we evaluated the applicability of Maat's ML-based labeling strategies by comparing their performance against threshold-based strategies. We found that such ML-based strategies (a) can accurately and consistently label apps based on their VirusTotal scan reports, and (b) contribute to training ML-based detection methods that are more effective at classifying out-of-sample apps than their threshold-based counterparts.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "恶意软件分析和检测研究社区依靠在线平台VirusTotal，根据大约60种抗病毒扫描仪的扫描结果来标记Android应用程序。不幸的是，对于如何最好地解释从VirusTotal获得的扫描结果，并没有标准，这导致了不同的基于阈值的标记策略的使用(例如，如果十个或更多的扫描器认为一个应用程序是恶意的，它就被认为是恶意的)。虽然一些利用的阈值可能能够准确地接近应用程序的基本事实，但VirusTotal更改其使用的扫描程序的设置和版本这一事实使得此类阈值随着时间的推移不可持续。我们实现了一种方法，玛特，它通过自动生成基于机器学习(ML)的标签方案来解决标准化和可持续性的问题，该方案优于基于阈值的标签策略。使用VirusTotal对53K个Android应用程序为期一年的扫描报告，我们通过比较它们与基于阈值的策略的性能，评估了玛特基于ML的标记策略的适用性。我们发现，这种基于ML的策略(a)可以根据其VirusTotal扫描报告准确、一致地标记应用程序，以及(b)有助于训练基于ML的检测方法，这些方法在对样本外应用程序进行分类时比基于阈值的方法更有效。",
        "title_zh": "玛特:自动分析VirusTotal，以便准确标记和有效检测恶意软件",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tissec/tissec24.html",
        "conf_title": "ACM Transactions on Privacy and Security, Volume 24",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3313391",
        "title": "MaMaDroid: Detecting Android Malware by Building Markov Chains of Behavioral Models (Extended Version)",
        "authors": "Lucky Onwuzurike, Enrico Mariconti, Panagiotis Andriotis, Emiliano De Cristofaro, Gordon J. Ross, Gianluca Stringhini",
        "abstract": "The rise in popularity of the Android platform has resulted in an explosion of malware threats targeting it. As both Android malware and the operating system itself constantly evolve, it is very challenging to design robust malware mitigation techniques that can operate for long periods of time without the need for modifications or costly re-training. In this paper, we present MaMaDroid, an Android malware detection system that relies on app behavior. MaMaDroid builds a behavioral model, in the form of a Markov chain, from the sequence of abstracted API calls performed by an app, and uses it to extract features and perform classification. By abstracting calls to their packages or families, MaMaDroid maintains resilience to API changes and keeps the feature set size manageable. We evaluate its accuracy on a dataset of 8.5K benign and 35.5K malicious apps collected over a period of six years, showing that it not only effectively detects malware (with up to 99% F-measure), but also that the model built by the system keeps its detection capabilities for long periods of time (on average, 86% and 75% F-measure, respectively, one and two years after training). Finally, we compare against DroidAPIMiner, a state-of-the-art system that relies on the frequency of API calls performed by apps, showing that MaMaDroid significantly outperforms it.",
        "files": {
            "openAccessPdf": "https://discovery.ucl.ac.uk/1532047/1/Stringhini_mamadroid.pdf"
        },
        "abstract_zh": "Android平台越来越受欢迎，导致针对它的恶意软件威胁激增。随着Android恶意软件和操作系统本身的不断发展，设计能够长期运行而无需修改或昂贵的重新培训的健壮恶意软件缓解技术是非常具有挑战性的。在本文中，我们介绍了MaMaDroid，这是一个依赖于应用行为的Android恶意软件检测系统。MaMaDroid从应用程序执行的抽象API调用序列中以马尔可夫链的形式构建行为模型，并使用它来提取特征和执行分类。通过抽象对它们的包或系列的调用，MaMaDroid保持了对API变化的弹性，并使特性集的大小易于管理。我们在六年期间收集的8.5K良性和35.5K恶意应用的数据集上评估了它的准确性，表明它不仅可以有效地检测恶意软件(F-measure高达99%)，而且系统构建的模型可以长时间保持其检测能力(训练后一年和两年的平均F-measure分别为86%和75%)。最后，我们与DroidAPIMiner进行了比较，DroidAPIMiner是一个最先进的系统，它依赖于应用程序执行API调用的频率，显示MaMaDroid明显优于它。",
        "title_zh": "MaMaDroid:通过构建行为模型的马尔可夫链来检测Android恶意软件(扩展版)",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tissec/tissec22.html",
        "conf_title": "ACM Transactions on Privacy and Security, Volume 22",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3092368",
        "title": "Mo(bile) Money, Mo(bile) Problems: Analysis of Branchless Banking Applications",
        "authors": "Bradley Reaves, Jasmine D. Bowers, Nolen Scaife, Adam Bates, Arnav Bhartiya, Patrick Traynor, Kevin R. B. Butler",
        "abstract": "Mobile money, also known as branchless banking, brings much-needed financial services to the unbanked in the developing world. Leveraging ubiquitous cellular networks, these services are now being deployed as smart phone apps, providing an electronic payment infrastructure where alternatives such as credit cards generally do not exist. Although widely marketed as a more secure option to cash, these applications are often not subject to the traditional regulations applied in the financial sector, leaving doubt as to the veracity of such claims. In this paper, we evaluate these claims and perform the first in-depth measurement analysis of branchless banking applications. We first perform an automated analysis of all 46 known Android mobile money apps across the 246 known mobile money providers and demonstrate that automated analysis fails to provide reliable insights. We subsequently perform comprehensive manual teardown of the registration, login, and transaction procedures of a diverse 15% of these apps. We uncover pervasive and systemic vulnerabilities spanning botched certification validation, do-it-yourself cryptography, and myriad other forms of information leakage that allow an attacker to impersonate legitimate users, modify transactions in flight, and steal financial records. These findings confirm that the majority of these apps fail to provide the protections needed by financial services. Finally, through inspection of providers' terms of service, we also discover that liability for these problems unfairly rests on the shoulders of the customer, threatening to erode trust in branchless banking and hinder efforts for global financial inclusion.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "移动货币，也被称为无分支银行，为发展中国家没有银行账户的人带来了急需的金融服务。利用无处不在的蜂窝网络，这些服务现在被部署为智能手机应用，在信用卡等替代品通常不存在的地方提供电子支付基础设施。尽管这些应用程序被广泛宣传为比现金更安全的选择，但它们往往不受金融部门适用的传统法规的约束，这让人对这种说法的真实性产生了怀疑。在本文中，我们评估了这些主张，并对无分支银行应用进行了首次深入的测量分析。我们首先对246个已知移动货币提供商的所有46个已知Android移动货币应用进行了自动化分析，并证明自动化分析无法提供可靠的见解。随后，我们对其中15%的应用程序的注册、登录和交易程序进行了全面的人工拆除。我们发现了无处不在的系统漏洞，包括拙劣的认证验证、自己动手加密和无数其他形式的信息泄漏，这些漏洞允许攻击者冒充合法用户、修改交易并窃取财务记录。这些发现证实，这些应用程序中的大多数未能提供金融服务所需的保护。最后，通过检查提供商的服务条款，我们还发现这些问题的责任不公平地落在了客户的肩上，这有可能侵蚀对无分支银行的信任，并阻碍全球金融包容性的努力。",
        "title_zh": "货币，货币问题:无分支银行应用分析",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tissec/tissec20.html",
        "conf_title": "ACM Transactions on Privacy and Security, Volume 20",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3183575",
        "title": "Amandroid: A Precise and General Inter-component Data Flow Analysis Framework for Security Vetting of Android Apps",
        "authors": "Fengguo Wei, Sankardas Roy, Xinming Ou, Robby",
        "abstract": "We propose a new approach to conduct static analysis for security vetting of Android apps, and built a general framework, called Amandroid for determining points-to information for all objects in an Android app in a flow- and context-sensitive way across Android apps components. We show that: (a) this type of comprehensive analysis is completely feasible in terms of computing resources needed with modern hardware, (b) one can easily leverage the results from this general analysis to build various types of specialized security analyses -- in many cases the amount of additional coding needed is around 100 lines of code, and (c) the result of those specialized analyses leveraging Amandroid is at least on par and often exceeds prior works designed for the specific problems, which we demonstrate by comparing Amandroid's results with those of prior works whenever we can obtain the executable of those tools. Since Amandroid's analysis directly handles inter-component control and data flows, it can be used to address security problems that result from interactions among multiple components from either the same or different apps. Amandroid's analysis is sound in that it can provide assurance of the absence of the specified security problems in an app with well-specified and reasonable assumptions on Android runtime system and its library.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "我们提出了一种新的方法来对android应用程序的安全审查进行静态分析，并建立了一个通用框架，称为Amandroid，用于跨Android应用程序组件以流和上下文敏感的方式确定Android应用程序中所有对象的指向信息。我们证明:(a)就现代硬件所需的计算资源而言，这种类型的全面分析是完全可行的，(b)人们可以很容易地利用这种一般分析的结果来构建各种类型的专门安全分析——在许多情况下，所需的额外编码量大约为100行代码，以及(c)利用Amandroid的那些专门分析的结果至少是同等的，并且经常超过以前为特定问题设计的工作， 我们通过将Amandroid的结果与之前的工作进行比较来证明这一点，只要我们能够获得这些工具的可执行文件。 由于Amandroid的分析直接处理组件间的控制和数据流，它可以用于解决来自相同或不同应用程序的多个组件之间的交互所导致的安全问题。Amandroid的分析是合理的，因为它可以保证在android运行时系统及其库上有良好指定和合理假设的应用程序中不存在指定的安全问题。",
        "title_zh": "Amandroid:一个精确通用的组件间数据流分析框架，用于android应用的安全审查",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tissec/tissec21.html",
        "conf_title": "ACM Transactions on Privacy and Security, Volume 21",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3230740",
        "title": "A Video-based Attack for Android Pattern Lock",
        "authors": "Guixin Ye, Zhanyong Tang, Dingyi Fang, Xiaojiang Chen, Willy Wolff, Adam J. Aviv, Zheng Wang",
        "abstract": "Pattern lock is widely used for identification and authentication on Android devices. This article presents a novel video-based side channel attack that can reconstruct Android locking patterns from video footage filmed using a smartphone. As a departure from previous attacks on pattern lock, this new attack does not require the camera to capture any content displayed on the screen. Instead, it employs a computer vision algorithm to track the fingertip movement trajectory to infer the pattern. Using the geometry information extracted from the tracked fingertip motions, the method can accurately infer a small number of (often one) candidate patterns to be tested by an attacker. We conduct extensive experiments to evaluate our approach using 120 unique patterns collected from 215 independent users. Experimental results show that the proposed attack can reconstruct over 95% of the patterns in five attempts. We discovered that, in contrast to most people’s belief, complex patterns do not offer stronger protection under our attacking scenarios. This is demonstrated by the fact that we are able to break all but one complex patterns (with a 97.5% success rate) as opposed to 60% of the simple patterns in the first attempt. We demonstrate that this video-side channel is a serious concern for not only graphical locking patterns but also PIN-based passwords, as algorithms and analysis developed from the attack can be easily adapted to target PIN-based passwords. As a countermeasure, we propose to change the way the Android locking pattern is constructed and used. We show that our proposal can successfully defeat this video-based attack. We hope the results of this article can encourage the community to revisit the design and practical use of Android pattern lock.",
        "files": {
            "openAccessPdf": "https://eprints.lancs.ac.uk/id/eprint/125681/1/PDF29460441_549292099.pdf"
        },
        "abstract_zh": "模式锁广泛用于Android设备上的身份识别和认证。本文介绍了一种新颖的基于视频的侧信道攻击，它可以从使用智能手机拍摄的视频片段中重建Android锁定模式。与以前对模式锁定的攻击不同，这种新的攻击不需要摄像头捕捉屏幕上显示的任何内容。相反，它采用计算机视觉算法来跟踪指尖运动轨迹，以推断模式。使用从跟踪的指尖运动中提取的几何信息，该方法可以精确地推断攻击者要测试的少量(通常是一个)候选模式。我们使用从215个独立用户收集的120个独特模式进行了大量实验来评估我们的方法。实验结果表明，提出的攻击可以在五次尝试中重建超过95%的模式。我们发现，与大多数人的想法相反，在我们的攻击场景下，复杂模式并不能提供更强的保护。事实证明了这一点，即我们能够打破除了一个复杂模式之外的所有复杂模式(成功率为97.5%)，而第一次尝试只打破了60%的简单模式。我们证明，这种视频端渠道不仅对图形锁定模式，而且对基于PIN的密码都是一个严重的问题，因为从攻击中开发的算法和分析可以很容易地适应基于PIN的密码。作为对策，我们建议改变Android锁定模式的构造和使用方式。我们表明，我们的建议可以成功地击败这种基于视频的攻击。我们希望本文的结果可以鼓励社区重新审视Android模式锁的设计和实际使用。",
        "title_zh": "一种基于视频的Android模式锁攻击",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tissec/tissec21.html",
        "conf_title": "ACM Transactions on Privacy and Security, Volume 21",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TIFS.2022.3172213",
        "title": "Smart App Attack: Hacking Deep Learning Models in Android Apps",
        "authors": "Yujin Huang, Chunyang Chen",
        "abstract": "On-device deep learning is rapidly gaining popularity in mobile applications. Compared to offloading deep learning from smartphones to the cloud, on-device deep learning enables offline model inference while preserving user privacy. However, such mechanisms inevitably store models on users’ smartphones and may invite adversarial attacks as they are accessible to attackers. Due to the characteristic of the on-device model, most existing adversarial attacks cannot be directly applied for on-device models. In this paper, we introduce a grey-box adversarial attack framework to hack on-device models by crafting highly similar binary classification models based on identified transfer learning approaches and pre-trained models from TensorFlow Hub. We evaluate the attack effectiveness and generality in terms of four different settings including pre-trained models, datasets, transfer learning approaches and adversarial attack algorithms. The results demonstrate that the proposed attacks remain effective regardless of different settings, and significantly outperform state-of-the-art baselines. We further conduct an empirical study on real-world deep learning mobile apps collected from Google Play. Among 53 apps adopting transfer learning, we find that 71.7% of them can be successfully attacked, which includes popular ones in medicine, automation, and finance categories with critical usage scenarios. The results call for the awareness and actions of deep learning mobile app developers to secure the on-device models. The code of this work is available at https://github.com/Jinxhy/SmartAppAttack.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "设备上的深度学习正在移动应用程序中迅速普及。与将深度学习从智能手机卸载到云相比，设备上的深度学习可以在保护用户隐私的同时实现离线模型推理。然而，这种机制不可避免地将模型存储在用户的智能手机上，并且可能会招致恶意攻击，因为攻击者可以访问这些模型。由于片上模型的特点，大多数现有的对抗性攻击不能直接应用于片上模型。在本文中，我们引入了一个灰箱对抗性攻击框架，通过基于已识别的迁移学习方法和TensorFlow Hub的预训练模型制作高度相似的二进制分类模型来攻击设备上的模型。我们根据四种不同的设置来评估攻击的有效性和通用性，包括预训练模型、数据集、迁移学习方法和对抗性攻击算法。结果表明，提出的攻击仍然有效，无论不同的设置，并明显优于最先进的基线。我们进一步对从Google Play收集的真实世界深度学习移动应用进行了实证研究。在53个采用迁移学习的应用中，我们发现71.7%的应用可以被成功攻击，其中包括医学、自动化和金融类别中具有关键使用场景的流行应用。研究结果呼吁深度学习移动应用开发者的意识和行动，以保护设备上的模型。这部作品的代码可在https://github.com/Jinxhy/SmartAppAttack.获得",
        "title_zh": "智能应用攻击:入侵Android应用中的深度学习模型",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tifs/tifs17.html",
        "conf_title": "IEEE Transactions on Information Forensics and Security, Volume 17",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TIFS.2022.3180184",
        "title": "Debiasing Android Malware Datasets: How Can I Trust Your Results If Your Dataset Is Biased?",
        "authors": "Tomás Concepción Miranda, Pierre-François Gimenez, Jean-François Lalande, Valérie Viet Triem Tong, Pierre Wilke",
        "abstract": "Android security has received a lot of attention over the last decade, especially malware investigation. Researchers attempt to highlight applications’ security-relevant characteristics to better understand malware and effectively distinguish malware from benign applications. The accuracy and the completeness of their proposals are evaluated experimentally on malware and goodware datasets. Thus, the quality of these datasets is of critical importance: if the datasets are outdated or not representative of the studied population, the conclusions may be flawed. We specify different types of experimental scenarios. Some of them require unlabeled but representative datasets of the entire population. Others require datasets labeled with valuable characteristics that may be difficult to compute, such as malware datasets. We discuss the irregularities of datasets used in experiments, questioning the validity of the performances reported in the literature. This article focuses on providing guidelines for designing debiased datasets. First, we propose guidelines for building representative datasets from unlabeled ones. Second, we propose and experiment a debiasing algorithm that, given a biased labeled dataset and a target representative dataset, builds a representative and labeled dataset. Finally, from the previous debiased datasets, we produce datasets for experiments on Android malware detection or classification with machine learning algorithms. Experiments show that debiased datasets perform better when classifying with machine learning algorithms.",
        "files": {
            "openAccessPdf": "https://ieeexplore.ieee.org/ielx7/10206/4358835/09787514.pdf"
        },
        "abstract_zh": "Android安全在过去十年中受到了很多关注，尤其是恶意软件调查。研究人员试图突出应用程序的安全相关特征，以更好地了解恶意软件，并有效区分恶意软件和良性应用程序。他们的建议的准确性和完整性在恶意软件和良好的数据集上进行实验评估。因此，这些数据集的质量是至关重要的:如果数据集是过时的或不代表研究的人口，结论可能是有缺陷的。我们指定不同类型的实验场景。其中一些需要整个群体的未标记但有代表性的数据集。其他需要标有可能难以计算的有价值特征的数据集，例如恶意软件数据集。我们讨论了实验中使用的数据集的不规则性，质疑了文献中报道的性能的有效性。本文着重于提供设计去偏置数据集的指南。首先，我们提出了从未标记的数据集构建代表性数据集的准则。其次，我们提出并实验了一个去偏置算法，给定一个有偏置的标签数据集和一个目标代表性数据集，构建一个代表性的标签数据集。最后，从之前的去偏数据集，我们产生数据集，用于使用机器学习算法对Android恶意软件进行检测或分类的实验。实验表明，去偏数据集在用机器学习算法分类时表现更好。",
        "title_zh": "去除Android恶意软件数据集的偏见:如果你的数据集有偏见，我如何相信你的结果？",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tifs/tifs17.html",
        "conf_title": "IEEE Transactions on Information Forensics and Security, Volume 17",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TIFS.2023.3267666",
        "title": "IAFDroid: Demystifying Collusion Attacks in Android Ecosystem via Precise Inter-App Analysis",
        "authors": "Bin Wang, Chao Yang, Jianfeng Ma",
        "abstract": "Inter-app communication mechanism allows app developers to improve Android apps’ usability and provide users with rich functions via interacting with exposed components or performing data sharing. However, this mechanism may be leveraged by malicious developers or unintentionally misused by inexperienced developers. For end users, this type of attack may cause privacy breaches or remote controls of personal phone, which have a great threat of the user’s data security. The key to analyzing whether there is a collusion attack is to analyze the existence of communication channels between apps. The existing static analysis tools have done some work in this area, but the comprehensiveness of the analysis is insufficient, and such research lacks a unified test standard. In this paper, we present collusion attacks using more concealed inter-app communication channels, which can bypass existing security detection mechanisms. To defend against the new attacks, we design IAFDroid, an analysis framework that combines static and taint analysis. By examining 20K real-world apps, IAFDroid found that 94.4% of the most exposed components of Android may be leveraged to perform collusion attacks. Furthermore, the evaluation showed that the feature set extracted by IAFDroid could be used to promote the accuracy of Android malware detection. We contribute a more comprehensive benchmark for IAC analysis, IACBench, which includes the new attacks we propose. To facilitate follow-up studies, we open-sourced IAFDroid and IACBench based on the GPL agreement.",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "IAFDroid:通过精确的应用间分析揭开Android生态系统中共谋攻击的神秘面纱",
        "abstract_zh": "应用程序间的通信机制允许应用程序开发人员通过与暴露的组件交互或执行数据共享来提高Android应用程序的可用性，并为用户提供丰富的功能。但是，这种机制可能会被恶意的开发人员利用，或者被没有经验的开发人员无意中滥用。对于终端用户来说，这种攻击可能会造成隐私泄露或远程控制个人手机，对用户的数据安全造成极大威胁。分析是否存在共谋攻击的关键是分析app之间是否存在通信渠道。现有的静态分析工具在这方面做了一些工作，但是分析的全面性不足，并且这类研究缺乏统一的测试标准。在本文中，我们提出了使用更隐蔽的应用程序间通信通道的共谋攻击，它可以绕过现有的安全检测机制。为了抵御新的攻击，我们设计了IAFDroid，这是一个结合了静态和污点分析的分析框架。通过检查20K个真实世界的应用程序，IAFDroid发现Android最暴露的组件中有94.4%可能被用来执行共谋攻击。此外，评估表明，IAFDroid提取的特征集可用于提高Android恶意软件检测的准确性。我们为IAC分析贡献了一个更全面的基准IACBench，它包含了我们提出的新攻击。为了便于后续研究，我们基于GPL协议开源了IAFDroid和IACBench。",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tifs/tifs18.html",
        "conf_title": "IEEE Transactions on Information Forensics and Security, Volume 18",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TIFS.2023.3287395",
        "title": "Comprehensive Android Malware Detection Based on Federated Learning Architecture",
        "authors": "Wenbo Fang, Junjiang He, Wenshan Li, Xiaolong Lan, Yang Chen, Tao Li, Jiwu Huang, Linlin Zhang",
        "abstract": "Android malware and its variants are a major challenge for mobile platforms. However, there are two main problems in the existing detection methods: $a$ ) The detection method lacks the evolution ability for Android malware, which leads to the low detection rate of the detection model for malware and its variants. $b$ ) Traditional detection methods require centralized data for model training, however, the aggregation of training samples is limited due to the infectivity of malware and growing data privacy concerns, centralized detection methods are difficult to be applied in actual detection scenarios. In this paper, we propose FEDriod, a comprehensive Android malware detection method based on federated learning architecture that protects against growing Android malware or emerging Android malware variants. Specifically, we employ genetic evolution strategy to simulate the evolution of Android malware and develop potential malware variants from typical Android malware. Then, we customize the Android malware detection model based on residual neural network to achieve high detection accuracy. Finally, to achieve the protection sensitive data, we develope a federated learning framework to allows multiple Android malware detection agencies to jointly build a comprehensive Android malware detection model. We comprehensively evaluate the performance of FEDriod on the CIC, Drebin, and Contagio authoritative datasets. Experimental results show that our local model outperforms all baseline classifiers. In the federal scenario, our proposed method is superior to the state-of-the-art detection methods, especially in the cross-dataset evaluation, the F1 of FEDriod is 98.53%. More important, we performed genetic evolution experiments on the Drebin dataset, and the results showed that our proposed method has the ability to detect Android malware variants.",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "基于联邦学习架构的Android恶意软件综合检测",
        "abstract_zh": "Android恶意软件及其变种是移动平台面临的一大挑战。但是现有的检测方法主要存在两个问题:$a$)检测方法缺乏对Android恶意软件的进化能力，导致恶意软件及其变种的检测模型检测率较低。$b$)传统检测方法需要集中数据进行模型训练，然而，由于恶意软件的传染性和日益增长的数据隐私问题，训练样本的聚合受到限制，集中检测方法难以应用于实际检测场景。在本文中，我们提出了FEDriod，这是一种基于联邦学习架构的全面的Android恶意软件检测方法，可以抵御不断增长的Android恶意软件或新兴的Android恶意软件变体。具体来说，我们采用遗传进化策略来模拟Android恶意软件的进化，并从典型的Android恶意软件开发潜在的恶意软件变体。然后，我们定制了基于残差神经网络的Android恶意软件检测模型，以达到较高的检测准确率。最后，为了实现对敏感数据的保护，我们开发了一个联合学习框架，允许多个Android恶意软件检测机构共同构建一个全面的Android恶意软件检测模型。我们在CIC、Drebin和Contagio权威数据集上全面评估了FEDriod的性能。实验结果表明，我们的局部模型优于所有基线分类器。在联邦场景中，我们提出的方法优于最先进的检测方法，特别是在跨数据集评估中，FEDriod的F1为98.53%。更重要的是，我们在Drebin数据集上进行遗传进化实验，结果表明我们提出的方法具有检测Android恶意软件变种的能力。",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tifs/tifs18.html",
        "conf_title": "IEEE Transactions on Information Forensics and Security, Volume 18",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TIFS.2023.3293959",
        "title": "MalProtect: Stateful Defense Against Adversarial Query Attacks in ML-Based Malware Detection",
        "authors": "Aqib Rashid, Jose M. Such",
        "abstract": "ML models are known to be vulnerable to adversarial query attacks. In these attacks, queries are iteratively perturbed towards a particular class without any knowledge of the target model besides its output. The prevalence of remotely-hosted ML classification models and Machine-Learning-as-a-Service platforms means that query attacks pose a real threat to the security of these systems. To deal with this, stateful defenses have been proposed to detect query attacks and prevent the generation of adversarial examples by monitoring and analyzing the sequence of queries received by the system. Several stateful defenses have been proposed in recent years. However, these defenses rely solely on similarity or out-of-distribution detection methods that may be effective in other domains. In the malware detection domain, the methods to generate adversarial examples are inherently different, and therefore we find that such detection mechanisms are significantly less effective. Hence, in this paper, we present MalProtect, which is a stateful defense against query attacks in the malware detection domain. MalProtect uses several threat indicators to detect attacks. Our results show that it reduces the evasion rate of adversarial query attacks by 80+\\% in Android and Windows malware, across a range of attacker scenarios. In the first evaluation of its kind, we show that MalProtect outperforms prior stateful defenses, especially under the peak adversarial threat.",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "MalProtect:基于ML的恶意软件检测中对抗对抗性查询攻击的状态防御",
        "abstract_zh": "众所周知，ML模型容易受到对抗性查询攻击。在这些攻击中，除了目标模型的输出之外，在没有任何目标模型的知识的情况下，查询被反复地扰乱到特定的类。远程托管的ML分类模型和机器学习即服务平台的流行意味着查询攻击对这些系统的安全构成了真正的威胁。为了解决这个问题，已经提出了状态防御来检测查询攻击，并通过监视和分析系统接收到的查询序列来防止敌对示例的产生。近年来已经提出了几种状态防御。然而，这些防御仅仅依赖于相似性或分布外检测方法，这些方法在其他领域可能是有效的。在恶意软件检测领域中，生成对抗性示例的方法本质上是不同的，因此我们发现这种检测机制的效率明显较低。因此，在本文中，我们提出了MalProtect，它是恶意软件检测领域中针对查询攻击的有状态防御。MalProtect使用多个威胁指标来检测攻击。我们的结果表明，在一系列攻击者场景中，它将Android和Windows恶意软件中对抗性查询攻击的规避率降低了80+\\%。在同类的第一次评估中，我们表明MalProtect优于先前的状态防御，尤其是在峰值对抗性威胁下。",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tifs/tifs18.html",
        "conf_title": "IEEE Transactions on Information Forensics and Security, Volume 18",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TIFS.2023.3302509",
        "title": "Obfuscation-Resilient Android Malware Analysis Based on Complementary Features",
        "authors": "Cuiying Gao, Minghui Cai, Shuijun Yin, Gaozhun Huang, Heng Li, Wei Yuan, Xiapu Luo",
        "abstract": "Existing Android malware detection methods are usually hard to simultaneously resist various obfuscation techniques. Therefore, bytecode-based code obfuscation becomes an effective means to circumvent Android malware analysis. Building obfuscation-resilient Android malware analysis methods is a challenging task, due to the fact that various obfuscation techniques have vastly different effects on code and detection features. To mitigate this problem, we propose combining multiple features that are complementary in combating code obfuscation. Accordingly, we develop an obfuscation-resilient Android malware analysis method CorDroid, based on two new features: Enhanced Sensitive Function Call Graph (E-SFCG) and Opcode-based Markov transition Matrix (OMM). The first describes sensitive function call relationships, while the second reflects transition probabilities among opcodes. Combining E-SFCG and OMM can well characterize the runtime behavior of Android apps from different perspectives, hence increasing the difficulty of misleading malware analysis through using code obfuscation to affect detection features. To evaluate CorDroid, we generate 74, 138 obfuscated samples with 14 different obfuscation techniques, and compare CorDroid with the state-of-the-art detection methods (e.g., MaMaDroid, RevealDroid and APIGraph). In terms of average F1-Score, CorDroid is 29.69% higher than MaMaDroid, 21.80% higher than APIGraph, and 9.71% higher than RevealDroid, respectively. Experiments also validate the complementarity between E-SFCG and OMM, and exhibit the high execution efficiency of CorDroid.",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "基于互补特征的抗混淆Android恶意软件分析",
        "abstract_zh": "现有的Android恶意软件检测方法通常难以同时抵御各种混淆技术。因此，基于字节码的代码混淆成为规避Android恶意软件分析的有效手段。构建具有混淆弹性的Android恶意软件分析方法是一项具有挑战性的任务，因为各种混淆技术对代码和检测功能有很大不同的影响。为了减轻这个问题，我们建议结合多个互补的特性来对抗代码混淆。因此，我们开发了一种具有混淆弹性的Android恶意软件分析方法CorDroid，该方法基于两个新特征:增强的敏感函数调用图(E-SFCG)和基于操作码的马尔可夫转移矩阵(OMM)。第一个描述敏感的函数调用关系，而第二个反映操作码之间的转移概率。结合E-SFCG和OMM可以从不同角度很好地描述Android应用程序的运行时行为，从而增加了通过使用代码混淆来影响检测功能的误导性恶意软件分析的难度。为了评估CorDroid，我们使用14种不同的混淆技术生成了74，138个混淆样本，并将CorDroid与最先进的检测方法(例如，MaMaDroid、RevealDroid和APIGraph)进行了比较。F1平均得分方面，CorDroid分别比MaMaDroid高29.69%，比APIGraph高21.80%，比RevealDroid高9.71%。实验还验证了E-SFCG和OMM的互补性，展示了CorDroid的高效执行。",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tifs/tifs18.html",
        "conf_title": "IEEE Transactions on Information Forensics and Security, Volume 18",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TIFS.2023.3304840",
        "title": "An Attack to One-Tap Authentication Services in Cellular Networks",
        "authors": "Zhiwei Cui, Baojiang Cui, Junsong Fu, Bharat K. Bhargava",
        "abstract": "The One-Tap Authentication (OTAuth) based on the cellular network is a password-less login service provided by Mobile Network Operator (MNO) through the unique communication gateway access technique. The service allows app users to quickly sign up or log in with their mobile phone numbers without entering a password. Due to its convenience, OTAuth has been widely used by various apps. However, some studies have elaborated that OTAuth services are of great drawbacks from the perspective of mobile security and identified several flawed designs, which make the MNO cannot distinguish malicious apps from normal ones and cause impersonation attacks. In this paper, we further analyze OTAuth services from the perspective of 4G and 5G cellular networks and focus on two important procedures in which the cellular network plays an important role in OTAuth services. Not surprisingly, we discover a new fundamental design flaw in determining whether the runtime environment supports OTAuth services. Moreover, we propose a mature attack paradigm by exploiting this flaw, which allows an attacker to login or register one app as a victim. To evaluate the impact of the attack, we have examined 100/90/100 Android/iOS/HarmonyOS apps for OTAuth services of 3 mainstream MNOs in China. The experimental results show that our proposed attack is applicable to almost all the apps that support OTAuth services, and affects more apps than the attacks that have been reported before. Finally, we propose several countermeasures to defend against the attack. Note that, for security’s sake, we have already reported our findings to authorized parties and received their confirmations.",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "对蜂窝网络中一次认证服务的攻击",
        "abstract_zh": "基于蜂窝网络的一键式认证(OTAuth)是移动网络运营商(MNO)通过独特的通信网关接入技术提供的无密码登录服务。该服务允许应用程序用户快速注册或使用他们的手机号码登录，而无需输入密码。由于使用方便，OTAuth已经被各种app广泛使用。然而，一些研究表明，从移动安全的角度来看，OTAuth服务有很大的缺陷，并发现了几个有缺陷的设计，这使得MNO无法区分恶意应用程序和正常应用程序，并导致假冒攻击。在本文中，我们从4G和5G蜂窝网络的角度进一步分析o auth服务，并重点关注蜂窝网络在o auth服务中发挥重要作用的两个重要过程。毫不奇怪，我们在确定运行时环境是否支持OTAuth服务时发现了一个新的基本设计缺陷。此外，我们通过利用这一缺陷提出了一种成熟的攻击范式，这种缺陷允许攻击者登录或注册一个应用程序作为受害者。为了评估攻击的影响，我们检查了中国3家主流移动运营商OTAuth服务的100/90/100款Android/iOS/鸿蒙系统应用。实验结果表明，我们提出的攻击适用于几乎所有支持OTAuth服务的应用程序，并且比之前报道的攻击影响更多的应用程序。最后，我们提出了几点防范攻击的对策。请注意，为了安全起见，我们已经向授权方报告了我们的发现，并收到了他们的确认。",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tifs/tifs18.html",
        "conf_title": "IEEE Transactions on Information Forensics and Security, Volume 18",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TIFS.2019.2924549",
        "title": "A Theoretical Study of Hardware Performance Counters-Based Malware Detection",
        "authors": "Kanad Basu, Prashanth Krishnamurthy, Farshad Khorrami, Ramesh Karri",
        "abstract": "Malware can range from simple adware to stealthy kernel control-flow modifying rootkits. Although anti-virus software is popular, an ongoing cat-and-mouse cycle of anti-virus development and malware that thwarts the anti-virus has ensued. More recently, trusted hardware-based malware detection techniques are being developed on the premise that it is easier to bypass software-based defenses than hardware-based counterparts. One such approach is the use of hardware performance counters (HPCs) to detect malware for Linux and Android platforms. This paper, for the first time, presents an analytical framework to investigate the security provided by HPC-based malware detection techniques. The HPC readings are periodically monitored over the duration of the program execution for comparison with a golden HPC reading. We develop a mathematical framework to investigate the probability of malware detection, when HPCs are monitored at a pre-determined sampling interval. In other words, given a program, a set of HPCs, and a sampling rate, the framework can be employed to analyze the probability of malware detection.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "恶意软件的范围从简单的广告软件到隐蔽的内核控制流修改rootkits。虽然反病毒软件很受欢迎，但反病毒开发和阻碍反病毒的恶意软件的持续猫鼠循环随之而来。最近，可信的基于硬件的恶意软件检测技术正在开发中，其前提是绕过基于软件的防御比基于硬件的防御更容易。其中一种方法是使用硬件性能计数器(HPC)来检测Linux和Android平台的恶意软件。本文首次提出了一个分析框架来研究基于高性能计算的恶意软件检测技术所提供的安全性。在程序执行期间，定期监控HPC读数，以便与黄金HPC读数进行比较。我们开发了一个数学框架来研究恶意软件检测的概率，当以预先确定的采样间隔监控HPC时。换句话说，给定一个程序、一组HPC和一个采样率，该框架可以用来分析恶意软件检测的概率。",
        "title_zh": "基于硬件性能计数器的恶意软件检测理论研究",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tifs/tifs15.html",
        "conf_title": "IEEE Transactions on Information Forensics and Security, Volume 15",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TIFS.2019.2928205",
        "title": "MoveWithMe: Location Privacy Preservation for Smartphone Users",
        "authors": "Jian Kang, Douglas Steiert, Dan Lin, Yanjie Fu",
        "abstract": "With the prevalence of smartphones, mobile websites have been more and more popular. However, many mobile websites collect the location information which greatly increases users’ risks of being tracked unexpectedly. The current location access control setting is not sufficient since it cannot prevent the service providers which have been granted location-access permissions from tracking the users. In this paper, we propose a novel location privacy preservation mobile app, called MoveWithMe, which automatically generates decoy queries to hide the real users’ locations and intentions when they are using location-based mobile services. Unlike the existing works on dummy trajectories which may be easily discovered by attackers through data analysis, the uniqueness of the MoveWithMe app is that our generated decoys closely behave like real humans. Each decoy in our system has its own moving patterns, daily schedules, and social behaviors, which ensures its movements to be semantically different from the real user’s trace and satisfying geographic constraints. Thus, our decoys can hardly be distinguished even by advanced data mining techniques. Another advantage of the MoveWithMe app is that it guarantees the same level of user experience without affecting the response time or introducing extra control burdens. Decoys move independently in the back end and automatically submit queries to the same service provider whenever the user does so. Our proposed MoveWithMe app has both iOS and Android versions and has been tested on different brands of smartphones against various location-based services, such as Yelp and TripAdvisor. Experimental results demonstrate its practicality, effectiveness, and efficiency.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "随着智能手机的普及，手机网站已经越来越普及。然而，许多移动网站收集位置信息，这大大增加了用户被意外跟踪的风险。当前的位置访问控制设置是不够的，因为它不能阻止已经被授予位置访问许可的服务提供商跟踪用户。在本文中，我们提出了一种新颖的位置隐私保护移动应用，称为MoveWithMe，当用户使用基于位置的移动服务时，它会自动生成诱饵查询来隐藏真实用户的位置和意图。与攻击者通过数据分析很容易发现的虚拟轨迹的现有工作不同，MoveWithMe应用程序的独特之处在于，我们生成的诱饵与真实人类的行为非常相似。在我们的系统中，每个诱饵都有自己的运动模式、日常日程和社会行为，这确保了它的运动在语义上不同于真实用户的轨迹，并满足地理约束。因此，即使是先进的数据挖掘技术也很难区分我们的诱饵。MoveWithMe应用程序的另一个优势是，它保证了相同级别的用户体验，而不会影响响应时间或引入额外的控制负担。诱饵在后端独立移动，并且每当用户这样做时，自动向同一个服务提供商提交查询。我们提出的MoveWithMe应用程序有iOS和Android两个版本，并在不同品牌的智能手机上针对各种基于位置的服务进行了测试，如Yelp和猫途鹰。实验结果表明了该方法的实用性、有效性和高效性。",
        "title_zh": "MoveWithMe:智能手机用户的位置隐私保护",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tifs/tifs15.html",
        "conf_title": "IEEE Transactions on Information Forensics and Security, Volume 15",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TIFS.2019.2932228",
        "title": "Android HIV: A Study of Repackaging Malware for Evading Machine-Learning Detection",
        "authors": "Xiao Chen, Chaoran Li, Derui Wang, Sheng Wen, Jun Zhang, Surya Nepal, Yang Xiang, Kui Ren",
        "abstract": "Machine learning-based solutions have been successfully employed for the automatic detection of malware on Android. However, machine learning models lack robustness to adversarial examples, which are crafted by adding carefully chosen perturbations to the normal inputs. So far, the adversarial examples can only deceive detectors that rely on syntactic features (e.g., requested permissions, API calls, etc.), and the perturbations can only be implemented by simply modifying application’s manifest. While recent Android malware detectors rely more on semantic features from Dalvik bytecode rather than manifest, existing attacking/defending methods are no longer effective. In this paper, we introduce a new attacking method that generates adversarial examples of Android malware and evades being detected by the current models. To this end, we propose a method of applying optimal perturbations onto Android APK that can successfully deceive the machine learning detectors. We develop an automated tool to generate the adversarial examples without human intervention. In contrast to existing works, the adversarial examples crafted by our method can also deceive recent machine learning-based detectors that rely on semantic features such as control-flow-graph. The perturbations can also be implemented directly onto APK’s Dalvik bytecode rather than Android manifest to evade from recent detectors. We demonstrate our attack on two state-of-the-art Android malware detection schemes, MaMaDroid and Drebin. Our results show that the malware detection rates decreased from 96% to 0% in MaMaDroid, and from 97% to 0% in Drebin, with just a small number of codes to be inserted into the APK.",
        "files": {
            "openAccessPdf": "http://arxiv.org/pdf/1808.04218"
        },
        "abstract_zh": "基于机器学习的解决方案已经成功用于自动检测Android上的恶意软件。然而，机器学习模型对对立的例子缺乏鲁棒性，这些例子是通过向正常输入添加精心选择的扰动来制作的。到目前为止，对抗性的例子只能欺骗依赖于语法特征(例如，请求的许可、API调用等)的检测器。)，并且扰动只能通过简单地修改应用程序的清单来实现。虽然最近的Android恶意软件检测器更多地依赖于来自Dalvik字节码的语义特征，而不是清单，但现有的攻击/防御方法不再有效。在本文中，我们介绍了一种新的攻击方法，它可以生成Android恶意软件的对抗实例，从而避免被现有模型检测到。为此，我们提出了一种对Android APK应用最优扰动的方法，这种方法可以成功地欺骗机器学习检测器。我们开发了一个自动化的工具，在没有人工干预的情况下生成对立的例子。与现有的工作相比，通过我们的方法制作的对抗性例子也可以欺骗最近基于机器学习的检测器，这些检测器依赖于语义特征，如控制流图。这种干扰也可以直接在APK的Dalvik字节码上实现，而不是在Android清单上实现，以躲避最近的检测器。我们展示了我们对两个最先进的Android恶意软件检测方案MaMaDroid和Drebin的攻击。我们的结果显示，恶意软件检测率在MaMaDroid中从96%下降到0%,在Drebin中从97%下降到0%,只需在APK中插入少量代码。",
        "title_zh": "Android HIV:对恶意软件进行重新打包以逃避机器学习检测的研究",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tifs/tifs15.html",
        "conf_title": "IEEE Transactions on Information Forensics and Security, Volume 15",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TIFS.2019.2950134",
        "title": "PermPair: Android Malware Detection Using Permission Pairs",
        "authors": "Anshul Arora, Sateesh Kumar Peddoju, Mauro Conti",
        "abstract": "The Android smartphones are highly prone to spreading the malware due to intrinsic feebleness that permits an application to access the internal resources when the user grants the permissions knowingly or unknowingly. Hence, the researchers have focused on identifying the conspicuous permissions that lead to malware detection. Most of these permissions, common to malware and normal applications present themselves in different patterns and contribute to attacks. Therefore, it is essential to find the significant combinations of the permissions that can be dangerous. Hence, this paper aims to identify the pairs of permissions that can be dangerous. To the best of our knowledge, none of the existing works have used the permission pairs to detect malware. In this paper, we proposed an innovative detection model, named PermPair, that constructs and compares the graphs for malware and normal samples by extracting the permission pairs from the manifest file of an application. The evaluation results indicate that the proposed scheme is successful in detecting malicious samples with an accuracy of 95.44% when compared to other similar approaches and favorite mobile anti-malware apps. Further, we also proposed an efficient edge elimination algorithm that removed 7% of the unnecessary edges from the malware graph and 41% from the normal graph. This lead to minimum space utility and also 28% decrease in the detection time.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android智能手机非常容易传播恶意软件，因为当用户在知情或不知情的情况下授予权限时，固有的弱点允许应用程序访问内部资源。因此，研究人员专注于识别导致恶意软件检测的明显权限。恶意软件和正常应用程序共有的这些权限中的大部分以不同的模式出现，并导致攻击。因此，找到可能有危险的权限的重要组合是非常重要的。因此，本文旨在识别可能有危险的权限对。据我们所知，现有的作品中没有一个使用许可对来检测恶意软件。在本文中，我们提出了一个创新的检测模型，名为PermPair，它通过从应用程序的清单文件中提取权限对来构建和比较恶意软件和正常样本的图。评估结果表明，与其他类似方法和最受欢迎的移动反恶意软件应用相比，该方案能够成功检测恶意样本，准确率为95.44%。此外，我们还提出了一种有效的边消除算法，从恶意软件图中消除了7%的不必要边，从正常图中消除了41%的不必要边。这导致最小的空间利用率以及检测时间减少28%。",
        "title_zh": "PermPair:使用权限对的Android恶意软件检测",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tifs/tifs15.html",
        "conf_title": "IEEE Transactions on Information Forensics and Security, Volume 15",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TIFS.2020.2976556",
        "title": "DINA: Detecting Hidden Android Inter-App Communication in Dynamic Loaded Code",
        "authors": "Mohannad Alhanahnah, Qiben Yan, Hamid Bagheri, Hao Zhou, Yutaka Tsutano, Witawas Srisa-an, Xiapu Luo",
        "abstract": "Android inter-app communication (IAC) allows apps to request functionalities from other apps, which has been extensively used to provide a better user experience. However, IAC has also become an enticing target by attackers to launch malicious activities. Dynamic class loading (DCL) and reflection are effective features to enhance the functionality of the apps. In this paper, we expose a new attack that leverages these features in conjunction with inter-app communication to conceal malicious attacks with the ability to bypass existing security mechanisms. To counteract such attack, we present DINA, a novel hybrid analysis approach for identifying malicious IAC behaviors concealed within dynamically loaded code through reflective/DCL calls. DINA appends reflection and DCL invocations to control-flow graphs and continuously performs incremental dynamic analysis to detect the misuse of reflection and DCL that obfuscates malicious Intent communications. DINA utilizes string analysis and inter-procedural analysis to resolve hidden IAC and achieves superior detection performance. Our extensive evaluation on 49,000 real-world apps corroborates the prevalent usage of reflection and DCL, and reveals previously unknown and potentially harmful, hidden IAC behaviors in real-world apps.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android应用程序间通信(IAC)允许应用程序向其他应用程序请求功能，这已被广泛用于提供更好的用户体验。然而，IAC也成为攻击者发起恶意活动的诱人目标。动态类加载(DCL)和反射是增强应用程序功能的有效特性。在本文中，我们揭示了一种新的攻击，它利用这些功能结合应用程序间通信来隐藏恶意攻击，能够绕过现有的安全机制。为了对抗这种攻击，我们提出了DINA，一种新的混合分析方法，用于识别隐藏在通过反射/DCL调用动态加载的代码中的恶意IAC行为。DINA将反射和DCL调用附加到控制流图，并持续执行增量动态分析，以检测混淆恶意通信的反射和DCL的滥用。DINA利用字符串分析和过程间分析来解决隐藏的IAC，并实现卓越的检测性能。我们对49，000个现实世界应用的广泛评估证实了反射和DCL的普遍使用，并揭示了现实世界应用中以前未知和潜在有害的隐藏IAC行为。",
        "title_zh": "DINA:检测动态加载代码中隐藏的Android应用程序间通信",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tifs/tifs15.html",
        "conf_title": "IEEE Transactions on Information Forensics and Security, Volume 15",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TIFS.2019.2944034",
        "title": "MISSILE: A System of Mobile Inertial Sensor-Based Sensitive Indoor Location Eavesdropping",
        "authors": "Huadi Zheng, Haibo Hu",
        "abstract": "Privacy concerns on smartphones have been raised by the public as more and more personal data are now stored on them. In this paper, we show that location information can be compromised through mobile inertial sensors which are considered insensitive and accessible by any mobile application in both iOS and Android without special privilege. We present MISSILE, an automatic system that can infer users’ indoor location using labeled sensor data as prior knowledge. The key idea is that when a user reaches a particular indoor location, it is very likely that he/she has passed through some unique interior structures of a building, such as winding corridors, fire stop doors or elevators. These structures exhibit repeatable motion and environment patterns in mobile sensors that can be recognized by supervised learning. In our MISSILE system, the location labels of training data are automatically attained by Bluetooth beacons deployed in sensitive locations. With effective feature extraction procedure robust modeling, MISSILE shows good success rate for inference attack. For example, in a university campus with 15 sensitive locations, MISSILE achieves up to 73% correct prediction score whereas a random guess can only achieve 1/(15 + 1) = 6.25%. Further improvements on system performance and countermeasures are also discussed.",
        "files": {
            "openAccessPdf": "http://ira.lib.polyu.edu.hk/bitstream/10397/95581/1/Zheng_Missile_System_Mobile.pdf"
        },
        "abstract_zh": "随着越来越多的个人数据存储在智能手机上，公众对智能手机的隐私问题提出了担忧。在本文中，我们展示了位置信息可以通过移动惯性传感器泄露，这些传感器被认为是不敏感的，可以被iOS和Android中的任何移动应用程序在没有特殊权限的情况下访问。我们提出了MISSILE，这是一个自动系统，它可以使用标记的传感器数据作为先验知识来推断用户的室内位置。关键思想是，当用户到达特定的室内位置时，他/她很可能已经穿过了建筑物的一些独特的内部结构，例如蜿蜒的走廊、防火门或电梯。这些结构在移动传感器中表现出可重复的运动和环境模式，可以通过监督学习来识别。在我们的导弹系统中，训练数据的位置标签由部署在敏感位置的蓝牙信标自动获取。通过有效的特征提取过程鲁棒建模，导弹表现出良好的推理攻击成功率。例如，在一个有15个敏感位置的大学校园中，导弹达到73%的正确预测分数，而随机猜测只能达到1/(15 + 1) = 6.25%。还讨论了系统性能的进一步改进和对策。",
        "title_zh": "导弹:基于移动惯性传感器的敏感室内定位窃听系统",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tifs/tifs15.html",
        "conf_title": "IEEE Transactions on Information Forensics and Security, Volume 15",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TIFS.2019.2947861",
        "title": "Familial Clustering for Weakly-Labeled Android Malware Using Hybrid Representation Learning",
        "authors": "Yanxin Zhang, Yulei Sui, Shirui Pan, Zheng Zheng, Baodi Ning, Ivor W. Tsang, Wanlei Zhou",
        "abstract": "Labeling malware or malware clustering is important for identifying new security threats, triaging and building reference datasets. The state-of-the-art Android malware clustering approaches rely heavily on the raw labels from commercial AntiVirus (AV) vendors, which causes misclustering for a substantial number of weakly-labeled malware due to the inconsistent, incomplete and overly generic labels reported by these closed-source AV engines, whose capabilities vary greatly and whose internal mechanisms are opaque (i.e., intermediate detection results are unavailable for clustering). The raw labels are thus often used as the only important source of information for clustering. To address the limitations of the existing approaches, this paper presents Andre, a new ANDroid Hybrid REpresentation Learning approach to clustering weakly-labeled Android malware by preserving heterogeneous information from multiple sources (including the results of static code analysis, the meta-information of an app, and the raw-labels of the AV vendors) to jointly learn a hybrid representation for accurate clustering. The learned representation is then fed into our outlier-aware clustering to partition the weakly-labeled malware into known and unknown families. The malware whose malicious behaviours are close to those of the existing families on the network, are further classified using a three-layer Deep Neural Network (DNN). The unknown malware are clustered using a standard density-based clustering algorithm. We have evaluated our approach using 5,416 ground-truth malware from Drebin and 9,000 malware from VirusShare (uploaded between Mar. 2017 and Feb. 2018), consisting of 3324 weakly-labeled malware. The evaluation shows that Andre effectively clusters weakly-labeled malware which cannot be clustered by the state-of-the-art approaches, while achieving comparable accuracy with those approaches for clustering ground-truth samples.",
        "files": {
            "openAccessPdf": "https://opus.lib.uts.edu.au/bitstream/10453/136931/4/Binder1.pdf"
        },
        "abstract_zh": "标记恶意软件或恶意软件群集对于识别新的安全威胁、分类和构建参考数据集非常重要。现有技术的Android恶意软件聚类方法严重依赖于来自商业反病毒(AV)供应商的原始标签，由于这些闭源AV引擎报告的不一致、不完整和过于通用的标签，其能力变化很大并且其内部机制不透明(即，中间检测结果不可用于聚类)，这导致大量弱标签恶意软件的误聚类。因此，原始标签通常被用作聚类的唯一重要信息源。为了解决现有方法的局限性，本文提出了一种新的Android混合表示学习方法Andre，该方法通过保留来自多个来源的异构信息(包括静态代码分析的结果、应用程序的元信息和反病毒软件供应商的原始标签)来联合学习混合表示，从而对弱标记ANDroid恶意软件进行聚类。然后，将学习到的表示输入到我们的异常值感知聚类中，以将弱标记恶意软件划分为已知和未知家族。恶意行为接近网络上现有家族的恶意软件，使用三层深度神经网络(DNN)进一步分类。使用标准的基于密度的聚类算法对未知恶意软件进行聚类。我们使用来自Drebin的5，416个真实恶意软件和来自VirusShare的9，000个恶意软件(上传于2017年3月至2018年2月之间)评估了我们的方法，其中包括3324个弱标记恶意软件。评估表明，Andre有效地聚类了无法通过最先进的方法聚类的弱标记恶意软件，同时实现了与那些用于聚类真实样本的方法相当的准确性。",
        "title_zh": "基于混合表示学习的弱标记Android恶意软件家族聚类",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tifs/tifs15.html",
        "conf_title": "IEEE Transactions on Information Forensics and Security, Volume 15",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TIFS.2020.2975932",
        "title": "Android Malware Detection via (Somewhat) Robust Irreversible Feature Transformations",
        "authors": "Qian Han, V. S. Subrahmanian, Yanhai Xiong",
        "abstract": "As the most widely used OS on earth, Android is heavily targeted by malicious hackers. Though much work has been done on detecting Android malware, hackers are becoming increasingly adept at evading ML classifiers. We develop <inline-formula> <tex-math notation=\"LaTeX\">$\\textsf {FARM}$ </tex-math></inline-formula>, a Feature transformation based <underline>A</underline>nd<underline>R</underline>oid <underline>M</underline>alware detector. <inline-formula> <tex-math notation=\"LaTeX\">$\\textsf {FARM}$ </tex-math></inline-formula> takes well-known features for Android malware detection and introduces three new types of feature transformations that transform these features irreversibly into a new feature domain. We first test <inline-formula> <tex-math notation=\"LaTeX\">$\\textsf {FARM}$ </tex-math></inline-formula> on 6 Android classification problems separating goodware and “other malware” from 3 classes of malware: rooting malware, spyware, and banking trojans. We show that <inline-formula> <tex-math notation=\"LaTeX\">$\\textsf {FARM}$ </tex-math></inline-formula> beats standard baselines when no attacks occur. Though we cannot guess all possible attacks that an adversary might use, we propose three realistic attacks on <inline-formula> <tex-math notation=\"LaTeX\">$\\textsf {FARM}$ </tex-math></inline-formula> and show that <inline-formula> <tex-math notation=\"LaTeX\">$\\textsf {FARM}$ </tex-math></inline-formula> is very robust to these attacks in all classification problems. Additionally, <inline-formula> <tex-math notation=\"LaTeX\">$\\textsf {FARM}$ </tex-math></inline-formula> has automatically identified two malware samples which were not previously classified as rooting malware by any of the 61 anti-viruses on VirusTotal. These samples were reported to Google’s Android Security Team who subsequently confirmed our findings.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "作为地球上使用最广泛的操作系统，Android是恶意黑客的主要目标。虽然在检测Android恶意软件方面已经做了很多工作，但黑客们越来越擅长规避ML分类器。我们开发了< inline-formula > < tex-math notation = \" LaTeX \" > $ \\ textsf { FARM } $ </tex-math > </inline-formula >，这是一个基于特征变换的第二代恶意软件检测器。< inline-formula > < tex-math notation = \" LaTeX \" > $ \\ textsf { FARM } $ </tex-math > </inline-formula >采用众所周知的Android恶意软件检测功能，并引入了三种新的功能转换类型，将这些功能不可逆转地转换为新的功能域。我们首先在6个Android分类问题上测试< inline-formula > < tex-math notation = \" LaTeX \" > $ \\ textsf { FARM } $ </tex-math > </inline-formula >，将goodware和“其他恶意软件”从3类恶意软件中分离出来:根源恶意软件、间谍软件和银行特洛伊木马。我们发现，当没有攻击发生时，< inline-formula > < tex-math notation = \" LaTeX \" > $ \\ textsf { FARM } $ </tex-math > </inline-formula >胜过标准基线。虽然我们无法猜测对手可能使用的所有可能的攻击，但我们提出了对< inline-formula > < tex-math notation = \" LaTeX \" > $ \\ textsf { FARM } $ </tex-math > </inline-formula >的三种实际攻击，并表明< inline-formula > < tex-math notation = \" LaTeX \" > $ \\ textsf { FARM } $ </tex-math > </inline-formula >在所有分类问题中对这些攻击非常稳健。此外，< inline-formula > < tex-math notation = \" LaTeX \" > $ \\ textsf { FARM } $ </tex-math > </inline-formula >已经自动识别出两个恶意软件样本，这两个样本以前没有被VirusTotal上的61种反病毒软件中的任何一种归类为根源恶意软件。这些样本被报告给了谷歌的Android安全团队，他们随后证实了我们的发现。",
        "title_zh": "通过(某种程度上)强大的不可逆特征转换检测Android恶意软件",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tifs/tifs15.html",
        "conf_title": "IEEE Transactions on Information Forensics and Security, Volume 15",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TIFS.2020.3003571",
        "title": "Adversarial Deep Ensemble: Evasion Attacks and Defenses for Malware Detection",
        "authors": "Deqiang Li, Qianmu Li",
        "abstract": "Malware remains a big threat to cyber security, calling for machine learning based malware detection. While promising, such detectors are known to be vulnerable to evasion attacks. Ensemble learning typically facilitates countermeasures, while attackers can leverage this technique to improve attack effectiveness as well. This motivates us to investigate which kind of robustness the ensemble defense or effectiveness the ensemble attack can achieve, particularly when they combat with each other. We thus propose a new attack approach, named mixture of attacks, by rendering attackers capable of multiple generative methods and multiple manipulation sets, to perturb a malware example without ruining its malicious functionality. This naturally leads to a new instantiation of adversarial training, which is further geared to enhancing the ensemble of deep neural networks. We evaluate defenses using Android malware detectors against 26 different attacks upon two practical datasets. Experimental results show that the new adversarial training significantly enhances the robustness of deep neural networks against a wide range of attacks, ensemble methods promote the robustness when base classifiers are robust enough, and yet ensemble attacks can evade the enhanced malware detectors effectively, even notably downgrading the VirusTotal service.",
        "files": {
            "openAccessPdf": "http://arxiv.org/pdf/2006.16545"
        },
        "abstract_zh": "恶意软件仍然是网络安全的一大威胁，需要基于机器学习的恶意软件检测。虽然前景看好，但这种探测器容易受到规避攻击。集成学习通常有助于对抗，而攻击者也可以利用这种技术来提高攻击效率。这促使我们研究集合防御的鲁棒性或集合攻击的有效性，特别是当它们互相攻击时。因此，我们提出了一种新的攻击方法，称为混合攻击，通过使攻击者具有多种生成方法和多种操作集的能力，来扰乱恶意软件示例而不破坏其恶意功能。这自然会导致对抗性训练的新实例化，这进一步适合于增强深度神经网络的整体。我们使用Android恶意软件检测器在两个实际数据集上评估了对26种不同攻击的防御。实验结果表明，新的对抗训练显著增强了深度神经网络对各种攻击的鲁棒性，当基分类器足够鲁棒时，集成方法提高了鲁棒性，而集成攻击可以有效地规避增强的恶意软件检测器，甚至显著降低VirusTotal服务的性能。",
        "title_zh": "对抗性深度集成:恶意软件检测的规避攻击和防御",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tifs/tifs15.html",
        "conf_title": "IEEE Transactions on Information Forensics and Security, Volume 15",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TIFS.2020.3021924",
        "title": "Can We Trust Your Explanations? Sanity Checks for Interpreters in Android Malware Analysis",
        "authors": "Ming Fan, Wenying Wei, Xiaofei Xie, Yang Liu, Xiaohong Guan, Ting Liu",
        "abstract": "With the rapid growth of Android malware, many machine learning-based malware analysis approaches are proposed to mitigate the severe phenomenon. However, such classifiers are opaque, non-intuitive, and difficult for analysts to understand the inner decision reason. For this reason, a variety of explanation approaches are proposed to interpret predictions by providing important features. Unfortunately, the explanation results obtained in the malware analysis domain cannot achieve a consensus in general, which makes the analysts confused about whether they can trust such results. In this work, we propose principled guidelines to assess the quality of five explanation approaches by designing three critical quantitative metrics to measure their stability, robustness, and effectiveness. Furthermore, we collect five widely-used malware datasets and apply the explanation approaches on them in two tasks, including malware detection and familial identification. Based on the generated explanation results, we conduct a sanity check of such explanation approaches in terms of the three metrics. The results demonstrate that our metrics can assess the explanation approaches and help us obtain the knowledge of most typical malicious behaviors for malware analysis.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "随着Android恶意软件的快速增长，许多基于机器学习的恶意软件分析方法被提出来缓解这一严重现象。然而，这种分类器是不透明的、不直观的，并且分析师难以理解内在的决策原因。为此，人们提出了各种解释方法，通过提供重要的特征来解释预测。不幸的是，在恶意软件分析领域中获得的解释结果不能在总体上达成共识，这使得分析师对他们是否能够信任这样的结果感到困惑。在这项工作中，我们提出了原则性的指导方针，通过设计三个关键的量化指标来评估五种解释方法的质量，以衡量它们的稳定性，稳健性和有效性。此外，我们收集了五个广泛使用的恶意软件数据集，并将解释方法应用于两个任务中，包括恶意软件检测和家族识别。基于生成的解释结果，我们根据三个度量标准对这样的解释方法进行健全性检查。结果表明，我们的度量可以评估解释方法，并帮助我们获得恶意软件分析的最典型的恶意行为的知识。",
        "title_zh": "我们能相信你的解释吗？Android恶意软件分析中解释器的健全性检查",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tifs/tifs16.html",
        "conf_title": "IEEE Transactions on Information Forensics and Security, Volume 16",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TIFS.2020.3025436",
        "title": "A Performance-Sensitive Malware Detection System Using Deep Learning on Mobile Devices",
        "authors": "Ruitao Feng, Sen Chen, Xiaofei Xie, Guozhu Meng, Shang-Wei Lin, Yang Liu",
        "abstract": "Currently, Android malware detection is mostly performed on server side against the increasing number of malware. Powerful computing resource provides more exhaustive protection for app markets than maintaining detection by a single user. However, apart from the applications (apps) provided by the official market (i.e., Google Play Store), apps from unofficial markets and third-party resources are always causing serious security threats to end-users. Meanwhile, it is a time-consuming task if the app is downloaded first and then uploaded to the server side for detection, because the network transmission has a lot of overhead. In addition, the uploading process also suffers from the security threats of attackers. Consequently, a last line of defense on mobile devices is necessary and much-needed. In this paper, we propose an effective Android malware detection system, MobiTive, leveraging customized deep neural networks to provide a real-time and responsive detection environment on mobile devices. MobiTive is a pre-installed solution rather than an app scanning and monitoring engine using after installation, which is more practical and secure. Although a deep learning-based approach can be maintained on server side efficiently for malware detection, original deep learning models cannot be directly deployed and executed on mobile devices due to various performance limitations, such as computation power, memory size, and energy. Therefore, we evaluate and investigate the following key points: (1) the performance of different feature extraction methods based on source code or binary code; (2) the performance of different feature type selections for deep learning on mobile devices; (3) the detection accuracy of different deep neural networks on mobile devices; (4) the real-time detection performance and accuracy on different mobile devices; (5) the potential based on the evolution trend of mobile devices’ specifications; and finally we further propose a practical solution (MobiTive) to detect Android malware on mobile devices.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "目前，针对日益增多的恶意软件，Android恶意软件检测主要在服务器端进行。强大的计算资源为应用市场提供了比保持单个用户检测更全面的保护。然而，除了官方市场(即谷歌Play商店)提供的应用程序之外，来自非官方市场和第三方资源的应用程序总是对最终用户造成严重的安全威胁。同时，如果先下载app，再上传到服务器端进行检测，这是一项非常耗时的工作，因为网络传输有很大的开销。此外，上传过程还遭受攻击者的安全威胁。因此，移动设备上的最后一道防线是必要的，也是非常需要的。在本文中，我们提出了一个有效的Android恶意软件检测系统MobiTive，利用定制的深度神经网络在移动设备上提供实时和响应的检测环境。MobiTive是预装的解决方案而不是安装后使用的app扫描监控引擎，更加实用和安全。虽然基于深度学习的方法可以在服务器端有效地进行恶意软件检测，但是由于各种性能限制，例如计算能力、存储器大小和能量，原始的深度学习模型不能直接在移动设备上部署和执行。因此，我们评估和研究以下关键点:(1)基于源代码或二进制代码的不同特征提取方法的性能；(2)用于深度学习的不同特征类型选择在移动设备上的性能；(3)不同深度神经网络在移动设备上的检测精度；(4)在不同移动设备上的实时检测性能和准确性；(5)基于移动设备规范演进趋势的潜力；最后，我们进一步提出了一个实用的解决方案(MobiTive)来检测移动设备上的Android恶意软件。",
        "title_zh": "在移动设备上使用深度学习的性能敏感恶意软件检测系统",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tifs/tifs16.html",
        "conf_title": "IEEE Transactions on Information Forensics and Security, Volume 16",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TIFS.2020.3039685",
        "title": "Factory Calibration Fingerprinting of Sensors",
        "authors": "Jiexin Zhang, Alastair R. Beresford, Ian Sheret",
        "abstract": "Device fingerprinting aims to generate a distinctive signature, or fingerprint, that uniquely identifies individual computing devices. Fingerprints may be a privacy concern since apps and websites can use them to track user activity online. To protect user privacy, both Android and iOS have included a variety of measures to prevent such tracking. In this paper we present a new type of fingerprinting, factory calibration fingerprinting, that bypasses existing tracking protection. Our attack recovers embedded per-device factory calibration data from the accelerometer, gyroscope, and magnetometer sensors that are pervasive in modern smartphones by careful analysis of the sensor output alone. We discuss the factory calibration behaviour of each sensor and show that the calibration fingerprint is fast to generate, does not change over time or after a factory reset, and can be used to track users across apps and websites without any special permission from the user. We find the calibration fingerprint is very likely to be globally unique for iOS devices, with an estimated 67 bits of entropy for the iPhone 6S. In addition, we have analysed 146 Android device models from 11 vendors and found the attack also works on recent Google Pixel devices. For Pixel 4/4 XL, we estimate the calibration fingerprint provides about 57 bits of entropy. Following our disclosures, Apple deployed a mitigation in iOS 12.2 and Google in Android 11. We analyse Apple’s fix and show that the mitigation is imperfect although it is likely to be sufficient in most threat models.",
        "files": {
            "openAccessPdf": "https://www.repository.cam.ac.uk/bitstream/1810/312448/1/main.pdf"
        },
        "abstract_zh": "设备指纹旨在生成唯一标识各个计算设备的独特签名或指纹。指纹可能是一个隐私问题，因为应用程序和网站可以使用它们来跟踪用户的在线活动。为了保护用户隐私，Android和iOS都包含了各种措施来防止这种跟踪。在本文中，我们提出了一种新的指纹，工厂校准指纹，绕过现有的跟踪保护。我们的攻击通过仔细分析传感器输出，从现代智能手机中普遍存在的加速度计、陀螺仪和磁力计传感器中恢复嵌入式每设备工厂校准数据。我们讨论了每个传感器的工厂校准行为，并表明校准指纹可以快速生成，不会随时间推移或在工厂重置后发生变化，并且可以用于跨应用程序和网站跟踪用户，而无需用户的任何特殊许可。我们发现iOS设备的校准指纹很可能是全球唯一的，iPhone 6S的熵估计为67位。此外，我们分析了11家供应商的146款Android设备，发现这种攻击也适用于最近的谷歌Pixel设备。对于像素4/4 XL，我们估计校准指纹提供大约57比特的熵。根据我们的披露，苹果在iOS 12.2和谷歌在Android 11中部署了缓解措施。我们分析了苹果公司的修复，并表明，缓解是不完美的，尽管它可能是足够的大多数威胁模型。",
        "title_zh": "传感器的工厂校准指纹",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tifs/tifs16.html",
        "conf_title": "IEEE Transactions on Information Forensics and Security, Volume 16",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TIFS.2020.3044867",
        "title": "AppAngio: Revealing Contextual Information of Android App Behaviors by API-Level Audit Logs",
        "authors": "Zhaoyi Meng, Yan Xiong, Wenchao Huang, Fuyou Miao, Jianmeng Huang",
        "abstract": "Android users are now suffering severe threats from unwanted behaviors of various apps. The analysis of apps’ audit logs is one of the essential methods for the security analysts of various companies to unveil the underlying maliciousness within apps. We propose and implement AppAngio, a novel system that reveals contextual information in Android app behaviors by API-level audit logs. Our goal is to help security analysts understand how the target apps worked and facilitate the identification of the maliciousness within apps. The key module of AppAngio is identifying the path matched with the logs on the app’s control-flow graphs (CFGs). The challenge, however, is that the limited-quantity logs may incur high computational complexity in the log matching, where there are a large number of candidates caused by the coupling relation of successive logs. To address the challenge, we propose a divide and conquer strategy that precisely positions the nodes matched with log records on the corresponding CFGs and connects the nodes with as few backtracks as possible. Our experiments show that AppAngio reveals contextual information of behaviors in real-world apps. Moreover, the revealed results assist the analysts in identifying the maliciousness of app behaviors and complement existing analysis schemes. Meanwhile, AppAngio incurs negligible performance overhead on the real device in the experiments.",
        "files": {
            "openAccessPdf": "http://arxiv.org/pdf/1809.07036"
        },
        "abstract_zh": "Android用户现在正遭受各种应用程序有害行为的严重威胁。分析应用程序的审计日志是各个公司的安全分析师揭露应用程序内部潜在恶意的基本方法之一。我们提出并实现了AppAngio，这是一个新颖的系统，它通过API级审计日志来揭示Android应用程序行为中的上下文信息。我们的目标是帮助安全分析师了解目标应用程序是如何工作的，并帮助识别应用程序中的恶意行为。AppAngio的关键模块是识别与应用程序的控制流图(CFG)上的日志相匹配的路径。然而，挑战在于有限数量的日志可能导致日志匹配中的高计算复杂度，其中存在由连续日志的耦合关系引起的大量候选。为了解决这个问题，我们提出了一种分而治之的策略，在相应的CFG上精确定位与日志记录匹配的节点，并以尽可能少的回溯连接这些节点。我们的实验表明，AppAngio揭示了现实世界应用程序中行为的上下文信息。此外，揭示的结果有助于分析师识别应用程序行为的恶意性，并补充现有的分析方案。同时，在实验中，AppAngio对真实设备的性能开销可以忽略不计。",
        "title_zh": "AppAngio:通过API级审计日志揭示Android应用行为的上下文信息",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tifs/tifs16.html",
        "conf_title": "IEEE Transactions on Information Forensics and Security, Volume 16",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TIFS.2018.2855650",
        "title": "BridgeTaint: A Bi-Directional Dynamic Taint Tracking Method for JavaScript Bridges in Android Hybrid Applications",
        "authors": "Junyang Bai, Weiping Wang, Yan Qin, Shigeng Zhang, Jianxin Wang, Yi Pan",
        "abstract": "Hybrid applications (apps) are becoming more and more popular due to their cross-platform capabilities and high performance. These apps use the JavaScript (JS) bridge communication scheme to interoperate between native code and Web code. Although greatly extending the functionalities of hybrid apps by enabling cross-language invocations and making them more powerful, the bridge communication scheme might also cause some new security issues, e.g., cross-language code injection attacks and privacy leaks. In this paper, we propose BridgeTaint, a bi-directional dynamic taint tracking method that can detect bridge security issues in hybrid apps. BridgeTaint uses a method different from existing ones to track tainted data: it records the taint information of sensitive data when the data are transmitted through the bridge, and uses a cross-language taint mapping method to restore the taint tags of corresponding data. Such a novel design enables BridgeTaint to dynamically track tainted data during the execution of the app and analyze hybrid apps developed using frameworks, which cannot be done with existing solutions based on static code analyses. Based on BridgeTaint, we implement the BridgeInspector tool to detect cross-language privacy leaks and code injection attacks in hybrid apps using JS bridges. A benchmark called BridgeBench is also developed for bridge communication security test. The experimental results on BridgeBench and 1172 apps from Android market demonstrate that BridgeInspector can effectively detect potential privacy leaks and cross-language code injection attacks in hybrid apps using bridge communications.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "混合应用程序由于其跨平台能力和高性能而变得越来越流行。这些应用程序使用JavaScript (JS)桥接通信方案在本机代码和Web代码之间进行互操作。尽管通过启用跨语言调用并使其更加强大，极大地扩展了混合应用的功能，但桥接通信方案也可能导致一些新的安全问题，例如，跨语言代码注入攻击和隐私泄露。在本文中，我们提出了BridgeTaint，一种双向动态污点跟踪方法，可以检测混合应用程序中的桥安全问题。BridgeTaint使用了一种不同于现有的方法来跟踪被污染的数据:它记录数据通过桥传输时敏感数据的污点信息，并使用跨语言的污点映射方法来恢复相应数据的污点标签。这种新颖的设计使BridgeTaint能够在应用程序执行期间动态跟踪受污染的数据，并分析使用框架开发的混合应用程序，这是现有的基于静态代码分析的解决方案无法做到的。基于BridgeTaint，我们实现了BridgeInspector工具，以检测使用JS桥的混合应用程序中的跨语言隐私泄漏和代码注入攻击。还开发了一个名为BridgeBench的基准程序，用于桥接通信安全性测试。在BridgeBench和Android market的1172个应用上的实验结果表明，BridgeInspector可以有效地检测使用桥通信的混合应用中潜在的隐私泄露和跨语言代码注入攻击。",
        "title_zh": "BridgeTaint:一种用于Android混合应用中JavaScript桥的双向动态污点跟踪方法",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tifs/tifs14.html",
        "conf_title": "IEEE Transactions on Information Forensics and Security, Volume 14",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TIFS.2018.2866319",
        "title": "A Multimodal Deep Learning Method for Android Malware Detection Using Various Features",
        "authors": "TaeGuen Kim, BooJoong Kang, Mina Rho, Sakir Sezer, Eul Gyu Im",
        "abstract": "With the widespread use of smartphones, the number of malware has been increasing exponentially. Among smart devices, android devices are the most targeted devices by malware because of their high popularity. This paper proposes a novel framework for android malware detection. Our framework uses various kinds of features to reflect the properties of android applications from various aspects, and the features are refined using our existence-based or similarity-based feature extraction method for effective feature representation on malware detection. Besides, a multimodal deep learning method is proposed to be used as a malware detection model. This paper is the first study of the multimodal deep learning to be used in the android malware detection. With our detection model, it was possible to maximize the benefits of encompassing multiple feature types. To evaluate the performance, we carried out various experiments with a total of 41 260 samples. We compared the accuracy of our model with that of other deep neural network models. Furthermore, we evaluated our framework in various aspects including the efficiency in model updates, the usefulness of diverse features, and our feature representation method. In addition, we compared the performance of our framework with those of other existing methods including deep learning-based methods.",
        "files": {
            "openAccessPdf": "https://pureadmin.qub.ac.uk/ws/files/155947093/taegu_final_aceepted_trans_ifs.pdf"
        },
        "abstract_zh": "随着智能手机的广泛使用，恶意软件的数量呈指数级增长。在智能设备中，安卓设备由于受欢迎程度高，是最容易被恶意软件盯上的设备。提出了一种新的android恶意软件检测框架。我们的框架使用各种类型的特征来从各个方面反映android应用程序的属性，并且使用我们的基于存在性或基于相似性的特征提取方法来提炼特征，以便在恶意软件检测上进行有效的特征表示。此外，提出了一种多模态深度学习方法作为恶意软件检测模型。本文首次将多模态深度学习应用于android恶意软件检测。使用我们的检测模型，可以最大限度地发挥包含多种特征类型的优势。为了评估性能，我们对总共41 260个样本进行了各种实验。我们比较了我们的模型与其他深度神经网络模型的准确性。此外，我们在不同的方面评估了我们的框架，包括模型更新的效率，不同特征的有用性，以及我们的特征表示方法。此外，我们比较了我们的框架与其他现有方法(包括基于深度学习的方法)的性能。",
        "title_zh": "一种基于多种特征的多模态深度学习Android恶意软件检测方法",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tifs/tifs14.html",
        "conf_title": "IEEE Transactions on Information Forensics and Security, Volume 14",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TIFS.2018.2866347",
        "title": "NDroid: Toward Tracking Information Flows Across Multiple Android Contexts",
        "authors": "Lei Xue, Chenxiong Qian, Hao Zhou, Xiapu Luo, Yajin Zhou, Yuru Shao, Alvin T. S. Chan",
        "abstract": "For performance and compatibility reasons, developers tend to use native code in their applications (or simply apps). This makes a bidirectional data flow through multiple contexts, i.e., the Java context and the native context, in Android apps. Unfortunately, this interaction brings serious challenges to existing dynamic analysis systems, which fail to capture the data flow across different contexts. In this paper, we first performed a large-scale study on apps using native code and reported some observations. Then, we identified several scenarios where data flow cannot be tracked by existing systems, leading to uncaught information leakage. Based on these insights, we designed and implemented NDroid, an efficient dynamic taint analysis system that could track the data flow between both Java context and native context. The evaluation of real apps demonstrated the effectiveness of NDroid in identifying information leakage with reasonable performance overhead.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "出于性能和兼容性的原因，开发人员倾向于在他们的应用程序(或简称为应用程序)中使用本机代码。这使得在Android应用中双向数据流通过多个上下文，即Java上下文和本地上下文。不幸的是，这种交互给现有的动态分析系统带来了严重的挑战，因为它们无法捕获跨不同上下文的数据流。在本文中，我们首先对使用本机代码的应用进行了大规模研究，并报告了一些观察结果。然后，我们确定了现有系统无法跟踪数据流的几种情况，这会导致无法捕获的信息泄漏。基于这些认识，我们设计并实现了一个有效的动态污点分析系统NDroid，它可以跟踪Java上下文和本地上下文之间的数据流。对真实应用的评估证明了NDroid在合理的性能开销下识别信息泄漏的有效性。",
        "title_zh": "NDroid:追踪跨多个Android环境的信息流",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tifs/tifs14.html",
        "conf_title": "IEEE Transactions on Information Forensics and Security, Volume 14",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TIFS.2018.2868221",
        "title": "MEG: Memory and Energy Efficient Garbled Circuit Evaluation on Smartphones",
        "authors": "Qing Yang, Ge Peng, Paolo Gasti, Kiran S. Balagani, Yantao Li, Gang Zhou",
        "abstract": "Garbled circuits are general tools that allow two parties to compute any function without disclosing their respective inputs. Applications of this technique vary from distributed privacy-preserving machine learning tasks to secure outsourced authentication. Unfortunately, the energy cost of garbled circuit evaluation protocols is substantial. This limits the applicability of garbled circuits in scenarios that involve battery-operated devices, such as Internet-of-Things (IoT) devices and smartphones. In this paper, we propose MEG, a Memory- and Energy-efficient Garbled circuit evaluation mechanism. MEG utilizes batch data transmission and multi-threading to reduce memory and energy consumption. We implement MEG on an Android smartphone and compare its performance and energy consumption with state-of-the-art techniques using two garbled circuits of widely different sizes (AES-128 and 256-bit edit distance). Our results show that, compared with “plain” garbled circuit evaluation, MEG decreases memory consumption by more than 90%. When compared with current pipelined garbled circuit evaluation techniques, MEG’s energy usage was 42% lower for AES-128 and 23% lower for EDT-256. Furthermore, our multi-thread implementation of MEG decreased circuit evaluation time by up to 56.7% for AES-128, and by up to 13.5% for EDT-256, compared with state-of-the-art pipelining techniques.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "乱码电路是一种通用工具，允许双方在不公开各自输入的情况下计算任何函数。这种技术的应用范围很广，从分布式隐私保护机器学习任务到安全外包认证。不幸的是，混乱的电路评估协议的能量成本是巨大的。这限制了乱码电路在涉及电池供电设备(如物联网(IoT)设备和智能手机)的场景中的适用性。在这篇论文中，我们提出了MEG，一种节省内存和能量的乱码电路评估机制。MEG利用批量数据传输和多线程来减少内存和能耗。我们在一台Android智能手机上实现了MEG，并使用两种大小差异很大的乱码电路(AES-128和256位编辑距离)将其性能和能耗与最先进的技术进行了比较。我们的结果表明，与“简单的”乱码电路评估相比，MEG减少了90%以上的内存消耗。与当前的流水线乱码电路评估技术相比，AES-128的MEG能耗低42 %, EDT-256的能耗低23%。此外，与最先进的流水线技术相比，我们的MEG多线程实施将AES-128的电路评估时间缩短了56.7%，将EDT-256的电路评估时间缩短了13.5%。",
        "title_zh": "MEG:智能手机上的内存和节能乱码电路评估",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tifs/tifs14.html",
        "conf_title": "IEEE Transactions on Information Forensics and Security, Volume 14",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TIFS.2018.2879302",
        "title": "DroidCat: Effective Android Malware Detection and Categorization via App-Level Profiling",
        "authors": "Haipeng Cai, Na Meng, Barbara G. Ryder, Danfeng Yao",
        "abstract": "Most existing Android malware detection and categorization techniques are static approaches, which suffer from evasion attacks, such as obfuscation. By analyzing program behaviors, dynamic approaches are potentially more resilient against these attacks. Yet existing dynamic approaches mostly rely on characterizing system calls which are subject to system-call obfuscation. This paper presents DroidCat, a novel dynamic app classification technique, to complement existing approaches. By using a diverse set of dynamic features based on method calls and inter-component communication (ICC) Intents without involving permission, app resources, or system calls while fully handling reflection, DroidCat achieves superior robustness than static approaches as well as dynamic approaches relying on system calls. The features were distilled from a behavioral characterization study of benign versus malicious apps. Through three complementary evaluation studies with 34 343 apps from various sources and spanning the past nine years, we demonstrated the stability of DroidCat in achieving high classification performance and superior accuracy compared with the two state-of-the-art peer techniques that represent both static and dynamic approaches. Overall, DroidCat achieved 97% F1-measure accuracy consistently for classifying apps evolving over the nine years, detecting or categorizing malware, 16%–27% higher than any of the two baselines compared. Furthermore, our experiments with obfuscated benchmarks confirmed higher robustness of DroidCat over these baseline techniques. We also investigated the effects of various design decisions on DroidCat’s effectiveness and the most important features for our dynamic classification. We found that features capturing app execution structure such as the distribution of method calls over user code and libraries are much more important than typical security features such as sensitive flows.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "现有的Android恶意软件检测和分类技术大多是静态方法，容易遭受混淆等规避攻击。通过分析程序行为，动态方法可能对这些攻击更有弹性。然而，现有的动态方法主要依赖于表征易受系统调用混淆影响的系统调用。本文介绍了DroidCat，一种新的动态应用程序分类技术，以补充现有的方法。通过使用基于方法调用和组件间通信(ICC)意图的一组不同的动态功能，而不涉及权限、应用程序资源或系统调用，同时完全处理反射，DroidCat实现了比静态方法以及依赖于系统调用的动态方法更好的健壮性。这些特征是从良性和恶意应用程序的行为特征研究中提炼出来的。通过对来自不同来源的34 343个应用程序进行的三项补充评估研究，我们证明了DroidCat在实现高分类性能和卓越准确性方面的稳定性，与代表静态和动态方法的两种最先进的同行技术相比。总体而言，DroidCat在对九年来不断发展的应用程序进行分类、检测或分类恶意软件时，实现了97%的F1测量准确性，比两个比较基准高出16%–27%。此外，我们对模糊基准的实验证实了DroidCat比这些基准技术具有更高的健壮性。我们还研究了各种设计决策对DroidCat有效性的影响以及我们动态分类的最重要特征。我们发现，捕捉应用程序执行结构的特性(如方法调用在用户代码和库中的分布)比敏感流等典型的安全特性重要得多。",
        "title_zh": "DroidCat:通过应用程序级配置文件进行有效的Android恶意软件检测和分类",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tifs/tifs14.html",
        "conf_title": "IEEE Transactions on Information Forensics and Security, Volume 14",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TIFS.2018.2883027",
        "title": "Hardware-Assisted Transparent Tracing and Debugging on ARM",
        "authors": "Zhenyu Ning, Fengwei Zhang",
        "abstract": "The existing malware analysis platforms leave detectable fingerprints such as uncommon string properties in QEMU, signatures in Android Java virtual machine, and artifacts in Linux kernel profiles. Since these fingerprints provide the malware a chance to split its behavior depending on whether the analysis system is present or not, the existing analysis systems are not sufficient to analyze the sophisticated malware. In this paper, we propose NINJA, a transparent malware analysis framework on the ARM platform with low artifacts. NINJA leverages a hardware-assisted isolated execution environment TrustZone to transparently trace and debug a target application with the help of performance monitor unit and embedded trace macrocell. These hardware features help NINJA to achieve transparency while avoiding heavy performance overhead. NINJA does not modify system software and is OS-agnostic on the ARM platform. We implement a prototype of NINJA (i.e., tracing and debugging subsystems), and the experimental results show that NINJA is efficient and transparent for malware analysis. An improved fast system restoration mechanism is also designed to facilitate the continuous malware analysis.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "现有的恶意软件分析平台会留下可检测的指纹，例如QEMU中不常见的字符串属性、Android Java虚拟机中的签名以及Linux内核配置文件中的工件。由于这些指纹为恶意软件提供了根据分析系统是否存在来分割其行为的机会，所以现有的分析系统不足以分析复杂的恶意软件。本文提出了NINJA，一个基于ARM平台的透明恶意软件分析框架，具有低伪像。NINJA利用硬件辅助的隔离执行环境TrustZone，在性能监控单元和嵌入式跟踪宏单元的帮助下，透明地跟踪和调试目标应用程序。这些硬件特性有助于NINJA实现透明性，同时避免沉重的性能开销。NINJA不修改系统软件，在ARM平台上与操作系统无关。我们实现了一个NINJA原型(即跟踪和调试子系统)，实验结果表明NINJA对于恶意软件分析是高效和透明的。还设计了一种改进的快速系统恢复机制，以便于持续的恶意软件分析。",
        "title_zh": "ARM上硬件辅助的透明跟踪和调试",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tifs/tifs14.html",
        "conf_title": "IEEE Transactions on Information Forensics and Security, Volume 14",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TIFS.2018.2889924",
        "title": "Securing Android App Markets via Modeling and Predicting Malware Spread Between Markets",
        "authors": "Guozhu Meng, Matthew Patrick, Yinxing Xue, Yang Liu, Jie Zhang",
        "abstract": "The Android ecosystem has recently dominated mobile devices. Android app markets, including official Google Play and other third party markets, are becoming hotbeds, where malware originates and spreads. Android malware has been observed to both propagate within markets and spread between markets. If the spread of Android malware between markets can be predicted, market administrators can take appropriate measures to prevent the outbreak of malware and minimize the damages caused by malware. In this paper, we make the first attempt to protect the Android ecosystem by modeling and predicting the spread of Android malware between markets. To this end, we study the social behaviors that affect the spread of malware, model these spread behaviors with multiple epidemic models, and predict the infection time and order among markets for well-known malware families. To achieve an accurate prediction of malware spread, we model spread behaviors in the following fashion: 1) for a single market, we model the within-market malware growth by considering both the creation and removal of malware; 2) for multiple markets, we determine market relevance by calculating the mutual information among them; and 3) based on the previous two steps, we simulate a susceptible infected model stochastically for spread among markets. The model inference is performed using a publicly available well-labeled dataset AndRadar. To conduct extensive experiments to evaluate our approach, we collected a large number (334,782) of malware samples from 25 Android markets around the world. The experimental results show our approach can depict and simulate the growth of Android malware on a large scale, and predict the infection time and order among markets with 0.89 and 0.66 precision, respectively.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android生态系统最近主宰了移动设备。Android应用市场，包括官方Google Play和其他第三方市场，正在成为恶意软件产生和传播的温床。据观察，Android恶意软件既在市场内传播，也在市场间传播。如果可以预测Android恶意软件在市场之间的传播，市场管理员可以采取适当的措施来防止恶意软件的爆发，并将恶意软件造成的损失降至最低。在本文中，我们首次尝试通过建模和预测Android恶意软件在市场之间的传播来保护Android生态系统。为此，我们研究影响恶意软件传播的社会行为，用多种流行病模型对这些传播行为进行建模，并对知名恶意软件家族预测市场间的感染时间和顺序。为了实现对恶意软件传播的准确预测，我们以下列方式对传播行为进行建模:1)对于单个市场，我们通过考虑恶意软件的创建和移除来对市场内恶意软件的增长进行建模；2)对于多个市场，我们通过计算它们之间的互信息来确定市场相关性；3)在前两步的基础上，我们随机地模拟了一个易受感染的市场传播模型。使用公开可用的良好标记的数据集AndRadar来执行模型推断。为了进行广泛的实验来评估我们的方法，我们从全球25个Android市场收集了大量(334，782)恶意软件样本。实验结果表明，该方法能够描述和模拟Android恶意软件的大规模增长，预测感染时间和市场排序的精度分别为0.89和0.66。",
        "title_zh": "通过建模和预测恶意软件在市场间的传播来保护Android应用市场",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tifs/tifs14.html",
        "conf_title": "IEEE Transactions on Information Forensics and Security, Volume 14",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TIFS.2019.2901798",
        "title": "Reducing Security Risks of Suspicious Data and Codes Through a Novel Dynamic Defense Model",
        "authors": "Zezhi Wu, Xingyuan Chen, Zhi Yang, Xuehui Du",
        "abstract": "A remarkable characteristic of the modern operating system is open, which means that we can download data or execute codes from any Internet sources whether they are trusted or not. Therefore, there is a contradict situation when we want to use these data or codes as well as keep the system secured. Despite decades of studies and experiences on this problem, it is still assumed as a great challenge. This paper presents a novel dynamic defense model (DDM) to reduce security risks brought by these suspicious data or codes for the open operating systems. DDM is a high-level security defense abstraction with four key components: dynamic label marking, dynamic label tracking, dynamic label modulating, and run-time controlling. With these components, DDM achieves the full, dynamic, and real-time security protection in the whole life cycle of the operating system. We also practically implemented a prototype system named DDDroid on Android. We constructed a mixed experimental dataset with 30 malware samples and 970 benign applications to test the defense effects of DDDroid. DDDroid detects 97% of the malware samples that have malicious actions and blocks these actions with a negligible false positive on legal actions. We also demonstrated that DDDroid is an effective system, which prevents sensitive data from being leaked by suspicious applications deliberately or by users unintentionally through some sample experiments. What is more, with extensive evaluations, DDDroid is proved to be a system with low-performance overhead and limited memory consumption.",
        "files": {
            "openAccessPdf": "https://ieeexplore.ieee.org/ielx7/10206/8721625/08653314.pdf"
        },
        "abstract_zh": "现代操作系统的一个显著特征是开放的，这意味着我们可以从任何互联网来源下载数据或执行代码，不管它们是否可信。因此，当我们既要使用这些数据或代码，又要保证系统的安全时，就会出现矛盾的情况。尽管在这个问题上有几十年的研究和经验，它仍然被认为是一个巨大的挑战。本文提出了一种新的动态防御模型(DDM)来降低这些可疑数据或代码给开放操作系统带来的安全风险。DDM是一个高级安全防御抽象，有四个关键组件:动态标签标记、动态标签跟踪、动态标签调制和运行时控制。通过这些组件，DDM在操作系统的整个生命周期中实现了全面、动态和实时的安全保护。我们还在Android上实际实现了一个名为DDDroid的原型系统。我们用30个恶意软件样本和970个良性应用程序构建了一个混合实验数据集来测试DDDroid的防御效果。DDDroid检测到97%的恶意软件样本具有恶意操作，并阻止这些操作，对合法操作的误报可以忽略不计。我们还通过一些样本实验证明了DDDroid是一个有效的系统，它可以防止敏感数据被可疑应用程序有意或无意地泄露。更重要的是，通过广泛的评估，DDDroid被证明是一个低性能开销和有限内存消耗的系统。",
        "title_zh": "通过新的动态防御模型降低可疑数据和代码的安全风险",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tifs/tifs14.html",
        "conf_title": "IEEE Transactions on Information Forensics and Security, Volume 14",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TIFS.2016.2639339",
        "title": "Toward Automatically Generating Privacy Policy for Android Apps",
        "authors": "Le Yu, Tao Zhang, Xiapu Luo, Lei Xue, Henry Chang",
        "abstract": "A privacy policy is a statement informing users how their information will be collected, used, and disclosed. Failing to provide a correct privacy policy may result in a fine. However, writing privacy policy is tedious and error-prone, because the author may not understand the source code well as it could have been written by others (e.g., outsourcing), or the author does not know the internal working of third-party libraries used. In this paper, we propose and develop a novel system named AutoPPG to automatically construct correct and readable descriptions to facilitate the generation of privacy policy for Android applications (i.e., apps). Given an app, AutoPPG first conducts static code analysis to characterize its behaviors related to users’ personal information, and then applies natural language processing techniques to generating correct and accessible sentences for describing these behaviors. The experimental results using real apps and crowdsourcing indicate that: 1) AutoPPG creates correct and easy-to-understand descriptions for privacy policies; 2) the privacy policies constructed by AutoPPG usually reveal more operations related to users’ personal information than existing privacy policies; and 3) most developers, who reply us, would like to use AutoPPG to facilitate them.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "隐私政策是告知用户他们的信息将如何被收集、使用和披露的声明。未能提供正确的隐私政策可能会导致罚款。然而，编写隐私策略是乏味且容易出错的，因为作者可能不理解源代码，因为它可能是由他人编写的(例如，外包)，或者作者不知道所使用的第三方库的内部工作方式。在本文中，我们提出并开发了一个名为AutoPPG的新系统，用于自动构造正确可读的描述，以便于为Android应用程序(即应用程序)生成隐私策略。给定一个app，AutoPPG首先进行静态代码分析，以表征其与用户个人信息相关的行为，然后应用自然语言处理技术，生成描述这些行为的正确且可理解的句子。使用真实应用和众包的实验结果表明:1) AutoPPG为隐私策略创建了正确且易于理解的描述；AutoPPG构建的隐私策略通常会比现有的隐私策略透露更多与用户个人信息相关的操作；以及3)回复我们的大部分开发者，都愿意使用AutoPPG来方便他们。",
        "title_zh": "面向自动生成Android应用的隐私策略",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tifs/tifs12.html",
        "conf_title": "IEEE Transactions on Information Forensics and Security, Volume 12",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TIFS.2016.2620278",
        "title": "SMASheD: Sniffing and Manipulating Android Sensor Data for Offensive Purposes",
        "authors": "Manar Mohamed, Babins Shrestha, Nitesh Saxena",
        "abstract": "The current Android sensor security model either allows only restrictive read access to sensitive sensors (e.g., an app can only read its own touch data) or requires special install-time permissions (e.g., to read microphone, camera, or GPS). Moreover, Android does not allow write access to any of the sensors. Sensing-based security and non-security applications, therefore, crucially rely upon the sanity of the Android sensor security model. In this paper, we show that such a model can be effectively circumvented. Specifically, we build SMASheD, a legitimate framework under the current Android ecosystem that can be used to stealthily sniff as well as manipulate many of the Android’s restricted sensors (even touch input). SMASheD exploits the Android debug bridge functionality and enables a malicious app with only the INTERNET permission to read, and write to, multiple different sensor data files at will. SMASheD is the first framework, to the best of our knowledge, that can sniff and manipulate protected sensors on unrooted Android devices, without user awareness, without constant device-PC connection and without the need to infect the PC. The primary contributions of this paper are twofold. First, we design and develop the SMASheD framework, and evaluate its effectiveness on multiple Android devices, including phones, watches, and glasses. Second, as an offensive implication of the SMASheD framework, we introduce a wide array of potentially devastating attacks. Our attacks against the touch sensor range from accurately logging the touchscreen input (TouchLogger) to injecting touch events for accessing restricted sensors and resources, installing and granting special permissions to other malicious apps, accessing user accounts, and authenticating on behalf of the user—essentially almost doing whatever the device user can do (secretively). Our attacks against various physical sensors (motion, position, and environmental) can subvert the functionality provided by numerous existing sensing-based security and non-security applications, including those used for (continuous) authentication, authorization, safety, and elderly care.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "当前的Android传感器安全模型要么只允许对敏感传感器进行限制性读取访问(例如，应用程序只能读取自己的触摸数据)，要么需要特殊的安装时权限(例如，读取麦克风、摄像头或GPS)。此外，Android不允许对任何传感器进行写访问。因此，基于传感的安全和非安全应用非常依赖于Android传感器安全模型的健全性。在本文中，我们表明，这样的模型可以有效地规避。具体来说，我们构建了SMASheD，这是当前Android生态系统下的一个合法框架，可以用来偷偷嗅嗅以及操纵Android的许多受限传感器(甚至是触摸输入)。SMASheD利用了Android debug bridge功能，使只有互联网权限的恶意应用程序能够随意读取和写入多个不同的传感器数据文件。据我们所知，SMASheD是第一个框架，它可以在没有根的Android设备上嗅探和操纵受保护的传感器，而无需用户意识，无需持续的设备-PC连接，也无需感染PC。本文的主要贡献有两个方面。首先，我们设计和开发了SMASheD框架，并评估了它在多种Android设备上的有效性，包括手机、手表和眼镜。其次，作为SMASheD框架的攻击性暗示，我们引入了一系列潜在的破坏性攻击。我们对触摸传感器的攻击范围广泛，从准确记录触摸屏输入(TouchLogger)到注入触摸事件以访问受限制的传感器和资源，安装和授予其他恶意应用程序的特殊权限，访问用户帐户，以及代表用户进行身份验证——基本上几乎做了设备用户可以做的任何事情(秘密地)。我们针对各种物理传感器(运动、位置和环境)的攻击可能会破坏许多现有的基于传感的安全和非安全应用程序所提供的功能，包括用于(持续)身份验证、授权、安全和老年人护理的应用程序。",
        "title_zh": "粉碎:嗅探和操纵Android传感器数据用于攻击目的",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tifs/tifs12.html",
        "conf_title": "IEEE Transactions on Information Forensics and Security, Volume 12",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TIFS.2016.2646641",
        "title": "Monet: A User-Oriented Behavior-Based Malware Variants Detection System for Android",
        "authors": "Mingshen Sun, Xiaolei Li, John C. S. Lui, Richard T. B. Ma, Zhenkai Liang",
        "abstract": "Android, the most popular mobile OS, has around 78% of the mobile market share. Due to its popularity, it attracts many malware attacks. In fact, people have discovered around 1 million new malware samples per quarter, and it was reported that over 98% of these new malware samples are in fact “derivatives” (or variants) from existing malware families. In this paper, we first show that runtime behaviors of malware’s core functionalities are in fact similar within a malware family. Hence, we propose a framework to combine “runtime behavior” with “static structures” to detect malware variants. We present the design and implementation of Monet, which has a client and a backend server module. The client module is a lightweight, in-device app for behavior monitoring and signature generation, and we realize this using two novel interception techniques. The backend server is responsible for large scale malware detection. We collect 3723 malware samples and top 500 benign apps to carry out extensive experiments of detecting malware variants and defending against malware transformation. Our experiments show that Monet can achieve around 99% accuracy in detecting malware variants. Furthermore, it can defend against ten different obfuscation and transformation techniques, while only incurs around 7% performance overhead and about 3% battery overhead. More importantly, Monet will automatically alert users with intrusion details so to prevent further malicious behaviors.",
        "files": {
            "openAccessPdf": "http://arxiv.org/pdf/1612.03312"
        },
        "abstract_zh": "最受欢迎的移动操作系统Android拥有大约78%的移动市场份额。由于它的流行，它吸引了许多恶意软件的攻击。事实上，人们每个季度都会发现大约100万个新的恶意软件样本，据报道，这些新的恶意软件样本中有超过98%实际上是现有恶意软件家族的“衍生物”(或变体)。在本文中，我们首先展示了恶意软件核心功能的运行时行为在一个恶意软件家族中实际上是相似的。因此，我们提出了一个结合“运行时行为”和“静态结构”来检测恶意软件变种的框架。我们介绍了Monet的设计和实现，它有一个客户端和一个后端服务器模块。客户端模块是一个轻量级的设备内应用程序，用于行为监控和签名生成，我们使用两种新颖的拦截技术来实现这一点。后端服务器负责大规模恶意软件检测。我们收集了3723个恶意软件样本和前500个良性应用程序，以进行检测恶意软件变体和防御恶意软件转化的广泛实验。我们的实验表明，Monet在检测恶意软件变体方面可以达到大约99%的准确率。此外，它可以抵御10种不同的混淆和转换技术，而只产生大约7%的性能开销和大约3%的电池开销。更重要的是，Monet会自动提醒用户入侵细节，以防止进一步的恶意行为。",
        "title_zh": "Monet:面向用户的基于行为的Android恶意软件变种检测系统",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tifs/tifs12.html",
        "conf_title": "IEEE Transactions on Information Forensics and Security, Volume 12",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TIFS.2017.2656460",
        "title": "Understanding Android App Piggybacking: A Systematic Study of Malicious Code Grafting",
        "authors": "Li Li, Daoyuan Li, Tegawendé F. Bissyandé, Jacques Klein, Yves Le Traon, David Lo, Lorenzo Cavallaro",
        "abstract": "The Android packaging model offers ample opportunities for malware writers to piggyback malicious code in popular apps, which can then be easily spread to a large user base. Although recent research has produced approaches and tools to identify piggybacked apps, the literature lacks a comprehensive investigation into such phenomenon. We fill this gap by: 1) systematically building a large set of piggybacked and benign apps pairs, which we release to the community; 2) empirically studying the characteristics of malicious piggybacked apps in comparison with their benign counterparts; and 3) providing insights on piggybacking processes. Among several findings providing insights analysis techniques should build upon to improve the overall detection and classification accuracy of piggybacked apps, we show that piggybacking operations not only concern app code, but also extensively manipulates app resource files, largely contradicting common beliefs. We also find that piggybacking is done with little sophistication, in many cases automatically, and often via library code.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android打包模型为恶意软件编写者提供了大量的机会，让他们在流行的应用程序中搭载恶意代码，然后这些代码可以很容易地传播到大量的用户群。虽然最近的研究产生了识别搭载应用的方法和工具，但文献缺乏对这种现象的全面调查。我们通过以下方式填补这一空白:1)系统地构建一个大型的搭载和良性应用程序对，我们向社区发布这些应用程序对；2)实证研究恶意搭载应用的特征，并与良性对应应用进行比较；以及3)提供关于搭载过程的见解。一些发现提供了分析技术应该建立的见解，以提高捎带应用程序的整体检测和分类准确性，我们表明捎带操作不仅涉及应用程序代码，还广泛地操纵应用程序资源文件，这在很大程度上与常见观点相矛盾。我们还发现，捎带并不复杂，在许多情况下是自动完成的，而且通常是通过库代码。",
        "title_zh": "理解Android应用程序捎带:恶意代码移植的系统研究",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tifs/tifs12.html",
        "conf_title": "IEEE Transactions on Information Forensics and Security, Volume 12",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TIFS.2017.2661723",
        "title": "Auditing Anti-Malware Tools by Evolving Android Malware and Dynamic Loading Technique",
        "authors": "Yinxing Xue, Guozhu Meng, Yang Liu, Tian Huat Tan, Hongxu Chen, Jun Sun, Jie Zhang",
        "abstract": "Although a previous paper shows that existing anti-malware tools (AMTs) may have high detection rate, the report is based on existing malware and thus it does not imply that AMTs can effectively deal with future malware. It is desirable to have an alternative way of auditing AMTs. In our previous paper, we use malware samples from android malware collection Genome to summarize a malware meta-model for modularizing the common attack behaviors and evasion techniques in reusable features. We then combine different features with an evolutionary algorithm, in which way we evolve malware for variants. Previous results have shown that the existing AMTs only exhibit detection rate of 20%–30% for 10 000 evolved malware variants. In this paper, based on the modularized attack features, we apply the dynamic code generation and loading techniques to produce malware, so that we can audit the AMTs at runtime. We implement our approach, named Mystique-S, as a service-oriented malware generation system. Mystique-S automatically selects attack features under various user scenarios and delivers the corresponding malicious payloads at runtime. Relying on dynamic code binding (via service) and loading (via reflection) techniques, Mystique-S enables dynamic execution of payloads on user devices at runtime. Experimental results on real-world devices show that existing AMTs are incapable of detecting most of our generated malware. Last, we propose the enhancements for existing AMTs.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "虽然之前的一篇论文显示现有的反恶意软件工具(AMT)可能具有高检测率，但该报告是基于现有的恶意软件，因此并不意味着AMT可以有效地应对未来的恶意软件。希望有一种审计AMT的替代方法。在我们之前的论文中，我们使用android恶意软件集合基因组中的恶意软件样本总结了一个恶意软件元模型，用于模块化可重用特征中的常见攻击行为和规避技术。然后，我们将不同的特征与进化算法相结合，通过这种方式，我们进化出恶意软件的变体。先前的结果表明，现有的AMT对10 000种进化的恶意软件变种仅表现出20%-30%的检测率。本文基于模块化的攻击特征，采用动态代码生成和加载技术来产生恶意软件，从而在运行时对AMTs进行审计。我们实现了我们的方法，命名为Mystique-S，作为一个面向服务的恶意软件生成系统。Mystique-S在各种用户场景下自动选择攻击特征，并在运行时交付相应的恶意有效载荷。依靠动态代码绑定(通过服务)和加载(通过反射)技术，Mystique-S能够在运行时在用户设备上动态执行有效负载。真实设备上的实验结果表明，现有的AMT无法检测我们生成的大多数恶意软件。最后，我们提出了对现有AMT的改进。",
        "title_zh": "通过进化Android恶意软件和动态加载技术审计反恶意软件工具",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tifs/tifs12.html",
        "conf_title": "IEEE Transactions on Information Forensics and Security, Volume 12",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TIFS.2017.2687880",
        "title": "DAPASA: Detecting Android Piggybacked Apps Through Sensitive Subgraph Analysis",
        "authors": "Ming Fan, Jun Liu, Wei Wang, Haifei Li, Zhenzhou Tian, Ting Liu",
        "abstract": "With the exponential growth of smartphone adoption, malware attacks on smartphones have resulted in serious threats to users, especially those on popular platforms, such as Android. Most Android malware is generated by piggybacking malicious payloads into benign applications (apps), which are called piggybacked apps. In this paper, we propose DAPASA, an approach to detect Android piggybacked apps through sensitive subgraph analysis. Two assumptions are established to reflect the different invocation patterns of sensitive APIs in the injected malicious payloads (rider) of a piggybacked app and in its host app (carrier). With these two assumptions, DAPASA generates a sensitive subgraph (SSG) to profile the most suspicious behavior of an app. Five features are constructed from SSG to depict the invocation patterns. The five features are fed into the machine learning algorithms to detect whether the app is piggybacked or benign. DAPASA is evaluated on a large real-world data set consisting of 2551 piggybacked apps and 44 921 popular benign apps. Extensive evaluation results demonstrate that the proposed approach exhibits an impressive detection performance compared with that of three baseline approaches even with only five numeric features. Furthermore, the proposed approach can complement permission-based approaches and API-based approaches with the combination of our five features from a new perspective of the invocation structure.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "随着智能手机采用率的指数级增长，智能手机上的恶意软件攻击对用户造成了严重威胁，尤其是那些在流行平台上的用户，如Android。大多数Android恶意软件是通过将恶意有效载荷搭载到良性应用程序(应用程序)中生成的，这些应用程序被称为搭载应用程序。在本文中，我们提出了DAPASA，一种通过敏感子图分析来检测Android搭载应用的方法。建立了两个假设，以反映搭载应用程序的注入恶意负载(rider)和其宿主应用程序(carrier)中敏感API的不同调用模式。根据这两个假设，DAPASA生成了一个敏感子图(SSG ),以描述应用程序最可疑的行为。从SSG构造了五个特征来描述调用模式。这五个特征被输入到机器学习算法中，以检测应用程序是被盗用还是良性的。DAPASA在由2551个搭载应用和44 921个流行良性应用组成的大型真实世界数据集上进行评估。大量的评估结果表明，与三种基线方法相比，即使只有五个数字特征，所提出的方法也表现出令人印象深刻的检测性能。此外，从调用结构的新角度来看，所提出的方法可以用我们的五个特征的组合来补充基于许可的方法和基于API的方法。",
        "title_zh": "DAPASA:通过敏感子图分析检测Android搭载应用",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tifs/tifs12.html",
        "conf_title": "IEEE Transactions on Information Forensics and Security, Volume 12",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TIFS.2017.2737969",
        "title": "Performance Analysis of Multi-Motion Sensor Behavior for Active Smartphone Authentication",
        "authors": "Chao Shen, Yuanxun Li, Yufei Chen, Xiaohong Guan, Roy A. Maxion",
        "abstract": "The increasing use of smartphones as personal computing platforms to access personal information has stressed the demand for secure and usable authentication techniques, and for constantly protecting privacy. Smartphone sensors can measure users’ unique behavioral characteristics when they interact with smartphones, based on different habits, gestures, and angle preferences of touch actions. This paper investigates the reliability and applicability of using motion-sensor behavior for active and continuous smartphone authentication across various operational scenarios, and presents a systematic evaluation of the distinctiveness and permanence properties of the behavior. For each sample of sensor behavior, kinematic information sequences are extracted and analyzed, which are characterized by statistic-, frequency-, and wavelet-domain features, to provide accurate and fine-grained characterization of users’ touch actions. A Markov-based decision procedure, using one-class learning techniques, is developed and applied to the feature space for performing authentication. Analyses are conducted using the sensor data of 520 200 touch actions from 102 subjects across various operational scenarios. Extensive experiments show that motion-sensor behavior exhibits sufficient discriminability and stability for active and continuous authentication, and can achieve a false-rejection rate of 5.03% and a false-acceptance rate of 3.98%. Additional experiments on usability to operation length, sensitivity to application scenario, scalability to user size, contribution to different sensors, and response to behavior change are provided to further explore the effectiveness and applicability. We also implement an authentication system into the Android system that can react to the presence of the legitimate user.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "越来越多地使用智能手机作为访问个人信息的个人计算平台，强调了对安全和可用的认证技术以及持续保护隐私的需求。智能手机传感器可以根据不同的习惯、手势和触摸动作的角度偏好，测量用户与智能手机交互时的独特行为特征。本文调查了在各种操作场景中使用运动传感器行为进行主动和连续智能手机认证的可靠性和适用性，并对行为的独特性和持久性进行了系统评估。对于传感器行为的每个样本，提取并分析运动学信息序列，这些序列以统计、频率和小波域特征为特征，以提供用户触摸动作的精确和细粒度表征。使用单类学习技术的基于马尔可夫的决策过程被开发并应用于特征空间以执行认证。使用来自102个对象的520，200个触摸动作的传感器数据在各种操作场景中进行分析。大量实验表明，运动传感器行为对于主动和连续认证表现出足够的可区分性和稳定性，并且可以实现5.03%的错误拒绝率和3.98%的错误接受率。提供了关于操作长度的可用性、对应用场景的敏感性、对用户规模的可扩展性、对不同传感器的贡献以及对行为改变的响应的附加实验，以进一步探索有效性和适用性。我们还在Android系统中实现了一个认证系统，可以对合法用户的出现做出反应。",
        "title_zh": "主动智能手机认证中多运动传感器行为的性能分析",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tifs/tifs13.html",
        "conf_title": "IEEE Transactions on Information Forensics and Security, Volume 13",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TIFS.2017.2756567",
        "title": "GRAAD: Group Anonymous and Accountable D2D Communication in Mobile Networks",
        "authors": "Ruei-Hau Hsu, Jemin Lee, Tony Q. S. Quek, Jyh-Cheng Chen",
        "abstract": "Device-to-device (D2D) communication is mainly launched by the transmission requirements between devices for specific applications such as proximity services in long-term evolution advanced networks, and each application will form a group of registered devices for the network-covered and network-absent D2D communications. During the applications of D2D communication, each device needs to identify the other devices of the same group in proximity by their group identity. This leads to the exposure of group information, by which the usage of applications can be analyzed by eavesdroppers. Hence, this paper introduces network-covered and network-absent authenticated key exchange protocols for D2D communications to guarantee accountable group anonymity, end-to-end security to network operators, as well as traceability and revocability for accounting and management requirements. We formally prove the security of those protocols, and also develop an analytic model to evaluate the quality of authentication protocols by authentication success rate in D2D communications. Besides, we implement the proposed protocols on android mobile devices to evaluate the computation costs of the protocols. We also evaluate the authentication success rate by the proposed analytic model and prove the correctness of the analytic model via simulation. Those evaluations show that the proposed protocols are feasible to the performance requirements of D2D communications.",
        "files": {
            "openAccessPdf": "http://arxiv.org/pdf/1703.04262"
        },
        "abstract_zh": "设备到设备(Device-to-device，D2D)通信主要是由长期演进高级网络中的邻近服务等特定应用的设备之间的传输需求发起的，每个应用将形成一组注册的设备，用于网络覆盖和无网络的D2D通信。在D2D通信的应用中，每个设备需要通过它们的组标识来识别邻近的同一组的其他设备。这导致了群组信息的暴露，由此应用的使用可以被窃听者分析。因此，本文介绍了用于D2D通信的覆盖网络和非覆盖网络的认证密钥交换协议，以保证可问责的群组匿名性、对网络运营商的端到端安全性，以及计费和管理需求的可追溯性和可撤销性。我们形式化地证明了这些协议的安全性，并建立了一个分析模型，以D2D通信中的认证成功率来评价认证协议的质量。此外，我们在android移动设备上实现了所提出的协议，以评估协议的计算成本。我们还利用提出的分析模型评估了认证成功率，并通过仿真验证了分析模型的正确性。这些评估表明，所提出的协议对于D2D通信的性能要求是可行的。",
        "title_zh": "GRAAD:移动网络中的群组匿名和可问责D2D通信",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tifs/tifs13.html",
        "conf_title": "IEEE Transactions on Information Forensics and Security, Volume 13",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TIFS.2017.2767019",
        "title": "Android User Privacy Preserving Through Crowdsourcing",
        "authors": "Bahman Rashidi, Carol J. Fung, Anh Nguyen, Tam Vu, Elisa Bertino",
        "abstract": "In current Android architecture, users have to decide whether an app is safe to use or not. Expert users can make savvy decisions to avoid unnecessary privacy breach. However, the majority of normal users are not technically capable or do not care to consider privacy implications to make safe decisions. To assist the technically incapable crowd, we propose DroidNet, an Android permission control framework based on crowdsourcing. At its core, DroidNet runs new apps under probation mode without granting their permission requests up-front. It provides recommendations on whether to accept or reject the permission requests based on decisions from peer expert users. To seek expert users, we propose an expertise ranking algorithm using a transitional Bayesian inference model. The recommendation is based on the aggregated expert responses and its confidence level. Our simulation and real user experimental results demonstrate that DroidNet provides accurate recommendations and cover the majority of app requests given a small coverage from a small set of initial experts.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "在当前的Android架构中，用户必须决定一个应用程序是否可以安全使用。专家用户可以做出明智的决定，以避免不必要的隐私泄露。然而，大多数普通用户在技术上没有能力或者不关心考虑隐私问题来做出安全的决定。为了帮助技术上无能的人群，我们提出了DroidNet，这是一个基于众包的Android权限控制框架。DroidNet的核心是在试用模式下运行新的应用程序，而不事先批准他们的许可请求。它根据同行专家用户的决定，提供关于是接受还是拒绝权限请求的建议。为了寻找专家用户，我们提出了一种使用过渡贝叶斯推理模型的专家排序算法。该建议基于汇总的专家反馈及其置信度。我们的模拟和真实用户实验结果表明，DroidNet提供了准确的推荐，并覆盖了来自一小组初始专家的小覆盖范围内的大多数应用请求。",
        "title_zh": "通过众包保护Android用户隐私",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tifs/tifs13.html",
        "conf_title": "IEEE Transactions on Information Forensics and Security, Volume 13",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TIFS.2017.2771228",
        "title": "Detecting Android Malware Leveraging Text Semantics of Network Flows",
        "authors": "Shanshan Wang, Qiben Yan, Zhenxiang Chen, Bo Yang, Chuan Zhao, Mauro Conti",
        "abstract": "The emergence of malicious apps poses a serious threat to the Android platform. Most types of mobile malware rely on network interface to coordinate operations, steal users’ private information, and launch attack activities. In this paper, we propose an effective and automatic malware detection method using the text semantics of network traffic. In particular, we consider each HTTP flow generated by mobile apps as a text document, which can be processed by natural language processing to extract text-level features. Then, we use the text semantic features of network traffic to develop an effective malware detection model. In an evaluation using 31 706 benign flows and 5258 malicious flows, our method outperforms the existing approaches, and gets an accuracy of 99.15%. We also conduct experiments to verify that the method is effective in detecting newly discovered malware, and requires only a few samples to achieve a good detection result. When the detection model is applied to the real environment to detect unknown applications in the wild, the experimental results show that our method performs significantly better than other popular anti-virus scanners with a detection rate of 54.81%. Our method also reveals certain malware types that can avoid the detection of anti-virus scanners. In addition, we design a detection system on encrypted traffic for bring-your-own-device enterprise network, home network, and 3G/4G mobile network. The detection model is integrated into the system to discover suspicious network behaviors.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "恶意应用的出现对Android平台构成了严重威胁。大多数类型的移动恶意软件依靠网络接口来协调操作，窃取用户的隐私信息，并发起攻击活动。本文提出了一种利用网络流量文本语义的有效的自动恶意软件检测方法。特别地，我们将移动应用程序生成的每个HTTP流视为一个文本文档，可以通过自然语言处理来提取文本级特征。然后，我们利用网络流量的文本语义特征来开发一个有效的恶意软件检测模型。在使用31 706个良性流和5258个恶意流的评估中，我们的方法优于现有的方法，获得了99.15%的准确率。我们还通过实验验证了该方法在检测新发现的恶意软件方面是有效的，并且只需要很少的样本就可以达到很好的检测结果。当检测模型应用于真实环境中检测野外未知应用时，实验结果表明，我们的方法明显优于其他流行的反病毒扫描器，检测率为54.81%。我们的方法还揭示了某些恶意软件类型，它们可以避开反病毒扫描器的检测。此外，我们还为自带设备的企业网络、家庭网络和3G/4G移动网络设计了加密流量检测系统。检测模型被集成到系统中以发现可疑的网络行为。",
        "title_zh": "利用网络流的文本语义检测Android恶意软件",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tifs/tifs13.html",
        "conf_title": "IEEE Transactions on Information Forensics and Security, Volume 13",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TIFS.2017.2787905",
        "title": "Uncovering the Face of Android Ransomware: Characterization and Real-Time Detection",
        "authors": "Jing Chen, Chiheng Wang, Ziming Zhao, Kai Chen, Ruiying Du, Gail-Joon Ahn",
        "abstract": "In recent years, we witnessed a drastic increase of ransomware, especially on popular mobile platforms including Android. Ransomware extorts victims for a sum of money by taking control of their devices or files. In light of their rapid growth, there is a pressing need to develop effective countermeasure solutions. However, the research community is still constrained by the lack of a comprehensive data set, and there exists no insightful understanding of mobile ransomware in the wild. In this paper, we focus on the Android platform and aim to characterize existing Android ransomware. Specifically, we have managed to collect 2,721 ransomware samples that cover the majority of existing Android ransomware families. Based on these samples, we systematically characterize them from several aspects, including timeline and malicious features. In addition, the detection results of existing anti-virus tools are rather disappointing, which clearly calls for customized anti-mobile-ransomware solutions. To detect ransomware that extorts users by encrypting data, we propose a novel real-time detection system, called RansomProber. By analyzing the user interface widgets of related activities and the coordinates of users’ finger movements, RansomProber can infer whether the file encryption operations are initiated by users. The experimental results show that RansomProber can effectively detect encrypting ransomware with high accuracy and acceptable runtime performance.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "近年来，我们目睹了勒索软件的急剧增加，特别是在包括Android在内的流行移动平台上。勒索软件通过控制受害者的设备或文件来勒索受害者一笔钱。鉴于它们的快速增长，迫切需要开发有效的对策解决方案。然而，研究社区仍然受到缺乏全面数据集的限制，并且对移动勒索软件没有深刻的理解。在本文中，我们将重点放在Android平台上，旨在描述现有Android勒索软件的特征。具体来说，我们已经成功收集了2，721个勒索软件样本，涵盖了现有的大多数Android勒索软件家族。基于这些样本，我们从时间线和恶意特征等几个方面对其进行了系统的表征。此外，现有反病毒工具的检测结果令人失望，这显然需要定制化的反手机勒索解决方案。为了检测通过加密数据勒索用户的勒索软件，我们提出了一种新颖的实时检测系统，称为RansomProber。通过分析相关活动的用户界面小部件和用户手指移动的坐标，RansomProber可以推断文件加密操作是否由用户发起。实验结果表明，RansomProber能有效检测加密勒索软件，准确率高，运行时性能可接受。",
        "title_zh": "揭开Android勒索软件的面纱:特征描述和实时检测",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tifs/tifs13.html",
        "conf_title": "IEEE Transactions on Information Forensics and Security, Volume 13",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TIFS.2018.2806891",
        "title": "Android Malware Familial Classification and Representative Sample Selection via Frequent Subgraph Analysis",
        "authors": "Ming Fan, Jun Liu, Xiapu Luo, Kai Chen, Zhenzhou Tian, Qinghua Zheng, Ting Liu",
        "abstract": "The rapid increase in the number of Android malware poses great challenges to anti-malware systems, because the sheer number of malware samples overwhelms malware analysis systems. The classification of malware samples into families, such that the common features shared by malware samples in the same family can be exploited in malware detection and inspection, is a promising approach for accelerating malware analysis. Furthermore, the selection of representative malware samples in each family can drastically decrease the number of malware to be analyzed. However, the existing classification solutions are limited because of the following reasons. First, the legitimate part of the malware may misguide the classification algorithms because the majority of Android malware are constructed by inserting malicious components into popular apps. Second, the polymorphic variants of Android malware can evade detection by employing transformation attacks. In this paper, we propose a novel approach that constructs frequent subgraphs (fregraphs) to represent the common behaviors of malware samples that belong to the same family. Moreover, we propose and develop FalDroid, a novel system that automatically classifies Android malware and selects representative malware samples in accordance with fregraphs. We apply it to 8407 malware samples from 36 families. Experimental results show that FalDroid can correctly classify 94.2% of malware samples into their families using approximately 4.6 sec per app. FalDroid can also dramatically reduce the cost of malware investigation by selecting only 8.5% to 22% representative samples that exhibit the most common malicious behavior among all samples.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android恶意软件数量的快速增长给反恶意软件系统带来了巨大的挑战，因为恶意软件样本的数量之多让恶意软件分析系统不堪重负。将恶意软件样本分类成族，使得同一族中的恶意软件样本所共享的共同特征可以在恶意软件检测和检查中被利用，这是一种用于加速恶意软件分析的有前途的方法。此外，选择每个家族中的代表性恶意软件样本可以显著减少要分析的恶意软件的数量。然而，由于以下原因，现有的分类解决方案是有限的。首先，恶意软件的合法部分可能会误导分类算法，因为大多数Android恶意软件都是通过将恶意组件插入到流行的应用程序中来构建的。其次，Android恶意软件的多态变体可以通过采用变换攻击来逃避检测。在本文中，我们提出了一种新的方法来构造频繁子图(fregraphs)来表示属于同一家族的恶意软件样本的共同行为。此外，我们提出并开发了FalDroid，这是一个新的系统，可以自动分类Android恶意软件，并根据频率图选择有代表性的恶意软件样本。我们将其应用于来自36个家族的8407个恶意软件样本。实验结果表明，FalDroid可以正确地将94.2%的恶意软件样本分类到它们的家族中，每个应用程序使用大约4.6秒。FalDroid还可以通过仅选择所有样本中表现出最常见恶意行为的8.5%至22%的代表性样本来大幅降低恶意软件调查的成本。",
        "title_zh": "基于频繁子图分析的Android恶意软件家族分类和代表性样本选择",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tifs/tifs13.html",
        "conf_title": "IEEE Transactions on Information Forensics and Security, Volume 13",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TIFS.2015.2436364",
        "title": "Tap-Wave-Rub: Lightweight Human Interaction Approach to Curb Emerging Smartphone Malware",
        "authors": "Babins Shrestha, Di Ma, Yan Zhu, Haoyu Li, Nitesh Saxena",
        "abstract": "Malware is a burgeoning threat for smartphones and continuing advancing. Traditional defenses to malware, however, are not suitable for smartphones due to their resource intensive nature. This necessitates the design of novel mechanisms that can consider the specifics of the smartphone malware and smartphones themselves. In this paper, we introduce a lightweight permission enforcement approach-Tap-Wave-Rub (TWR)-for smartphone malware prevention. TWR is based on simple cyber-physical human interactions, i.e., human gestures, that are very quick and intuitive but less likely to be exhibited in users' daily activities. Presence or absence of such gestures, prior to accessing an application, can effectively inform the OS whether the access request is benign or malicious. In particular, we present the design of two mechanisms: 1) acceleration-based phone tapping detection and 2) proximity-based finger tapping, rubbing, or hand waving detection. The first mechanism is geared for near field communication applications, which usually require the user to tap her phone with another device. The second mechanism involves very simple gestures, i.e., tapping or rubbing a finger near the top of phone's screen or waving a hand close to the phone, and broadly appeals to many applications (e.g., SMS). In addition, we present the TWR-enhanced Android permission model, the prototypes implementing the underlying gesture recognition mechanisms, and a variety of novel experiments to evaluate these mechanisms. Our results suggest the proposed approach could be very effective for malware detection/prevention, with quite low false positives and false negatives, while imposing little to no additional burden on the users.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "恶意软件是对智能手机的迅速威胁，并继续前进。 但是，由于其资源密集型性质，传统的恶意软件防御措施不适合智能手机。 这需要设计新型机制，这些机制可以考虑智能手机恶意软件和智能手机本身的细节。 在本文中，我们为智能手机恶意软件提供了轻巧的执行方法-TAP-WAVE-RUB（TWR）。 TWR基于简单的网络物理人类互动，即人类手势，它们非常快速，直观，但在用户的日常活动中不太可能展示。 在访问应用程序之前，存在或不存在此类手势，可以有效地告知OS访问请求是良性还是恶意。 特别是，我们介绍了两种机制的设计：1）基于加速度的手机敲击检测和2）基于接近度的手指攻击，摩擦或手动挥手检测。 第一种机制适用于近场通信应用，通常要求用户用另一台设备点击手机。 第二种机制涉及非常简单的手势，即，在手机屏幕顶部附近敲击或摩擦手指或挥舞着手机附近的手，并广泛吸引许多应用程序（例如，SMS）。 此外，我们介绍了TWR增强的Android许可模型，实现潜在的手势识别机制的原型以及评估这些机制的各种新型实验。 我们的结果表明，提出的方法对于恶意软件检测/预防可能非常有效，假阳性和假否定性相当低，同时对用户几乎没有额外的负担。",
        "title_zh": "点击-波动-摩擦:轻量级人机交互方法，以遏制新兴的智能手机恶意软件",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tifs/tifs10.html",
        "conf_title": "IEEE Transactions on Information Forensics and Security, Volume 10",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TIFS.2015.2478741",
        "title": "Analyzing Android Encrypted Network Traffic to Identify User Actions",
        "authors": "Mauro Conti, Luigi Vincenzo Mancini, Riccardo Spolaor, Nino Vincenzo Verde",
        "abstract": "Mobile devices can be maliciously exploited to violate the privacy of people. In most attack scenarios, the adversary takes the local or remote control of the mobile device, by leveraging a vulnerability of the system, hence sending back the collected information to some remote web service. In this paper, we consider a different adversary, who does not interact actively with the mobile device, but he is able to eavesdrop the network traffic of the device from the network side (e.g., controlling a Wi-Fi access point). The fact that the network traffic is often encrypted makes the attack even more challenging. In this paper, we investigate to what extent such an external attacker can identify the specific actions that a user is performing on her mobile apps. We design a system that achieves this goal using advanced machine learning techniques. We built a complete implementation of this system, and we also run a thorough set of experiments, which show that our attack can achieve accuracy and precision higher than 95%, for most of the considered actions. We compared our solution with the three state-of-the-art algorithms, and confirming that our system outperforms all these direct competitors.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "移动设备可以恶意利用以侵犯人们的隐私。 在大多数攻击场景中，对手通过利用系统的漏洞来采用移动设备的本地或远程控制，从而将收集的信息发送回某些远程Web服务。 在本文中，我们考虑了一个不同的对手，他们与移动设备没有主动交互，但他能够从网络端窃听设备的网络流量（例如，控制Wi-Fi接入点）。 网络流量通常被加密的事实使攻击更具挑战性。 在本文中，我们调查了这样的外部攻击者在多大程度上可以确定用户在其移动应用程序上执行的特定操作。 我们设计了一个使用高级机器学习技术实现此目标的系统。 我们构建了该系统的完整实现，并且还进行了一组彻底的实验，这表明我们的攻击可以实现大多数考虑的动作的准确性和高于95％的精度。 我们将解决方案与三种最先进的算法进行了比较，并确认我们的系统表现优于所有这些直接竞争对手。",
        "title_zh": "分析Android加密网络流量以识别用户操作",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tifs/tifs11.html",
        "conf_title": "IEEE Transactions on Information Forensics and Security, Volume 11",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TIFS.2015.2510825",
        "title": "Seeing the Unseen: Revealing Mobile Malware Hidden Communications via Energy Consumption and Artificial Intelligence",
        "authors": "Luca Caviglione, Mauro Gaggero, Jean-François Lalande, Wojciech Mazurczyk, Marcin Urbanski",
        "abstract": "Modern malware uses advanced techniques to hide from static and dynamic analysis tools. To achieve stealthiness when attacking a mobile device, an effective approach is the use of a covert channel built by two colluding applications to exchange data locally. Since this process is tightly coupled with the used hiding method, its detection is a challenging task, also worsened by the very low transmission rates. As a consequence, it is important to investigate how to reveal the presence of malicious software using general indicators, such as the energy consumed by the device. In this perspective, this paper aims to spot malware covertly exchanging data using two detection methods based on artificial intelligence tools, such as neural networks and decision trees. To verify their effectiveness, seven covert channels have been implemented and tested over a measurement framework using Android devices. Experimental results show the feasibility and effectiveness of the proposed approach to detect the hidden data exchange between colluding applications.",
        "files": {
            "openAccessPdf": "https://hal.archives-ouvertes.fr/hal-01247495/file/seeing_the_unseen.pdf"
        },
        "abstract_zh": "现代恶意软件使用先进的技术来隐藏静态和动态分析工具。 为了在攻击移动设备时达到隐身性，一种有效的方法是使用由两个核对应用程序构建的秘密渠道在本地交换数据。 由于此过程与使用的隐藏方法紧密相结合，因此其检测是一项具有挑战性的任务，也因非常低的传输速率而恶化。 因此，重要的是要研究如何使用通用指标（例如设备消耗的能量）揭示恶意软件的存在。 从这个角度来看，本文旨在使用基于人工智能工具（例如神经网络和决策树）的两种检测方法发现恶意软件秘密交换数据。 为了验证其有效性，已经在使用Android设备的测量框架上实施了七个秘密渠道和测试。 实验结果表明，提出的方法在勾结应用程序之间检测隐藏的数据交换的可行性和有效性。",
        "title_zh": "看不见的:通过能耗和人工智能揭示移动恶意软件隐藏的通信",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tifs/tifs11.html",
        "conf_title": "IEEE Transactions on Information Forensics and Security, Volume 11",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TIFS.2016.2523912",
        "title": "ICCDetector: ICC-Based Malware Detection on Android",
        "authors": "Ke Xu, Yingjiu Li, Robert H. Deng",
        "abstract": "Most existing mobile malware detection methods (e.g., Kirin and DroidMat) are designed based on the resources required by malwares (e.g., permissions, application programming interface (API) calls, and system calls). These methods capture the interactions between mobile apps and Android system, but ignore the communications among components within or cross application boundaries. As a consequence, the majority of the existing methods are less effective in identifying many typical malwares, which require a few or no suspicious resources, but leverage on inter-component communication (ICC) mechanism when launching stealthy attacks. To address this challenge, we propose a new malware detection method, named ICCDetector. ICCDetector outputs a detection model after training with a set of benign apps and a set of malwares, and employs the trained model for malware detection. The performance of ICCDetector is evaluated with 5264 malwares, and 12026 benign apps. Compared with our benchmark, which is a permission-based method proposed by Peng et al. in 2012 with an accuracy up to 88.2%, ICCDetector achieves an accuracy of 97.4%, roughly 10% higher than the benchmark, with a lower false positive rate of 0.67%, which is only about a half of the benchmark. After manually analyzing false positives, we discover 43 new malwares from the benign data set, and reduce the number of false positives to seven. More importantly, ICCDetector discovers 1708 more advanced malwares than the benchmark, while it misses 220 obvious malwares, which can be easily detected by the benchmark. For the detected malwares, ICCDetector further classifies them into five newly defined malware categories, which help understand the relationship between malicious behaviors and ICC characteristics. We also provide a systemic analysis of ICC patterns of benign apps and malwares.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "大多数现有的移动恶意软件检测方法（例如Kirin和DroidMat）都是根据Malwares（例如，权限，应用程序编程接口（API）调用和系统调用）设计的。 这些方法捕获了移动应用程序与Android系统之间的交互，但忽略了或交叉应用程序边界内部或交叉应用程序之间的通信。 结果，大多数现有方法在识别许多典型的恶能中的有效性较小，这些恶质需要一些或没有可疑的资源，但是在发射隐秘攻击时利用了组件间通信（ICC）机制。 为了应对这一挑战，我们提出了一种新的恶意软件检测方法，名为ICCDetector。 ICCDETECTOR在使用一组良性应用程序和一组Malwares训练后输出检测模型，并采用训练有素的恶意软件检测模型。 ICCDetector的性能通过5264个Malwares和12026个良性应用程序进行评估。 与我们的基准相比，这是Peng等人提出的一种基于许可的方法。 2012年，ICCDetector的准确性高达88.2％，精度达到97.4％，比基准高约10％，较低的假正率为0.67％，仅为基准的一半。 在手动分析误报后，我们发现了良性数据集中的43个新的恶性肿瘤，并将误报的数量减少到七个。 更重要的是，ICCDetector发现了比基准的1708个高级恶能，而它却遗失了220个明显的Malwares，这可以通过基准轻松检测到。 对于被检测到的Malwares，ICCDetector将其进一步分为五个新定义的恶意软件类别，这些类别有助于了解恶意行为和ICC特征之间的关系。 我们还提供了ICC良性应用和恶能的系统性分析。",
        "title_zh": "ICCDetector:基于ICC的Android恶意软件检测",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tifs/tifs11.html",
        "conf_title": "IEEE Transactions on Information Forensics and Security, Volume 11",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TIFS.2015.2505626",
        "title": "MagPairing: Pairing Smartphones in Close Proximity Using Magnetometers",
        "authors": "Rong Jin, Liu Shi, Kai Zeng, Amit Pande, Prasant Mohapatra",
        "abstract": "With the prevalence of mobile computing, lots of wireless devices need to establish secure communication on the fly without pre-shared secrets. Device pairing is critical for bootstrapping secure communication between two previously unassociated devices over the wireless channel. Using auxiliary out-of-band channels involving visual, acoustic, tactile, or vibrational sensors has been proposed as a feasible option to facilitate device pairing. However, these methods usually require users to perform additional tasks, such as copying, comparing, and shaking. It is preferable to have a natural and intuitive pairing method with minimal user tasks. In this paper, we introduce a new method, called MagPairing, for pairing smartphones in close proximity by exploiting correlated magnetometer readings. In MagPairing, users only need to naturally tap the smartphones together for a few seconds without performing any additional operations in authentication and key establishment. Our method exploits the fact that smartphones are equipped with tiny magnets. Highly correlated magnetic field patterns are produced when two smartphones are close to each other. We design MagPairing protocol and implement it on Android smartphones. We conduct extensive simulations and real-world experiments to evaluate MagPairing. Experiments verify that the captured sensor data on which MagPairing is based has high entropy and sufficient length, and is nondisclosure to attackers more than few centimeters away. Usability tests on various kinds of smartphones by totally untrained users show that the whole pairing process needs only 4.5 s on average with more than 90% success rate.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "随着移动计算的流行，许多无线设备需要在没有预先共享的秘密的情况下即时建立安全的通信。 设备配对对于在无线通道上的两个先前无相关的设备之间进行自举安全通信至关重要。 已经提出，使用涉及视觉，声学，触觉或振动传感器的辅助外通道作为促进设备配对的可行选择。 但是，这些方法通常要求用户执行其他任务，例如复制，比较和摇动。 最好使用最小的用户任务具有天然和直观的配对方法。 在本文中，我们引入了一种称为Magpairing的新方法，用于通过利用相关磁力计读数来近距离配对智能手机。 在Magpairing中，用户只需要自然地将智能手机一起使用几秒钟，而无需在身份验证和钥匙建立方面执行任何其他操作。 我们的方法利用了智能手机配备微型磁铁的事实。 当两台智能手机彼此接近时，就会产生高度相关的磁场图案。 我们设计Magpair协议并在Android智能手机上实施。 我们进行广泛的模拟和现实世界实验以评估马利帕。 实验验证了在Magpairing所基于的捕获的传感器数据中具有很高的熵和足够的长度，并且对攻击者的披露不超过几厘米。 完全未经训练的用户对各种智能手机的可用性测试表明，整个配对过程平均仅需要4.5 s，成功率超过90％。",
        "title_zh": "磁配对:使用磁强计将近距离的智能手机配对",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tifs/tifs11.html",
        "conf_title": "IEEE Transactions on Information Forensics and Security, Volume 11",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TIFS.2016.2581304",
        "title": "Rethinking Permission Enforcement Mechanism on Mobile Systems",
        "authors": "Yuan Zhang, Min Yang, Guofei Gu, Hao Chen",
        "abstract": "To protect sensitive resources from unauthorized use, modern mobile systems, such as Android and iOS, design a permission-based access control model. However, current model could not enforce fine-grained control over the dynamic permission use contexts, causing two severe security problems. First, any code package in an application could use the granted permissions, inducing attackers to embed malicious payloads into benign apps. Second, the permissions granted to a benign application may be utilized by an attacker through vulnerable application interactions. Although ad hoc solutions have been proposed, none could systematically solve these two issues within a unified framework. This paper presents the first such framework to provide context-sensitive permission enforcement that regulates permission use policies according to system-wide application contexts, which cover both intra-application context and inter-application context. We build a prototype system on Android, named FineDroid, to track such context during the application execution. To flexibly regulate the context-sensitive permission rules, FineDroid features a policy framework that could express generic application contexts. We demonstrate the benefits of FineDroid by instantiating several security extensions based on the policy framework, for three potential users: end users, administrators, and developers. Furthermore, FineDroid is showed to introduce a minor overhead.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "为了保护敏感资源免受未经授权的使用，现代移动系统（例如Android和iOS）设计了基于许可的访问控制模型。 但是，当前模型无法对动态许可使用环境进行细粒度的控制，从而导致两个严重的安全问题。 首先，应用程序中的任何代码软件包都可以使用授予的权限，从而诱导攻击者将恶意有效载荷嵌入良性应用程序中。 其次，攻击者可以通过脆弱的应用程序交互来利用授予良性应用程序的权限。 尽管已经提出了临时解决方案，但在统一框架内，没有人可以系统地解决这两个问题。 本文提出了第一个这样的框架，以提供上下文敏感的许可执行，该执行根据系统范围的应用程序上下文来调节权限使用策略，这些策略涵盖了应用程序内申请上下文和应用间式上下文。 我们在名为Finededroid的Android上构建了一个原型系统，以在应用程序执行过程中跟踪此类上下文。 为了灵活地调节上下文敏感的权限规则，Finedroid具有一个可以表达通用应用程序上下文的策略框架。 我们通过根据策略框架实例化了几个安全性扩展，用于三个潜在用户：最终用户，管理员和开发人员，从而证明了Finededroid的好处。 此外，表明finedroid引入了较小的开销。",
        "title_zh": "重新思考移动系统上的许可实施机制",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tifs/tifs11.html",
        "conf_title": "IEEE Transactions on Information Forensics and Security, Volume 11",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TIFS.2016.2578288",
        "title": "Secure Face Unlock: Spoof Detection on Smartphones",
        "authors": "Keyurkumar Patel, Hu Han, Anil K. Jain",
        "abstract": "With the wide deployment of the face recognition systems in applications from deduplication to mobile device unlocking, security against the face spoofing attacks requires increased attention; such attacks can be easily launched via printed photos, video replays, and 3D masks of a face. We address the problem of face spoof detection against the print (photo) and replay (photo or video) attacks based on the analysis of image distortion (e.g., surface reflection, moiré pattern, color distortion, and shape deformation) in spoof face images (or video frames). The application domain of interest is smartphone unlock, given that the growing number of smartphones have the face unlock and mobile payment capabilities. We build an unconstrained smartphone spoof attack database (MSU USSA) containing more than 1000 subjects. Both the print and replay attacks are captured using the front and rear cameras of a Nexus 5 smartphone. We analyze the image distortion of the print and replay attacks using different: 1) intensity channels (R, G, B, and grayscale); 2) image regions (entire image, detected face, and facial component between nose and chin); and 3) feature descriptors. We develop an efficient face spoof detection system on an Android smartphone. Experimental results on the public-domain Idiap Replay-Attack, CASIA FASD, and MSU-MFSD databases, and the MSU USSA database show that the proposed approach is effective in face spoof detection for both the cross-database and intra-database testing scenarios. User studies of our Android face spoof detection system involving 20 participants show that the proposed approach works very well in real application scenarios.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "随着从重复数据删除到移动设备解锁的应用中，面部识别系统的广泛部署，针对面部欺骗攻击的安全性需要越来越多的注意力； 可以通过印刷的照片，视频重播和面孔的3D口罩轻松发射此类攻击。 我们根据图像失真的分析（例如，表面反射，Moiré图案，颜色变形和形状变形）来解决针对印刷品（照片）和重播（照片或视频）攻击的面部欺骗检测问题（照片或视频）的问题。 或视频帧）。 鉴于智能手机越来越多的面部解锁和移动支付功能，感兴趣的应用程序域是智能手机的解锁。 我们构建了一个不受限制的智能手机欺骗攻击数据库（MSU USSA），其中包含1000多个受试者。 印刷和重播攻击都是使用Nexus 5智能手机的前后摄像头捕获的。 我们使用不同的：1）强度通道（R，G，B和灰度）分析印刷品的图像失真和重播攻击； 2）图像区域（整个图像，检测到的面部和鼻子和下巴之间的面部成分）； 3）功能描述符。 我们在Android智能手机上开发了有效的面部欺骗检测系统。 公共域IDIAP重播攻击，CASIA FASD和MSU-MFSD数据库以及MSU USSA数据库的实验结果表明，所提出的方法在跨数据库和数据库内测试方案的情况下有效地检测。 我们的Android Face SpoOF检测系统的用户研究涉及20名参与者，这表明该方法在实际应用方案中非常有效。",
        "title_zh": "智能手机上的安全面部解锁欺骗检测",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tifs/tifs11.html",
        "conf_title": "IEEE Transactions on Information Forensics and Security, Volume 11",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/TIFS.2016.2596141",
        "title": "SARRE: Semantics-Aware Rule Recommendation and Enforcement for Event Paths on Android",
        "authors": "Yongbo Li, Fan Yao, Tian Lan, Guru Venkataramani",
        "abstract": "This paper presents a semantics-aware rule recommendation and enforcement (SARRE) system for taming information leakage on Android. SARRE leverages statistical analysis and a novel application of minimum path cover algorithm to identify system event paths from dynamic runtime monitoring. Then, an online recommendation system is developed to automatically assign a fine-grained security rule to each event path, capitalizing on both known security rules and application semantic information. The proposed SARRE system is prototyped on Android devices and evaluated using real-world malware samples and popular apps from Google Play spanning multiple categories. Our results show that SARRE achieves 93.8% precision and 96.4% recall in identifying the event paths, compared with tainting technique. Also, the average difference between rule recommendation and manual configuration is less than 5%, validating the effectiveness of the automatic rule recommendation. It is also demonstrated that by enforcing the recommended security rules through a camouflage engine, SARRE can effectively prevent information leakage and enable fine-grained protection over private data with very small performance overhead.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "本文提出了一种语义意识的规则建议和执法系统（SARRE）系统，以驯服Android上的信息泄漏。 SARRE利用统计分析和最小路径覆盖算法的新颖应用来从动态运行时监视中识别系统事件路径。 然后，开发了一个在线推荐系统，以自动为每个事件路径分配细粒度的安全规则，并利用已知的安全规则和应用程序语义信息。 提出的SARRE系统是在Android设备上原型的，并使用现实世界中的恶意软件样本和Google Play的流行应用程序进行了评估。 我们的结果表明，与暖unting技术相比，SARRE在识别事件路径时达到了93.8％的精度和96.4％的回忆。 同样，规则建议和手动配置之间的平均差异小于5％，从而验证了自动规则建议的有效性。 还可以证明，通过伪装引擎执行推荐的安全规则，Sarre可以有效防止信息泄漏，并在私人数据上进行细腻的保护，并为私人数据提供了较小的性能。",
        "title_zh": "SARRE:Android上事件路径的语义感知规则推荐和执行",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/tifs/tifs11.html",
        "conf_title": "IEEE Transactions on Information Forensics and Security, Volume 11",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.fsidi.2022.301405",
        "title": "LibDroid: Summarizing information flow of android native libraries via static analysis",
        "authors": "Chen Shi, Chris Chao-Chun Cheng, Yong Guan",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "LibDroid:通过静态分析总结android原生库的信息流",
        "abstract_zh": "",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/di/di42.html",
        "conf_title": "Forensic Science International: Digital Investigation, Volume 42",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.fsidi.2021.301113",
        "title": "One key to rule them all: Recovering the master key from RAM to break Android's file-based encryption",
        "authors": "Tobias Groß, Marcel Busch, Tilo Müller",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "一把钥匙就能统治一切:从RAM中恢复主密钥，破解Android基于文件的加密",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/di/di36S.html",
        "conf_title": "Forensic Science International: Digital Investigation, Volume 36 Supplement",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.fsidi.2021.301270",
        "title": "Applying Natural Language Processing for detecting malicious patterns in Android applications",
        "authors": "Shahid Alam",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "应用自然语言处理检测Android应用程序中的恶意模式",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/di/di39.html",
        "conf_title": "Forensic Science International: Digital Investigation, Volume 39",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.fsidi.2021.301285",
        "title": "Android application forensics: A survey of obfuscation, obfuscation detection and deobfuscation techniques and their impact on investigations",
        "authors": "Xiaolu Zhang, Frank Breitinger, Engelbert Luechinger, Stephen O'Shaughnessy",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "Android应用取证:混淆、混淆检测和去模糊技术及其对调查的影响",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/di/di39.html",
        "conf_title": "Forensic Science International: Digital Investigation, Volume 39",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.fsidi.2021.301168",
        "title": "RansomDroid: Forensic analysis and detection of Android Ransomware using unsupervised machine learning technique",
        "authors": "Shweta Sharma, C. Rama Krishna, Rakesh Kumar",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "RansomDroid:使用无监督机器学习技术对Android勒索软件进行取证分析和检测",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/di/di37.html",
        "conf_title": "Forensic Science International: Digital Investigation, Volume 37",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.fsidi.2021.301193",
        "title": "LogExtractor: Extracting digital evidence from android log messages via string and taint analysis",
        "authors": "Chris Chao-Chun Cheng, Chen Shi, Neil Zhenqiang Gong, Yong Guan",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "LogExtractor:通过字符串和污点分析从android日志消息中提取数字证据",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/di/di37S.html",
        "conf_title": "Forensic Science International: Digital Investigation, Volume 37 Supplement",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.fsidi.2021.301176",
        "title": "BLADE: Robust malware detection against obfuscation in android",
        "authors": "Vikas Sihag, Manu Vardhan, Pradeep Singh",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "BLADE:Android中针对混淆的强大恶意软件检测",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/di/di38.html",
        "conf_title": "Forensic Science International: Digital Investigation, Volume 38",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.fsidi.2021.301267",
        "title": "An android-based field investigation tool to estimate the potential trajectories of perforated AK bullets in 1 mm sheet metal surfaces",
        "authors": "Bandula Nishshanka, Chris Shepherd, Randika Ariyarathna, Lalindu Weerakkody, Jayanga Palihena",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "一个基于android的现场调查工具，用于估计穿孔AK子弹在1毫米金属片表面的潜在轨迹",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/di/di38.html",
        "conf_title": "Forensic Science International: Digital Investigation, Volume 38",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.fsidi.2020.301026",
        "title": "A methodology for the decryption of encrypted smartphone backup data on android platform: A case study on the latest samsung smartphone backup system",
        "authors": "Myungseo Park, Okyeon Yi, Jongsung Kim",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "android平台上加密智能手机备份数据的解密方法——以最新三星智能手机备份系统为例",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/di/di35.html",
        "conf_title": "Forensic Science International: Digital Investigation, Volume 35",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.fsidi.2019.200897",
        "title": "Study of identifying and managing the potential evidence for effective Android forensics",
        "authors": "Dohyun Kim, Sangjin Lee",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "有效Android取证的潜在证据识别和管理研究",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/di/di33.html",
        "conf_title": "Forensic Science International: Digital Investigation, Volume 33",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.fsidi.2023.301511",
        "title": "Adversarial superiority in android malware detection: Lessons from reinforcement learning based evasion attacks and defenses",
        "authors": "Hemant Rathore, Adarsh Nandanwar, Sanjay K. Sahay, Mohit Sewak",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "android恶意软件检测中的对抗性优势:基于强化学习的规避攻击和防御",
        "abstract_zh": "",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/di/di44.html",
        "conf_title": "Forensic Science International: Digital Investigation, Volume 44",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.fsidi.2022.301485",
        "title": "A forensic analysis of streaming platforms on Android OS",
        "authors": "Julián García Murias, Douglas Levick, Sean McKeown",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "Android操作系统流媒体平台的取证分析",
        "abstract_zh": "",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/di/di44.html",
        "conf_title": "Forensic Science International: Digital Investigation, Volume 44",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.fsidi.2023.301555",
        "title": "Post-mortem digital forensics analysis of the Zepp Life android application",
        "authors": "Patrício Domingues, José Carlos Francisco, Miguel Frade",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "Zepp Life android应用程序的事后数字取证分析",
        "abstract_zh": "",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/di/di45.html",
        "conf_title": "Forensic Science International: Digital Investigation, Volume 45",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.diin.2016.11.002",
        "title": "Forensic analysis of WeChat on Android smartphones",
        "authors": "Songyang Wu, Yong Zhang, Xupeng Wang, Xiong Xiong, Lin Du",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "安卓智能手机微信取证分析",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/di/di21.html",
        "conf_title": "Digital Investigation, Volume 21",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.diin.2017.09.002",
        "title": "Forensic analysis of Telegram Messenger on Android smartphones",
        "authors": "Cosimo Anglano, Massimo Canonico, Marco Guazzone",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "Android智能手机上电报信使的取证分析",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/di/di23.html",
        "conf_title": "Digital Investigation, Volume 23",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.diin.2017.09.003",
        "title": "Live acquisition of main memory data from Android smartphones and smartwatches",
        "authors": "Seung Jei Yang, Jung Ho Choi, Ki Bom Kim, Rohit Bhatia, Brendan Saltaformaggio, Dongyan Xu",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "从Android智能手机和智能手表实时获取主内存数据",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/di/di23.html",
        "conf_title": "Digital Investigation, Volume 23",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.diin.2017.10.002",
        "title": "A methodology for the security evaluation within third-party Android Marketplaces",
        "authors": "William J. Buchanan, Simone Chiale, Richard Macfarlane",
        "abstract": "",
        "files": {
            "openAccessPdf": "https://napier-repository.worktribe.com/preview/999324/Buchanan%20DIIN_712_2.pdf"
        },
        "abstract_zh": "",
        "title_zh": "第三方Android市场中的安全评估方法",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/di/di23.html",
        "conf_title": "Digital Investigation, Volume 23",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.diin.2018.05.003",
        "title": "Logical acquisition method based on data migration for Android mobile devices",
        "authors": "Peijun Feng, Qingbao Li, Ping Zhang, Zhifeng Chen",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "基于数据迁移的Android移动设备逻辑获取方法",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/di/di26-1.html",
        "conf_title": "Digital Investigation, Volume 26",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.diin.2018.01.007",
        "title": "MalDozer: Automatic framework for android malware detection using deep learning",
        "authors": "ElMouatez Billah Karbab, Mourad Debbabi, Abdelouahid Derhab, Djedjiga Mouheb",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "MalDozer:使用深度学习的自动android恶意软件检测框架",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/di/di24.html",
        "conf_title": "Digital Investigation, Volume 24 Supplement",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.diin.2018.04.002",
        "title": "New flash memory acquisition methods based on firmware update protocols for LG Android smartphones",
        "authors": "Juhyun Park, Yun-Hwan Jang, Yongsu Park",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "LG Android智能手机基于固件更新协议的闪存获取新方法",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/di/di25.html",
        "conf_title": "Digital Investigation, Volume 25",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.diin.2018.01.001",
        "title": "An in-depth analysis of Android malware using hybrid techniques",
        "authors": "Abdullah Talha Kabakus, Ibrahim Alper Dogru",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "使用混合技术对Android恶意软件进行深入分析",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/di/di24-1.html",
        "conf_title": "Digital Investigation, Volume 24",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.diin.2018.09.007",
        "title": "Dynamic analysis with Android container: Challenges and opportunities",
        "authors": "Ngoc-Tu Chau, Souhwan Jung",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "Android容器的动态分析:挑战与机遇",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/di/di27.html",
        "conf_title": "Digital Investigation, Volume 27",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.diin.2018.04.012",
        "title": "Automated forensic analysis of mobile applications on Android devices",
        "authors": "Xiaodong Lin, Ting Chen, Tong Zhu, Kun Yang, Fengguo Wei",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "Android设备上移动应用的自动化取证分析",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/di/di26.html",
        "conf_title": "Digital Investigation, Volume 26 Supplement",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.diin.2018.04.013",
        "title": "DroidKex: Fast extraction of ephemeral TLS keys from the memory of Android apps",
        "authors": "Benjamin Taubmann, Omar Alabduljaleel, Hans P. Reiser",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "DroidKex:从Android应用程序的内存中快速提取短暂的TLS密钥",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/di/di26.html",
        "conf_title": "Digital Investigation, Volume 26 Supplement",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.diin.2016.03.002",
        "title": "Rapid Android Parser for Investigating DEX files (RAPID)",
        "authors": "Xiaolu Zhang, Frank Breitinger, Ibrahim M. Baggili",
        "abstract": "",
        "files": {
            "openAccessPdf": "https://digitalcommons.newhaven.edu/cgi/viewcontent.cgi?article=1053&context=electricalcomputerengineering-facpubs"
        },
        "abstract_zh": "",
        "title_zh": "用于调查DEX文件的快速Android解析器(快速)",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/di/di17.html",
        "conf_title": "Digital Investigation, Volume 17",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.diin.2016.04.013",
        "title": "Fingerprinting Android packaging: Generating DNAs for malware detection",
        "authors": "ElMouatez Billah Karbab, Mourad Debbabi, Djedjiga Mouheb",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "指纹Android打包:为恶意软件检测生成DNA",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/di/di18S.html",
        "conf_title": "Digital Investigation, Volume 18 Supplement",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.diin.2016.10.001",
        "title": "Forensic analysis of the ChatSecure instant messaging application on android smartphones",
        "authors": "Cosimo Anglano, Massimo Canonico, Marco Guazzone",
        "abstract": "",
        "files": {
            "openAccessPdf": "http://arxiv.org/pdf/1610.06721"
        },
        "abstract_zh": "",
        "title_zh": "android智能手机上ChatSecure即时通讯应用的取证分析",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/di/di19.html",
        "conf_title": "Digital Investigation, Volume 19",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.diin.2015.01.001",
        "title": "APK Auditor: Permission-based Android malware detection system",
        "authors": "Abdullah Talha Kabakus, Ibrahim Alper Dogru, Aydin Cetin",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "APK审计员:基于许可的Android恶意软件检测系统",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/di/di13.html",
        "conf_title": "Digital Investigation, Volume 13",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.diin.2015.05.008",
        "title": "New acquisition method based on firmware update protocols for Android smartphones",
        "authors": "Seung Jei Yang, Jung Ho Choi, Ki Bom Kim, Taejoo Chang",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "基于Android智能手机固件更新协议的新获取方法",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/di/di14.html",
        "conf_title": "Digital Investigation, Volume 14 Supplement 1",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1016/j.diin.2015.05.009",
        "title": "Network and device forensic analysis of Android social-messaging applications",
        "authors": "Daniel Walnycky, Ibrahim M. Baggili, Andrew Marrington, Jason Moore, Frank Breitinger",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "Android社交消息应用的网络和设备取证分析",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/di/di14.html",
        "conf_title": "Digital Investigation, Volume 14 Supplement 1",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.56553/popets-2023-0003",
        "title": "Not Your Average App: A Large-scale Privacy Analysis of Android Browsers",
        "authors": "Amogh Pradeep, Álvaro Feal, Julien Gamba, Ashwin Rao, Martina Lindorfer, Narseo Vallina-Rodriguez, David R. Choffnes",
        "abstract": "The transparency and privacy behavior of mobile browsers has remained widely unexplored by the research community. In fact, as opposed to regular Android apps, mobile browsers may present contradicting privacy behaviors. On the one end, they can have access to (and can expose) a unique combination of sensitive user data, from users’ browsing history to permission-protected personally identifiable information (PII) such as unique identifiers and geolocation. However, on the other end, they also are in a unique position to protect users’ privacy by limiting data sharing with other parties by implementing ad-blocking features. In this paper, we perform a comparative and empirical analysis on how hundreds of Android web browsers protect or expose user data during browsing sessions. To this end, we collect the largest dataset of Android browsers to date, from the Google Play Store and four Chinese app stores. Then, we developed a novel analysis pipeline that combines static and dynamic analysis methods to find a wide range of privacy-enhancing (e.g., ad-blocking) and privacy-harming behaviors (e.g., sending browsing histories to third parties, not validating TLS certificates, and exposing PII---including non-resettable identifiers---to third parties) across browsers. We find that various popular apps on both Google Play and Chinese stores have these privacy-harming behaviors, including apps that claim to be privacy-enhancing in their descriptions. Overall, our study not only provides new insights into important yet overlooked considerations for browsers’ adoption and transparency, but also that automatic app analysis systems (e.g., sandboxes) need context-specific analysis to reveal such privacy behaviors.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "移动浏览器的透明性和隐私行为仍然没有被研究团体广泛探索。事实上，与常规的Android应用程序相反，移动浏览器可能会出现相互矛盾的隐私行为。一方面，他们可以访问(并可以暴露)敏感用户数据的独特组合，从用户的浏览历史到受权限保护的个人身份信息(PII)，如唯一标识符和地理位置。然而，另一方面，他们也处于一个独特的位置，通过实施广告拦截功能来限制与其他方的数据共享，从而保护用户的隐私。在本文中，我们对数百个Android web浏览器如何在浏览会话期间保护或暴露用户数据进行了比较和实证分析。为此，我们从谷歌Play商店和四个中国应用商店收集了迄今为止最大的安卓浏览器数据集。然后，我们开发了一种新颖的分析管道，它结合了静态和动态分析方法，以发现跨浏览器的各种隐私增强(例如，广告拦截)和隐私损害行为(例如，向第三方发送浏览历史记录，不验证TLS证书，以及向第三方暴露PII -包括不可重置的标识符)。我们发现Google Play和中国商店上的各种流行应用程序都有这些损害隐私的行为，包括在其描述中声称增强隐私的应用程序。总的来说，我们的研究不仅为浏览器采用和透明度的重要但被忽视的考虑因素提供了新的见解，而且自动应用分析系统(如沙箱)需要特定于上下文的分析来揭示这种隐私行为。",
        "title_zh": "不是一般的应用程序:对安卓浏览器的大规模隐私分析",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/popets/popets2023.html",
        "conf_title": "Proceedings on Privacy Enhancing Technologies, Volume 2023",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.56553/popets-2023-0013",
        "title": "No Privacy Among Spies: Assessing the Functionality and Insecurity of Consumer Android Spyware Apps",
        "authors": "Enze Liu, Sumanth Rao, Sam Havron, Grant Ho, Stefan Savage, Geoffrey M. Voelker, Damon McCoy",
        "abstract": "Consumer mobile spyware apps covertly monitor a user's activities (i.e., text messages, phone calls, e-mail, location, etc.) and transmit that information over the Internet to support remote surveillance. Unlike conceptually similar apps used for state espionage, so-called \"stalkerware\" apps are mass-marketed to consumers on a retail basis and expose a far broader range of victims to invasive monitoring. Today the market for such apps is large enough to support dozens of competitors, with individual vendors reportedly monitoring hundreds of thousands of phones. However, while the research community is well aware of the existence of such apps, our understanding of the mechanisms they use to operate remains ad hoc. In this work, we perform an in-depth technical analysis of 14 distinct leading mobile spyware apps targeting Android phones. We document the range of mechanisms used to monitor user activity of various kinds (e.g., photos, text messages, live microphone access) — primarily through the creative abuse of Android APIs. We also discover previously undocumented methods these apps use to hide from detection and to achieve persistence. Additionally, we document the measures taken by each app to protect the privacy of the sensitive data they collect, identifying a range of failings on the part of spyware vendors (including privacy-sensitive data sent in the clear or stored in the cloud with little or no protection).",
        "files": {
            "openAccessPdf": "https://petsymposium.org/popets/2023/popets-2023-0013.pdf"
        },
        "abstract_zh": "消费者移动间谍软件应用暗中监视用户的活动(例如，短信、电话、电子邮件、位置等)。)并通过互联网传输该信息以支持远程监控。与概念上类似的用于国家间谍活动的应用不同，所谓的“跟踪软件”应用以零售方式向消费者大量销售，并使更广泛的受害者暴露在侵入性监控之下。如今，这类应用的市场足够大，足以支持数十个竞争对手，据报道，单个供应商监控着数十万部手机。然而，虽然研究界很清楚这类应用的存在，但我们对它们运行机制的理解仍然是临时性的。在这项工作中，我们对针对Android手机的14种不同的领先移动间谍软件应用程序进行了深入的技术分析。我们记录了用于监控各种类型的用户活动(例如，照片、短信、现场麦克风接入)的一系列机制，主要是通过创造性地滥用Android APIs。我们还发现了这些应用程序用来隐藏检测和实现持久性的先前未记录的方法。此外，我们记录了每个应用程序为保护其收集的敏感数据的隐私而采取的措施，确定了间谍软件供应商的一系列失误(包括以明文形式发送的隐私敏感数据或存储在几乎没有或根本没有保护的云中的数据)。",
        "title_zh": "间谍之间没有隐私:评估消费者Android间谍软件应用的功能和不安全性",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/popets/popets2023.html",
        "conf_title": "Proceedings on Privacy Enhancing Technologies, Volume 2023",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.56553/popets-2023-0072",
        "title": "Lessons in VCR Repair: Compliance of Android App Developers with the California Consumer Privacy Act (CCPA)",
        "authors": "Nikita Samarin, Shayna Kothari, Zaina Siyed, Oscar Bjorkman, Reena Yuan, Primal Wijesekera, Noura Alomar, Jordan Fischer, Chris Jay Hoofnagle, Serge Egelman",
        "abstract": "The California Consumer Privacy Act (CCPA) provides California residents with a range of enhanced privacy protections and rights. Our research investigated the extent to which Android app developers comply with the provisions of the CCPA that require them to provide consumers with accurate privacy notices and respond to \"verifiable consumer requests\" (VCRs) by disclosing personal information that they have collected, used, or shared about consumers for a business or commercial purpose. We compared the actual network traffic of 109 apps that we believe must comply with the CCPA to the data that apps state they collect in their privacy policies and the data contained in responses to \"right to know\" requests that we submitted to the app's developers. Of the 69 app developers who substantively replied to our requests, all but one provided specific pieces of personal data (as opposed to only categorical information). However, a significant percentage of apps collected information that was not disclosed, including identifiers (55 apps, 80%), geolocation data (21 apps, 30%), and sensory data (18 apps, 26%) among other categories. We discuss improvements to the CCPA that could help app developers comply with \"right to know\" requests and other related regulations.",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "录像机维修的教训:Android应用程序开发人员遵守加州消费者隐私法案(CCPA)",
        "abstract_zh": "《加州消费者隐私法》( CCPA)为加州居民提供了一系列增强的隐私保护和权利。我们的研究调查了Android应用程序开发人员在多大程度上遵守了CCPA的规定，该规定要求他们向消费者提供准确的隐私声明，并通过披露他们出于商业目的收集、使用或分享的消费者个人信息来回应“可验证的消费者请求”(vcr)。我们将我们认为必须遵守CCPA的109个应用程序的实际网络流量与应用程序在其隐私政策中声明收集的数据以及我们提交给应用程序开发者的“知情权”请求回复中包含的数据进行了比较。在对我们的请求做出实质性回复的69个应用程序开发者中，除了一个之外，所有人都提供了具体的个人数据(而不仅仅是分类信息)。然而，相当大比例的应用程序收集了未披露的信息，包括标识符(55个应用程序，80%)、地理位置数据(21个应用程序，30%)和感官数据(18个应用程序，26%)以及其他类别。我们讨论了对CCPA的改进，这些改进可以帮助应用程序开发人员遵守“知情权”要求和其他相关法规。",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/popets/popets2023.html",
        "conf_title": "Proceedings on Privacy Enhancing Technologies, Volume 2023",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.2478/popets-2022-0033",
        "title": "Are iPhones Really Better for Privacy? A Comparative Study of iOS and Android Apps",
        "authors": "Konrad Kollnig, Anastasia Shuba, Reuben Binns, Max Van Kleek, Nigel Shadbolt",
        "abstract": "Abstract While many studies have looked at privacy properties of the Android and Google Play app ecosystem, comparatively much less is known about iOS and the Apple App Store, the most widely used ecosystem in the US. At the same time, there is increasing competition around privacy between these smartphone operating system providers. In this paper, we present a study of 24k Android and iOS apps from 2020 along several dimensions relating to user privacy. We find that third-party tracking and the sharing of unique user identifiers was widespread in apps from both ecosystems, even in apps aimed at children. In the children’s category, iOS apps tended to use fewer advertising-related tracking than their Android counterparts, but could more often access children’s location. Across all studied apps, our study highlights widespread potential violations of US, EU and UK privacy law, including 1) the use of third-party tracking without user consent, 2) the lack of parental consent before sharing personally identifiable information (PII) with third-parties in children’s apps, 3) the non-data-minimising configuration of tracking libraries, 4) the sending of personal data to countries without an adequate level of data protection, and 5) the continued absence of transparency around tracking, partly due to design decisions by Apple and Google. Overall, we find that neither platform is clearly better than the other for privacy across the dimensions we studied.",
        "files": {
            "openAccessPdf": "https://petsymposium.org/popets/2022/popets-2022-0033.pdf"
        },
        "abstract_zh": "摘要尽管许多研究关注了Android和Google Play应用生态系统的隐私属性，但对iOS和苹果应用商店(美国使用最广泛的生态系统)的了解相对较少。与此同时，这些智能手机操作系统提供商之间围绕隐私的竞争越来越激烈。在本文中，我们展示了一项对2020年以来24k Android和iOS应用程序的研究，涉及与用户隐私相关的几个维度。我们发现，第三方跟踪和共享唯一用户标识符在两个生态系统的应用中都很普遍，甚至在针对儿童的应用中也是如此。在儿童类别中，iOS应用程序往往比Android应用程序使用更少的广告相关跟踪，但可以更频繁地访问儿童的位置。在所有研究的应用程序中，我们的研究强调了普遍存在的违反美国、欧盟和英国隐私法的潜在行为，包括1)未经用户同意使用第三方跟踪，2)在儿童应用程序中与第三方共享个人身份信息(PII)之前未经父母同意，3)跟踪库的非数据最小化配置，4)将个人数据发送到没有足够数据保护级别的国家，以及5)跟踪仍然缺乏透明度，部分原因是苹果和谷歌的设计决策。总的来说，我们发现在我们研究的各个方面，没有一个平台在隐私方面明显优于另一个。",
        "title_zh": "iPhones真的对隐私更好吗？iOS和Android应用程序的比较研究",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/popets/popets2022.html",
        "conf_title": "Proceedings on Privacy Enhancing Technologies, Volume 2022",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.56553/popets-2022-0071",
        "title": "Moby: A Blackout-Resistant Anonymity Network for Mobile Devices",
        "authors": "Amogh Pradeep, Hira Javaid, Ryan Williams, Antoine Rault, David R. Choffnes, Stevens Le Blond, Bryan Ford",
        "abstract": "Internet blackouts are challenging environments for anonymity and censorship resistance. Existing popular anonymity networks (e.g., Freenet, I2P, Tor) rely on Internet connectivity to function, making them impracticable during such blackouts. In such a setting, mobile ad-hoc networks can provide connectivity, but prior communication protocols for ad-hoc networks are not designed for anonymity and attack resilience. We address this need by designing, implementing, and evaluating Moby, a blackout-resistant anonymity network for mobile devices. Moby provides end-to-end encryption, forward secrecy and sender-receiver anonymity. It features a bi-modal design of operation, using Internet connectivity when available and ad-hoc networks during blackouts. During periods of Internet connectivity, Moby functions as a regular messaging application and bootstraps information that is later used in the absence of Internet connectivity to achieve secure anonymous communications. Moby incorporates a model of trust based on users’ contact lists, and a trust establishment protocol that mitigates flooding attacks. We perform an empirically informed simulation-based study based on cellphone traces of 268,596 users over the span of a week for a large cellular provider to determine Moby’s feasibility and present our findings. Last, we implement and evaluate the Moby client as an Android app.",
        "files": {
            "openAccessPdf": "https://petsymposium.org/popets/2022/popets-2022-0071.pdf"
        },
        "abstract_zh": "互联网封锁正在挑战匿名和审查阻力的环境。现有的流行匿名网络(例如Freenet、I2P、Tor)依赖于互联网连接来运行，使得它们在这种停电期间不可行。在这种情况下，移动自组织网络可以提供连接性，但是用于自组织网络的现有通信协议不是为匿名性和抗攻击性而设计的。我们通过设计、实现和评估莫比来满足这一需求，这是一种针对移动设备的抗中断匿名网络。莫比提供端到端加密、前向保密和发送者-接收者匿名。它采用双模式操作设计，在可用时使用互联网连接，在停电时使用临时网络。在互联网连接期间，莫比作为一个常规的消息应用程序运行，并引导信息，这些信息稍后在没有互联网连接的情况下用于实现安全的匿名通信。莫比结合了基于用户联系人列表的信任模型，以及减轻洪泛攻击的信任建立协议。我们对一家大型手机供应商的268，596名用户进行了为期一周的手机追踪，在此基础上进行了一项基于经验的模拟研究，以确定莫比的可行性并展示我们的研究结果。最后，我们将莫比客户端作为一款Android应用进行了实现和评估。",
        "title_zh": "莫比:移动设备的抗停电匿名网络",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/popets/popets2022.html",
        "conf_title": "Proceedings on Privacy Enhancing Technologies, Volume 2022",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.56553/popets-2022-0078",
        "title": "\"We may share the number of diaper changes\": A Privacy and Security Analysis of Mobile Child Care Applications",
        "authors": "Moritz Gruber, Christian Höfig, Maximilian Golla, Tobias Urban, Matteo Große-Kampmann",
        "abstract": "Mobile child care management applications can help child care facilities, preschools, and kindergartens to save time and money by allowing their employees to speed up everyday child care tasks using mobile devices. Such apps often allow child care workers to communicate with parents or guardians, sharing their children’s most private data (e. g., activities, photos, location, developmental aspects, and sometimes even medical information). To offer these services, child care apps require access to very sensitive data of minors that should never be shared over insecure channels and are subject to restrictive privacy laws. This work analyzes the privacy and security of 42 Android child care applications and their cloud-backends using a combination of static and dynamic analysis frameworks, configuration scanners, and inspecting their privacy policies. The results of our analysis show that while children do not use these apps, they can leak sensitive data about them. Alarming are the findings that many third-party (tracking) services are embedded in the applications and that adversaries can access personal data by abusing vulnerabilities in the applications. We hope our work will raise awareness about the privacy risks introduced by these applications and that regulatory authorities will focus more on these risks in the future.",
        "files": {
            "openAccessPdf": "https://petsymposium.org/popets/2022/popets-2022-0078.pdf"
        },
        "abstract_zh": "移动儿童护理管理应用程序允许员工使用移动设备加快日常儿童护理任务，从而帮助儿童护理机构、幼儿园和托儿所节省时间和资金。这类应用程序通常允许儿童护理人员与父母或监护人交流，分享他们孩子最隐私的数据(例如，活动、照片、位置、发展方面，有时甚至是医疗信息)。为了提供这些服务，儿童护理应用程序需要访问未成年人的非常敏感的数据，这些数据绝不能通过不安全的渠道共享，并且受到限制性隐私法律的限制。这项工作结合使用静态和动态分析框架、配置扫描器和检查隐私政策，分析了42个Android儿童护理应用程序及其云后端的隐私和安全。我们的分析结果表明，虽然儿童不使用这些应用程序，但他们可能会泄露有关这些应用程序的敏感数据。令人震惊的发现是，许多第三方(跟踪)服务嵌入在应用程序中，对手可以通过滥用应用程序中的漏洞来访问个人数据。我们希望我们的工作将提高对这些应用程序带来的隐私风险的认识，并希望监管机构在未来更多地关注这些风险。",
        "title_zh": "“我们可以分享换尿布的次数”:移动儿童护理应用的隐私和安全分析",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/popets/popets2022.html",
        "conf_title": "Proceedings on Privacy Enhancing Technologies, Volume 2022",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.56553/popets-2022-0092",
        "title": "Watch Over Your TV: A Security and Privacy Analysis of the Android TV Ecosystem",
        "authors": "Marcos Tileria, Jorge Blasco",
        "abstract": "The rapid adoption of Smart TVs has resulted in them becoming another app-based ecosystem. In this context, Android TV is one of the major players as it is widely available across multiple TV manufacturers and has a high integration with other Google products. Yet, the Android TV ecosystem has remained unexplored. This paper presents a deep analysis of the Android TV ecosystem using a large dataset of TV apps. We give an insight into the stakeholder ecosystem, including developers, streaming services, and thirdparty libraries. We analyze the behavior of TV apps in terms of sensitive data collection and communication with other devices using a pipeline of static analysis tools, network traffic collection, and verification via manual analysis. We compare the mobile and TV version of popular streaming apps and found a significant degradation of TV apps in terms of quality and different data collection practices. Our study shows that most TV apps present potentially harmful behaviors, and in most cases, these can be attributed to tracking and advertisement services. We found a prevalence of static identifiers for tracking purposes despite this not being the recommendation. This finding suggests that Google’s new policies limiting advertising identifiers will not have a tangible effect on the TV ecosystem.",
        "files": {
            "openAccessPdf": "https://petsymposium.org/popets/2022/popets-2022-0092.pdf"
        },
        "abstract_zh": "智能电视的快速普及使其成为另一个基于应用的生态系统。在这种情况下，Android TV是主要参与者之一，因为它广泛适用于多家电视制造商，并与谷歌的其他产品高度集成。然而，Android电视生态系统仍未被探索。本文使用大量电视应用数据集对Android电视生态系统进行了深入分析。我们深入分析了利益相关者生态系统，包括开发者、流媒体服务和第三方库。我们使用一系列静态分析工具、网络流量收集和通过手动分析进行的验证，从敏感数据收集和与其他设备的通信方面分析电视应用的行为。我们比较了流行的流媒体应用程序的移动和电视版本，发现电视应用程序在质量和不同的数据收集做法方面有显著下降。我们的研究表明，大多数电视应用程序都存在潜在的有害行为，在大多数情况下，这些行为都可以归因于跟踪和广告服务。我们发现了用于跟踪目的的静态标识符的流行，尽管这不是建议。这一发现表明，谷歌限制广告标识符的新政策不会对电视生态系统产生切实的影响。",
        "title_zh": "观看你的电视:安卓电视生态系统的安全和隐私分析",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/popets/popets2022.html",
        "conf_title": "Proceedings on Privacy Enhancing Technologies, Volume 2022",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.56553/popets-2022-0102",
        "title": "A Global Survey of Android Dual-Use Applications Used in Intimate Partner Surveillance",
        "authors": "Majed Almansoori, Andrea Gallardo, Julio Poveda, Adil Ahmed, Rahul Chatterjee",
        "abstract": "Intimate partner violence (IPV) is a pervasive societal problem that affects millions of people around the world. IPV perpetrators increasingly weaponize digital technologies like mobile applications (“apps”) to spy on, monitor, and harass victims. Surveillance-capable apps can have legitimate use cases, for example, locating children, and are therefore easily available on various mobile app stores like the Google Play Store. Nevertheless, these applications are easily repurposed by abusers to track their victims. The problem of such dual-use apps in IPV is global. However, current understanding of the ecosystem of such apps is limited to English-language apps, potentially limiting its relevance to non-English speaking IPV survivors across the world. In this paper, we study the prevalence of dualuse applications found in 15 languages and 27 countries. We collected 51,868 unique apps in 2020 from the Google Play Store, using queries such as “track wife’s location.” Through a semi-manual analysis of a subset of these apps, we discovered 854 unique dualuse apps, and estimate that among the apps collected from Google Play, 3,988 are dual-use apps. We found notable differences in app search results, suggested queries, and marketed capabilities of dual-use apps across different languages. For instance, we identified that 18% of dual-use apps do not have an English description, and 28% could not be found using English queries. Google Play (cursorily) blocks certain queries referring explicitly to intimate partner surveillance (IPS) to discourage potential abusers, but the blocking efficacy varies across languages. For example, we found that 80% of explicit IPS queries for English are blocked, but none for Bengali, Chinese, Hindi, Malay, Thai, and Vietnamese. Thus, abusers fluent in those languages can evade such blocking with no effort.",
        "files": {
            "openAccessPdf": "https://petsymposium.org/popets/2022/popets-2022-0102.pdf"
        },
        "abstract_zh": "亲密伴侣暴力(IPV)是一个普遍的社会问题，影响着全世界数百万人。IPV犯罪者越来越多地将数字技术武器化，如移动应用程序(“应用程序”)来监视、监控和骚扰受害者。具有监控功能的应用程序可以有合法的使用案例，例如，定位儿童，因此很容易在各种移动应用程序商店(如谷歌Play商店)上获得。然而，这些应用程序很容易被滥用者用来跟踪他们的受害者。IPV这种两用应用的问题是全球性的。然而，目前对这类应用生态系统的了解仅限于英语应用，这可能会限制其与全球非英语IPV幸存者的相关性。在本文中，我们研究了在15种语言和27个国家中发现的双重用途应用程序的流行情况。我们在2020年从谷歌Play商店收集了51868个独特的应用程序，使用诸如“追踪妻子的位置”的查询通过对这些应用子集的半手工分析，我们发现了854个独特的双重用途应用，并估计从Google Play收集的应用中，有3988个是双重用途应用。我们发现不同语言的应用搜索结果、建议查询和两用应用的营销能力存在显著差异。例如，我们发现18%的两用应用程序没有英文描述，28%的应用程序使用英文查询无法找到。Google Play(粗略地)屏蔽了某些明确涉及亲密伴侣监控(IPS)的查询，以阻止潜在的滥用者，但屏蔽效果因语言而异。例如，我们发现80%针对英语的显式IPS查询被阻止，但针对孟加拉语、汉语、印地语、马来语、泰语和越南语的查询却没有被阻止。因此，精通这些语言的滥用者可以毫不费力地逃避这种封锁。",
        "title_zh": "用于亲密伴侣监控的安卓两用应用的全球调查",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/popets/popets2022.html",
        "conf_title": "Proceedings on Privacy Enhancing Technologies, Volume 2022",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.2478/popets-2021-0058",
        "title": "ZKSENSE: A Friction-less Privacy-Preserving Human Attestation Mechanism for Mobile Devices",
        "authors": "Iñigo Querejeta-Azurmendi, Panagiotis Papadopoulos, Matteo Varvello, Antonio Nappa, Jiexin Zhang, Benjamin Livshits",
        "abstract": "Abstract Recent studies show that 20.4% of the internet traffic originates from automated agents. To identify and block such ill-intentioned traffic, mechanisms that verify the humanness of the user are widely deployed, with CAPTCHAs being the most popular. Traditional CAPTCHAs require extra user effort (e.g., solving mathematical puzzles), which can severely downgrade the end-user’s experience, especially on mobile, and provide sporadic humanness verification of questionable accuracy. More recent solutions like Google’s reCAPTCHA v3, leverage user data, thus raising significant privacy concerns. To address these issues, we present zkSENSE: the first zero-knowledge proof-based humanness attestation system for mobile devices. zkSENSE moves the human attestation to the edge: onto the user’s very own device, where humanness of the user is assessed in a privacy-preserving and seamless manner. zkSENSE achieves this by classifying motion sensor outputs of the mobile device, based on a model trained by using both publicly available sensor data and data collected from a small group of volunteers. To ensure the integrity of the process, the classification result is enclosed in a zero-knowledge proof of humanness that can be safely shared with a remote server. We implement zkSENSE as an Android service to demonstrate its effectiveness and practicality. In our evaluation, we show that zkSENSE successfully verifies the humanness of a user across a variety of attacking scenarios and demonstrate 92% accuracy. On a two years old Samsung S9, zkSENSE’s attestation takes around 3 seconds (when visual CAPTCHAs need 9.8 seconds) and consumes a negligible amount of battery.",
        "files": {
            "openAccessPdf": "https://petsymposium.org/popets/2021/popets-2021-0058.pdf"
        },
        "abstract_zh": "摘要最近的研究表明，20.4%的互联网流量来自自动化代理。为了识别和阻止这种恶意流量，验证用户人性的机制被广泛部署，其中验证码是最受欢迎的。传统的验证码需要额外的用户努力(例如，解决数学难题)，这可能会严重降低最终用户的体验，尤其是在移动设备上，并且提供准确性有问题的零星人性验证。最近的解决方案，如谷歌的reCAPTCHA v3，利用用户数据，从而引发了严重的隐私问题。为了解决这些问题，我们提出了zkSENSE:第一个用于移动设备的基于零知识证明的人性证明系统。zkSENSE将人类证明移动到边缘:移动到用户自己的设备上，在那里以保护隐私和无缝的方式评估用户的人性。zkSENSE通过对移动设备的运动传感器输出进行分类来实现这一目标，该分类基于通过使用公开可用的传感器数据和从一小组志愿者收集的数据训练的模型。为了确保过程的完整性，分类结果被包含在零知识人类证明中，该证明可以安全地与远程服务器共享。我们将zkSENSE实现为一个Android服务来展示它的有效性和实用性。在我们的评估中，我们表明zkSENSE成功地验证了用户在各种攻击场景中的人性，并展示了92%的准确性。在两年前的三星S9上，zkSENSE的认证需要大约3秒钟(而视觉验证码需要9.8秒)，并且消耗的电池量可以忽略不计。",
        "title_zh": "ZKSENSE:一种面向移动设备的无摩擦隐私保护人类证明机制",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/popets/popets2021.html",
        "conf_title": "Proceedings on Privacy Enhancing Technologies, Volume 2021",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.2478/popets-2021-0062",
        "title": "Less is More: A privacy-respecting Android malware classifier using federated learning",
        "authors": "Rafa Gálvez, Veelasha Moonsamy, Claudia Díaz",
        "abstract": "Abstract In this paper we present LiM (‘Less is More’), a malware classification framework that leverages Federated Learning to detect and classify malicious apps in a privacy-respecting manner. Information about newly installed apps is kept locally on users’ devices, so that the provider cannot infer which apps were installed by users. At the same time, input from all users is taken into account in the federated learning process and they all benefit from better classification performance. A key challenge of this setting is that users do not have access to the ground truth (i.e. they cannot correctly identify whether an app is malicious). To tackle this, LiM uses a safe semi-supervised ensemble that maximizes classification accuracy with respect to a baseline classifier trained by the service provider (i.e. the cloud). We implement LiM and show that the cloud server has F1 score of 95%, while clients have perfect recall with only 1 false positive in > 100 apps, using a dataset of 25K clean apps and 25K malicious apps, 200 users and 50 rounds of federation. Furthermore, we conduct a security analysis and demonstrate that LiM is robust against both poisoning attacks by adversaries who control half of the clients, and inference attacks performed by an honest-but-curious cloud server. Further experiments with Ma-MaDroid’s dataset confirm resistance against poisoning attacks and a performance improvement due to the federation.",
        "files": {
            "openAccessPdf": "https://petsymposium.org/popets/2021/popets-2021-0062.pdf"
        },
        "abstract_zh": "摘要在本文中，我们介绍了LiM(“少即是多”)，这是一个恶意软件分类框架，它利用联合学习以尊重隐私的方式检测和分类恶意应用程序。关于新安装的应用程序的信息保存在用户的本地设备上，因此提供商无法推断用户安装了哪些应用程序。同时，来自所有用户的输入在联合学习过程中被考虑，并且他们都受益于更好的分类性能。这种设置的一个主要挑战是用户无法访问基本事实(即，他们无法正确识别应用程序是否是恶意的)。为了解决这个问题，LiM使用安全的半监督集成，相对于由服务提供商(即云)训练的基线分类器，最大化分类准确度。我们实现了LiM，并表明云服务器的F1分数为95%，而客户端在超过100个应用中只有1个误报，使用25K干净应用和25K恶意应用的数据集，200个用户和50轮联合。此外，我们进行了安全分析，并证明LiM对控制一半客户端的对手的中毒攻击和诚实但好奇的云服务器执行的推理攻击都是鲁棒的。对Ma-MaDroid数据集的进一步实验证实了对中毒攻击的抵抗以及由于联邦而带来的性能改进。",
        "title_zh": "少即是多:使用联邦学习的尊重隐私的Android恶意软件分类器",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/popets/popets2021.html",
        "conf_title": "Proceedings on Privacy Enhancing Technologies, Volume 2021",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.2478/popets-2020-0018",
        "title": "Privacy-Preserving Payment Splitting",
        "authors": "Saba Eskandarian, Mihai Christodorescu, Payman Mohassel",
        "abstract": "Abstract Widely used payment splitting apps allow members of a group to keep track of debts between members by sending charges for expenses paid by one member on behalf of others. While offering a great deal of convenience, these apps gain access to sensitive data on users’ financial transactions. In this paper, we present a payment splitting app that hides all transaction data within a group from the service provider, provides privacy protections between users in a group, and provides integrity against malicious users or even a malicious server. The core protocol proceeds in a series of rounds in which users either submit real data or cover traffic, and the server blindly updates balances, informs users of charges, and computes integrity checks on user-submitted data. Our protocol requires no cryptographic operations on the server, and after a group’s initial setup, the only cryptographic tool users need is AES. We implement the payment splitting protocol as an Android app and the accompanying server. We find that, for realistic group sizes, it requires fewer than 50 milliseconds per round of computation on a user’s phone and the server requires fewer than 300 microseconds per round for each group, meaning that our protocol enjoys excellent performance and scalability properties.",
        "files": {
            "openAccessPdf": "http://arxiv.org/pdf/1911.09222"
        },
        "abstract_zh": "摘要广泛使用的支付拆分应用程序允许一个组的成员通过发送一个成员代表其他成员支付的费用来跟踪成员之间的债务。在提供大量便利的同时，这些应用程序可以获取用户金融交易的敏感数据。在本文中，我们提出了一种支付拆分应用，该应用向服务提供商隐藏组内的所有交易数据，提供组内用户之间的隐私保护，并提供针对恶意用户甚至恶意服务器的完整性。核心协议在一系列回合中进行，在这些回合中，用户要么提交真实数据，要么覆盖流量，服务器盲目地更新余额，通知用户收费，并对用户提交的数据进行完整性检查。我们的协议不需要在服务器上进行加密操作，并且在组的初始设置之后，用户需要的唯一加密工具是AES。我们将支付分割协议实现为一个Android应用程序和附带的服务器。我们发现，对于实际的组大小，在用户的电话上每轮计算需要少于50毫秒，并且服务器对于每个组每轮需要少于300微秒，这意味着我们的协议享有优异的性能和可伸缩性。",
        "title_zh": "保护隐私的支付分割",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/popets/popets2020.html",
        "conf_title": "Proceedings on Privacy Enhancing Technologies, Volume 2020",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.2478/popets-2020-0029",
        "title": "Angel or Devil? A Privacy Study of Mobile Parental Control Apps",
        "authors": "Álvaro Feal, Paolo Calciati, Narseo Vallina-Rodriguez, Carmela Troncoso, Alessandra Gorla",
        "abstract": "Abstract Android parental control applications are used by parents to monitor and limit their children’s mobile behaviour (e.g., mobile apps usage, web browsing, calling, and texting). In order to offer this service, parental control apps require privileged access to system resources and access to sensitive data. This may significantly reduce the dangers associated with kids’ online activities, but it raises important privacy concerns. These concerns have so far been overlooked by organizations providing recommendations regarding the use of parental control applications to the public. We conduct the first in-depth study of the Android parental control app’s ecosystem from a privacy and regulatory point of view. We exhaustively study 46 apps from 43 developers which have a combined 20M installs in the Google Play Store. Using a combination of static and dynamic analysis we find that: these apps are on average more permissions-hungry than the top 150 apps in the Google Play Store, and tend to request more dangerous permissions with new releases; 11% of the apps transmit personal data in the clear; 34% of the apps gather and send personal information without appropriate consent; and 72% of the apps share data with third parties (including online advertising and analytics services) without mentioning their presence in their privacy policies. In summary, parental control applications lack transparency and lack compliance with regulatory requirements. This holds even for those applications recommended by European and other national security centers.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "摘要父母使用Android家长控制应用程序来监控和限制孩子的移动行为(例如，移动应用程序的使用、网页浏览、通话和发短信)。为了提供这项服务，家长控制应用程序需要对系统资源和敏感数据的特权访问。这可能会大大减少与孩子的网上活动相关的危险，但它提出了重要的隐私问题。到目前为止，向公众提供有关使用家长控制应用程序的建议的组织忽略了这些问题。我们从隐私和监管的角度对Android父母控制应用的生态系统进行了首次深入研究。我们详尽地研究了来自43家开发商的46款应用，它们在谷歌Play商店总共有2000万次安装。结合静态和动态分析，我们发现:这些应用程序平均比谷歌Play商店排名前150位的应用程序更渴望权限，并倾向于在新版本中请求更危险的权限；11%的应用程序明文传输个人数据；34%的应用程序在未经适当同意的情况下收集和发送个人信息；72%的应用程序与第三方(包括在线广告和分析服务)共享数据，而没有在其隐私政策中提及它们的存在。总之，家长控制应用程序缺乏透明度，并且不符合监管要求。这甚至适用于欧洲和其他国家安全中心推荐的应用程序。",
        "title_zh": "天使还是魔鬼？移动家长控制应用的隐私研究",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/popets/popets2020.html",
        "conf_title": "Proceedings on Privacy Enhancing Technologies, Volume 2020",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.2478/popets-2020-0034",
        "title": "Privacy at a Glance: The User-Centric Design of Glanceable Data Exposure Visualizations",
        "authors": "Daricia Wilkinson, Paritosh Bahirat, Moses Namara, Jing Lyu, Arwa Alsubhi, Jessica Qiu, Pamela J. Wisniewski, Bart P. Knijnenburg",
        "abstract": "Abstract Smartphone users are often unaware of mobile applications’ (“apps”) third-party data collection and sharing practices, which put them at higher risk of privacy breaches. One way to raise awareness of these practices is by providing unobtrusive but pervasive visualizations that can be presented in a glanceable manner. In this paper, we applied Wogalter et al.’s Communication-Human Information Processing model (C-HIP) to design and prototype eight different visualizations that depict smartphone apps’ data sharing activities. We varied the granularity and type (i.e., data-centric or app-centric) of information shown to users and used the screensaver/lock screen as a design probe. Through interview-based design probes with Android users (n=15), we investigated the aspects of the data exposure visualizations that influenced users’ comprehension and privacy awareness. Our results shed light on how users’ perceptions of privacy boundaries influence their preference regarding the information structure of these visualizations, and the tensions that exist in these visualizations between glanceability and granularity. We discuss how a pervasive, soft paternalistic approach to privacy-related visualization may raise awareness by enhancing the transparency of information flow, thereby, unobtrusively increasing users’ understanding of data sharing practices of mobile apps. We also discuss implications for privacy research and glanceable security.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "摘要智能手机用户通常不知道移动应用程序(“应用程序”)的第三方数据收集和共享做法，这使他们面临更高的隐私泄露风险。提高对这些实践的认识的一个方法是提供不显眼但普遍的可视化，可以用一种简略的方式呈现。在本文中，我们应用Wogalter等人的沟通-人类信息处理模型(C-HIP)来设计和构建八种不同的可视化模型，这些模型描述了智能手机应用程序的数据共享活动。我们改变了显示给用户的信息的粒度和类型(即以数据为中心或以应用程序为中心),并使用屏保/锁屏作为设计探针。通过对Android用户(n=15)进行基于访谈的设计调查，我们研究了影响用户理解和隐私意识的数据暴露可视化的各个方面。我们的结果揭示了用户对隐私边界的感知如何影响他们对这些可视化信息结构的偏好，以及这些可视化中存在的可浏览性和粒度之间的紧张关系。我们讨论了一种普遍的、软家长式的隐私相关可视化方法如何通过增强信息流的透明度来提高意识，从而不引人注目地增加用户对移动应用程序数据共享实践的理解。我们还讨论了隐私研究和简略安全的含义。",
        "title_zh": "隐私一览:以用户为中心的简略数据暴露可视化设计",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/popets/popets2020.html",
        "conf_title": "Proceedings on Privacy Enhancing Technologies, Volume 2020",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.2478/popets-2020-0050",
        "title": "The Price is (Not) Right: Comparing Privacy in Free and Paid Apps",
        "authors": "Catherine Han, Irwin Reyes, Álvaro Feal, Joel Reardon, Primal Wijesekera, Narseo Vallina-Rodriguez, Amit Elazari Bar On, Kenneth A. Bamberger, Serge Egelman",
        "abstract": "Abstract It is commonly assumed that “free” mobile apps come at the cost of consumer privacy and that paying for apps could offer consumers protection from behavioral advertising and long-term tracking. This work empirically evaluates the validity of this assumption by comparing the privacy practices of free apps and their paid premium versions, while also gauging consumer expectations surrounding free and paid apps. We use both static and dynamic analysis to examine 5,877 pairs of free Android apps and their paid counterparts for differences in data collection practices and privacy policies between pairs. To understand user expectations for paid apps, we conducted a 998-participant online survey and found that consumers expect paid apps to have better security and privacy behaviors. However, there is no clear evidence that paying for an app will actually guarantee protection from extensive data collection in practice. Given that the free version had at least one thirdparty library or dangerous permission, respectively, we discovered that 45% of the paid versions reused all of the same third-party libraries as their free versions, and 74% of the paid versions had all of the dangerous permissions held by the free app. Likewise, our dynamic analysis revealed that 32% of the paid apps exhibit all of the same data collection and transmission behaviors as their free counterparts. Finally, we found that 40% of apps did not have a privacy policy link in the Google Play Store and that only 3.7% of the pairs that did reflected differences between the free and paid versions.",
        "files": {
            "openAccessPdf": "https://zenodo.org/record/4436082/files/%5B22990984%20-%20Proceedings%20on%20Privacy%20Enhancing%20Technologies%5D%20The%20Price%20is%20%28Not%29%20Right_%20Comparing%20Privacy%20in%20Free%20and%20Paid%20Apps.pdf"
        },
        "abstract_zh": "摘要人们普遍认为，“免费”的移动应用程序是以牺牲消费者隐私为代价的，为应用程序付费可以保护消费者免受行为广告和长期跟踪的影响。这项工作通过比较免费应用程序及其付费高级版本的隐私做法，同时衡量消费者对免费和付费应用程序的期望，从经验上评估了这一假设的有效性。我们使用静态和动态分析来检查5，877对免费的Android应用程序和它们的付费应用程序，以了解它们之间在数据收集实践和隐私政策方面的差异。为了了解用户对付费应用的期望，我们进行了一项有998名参与者的在线调查，发现消费者希望付费应用具有更好的安全性和隐私行为。然而，没有明确的证据表明，为应用程序付费实际上会保证在实践中免受大量数据收集的影响。假设免费版本至少分别有一个第三方库或危险权限，我们发现45%的付费版本重用所有相同的第三方库作为其免费版本，74%的付费版本拥有免费应用程序拥有的所有危险权限。同样，我们的动态分析显示，32%的付费应用表现出与免费应用相同的数据收集和传输行为。最后，我们发现，在谷歌Play商店，40%的应用程序没有隐私政策链接，只有3.7%的应用程序反映了免费和付费版本之间的差异。",
        "title_zh": "价格(不)合适:比较免费和付费应用中的隐私",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/popets/popets2020.html",
        "conf_title": "Proceedings on Privacy Enhancing Technologies, Volume 2020",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.2478/popets-2020-0057",
        "title": "A Privacy-Focused Systematic Analysis of Online Status Indicators",
        "authors": "Camille Cobb, Lucy Simko, Tadayoshi Kohno, Alexis Hiniker",
        "abstract": "Abstract Online status indicators (or OSIs, i.e., interface elements that communicate whether a user is online) can leak potentially sensitive information about users. In this work, we analyze 184 mobile applications to systematically characterize the existing design space of OSIs. We identified 40 apps with OSIs across a variety of genres and conducted a design review of the OSIs in each, examining both Android and iOS versions of these apps. We found that OSI design decisions clustered into four major categories, namely: appearance, audience, settings, and fidelity to actual user behavior. Less than half of these apps allow users change the default settings for OSIs. Informed by our findings, we discuss: 1) how these design choices support adversarial behavior, 2) design guidelines for creating consistent, privacy-conscious OSIs, and 3) a set of novel design concepts for building future tools to augment users’ ability to control and understand the presence information they broadcast. By connecting the common design patterns we document to prior work on privacy in social technologies, we contribute an empirical understanding of the systematic ways in which OSIs can make users more or less vulnerable to unwanted information disclosure.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "摘要在线状态指示器(或OSIs，即传达用户是否在线的界面元素)可能会泄露关于用户的潜在敏感信息。在这项工作中，我们分析了184个移动应用程序，以系统地表征OSIs的现有设计空间。我们在各种类型中确定了40个具有OSIs的应用程序，并对每个应用程序的OSIs进行了设计审查，检查了这些应用程序的Android和iOS版本。我们发现OSI设计决策分为四大类，即:外观、受众、设置和对实际用户行为的忠实度。不到一半的应用程序允许用户更改OSIs的默认设置。根据我们的发现，我们讨论:1)这些设计选择如何支持敌对行为，2)创建一致的、有隐私意识的OSIs的设计指南，以及3)一组用于构建未来工具的新颖设计概念，以增强用户控制和理解他们广播的在场信息的能力。通过将我们记录的常见设计模式与先前关于社交技术中的隐私的工作联系起来，我们有助于对OSIs可能使用户更容易受到不想要的信息泄露的系统性方式的经验性理解。",
        "title_zh": "在线状态指标的隐私聚焦系统分析",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/popets/popets2020.html",
        "conf_title": "Proceedings on Privacy Enhancing Technologies, Volume 2020",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.2478/popets-2020-0083",
        "title": "How private is your period?: A systematic analysis of menstrual app privacy policies",
        "authors": "Laura Shipp, Jorge Blasco",
        "abstract": "Abstract Menstruapps are mobile applications that can track a user’s reproductive cycle, sex life and health in order to provide them with algorithmically derived insights into their body. These apps are now hugely popular, with the most favoured boasting over 100 million downloads. In this study, we investigate the privacy practices of a set of 30 Android menstruapps, a set which accounts for nearly 200 million downloads.We measured how the apps present information and behave on a number of privacy related topics, such as the complexity of the language used, the information collected by them, the involvement of third parties and how they describe user rights. Our results show that while common pieces of personal data such as name, email, etc. are treated appropriately by most applications, reproductive-related data is not covered by the privacy policies and in most cases, completely disregarded, even when it is required for the apps to work. We have informed app developers of our findings and have tried to engage them in dialogue around improving their privacy practices.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "摘要月经应用程序是一种移动应用程序，可以跟踪用户的生殖周期、性生活和健康，以便为他们提供通过算法获得的对他们身体的见解。这些应用程序现在非常受欢迎，最受欢迎的下载量超过1亿次。在这项研究中，我们调查了一组30个Android月经应用程序的隐私做法，这一组占近2亿次下载。我们衡量了应用程序如何呈现信息以及在许多隐私相关主题上的表现，例如所用语言的复杂性、它们收集的信息、第三方的参与以及它们如何描述用户权利。我们的研究结果表明，虽然姓名、电子邮件等常见的个人数据。被大多数应用程序适当地处理，生殖相关的数据不在隐私政策的覆盖范围内，并且在大多数情况下，完全被忽略，即使它是应用程序工作所必需的。我们已经将我们的发现告知了应用程序开发者，并试图让他们参与到改善隐私实践的对话中来。",
        "title_zh": "你的经期有多私密？:月经应用隐私政策的系统分析",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/popets/popets2020.html",
        "conf_title": "Proceedings on Privacy Enhancing Technologies, Volume 2020",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.2478/popets-2019-0020",
        "title": "Mitigating Location Privacy Attacks on Mobile Devices using Dynamic App Sandboxing",
        "authors": "Sashank Narain, Guevara Noubir",
        "abstract": "Abstract We present the design, implementation and evaluation of a system, called MATRIX, developed to protect the privacy of mobile device users from location inference and sensor side-channel attacks. MATRIX gives users control and visibility over location and sensor (e.g., Accelerometers and Gyroscopes) accesses by mobile apps. It implements a PrivoScope service that audits all location and sensor accesses by apps on the device and generates real-time notifications and graphs for visualizing these accesses; and a Synthetic Location service to enable users to provide obfuscated or synthetic location trajectories or sensor traces to apps they find useful, but do not trust with their private information. The services are designed to be extensible and easy for users, hiding all of the underlying complexity from them. MATRIX also implements a Location Provider component that generates realistic privacy-preserving synthetic identities and trajectories for users by incorporating traffic information using historical data from Google Maps Directions API, and accelerations using statistical information from user driving experiments. These mobility patterns are generated by modeling/solving user schedule using a randomized linear program and modeling/solving for user driving behavior using a quadratic program. We extensively evaluated MATRIX using user studies, popular location-driven apps and machine learning techniques, and demonstrate that it is portable to most Android devices globally, is reliable, has low-overhead, and generates synthetic trajectories that are difficult to differentiate from real mobility trajectories by an adversary.",
        "files": {
            "openAccessPdf": "http://arxiv.org/pdf/1808.04490"
        },
        "abstract_zh": "摘要我们介绍了一个名为MATRIX的系统的设计、实现和评估，该系统用于保护移动设备用户的隐私免受位置推断和传感器侧信道攻击。MATRIX让用户能够通过移动应用程序控制和查看位置和传感器(如加速度计和陀螺仪)访问。它实现了PrivoScope服务，该服务通过设备上的应用程序审计所有位置和传感器访问，并生成实时通知和图形以可视化这些访问；以及合成定位服务，使用户能够向他们认为有用但不信任其私人信息的应用程序提供模糊或合成的位置轨迹或传感器跟踪。这些服务被设计成可扩展的，对用户来说很简单，隐藏了所有潜在的复杂性。MATRIX还实现了一个位置提供商组件，通过使用来自Google Maps Directions API的历史数据合并交通信息，并使用来自用户驾驶实验的统计信息加速，为用户生成真实的隐私保护合成身份和轨迹。这些移动模式是通过使用随机线性程序对用户时间表进行建模/求解以及使用二次程序对用户驾驶行为进行建模/求解而生成的。我们使用用户研究、流行的位置驱动应用程序和机器学习技术广泛评估了MATRIX，并证明它可移植到全球大多数Android设备，是可靠的，具有低开销，并生成难以与对手的真实移动轨迹区分的合成轨迹。",
        "title_zh": "使用动态应用沙箱减轻移动设备上的位置隐私攻击",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/popets/popets2019.html",
        "conf_title": "Proceedings on Privacy Enhancing Technologies, Volume 2019",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.2478/popets-2019-0027",
        "title": "Skip, Skip, Skip, Accept!!!: A Study on the Usability of Smartphone Manufacturer Provided Default Features and User Privacy",
        "authors": "Kopo M. Ramokapane, Anthony C. Mazeli, Awais Rashid",
        "abstract": "Abstract Smartphone manufacturer provided default features (e.g., default location services, iCloud, Google Assistant, ad tracking) enhance the usability and extend the functionality of these devices. Prior studies have highlighted smartphone vulnerabilities and how users’ data can be harvested without their knowledge. However, little is known about manufacturer provided default features in this regard—their usability concerning configuring them during usage, and how users perceive them with regards to privacy. To bridge this gap, we conducted a task-based study with 27 Android and iOS smart-phone users in order to learn about their perceptions, concerns and practices, and to understand the usability of these features with regards to privacy. We explored the following: users’ awareness of these features, why and when do they change the settings of these features, the challenges they face while configuring these features, and finally the mitigation strategies they adopt. Our findings reveal that users of both platforms have limited awareness of these features and their privacy implications. Awareness of these features does not imply that a user can easily locate and adjust them when needed. Furthermore, users attribute their failure to configure default features to hidden controls and insufficient knowledge on how to configure them. To cope with difficulties of finding controls, users employ various coping strategies, some of which are platform specific but most often applicable to both platforms. However, some of these coping strategies leave users vulnerable.",
        "files": {
            "openAccessPdf": "https://research-information.bris.ac.uk/ws/files/197134887/_22990984_Proceedings_on_Privacy_Enhancing_Technologies_Skip_Skip_Skip_Accept_A_Study_on_the_Usability_of_Smartphone_Manufacturer_Provided_Default_Features_and_User_Privacy.pdf"
        },
        "abstract_zh": "摘要智能手机制造商提供的默认功能(例如，默认位置服务、iCloud、Google Assistant、广告跟踪)增强了这些设备的可用性并扩展了其功能。之前的研究强调了智能手机的漏洞以及如何在用户不知情的情况下获取用户数据。然而，我们对制造商提供的默认功能知之甚少——它们在使用过程中配置的可用性，以及用户在隐私方面如何看待它们。为了弥合这一差距，我们对27名Android和iOS智能手机用户进行了一项基于任务的研究，以了解他们的看法、担忧和做法，并了解这些功能在隐私方面的可用性。我们探讨了以下内容:用户对这些功能的认识，他们为什么以及何时更改这些功能的设置，他们在配置这些功能时面临的挑战，以及他们采取的缓解策略。我们的调查结果显示，这两个平台的用户对这些功能及其隐私影响的认识有限。意识到这些特征并不意味着用户可以在需要时容易地定位和调整它们。此外，用户将他们未能配置默认功能归因于隐藏的控件和关于如何配置它们的知识不足。为了应对寻找控件的困难，用户采用了各种应对策略，其中一些是特定于平台的，但大多数情况下适用于两种平台。然而，这些应对策略中的一些使用户易受攻击。",
        "title_zh": "跳过，跳过，跳过，接受！！！智能手机制造商提供的默认功能和用户隐私的可用性研究",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/popets/popets2019.html",
        "conf_title": "Proceedings on Privacy Enhancing Technologies, Volume 2019",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.2478/popets-2019-0031",
        "title": "AccessiLeaks: Investigating Privacy Leaks Exposed by the Android Accessibility Service",
        "authors": "Mohammad Naseri, Nataniel P. Borges Jr., Andreas Zeller, Romain Rouvoy",
        "abstract": "Abstract To support users with disabilities, Android provides the accessibility services, which implement means of navigating through an app. According to the Android developer’s guide: “Accessibility services should only be used to assist users with disabilities in using Android devices and apps”. However, developers are free to use this service without any restrictions, giving them critical privileges such as monitoring user input or screen content to capture sensitive information. In this paper, we show that simply enabling the accessibility service leaves 72 % of the top finance a nd 80 % of the top social media apps vulnerable to eavesdropping attacks, leaking sensitive information such as logins and passwords. A combination of several tools and recommendations could mitigate the privacy risks: We introduce an analysis technique that detects most of these issues automatically, e.g. in an app store. We also found that these issues can be automatically fixed in almost all cases; our fixes have b een accepted by 70 % of the surveyed developers. Finally, we designed a notification mechanism which would warn users against possible misuses of the accessibility services; 50 % of users would follow these notifications.",
        "files": {
            "openAccessPdf": "https://hal.inria.fr/hal-01929049/file/naseri-popets19.pdf"
        },
        "abstract_zh": "摘要为了支持残疾用户，Android提供了可访问性服务，实现了在应用程序中导航的方法。根据Android开发人员指南:“辅助功能服务应仅用于协助残疾用户使用Android设备和应用程序”。然而，开发人员可以不受任何限制地自由使用这项服务，并赋予他们关键的权限，如监控用户输入或屏幕内容以捕捉敏感信息。在本文中，我们表明，简单地启用可访问性服务会使72 %的顶级金融应用和80 %的顶级社交媒体应用容易受到窃听攻击，泄露登录和密码等敏感信息。几种工具和建议的组合可以减轻隐私风险:我们引入了一种分析技术，可以自动检测大多数这些问题，例如在应用程序商店中。我们还发现，这些问题几乎在所有情况下都可以自动修复；我们的修正已经被70 %的被调查开发者所接受。最后，我们设计了一个通知机制，可以警告用户不要滥用可访问性服务；50 %的用户会关注这些通知。",
        "title_zh": "AccessiLeaks:调查安卓无障碍服务暴露的隐私泄露",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/popets/popets2019.html",
        "conf_title": "Proceedings on Privacy Enhancing Technologies, Volume 2019",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.2478/popets-2019-0037",
        "title": "MAPS: Scaling Privacy Compliance Analysis to a Million Apps",
        "authors": "Sebastian Zimmeck, Peter Story, Daniel Smullen, Abhilasha Ravichander, Ziqi Wang, Joel R. Reidenberg, N. Cameron Russell, Norman M. Sadeh",
        "abstract": "Abstract The app economy is largely reliant on data collection as its primary revenue model. To comply with legal requirements, app developers are often obligated to notify users of their privacy practices in privacy policies. However, prior research has suggested that many developers are not accurately disclosing their apps’ privacy practices. Evaluating discrepancies between apps’ code and privacy policies enables the identification of potential compliance issues. In this study, we introduce the Mobile App Privacy System (MAPS) for conducting an extensive privacy census of Android apps. We designed a pipeline for retrieving and analyzing large app populations based on code analysis and machine learning techniques. In its first application, we conduct a privacy evaluation for a set of 1,035,853 Android apps from the Google Play Store. We find broad evidence of potential non-compliance. Many apps do not have a privacy policy to begin with. Policies that do exist are often silent on the practices performed by apps. For example, 12.1% of apps have at least one location-related potential compliance issue. We hope that our extensive analysis will motivate app stores, government regulators, and app developers to more effectively review apps for potential compliance issues.",
        "files": {
            "openAccessPdf": "https://ir.lawnet.fordham.edu/cgi/viewcontent.cgi?article=2034&context=faculty_scholarship"
        },
        "abstract_zh": "摘要应用经济在很大程度上依赖于数据收集作为其主要的收入模式。为了符合法律要求，应用程序开发人员通常有义务在隐私政策中告知用户他们的隐私做法。然而，之前的研究表明，许多开发者并没有准确地披露他们应用的隐私做法。评估应用程序代码和隐私政策之间的差异有助于识别潜在的合规性问题。在这项研究中，我们引入了移动应用隐私系统(MAPS ),用于对Android应用进行广泛的隐私普查。我们基于代码分析和机器学习技术，设计了一个用于检索和分析大型应用群体的管道。在其第一个应用中，我们对来自谷歌Play商店的1，035，853个Android应用进行了隐私评估。我们发现了大量潜在违规的证据。许多应用程序一开始就没有隐私政策。确实存在的政策通常对应用程序的行为保持沉默。例如，12.1%的应用至少有一个与位置相关的潜在合规问题。我们希望我们的广泛分析将激励应用商店、政府监管机构和应用开发者更有效地审查应用的潜在合规性问题。",
        "title_zh": "地图:将隐私合规性分析扩展到一百万个应用",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/popets/popets2019.html",
        "conf_title": "Proceedings on Privacy Enhancing Technologies, Volume 2019",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1515/popets-2017-0015",
        "title": "PrivateRide: A Privacy-Enhanced Ride-Hailing Service",
        "authors": "Anh Pham, Italo Dacosta, Bastien Jacot-Guillarmod, Kévin Huguenin, Taha Hajar, Florian Tramèr, Virgil D. Gligor, Jean-Pierre Hubaux",
        "abstract": "Abstract In the past few years, we have witnessed a rise in the popularity of ride-hailing services (RHSs), an online marketplace that enables accredited drivers to use their own cars to drive ride-hailing users. Unlike other transportation services, RHSs raise significant privacy concerns, as providers are able to track the precise mobility patterns of millions of riders worldwide. We present the first survey and analysis of the privacy threats in RHSs. Our analysis exposes high-risk privacy threats that do not occur in conventional taxi services. Therefore, we propose PrivateRide, a privacy-enhancing and practical solution that offers anonymity and location privacy for riders, and protects drivers’ information from harvesting attacks. PrivateRide lowers the high-risk privacy threats in RHSs to a level that is at least as low as that of many taxi services. Using real data-sets from Uber and taxi rides, we show that PrivateRide significantly enhances riders’ privacy, while preserving tangible accuracy in ride matching and fare calculation, with only negligible effects on convenience. Moreover, by using our Android implementation for experimental evaluations, we show that PrivateRide’s overhead during ride setup is negligible. In short, we enable privacy-conscious riders to achieve levels of privacy that are not possible in current RHSs and even in some conventional taxi services, thereby offering a potential business differentiator.",
        "files": {
            "openAccessPdf": "https://hal.archives-ouvertes.fr/hal-01401879/file/Pham2017PoPETS.pdf"
        },
        "abstract_zh": "摘要在过去的几年中，我们目睹了乘车服务（RHSS）的普及，这是一个在线市场，使经认可的驾驶员能够使用自己的汽车来驾驶乘车用户。 与其他运输服务不同，RHS提出了重大的隐私问题，因为提供商能够跟踪全球数百万骑手的确切流动性模式。 我们介绍了RHS中隐私威胁的第一个调查和分析。 我们的分析暴露了常规出租车服务中未发生的高风险隐私威胁。 因此，我们提出了私人化的私人化和实用解决方案，可为骑手提供匿名性和位置隐私，并保护驾驶员的信息免于收获攻击。 私有ide将RHS中的高风险隐私威胁降低到至少与许多出租车服务的水平。 使用Uber和Taxi乘车的实际数据集，我们表明私有区可显着增强骑手的隐私，同时保持骑行匹配和票价计算中有形的准确性，仅对便利性的影响可忽略不计。 此外，通过使用我们的Android实施进行实验评估，我们表明私人骑行设置期间的开销可以忽略不计。 简而言之，我们使具有隐私意识的骑手能够达到当前RHS甚至某些常规出租车服务中无法实现的隐私水平，从而提供了潜在的业务差异化。",
        "title_zh": "PrivateRide:一种隐私增强的叫车服务",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/popets/popets2017.html",
        "conf_title": "Proceedings on Privacy Enhancing Technologies, Volume 2017",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1515/popets-2017-0018",
        "title": "On the Privacy and Security of the Ultrasound Ecosystem",
        "authors": "Vasilios Mavroudis, Shuang Hao, Yanick Fratantonio, Federico Maggi, Christopher Kruegel, Giovanni Vigna",
        "abstract": "Abstract Nowadays users often possess a variety of electronic devices for communication and entertainment. In particular, smartphones are playing an increasingly central role in users’ lives: Users carry them everywhere they go and often use them to control other devices. This trend provides incentives for the industry to tackle new challenges, such as cross-device authentication, and to develop new monetization schemes. A new technology based on ultrasounds has recently emerged to meet these demands. Ultrasound technology has a number of desirable features: it is easy to deploy, flexible, and inaudible by humans. This technology is already utilized in a number of different real-world applications, such as device pairing, proximity detection, and cross-device tracking. This paper examines the different facets of ultrasound-based technology. Initially, we discuss how it is already used in the real world, and subsequently examine this emerging technology from the privacy and security perspectives. In particular, we first observe that the lack of OS features results in violations of the principle of least privilege: an app that wants to use this technology currently needs to require full access to the device microphone. We then analyse real-world Android apps and find that tracking techniques based on ultrasounds suffer from a number of vulnerabilities and are susceptible to various attacks. For example, we show that ultrasound cross-device tracking deployments can be abused to perform stealthy deanonymization attacks (e.g., to unmask users who browse the Internet through anonymity networks such as Tor), to inject fake or spoofed audio beacons, and to leak a user’s private information. Based on our findings, we introduce several defense mechanisms. We first propose and implement immediately deployable defenses that empower practitioners, researchers, and everyday users to protect their privacy. In particular, we introduce a browser extension and an Android permission that enable the user to selectively suppress frequencies falling within the ultrasonic spectrum. We then argue for the standardization of ultrasound beacons, and we envision a flexible OS-level API that addresses both the effortless deployment of ultrasound-enabled applications, and the prevention of existing privacy and security problems.",
        "files": {
            "openAccessPdf": "https://discovery.ucl.ac.uk/10113437/1/%5B22990984%20-%20Proceedings%20on%20Privacy%20Enhancing%20Technologies%5D%20On%20the%20Privacy%20and%20Security%20of%20the%20Ultrasound%20Ecosystem%20%281%29.pdf"
        },
        "abstract_zh": "如今，摘要用户通常拥有各种用于通信和娱乐的电子设备。 特别是，智能手机在用户的生活中起着越来越重要的作用：用户将它们随身携带，并且经常使用它们来控制其他设备。 这种趋势为行业提供了应对新挑战的激励措施，例如跨设备身份验证，并制定新的货币化计划。 最近出现了一项基于超声波的新技术以满足这些需求。 超声技术具有许多理想的特征：人类易于部署，灵活和听不清。 该技术已经用于许多不同的现实应用程序中，例如设备配对，接近度检测和跨设备跟踪。 本文研究了基于超声的技术的不同方面。 最初，我们讨论了它在现实世界中的使用方式，并随后从隐私和安全角度研究了这一新兴技术。 特别是，我们首先观察到，缺乏操作系统功能会导致违反特权原则：目前需要使用此技术的应用需要完全访问设备麦克风。 然后，我们分析现实世界的Android应用程序，发现基于超声波的跟踪技术遭受了许多漏洞，并且容易受到各种攻击的影响。 例如，我们表明，可以滥用超声跨设备跟踪部署来执行隐形脱名字攻击（例如，揭开通过TOR等匿名网络浏览Internet的用户），以注射假或欺骗的音频和泄漏 用户的私人信息。 根据我们的发现，我们介绍了几种防御机制。 我们首先提出并实施立即可部署的防御能力，以授权从业者，研究人员和日常用户保护其隐私。 特别是，我们引入了浏览器扩展名和Android许可，该浏览器可以选择性地抑制属于超声波频谱中的频率。 然后，我们主张超声信标的标准化，并设想一个灵活的OS级API，该API既解决超声启用应用程序的轻松部署，又解决了预防现有的隐私和安全问题。",
        "title_zh": "超声生态系统的隐私和安全",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/popets/popets2017.html",
        "conf_title": "Proceedings on Privacy Enhancing Technologies, Volume 2017",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1515/popets-2017-0054",
        "title": "A Study of MAC Address Randomization in Mobile Devices and When it Fails",
        "authors": "Jeremy Martin, Travis Mayberry, Collin Donahue, Lucas Foppe, Lamont Brown, Chadwick Riggins, Erik C. Rye, Dane Brown",
        "abstract": "Abstract Media Access Control (MAC) address randomization is a privacy technique whereby mobile devices rotate through random hardware addresses in order to prevent observers from singling out their traffic or physical location from other nearby devices. Adoption of this technology, however, has been sporadic and varied across device manufacturers. In this paper, we present the first wide-scale study of MAC address randomization in the wild, including a detailed breakdown of different randomization techniques by operating system, manufacturer, and model of device. We then identify multiple flaws in these implementations which can be exploited to defeat randomization as performed by existing devices. First, we show that devices commonly make improper use of randomization by sending wireless frames with the true, global address when they should be using a randomized address. We move on to extend the passive identification techniques of Vanhoef et al. to effectively defeat randomization in ~96% of Android phones. Finally, we identify a previously unknown flaw in the way wireless chipsets handle low-level control frames which applies to 100% of devices we tested. This flaw permits an active attack that can be used under certain circumstances to track any existing wireless device.",
        "files": {
            "openAccessPdf": "http://arxiv.org/pdf/1703.02874"
        },
        "abstract_zh": "抽象媒体访问控制（MAC）地址随机化是一种隐私技术，移动设备通过随机硬件地址旋转，以防止观察者从附近的其他设备中挑出其流量或物理位置。 然而，这项技术的采用是零星的，并且在设备制造商的各个方面都有不同。 在本文中，我们介绍了野外MAC地址随机化的首次大规模研究，包括通过操作系统，制造商和设备模型对不同随机技术的详细分解。 然后，我们确定这些实现中的多个缺陷，可以利用这些缺陷来击败现有设备执行的随机化。 首先，我们表明设备通常通过在应使用随机地址时发送带有真实全局地址的无线框架来不当使用随机化。 我们继续扩展Vanhoef等人的被动识别技术。 有效地在约96％的Android手机中击败随机化。 最后，我们确定了一个以前未知的缺陷，无线芯片组处理低级控制帧的方式，该框架适用于我们测试的100％的设备。 该缺陷允许在某些情况下使用的主动攻击来跟踪任何现有的无线设备。",
        "title_zh": "移动设备中的MAC地址随机化及其失败时的研究",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/popets/popets2017.html",
        "conf_title": "Proceedings on Privacy Enhancing Technologies, Volume 2017",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1515/popets-2018-0021",
        "title": "\"Won't Somebody Think of the Children?\" Examining COPPA Compliance at Scale",
        "authors": "Irwin Reyes, Primal Wijesekera, Joel Reardon, Amit Elazari Bar On, Abbas Razaghpanah, Narseo Vallina-Rodriguez, Serge Egelman",
        "abstract": "Abstract We present a scalable dynamic analysis framework that allows for the automatic evaluation of the privacy behaviors of Android apps. We use our system to analyze mobile apps’ compliance with the Children’s Online Privacy Protection Act (COPPA), one of the few stringent privacy laws in the U.S. Based on our automated analysis of 5,855 of the most popular free children’s apps, we found that a majority are potentially in violation of COPPA, mainly due to their use of thirdparty SDKs. While many of these SDKs offer configuration options to respect COPPA by disabling tracking and behavioral advertising, our data suggest that a majority of apps either do not make use of these options or incorrectly propagate them across mediation SDKs. Worse, we observed that 19% of children’s apps collect identifiers or other personally identifiable information (PII) via SDKs whose terms of service outright prohibit their use in child-directed apps. Finally, we show that efforts by Google to limit tracking through the use of a resettable advertising ID have had little success: of the 3,454 apps that share the resettable ID with advertisers, 66% transmit other, non-resettable, persistent identifiers as well, negating any intended privacy-preserving properties of the advertising ID.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "摘要我们提出了一个可扩展的动态分析框架，该框架允许自动评估Android应用程序的隐私行为。 我们使用系统来分析移动应用程序遵守《儿童在线隐私保护法》（COPPA），这是我们对5,855个最受欢迎的免费儿童应用程序的自动分析，是美国为数不多的严格隐私法律之一，我们发现这是一个 大多数人可能违反COPPA，这主要是由于他们使用第三部分SDK。 尽管这些SDK中的许多SDK都提供了配置选项来通过禁用跟踪和行为广告来尊重COPPA，但我们的数据表明，大多数应用程序要么不使用这些选项，要么在调解SDK上不正确地传播它们。 更糟糕的是，我们观察到，有19％的儿童应用程序通过SDK收集标识符或其他个人身份信息（PII），其服务条款完全禁止其在儿童指导的应用程序中使用。 最后，我们表明，Google为通过使用可重置广告ID的使用而限制跟踪的努力几乎没有成功：在与广告商共享可重复ID的3,454个应用程序中，有66％的人也会传输其他，不可撤销的，持久的标识符， 否定广告ID的任何预期隐私权属性。",
        "title_zh": "“不会有人想到孩子们吗？”大规模检查COPPA合规性",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/popets/popets2018.html",
        "conf_title": "Proceedings on Privacy Enhancing Technologies, Volume 2018",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1515/popets-2018-0030",
        "title": "Panoptispy: Characterizing Audio and Video Exfiltration from Android Applications",
        "authors": "Elleen Pan, Jingjing Ren, Martina Lindorfer, Christo Wilson, David R. Choffnes",
        "abstract": "Abstract The high-fidelity sensors and ubiquitous internet connectivity offered by mobile devices have facilitated an explosion in mobile apps that rely on multimedia features. However, these sensors can also be used in ways that may violate user’s expectations and personal privacy. For example, apps have been caught taking pictures without the user’s knowledge and passively listened for inaudible, ultrasonic audio beacons. The developers of mobile device operating systems recognize that sensor data is sensitive, but unfortunately existing permission models only mitigate some of the privacy concerns surrounding multimedia data. In this work, we present the first large-scale empirical study of media permissions and leaks from Android apps, covering 17,260 apps from Google Play, AppChina, Mi.com, and Anzhi. We study the behavior of these apps using a combination of static and dynamic analysis techniques. Our study reveals several alarming privacy risks in the Android app ecosystem, including apps that over-provision their media permissions and apps that share image and video data with other parties in unexpected ways, without user knowledge or consent. We also identify a previously unreported privacy risk that arises from third-party libraries that record and upload screenshots and videos of the screen without informing the user and without requiring any permissions.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "摘要移动设备提供的高保真传感器和无处不在的互联网连接促进了依赖多媒体功能的移动应用程序中的爆炸。 但是，这些传感器也可以以可能违反用户的期望和个人隐私的方式使用。 例如，在没有用户知识的情况下，已经发现了应用程序拍照，并被动地听取了听不清的超声音频信标。 移动设备操作系统的开发人员认识到传感器数据很敏感，但不幸的是，现有的许可模型仅缓解了围绕多媒体数据的某些隐私问题。 在这项工作中，我们介绍了媒体权限和Android应用程序泄漏的首次大规模实证研究，涵盖了Google Play，Appchina，Mi.com和Anzhi的17,260个应用程序。 我们使用静态和动态分析技术的组合研究了这些应用程序的行为。 我们的研究揭示了Android App生态系统中的几种令人震惊的隐私风险，包括在未经用户知识或同意的情况下，以意外方式与其他方共享图像和视频数据的应用程序过度证明其媒体权限和应用程序。 我们还确定了先前未报告的隐私风险，该风险来自第三方库，该图书馆记录和上传屏幕上的屏幕截图和视频，而无需通知用户并且无需任何权限。",
        "title_zh": "Panoptispy:表征Android应用程序的音频和视频泄漏",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/popets/popets2018.html",
        "conf_title": "Proceedings on Privacy Enhancing Technologies, Volume 2018",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1515/popets-2016-0006",
        "title": "Efficient Server-Aided 2PC for Mobile Phones",
        "authors": "Payman Mohassel, Ostap Orobets, Ben Riva",
        "abstract": "Abstract Secure Two-Party Computation (2PC) protocols allow two parties to compute a function of their private inputs without revealing any information besides the output of the computation. There exist low cost general-purpose protocols for semi-honest parties that can be efficiently executed even on smartphones. However, for the case of malicious parties, current 2PC protocols are significantly less efficient, limiting their use to more resourceful devices. In this work we present an efficient 2PC protocol that is secure against malicious parties and is light enough to be used on mobile phones. The protocol is an adaptation of the protocol of Nielsen et al. (Crypto, 2012) to the Server-Aided setting, a natural relaxation of the plain model for secure computation that allows the parties to interact with a server (e.g., a cloud) who is assumed not to collude with any of the parties. Our protocol has two stages: In an offline stage - where no party knows which function is to be computed, nor who else is participating - each party interacts with the server and downloads a file. Later, in the online stage, when two parties decide to execute a 2PC together, they can use the files they have downloaded earlier to execute the computation with cost that is lower than the currently best semi-honest 2PC protocols. We show an implementation of our protocol for Android mobile phones, discuss several optimizations and report on its evaluation for various circuits. For example, the online stage for evaluating a single AES circuit requires only 2.5 seconds and can be further reduced to 1 second (amortized time) with multiple executions.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "抽象安全的两方计算（2PC）协议允许两个方计算其私人输入的函数，而无需揭示计算输出以外的任何信息。 对于半honest政党，存在低成本的通用协议，即使在智能手机上也可以有效地执行。 但是，对于恶意政党的情况，当前的2pc协议的效率明显降低，将其用于更具机智的设备。 在这项工作中，我们提出了一种有效的2PC协议，该协议可抵御恶意派对，并且足够轻到可以在手机上使用。 该方案是Nielsen等人协议的适应。 （Crypto，2012）到服务器辅助设置，这是对安全计算的普通模型的自然放松，该模型允许当事方与服务器（例如，云）交互，后者被认为不与任何当事方相交。 我们的协议有两个阶段：在离线阶段 - 没有什么方知道要计算哪个功能，也不知道谁参与 - 每个方与服务器进行交互并下载文件。 后来，在在线阶段，当两个方决定一起执行2pc时，他们可以使用他们之前下载的文件以低于当前最佳的半honest 2pc协议的成本执行计算。 我们展示了我们针对Android手机的协议的实施，讨论了几种优化并报告其对各种电路的评估。 例如，用于评估单个AES电路的在线阶段仅需要2.5秒，并且可以通过多次执行将其进一步降低到1秒（摊销时间）。",
        "title_zh": "面向移动电话的高效服务器辅助2PC",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/popets/popets2016.html",
        "conf_title": "Proceedings on Privacy Enhancing Technologies, Volume 2016",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1515/popets-2016-0020",
        "title": "Don't Interrupt Me While I Type: Inferring Text Entered Through Gesture Typing on Android Keyboards",
        "authors": "Laurent Simon, Wenduan Xu, Ross J. Anderson",
        "abstract": "Abstract We present a new side-channel attack against soft keyboards that support gesture typing on Android smartphones. An application without any special permissions can observe the number and timing of the screen hardware interrupts and system-wide software interrupts generated during user input, and analyze this information to make inferences about the text being entered by the user. System-wide information is usually considered less sensitive than app-specific information, but we provide concrete evidence that this may be mistaken. Our attack applies to all Android versions, including Android M where the SELinux policy is tightened. We present a novel application of a recurrent neural network as our classifier to infer text. We evaluate our attack against the “Google Keyboard” on Nexus 5 phones and use a real-world chat corpus in all our experiments. Our evaluation considers two scenarios. First, we demonstrate that we can correctly detect a set of pre-defined “sentences of interest” (with at least 6 words) with 70% recall and 60% precision. Second, we identify the authors of a set of anonymous messages posted on a messaging board. We find that even if the messages contain the same number of words, we correctly re-identify the author more than 97% of the time for a set of up to 35 sentences. Our study demonstrates a new way in which system-wide resources can be a threat to user privacy. We investigate the effect of rate limiting as a countermeasure but find that determining a proper rate is error-prone and fails in subtle cases. We conclude that real-time interrupt information should be made inaccessible, perhaps via a tighter SELinux policy in the next Android version.",
        "files": {
            "openAccessPdf": "https://www.pure.ed.ac.uk/ws/files/254735755/Dont_Interrupt_SIMON_DOA02032016_VOR_CC_BY_NC_ND.pdf"
        },
        "abstract_zh": "摘要我们提出了针对软键盘的新侧通道攻击，该键盘支持在Android智能手机上打字的手势。 没有任何特殊权限的应用程序可以观察屏幕硬件中断和系统范围的软件中断用户输入期间生成的屏幕硬件的数量和时机，并分析此信息以推断用户输入的文本。 通常认为，系统范围的信息比特定于应用程序的信息不太敏感，但是我们提供了具体的证据表明这可能是错误的。 我们的攻击适用于所有Android版本，包括加紧Selinux政策的Android M。 我们提出了一个经常性神经网络作为分类器推断文本的新颖应用。 我们评估了Nexus 5手机上“ Google键盘”的攻击，并在我们所有实验中都使用现实世界中的聊天语料库。 我们的评估考虑了两种情况。 首先，我们证明我们可以正确检测一组预定的“感兴趣句子”（至少有6个单词），召回70％和60％的精度。 其次，我们确定了在消息传递板上发布的一组匿名消息的作者。 我们发现，即使消息包含相同数量的单词，我们也可以正确地重新识别作者的97％以上时间，以供一组最多35个句子。 我们的研究表明，全系统资源可能对用户隐私构成威胁的新方式。 我们研究限制速率的效果作为对策，但发现确定适当的速率容易出错，并且在微妙的情况下失败。 我们得出的结论是，应该通过下一个Android版本中的更严格的Selinux策略使实时中断信息无法访问。",
        "title_zh": "我打字时不要打断我:推断通过Android键盘上的手势输入的文本",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/popets/popets2016.html",
        "conf_title": "Proceedings on Privacy Enhancing Technologies, Volume 2016",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1504/IJICS.2022.10046938",
        "title": "GENDroid - a graph-based ensemble classifier for detecting Android malware",
        "authors": "Shikha Badhani, Sunil Kumar Muttoo",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "一个基于图的集成分类器，用于检测Android恶意软件",
        "abstract_zh": "",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/ijics/ijics18.html",
        "conf_title": "International Journal of Information and Computer Security, Volume 18",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1504/IJICS.2022.121298",
        "title": "Detecting over-claim permissions and recognising dangerous permission in Android apps",
        "authors": "Monika Shah",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "检测过度声明的权限并识别Android应用程序中的危险权限",
        "abstract_zh": "",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/ijics/ijics17.html",
        "conf_title": "International Journal of Information and Computer Security, Volume 17",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1504/IJICS.2021.115345",
        "title": "On the adoption of scramble keypad for unlocking PIN-protected smartphones",
        "authors": "Geetika Kovelamudi, Bryan Watson, Jun Zheng, Srinivas Mukkamala",
        "abstract": "Personal identification number (PIN) is a simple and effective mechanism for screen unlocking but is susceptible to a number of attacks. Scramble keypad is a method that can improve the security of PIN by changing the keypad layout in each PIN-entry process. However, scramble keypad has not been provided as a standard feature in Android and iOS. In this work, we conducted a security and usability analysis of scramble keypad through theoretical analysis and user studies. The security analysis shows that scramble keypad can perfectly defend smudge attacks and greatly reduce the threats of side-channel attacks. It also has a significantly better chance to defend shoulder surfing attacks than standard keypad. The compromising of usability of scramble keypad for the improved security was also investigated. The results suggest that it is worthy to provide scramble keypad as a standard option of mobile operating systems for unlocking PIN-protected smartphones.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "个人识别码(PIN)是一种简单有效的屏幕解锁机制，但容易受到许多攻击。加密键盘是一种通过在每次PIN输入过程中更改键盘布局来提高PIN安全性的方法。然而，在Android和iOS中，加密键盘并没有作为标准功能提供。在这项工作中，我们通过理论分析和用户研究对加扰键盘进行了安全性和可用性分析。安全性分析表明，加扰密钥板可以很好地防御涂抹攻击，大大降低了旁路攻击的威胁。与标准键盘相比，它也有更好的机会防御肩部冲浪攻击。还研究了为了提高安全性而对加扰密钥板的可用性的损害。结果表明，提供加扰键盘作为解锁PIN保护智能手机的移动操作系统的标准选项是值得的。",
        "title_zh": "采用加密键盘解锁受PIN保护的智能手机",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/ijics/ijics15.html",
        "conf_title": "International Journal of Information and Computer Security, Volume 15",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1504/IJICS.2021.116310",
        "title": "DroidMD: an efficient and scalable Android malware detection approach at source code level",
        "authors": "Junaid Akram, Majid Mumtaz, Gul Jabeen, Ping Luo",
        "abstract": "",
        "files": {
            "openAccessPdf": "http://www.inderscience.com/info/leaflet.php?filename=IJICS_leaflet.pdf"
        },
        "abstract_zh": "",
        "title_zh": "DroidMD:一种源代码级高效可扩展的Android恶意软件检测方法",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/ijics/ijics15.html",
        "conf_title": "International Journal of Information and Computer Security, Volume 15",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3427228.3427244",
        "title": "App-Agnostic Post-Execution Semantic Analysis of Android In-Memory Forensics Artifacts",
        "authors": "Aisha I. Ali-Gombe, Alexandra Tambaoan, Angela Gurfolino, Golden G. Richard III",
        "abstract": "Over the last decade, userland memory forensics techniques and algorithms have gained popularity among practitioners, as they have proven to be useful in real forensics and cybercrime investigations. These techniques analyze and recover objects and artifacts from process memory space that are of critical importance in investigations. Nonetheless, the major drawback of existing techniques is that they cannot determine the origin and context within which the recovered object exists without prior knowledge of the application logic. Thus, in this research, we present a solution to close the gap between application-specific and application-generic techniques. We introduce OAGen, a post-execution and app-agnostic semantic analysis approach designed to help investigators establish concrete evidence by identifying the provenance and relationships between in-memory objects in a process memory image. OAGen utilizes Points-to analysis to reconstruct a runtime’s object allocation network. The resulting graph is then fed as an input into our semantic analysis algorithms to determine objects’ origin, context, and scope in the network. The results of our experiments exhibit OAGen’s ability to effectively create an allocation network even for memory-intensive applications with thousands of objects, like Facebook. The performance evaluation of our approach across fourteen different Android apps shows OAGen can efficiently search and decode nodes, and identify their references with a modest throughput rate. Further practical application of OAGen demonstrated in two case studies shows that our approach can aid investigators in the recovery of deleted messages and the detection of malware functionality in post-execution program analysis.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "在过去的十年中，用户域内存取证技术和算法在从业者中广受欢迎，因为它们已被证明在真正的取证和网络犯罪调查中非常有用。这些技术从进程内存空间中分析和恢复对调查至关重要的对象和工件。然而，现有技术的主要缺点是，在没有应用程序逻辑的先验知识的情况下，它们不能确定被恢复对象存在的来源和上下文。因此，在这项研究中，我们提出了一个解决方案，以弥合应用特定和应用通用技术之间的差距。我们介绍了OAGen，这是一种后执行和应用无关的语义分析方法，旨在帮助调查者通过识别进程内存图像中内存对象之间的来源和关系来建立具体的证据。OAGen利用指向分析来重建运行时的对象分配网络。然后，生成的图形作为输入输入到我们的语义分析算法中，以确定网络中对象的来源、上下文和范围。我们的实验结果展示了OAGen有效创建分配网络的能力，即使对于像脸书这样有数千个对象的内存密集型应用程序也是如此。对我们的方法在14个不同的Android应用程序上的性能评估表明，OAGen可以有效地搜索和解码节点，并以适中的吞吐率识别它们的引用。在两个案例研究中展示的OAGen的进一步实际应用表明，我们的方法可以帮助调查者在执行后程序分析中恢复被删除的消息和检测恶意软件功能。",
        "title_zh": "Android内存法医伪影的应用程序 - 不合时宜的术后语义分析",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2020.html",
        "conf_title": "ACSAC 2020: Virtual Event / Austin, TX, USA",
        "conf_url": "https://doi.org/10.1145/3427228",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3427228.3427287",
        "title": "Betrayed by the Guardian: Security and Privacy Risks of Parental Control Solutions",
        "authors": "Suzan Ali, Mounir Elgharabawy, Quentin Duchaussoy, Mohammad Mannan, Amr M. Youssef",
        "abstract": "For parents of young children and adolescents, the digital age has introduced many new challenges, including excessive screen time, inappropriate online content, cyber predators, and cyberbullying. To address these challenges, many parents rely on numerous parental control solutions on different platforms, including parental control network devices (e.g., WiFi routers) and software applications on mobile devices and laptops. While these parental control solutions may help digital parenting, they may also introduce serious security and privacy risks to children and parents, due to their elevated privileges and having access to a significant amount of privacy-sensitive data. In this paper, we present an experimental framework for systematically evaluating security and privacy issues in parental control software and hardware solutions. Using the developed framework, we provide the first comprehensive study of parental control tools on multiple platforms including network devices, Windows applications, Chrome extensions and Android apps. Our analysis uncovers pervasive security and privacy issues that can lead to leakage of private information, and/or allow an adversary to fully control the parental control solution, and thereby may directly aid cyberbullying and cyber predators.",
        "files": {
            "openAccessPdf": "http://arxiv.org/pdf/2012.06502"
        },
        "abstract_zh": "对于儿童和青少年的父母来说，数字时代带来了许多新的挑战，包括过度的屏幕时间、不适当的在线内容、网络掠夺者和网络欺凌。为了应对这些挑战，许多家长依赖于不同平台上的众多家长控制解决方案，包括家长控制网络设备(例如，WiFi路由器)以及移动设备和笔记本电脑上的软件应用。虽然这些家长控制解决方案可能有助于数字育儿，但它们也可能给孩子和家长带来严重的安全和隐私风险，因为他们拥有更高的特权，可以访问大量的隐私敏感数据。在本文中，我们提出了一个实验框架，用于系统地评估父母控制软件和硬件解决方案中的安全和隐私问题。使用开发的框架，我们首次全面研究了多种平台上的家长控制工具，包括网络设备、Windows应用程序、Chrome扩展和Android应用程序。我们的分析揭示了普遍存在的安全和隐私问题，这些问题可能导致隐私信息泄露，和/或允许对手完全控制家长控制解决方案，从而可能直接帮助网络欺凌和网络掠夺者。",
        "title_zh": "被监护人背叛：父母控制解决方案的安全和隐私风险",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2020.html",
        "conf_title": "ACSAC 2020: Virtual Event / Austin, TX, USA",
        "conf_url": "https://doi.org/10.1145/3427228",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3427228.3427252",
        "title": "Double Patterns: A Usable Solution to Increase the Security of Android Unlock Patterns",
        "authors": "Timothy J. Forman, Adam J. Aviv",
        "abstract": "Android unlock patterns are still commonly used, and roughly 25% of the respondents to our study use a pattern when unlocking their phone. Despite security issues, the design of the patterns have remained unchanged. We propose Double Patterns (DPatts), a natural advancement on Android unlock patterns that maintains the core design but instead of selecting a single pattern, a user selects two patterns entered one-after-the-other super-imposed on the same 3x3 grid. We evaluated DPatts for both security and usability through an online study (n = 634) with three treatments: a control a first pattern entry blocklist, and a blocklist for both patterns. We find that in all settings, user chosen DPatts are more secure than traditional patterns based on standard guessability metrics, more similar to that of 4-/6-digit PINs, and even more difficult to guess for a simulated attacker. Users express positive sentiments in qualitative feedback, particularly those who currently (or previously) used Android unlock patterns, and overall, participants found the DPatts interface quite usable, with high recall retention and comparable entry times to traditional patterns. In particular, current Android pattern users, the target population for DPatts, reported SUS scores in the 80th percentile and high perceptions of security and usability in responses to open- and closed-questions. Based on these findings, we would recommend adding DPatts as an advancement to Android patterns, much like allowing for added PIN length.",
        "files": {
            "openAccessPdf": "http://arxiv.org/pdf/2008.10681"
        },
        "abstract_zh": "Android解锁模式仍然被普遍使用，大约25%的受访者在解锁手机时使用这种模式。尽管存在安全问题，模式的设计仍然保持不变。我们提出双重模式(DPatts)，这是对Android解锁模式的自然改进，保持了核心设计，但用户不是选择单一模式，而是选择两个模式，一个接一个地输入，叠加在同一个3x3网格上。我们通过一项在线研究(n = 634)评估了DPatts的安全性和可用性，该研究采用了三种处理方法:a控制第一模式条目阻止列表，以及两种模式的阻止列表。我们发现，在所有设置中，用户选择的DPatts比基于标准可猜测性度量的传统模式更安全，更类似于4/6位pin，对于模拟攻击者来说甚至更难猜测。用户在定性反馈中表达了积极的情绪，特别是那些目前(或以前)使用Android解锁模式的用户，总体而言，参与者发现DPatts界面非常有用，具有较高的回忆保持率和与传统模式相当的输入时间。特别是，当前的Android模式用户(DPatts的目标人群)在回答开放式和封闭式问题时，报告的SUS得分在第80百分位，并且对安全性和可用性有很高的认知。基于这些发现，我们建议添加DPatts作为对Android模式的改进，就像允许增加PIN长度一样。",
        "title_zh": "双模式：提高Android解锁模式安全性的可用解决方案",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2020.html",
        "conf_title": "ACSAC 2020: Virtual Event / Austin, TX, USA",
        "conf_url": "https://doi.org/10.1145/3427228",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3427228.3427658",
        "title": "Up2Dep: Android Tool Support to Fix Insecure Code Dependencies",
        "authors": "Duc Cuong Nguyen, Erik Derr, Michael Backes, Sven Bugiel",
        "abstract": "Third-party libraries, especially outdated versions, can introduce and multiply security & privacy related issues to Android applications. While prior work has shown the need for tool support for developers to avoid libraries with security problems, no such a solution has yet been brought forward to Android. It is unclear how such a solution would work and which challenges need to be solved in realizing it. In this work, we want to make a step forward in this direction. We propose Up2Dep, an Android Studio extension that supports Android developers in keeping project dependencies up-to-date and in avoiding insecure libraries. To evaluate the technical feasibility of Up2Dep, we publicly released Up2Dep and tested it with Android developers (N=56) in their daily tasks. Up2Dep has delivered quick-fixes that mitigate 108 outdated dependencies and 8 outdated dependencies with security problems in 34 real projects. It was perceived by those developers as being helpful. Our results also highlight technical challenges in realizing such support, for which we provide solutions and new insights. Our results emphasize the urgent need for designated tool support to detect and update insecure outdated third-party libraries in Android apps. We believe that Up2Dep has provided a valuable step forward to improving the security of the Android ecosystem and encouraging results for tool support with a tangible impact as app developers have an easy means to fix their outdated and insecure dependencies.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "第三方库，尤其是过时的版本，会给Android应用程序带来并增加安全和隐私相关的问题。虽然之前的工作已经表明开发者需要工具支持来避免具有安全问题的库，但是还没有这样的解决方案被带到Android上。目前还不清楚这种解决方案将如何工作，以及在实现它的过程中需要解决哪些挑战。在这项工作中，我们希望朝着这个方向前进一步。我们提出了Up2Dep，一个Android Studio扩展，它支持Android开发人员保持项目依赖关系最新，并避免不安全的库。为了评估Up2Dep的技术可行性，我们公开发布了Up2Dep，并在Android开发人员(N=56)的日常任务中进行了测试。Up2Dep提供了快速修复，在34个实际项目中减少了108个过时的依赖项和8个带有安全问题的过时依赖项。这些开发者认为这是有帮助的。我们的结果还强调了实现这种支持的技术挑战，我们为此提供了解决方案和新的见解。我们的结果强调了迫切需要指定的工具支持来检测和更新Android应用程序中不安全的过时第三方库。我们相信，Up2Dep为提高Android生态系统的安全性迈出了宝贵的一步，并鼓励工具支持取得切实的成果，因为应用程序开发人员可以轻松修复他们过时和不安全的依赖关系。",
        "title_zh": "UP2DEP：Android工具支持以修复不安全的代码依赖性",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2020.html",
        "conf_title": "ACSAC 2020: Virtual Event / Austin, TX, USA",
        "conf_url": "https://doi.org/10.1145/3427228",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3427228.3427263",
        "title": "Certified Copy? Understanding Security Risks of Wi-Fi Hotspot based Android Data Clone Services",
        "authors": "Siqi Ma, Hehao Li, Wenbo Yang, Juanru Li, Surya Nepal, Elisa Bertino",
        "abstract": "Wi-Fi hotspot-based data clone services are increasingly used by Android users to transfer their user data and preferred configurations while upgrading obsolete phones to new models. Unfortunately, since the data clone services need to manipulate sensitive information protected by the Android system, vulnerabilities in the design or implementation of these services may result in data privacy breaches. In this paper we present an empirical security analysis of eight widely used Wi-Fi hotspot-based data clone services deployed to millions of Android phones. Our study evaluates those services with respect to data export/import, data transmission, and Wi-Fi configuration with respect to security requirements that the data clone procedure should satisfy. Since data clone services are closed source, we design Poirot, an analysis system to recover workflows of the data clone services and detect potential flaws. Our study reveals a series of critical security issues in the data clone services. We demonstrate two types of attacks that exploit the data clone service as a new attack surface. A vulnerable data clone service allows attackers to retrieve sensitive user data without permissions, and even inject malicious contents to compromise the system.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android用户越来越多地使用基于Wi-Fi热点的数据克隆服务来传输他们的用户数据和首选配置，同时将过时的手机升级到新型号。不幸的是，由于数据克隆服务需要操作受Android系统保护的敏感信息，这些服务的设计或实现中的漏洞可能会导致数据隐私泄露。在本文中，我们对部署在数百万部Android手机上的八种广泛使用的基于Wi-Fi热点的数据克隆服务进行了实证安全性分析。我们的研究评估了这些服务的数据导出/导入、数据传输和Wi-Fi配置，以及数据克隆过程应满足的安全要求。由于数据克隆服务是闭源的，我们设计了波洛，一个分析系统来恢复数据克隆服务的工作流并检测潜在的缺陷。我们的研究揭示了数据克隆服务中的一系列关键安全问题。我们演示了两种利用数据克隆服务作为新的攻击面的攻击。易受攻击的数据克隆服务允许攻击者在没有权限的情况下检索敏感的用户数据，甚至注入恶意内容来危害系统。",
        "title_zh": "认证副本？ 了解基于Wi-Fi热点的Android数据克隆服务的安全风险",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2020.html",
        "conf_title": "ACSAC 2020: Virtual Event / Austin, TX, USA",
        "conf_url": "https://doi.org/10.1145/3427228",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3427228.3427279",
        "title": "IvoriWatch: Exploring Transparent Integrity Verification of Remote User Input Leveraging Wearables",
        "authors": "Prakash Shrestha, Zengrui Liu, Nitesh Saxena",
        "abstract": "Several sensitive operations, such as financial transactions, email construction, configurations of safety-critical devices (e.g., medical devices or smart home systems), are often performed via web interfaces from a host machine, usually a desktop or laptop PC. It is typically easy to secure the communication link between the local host machine and the remote server, for example, via a standard cryptographic protocol (e.g., TLS). However, if the host machine itself is compromised with a trojan or malware, the malicious adversary can manipulate the user-provided input (e.g., money transfer information, email content and configuration data) that can lead to severe consequences, including financial loss, damage of reputation, security breach, and even put human lives in danger. In this paper, we introduce the notion of integrity verification for the user-provided input leveraging a wrist-worn wearable device (e.g., a watch or a bracelet). Specifically, we propose IvoriWatch1, a transparent and secure integrity verification mechanism, that inspects the user-provided input from a compromised host machine to a remote server for its integrity before acting upon the input. IvoriWatch requires the user to wear a wrist-wearable (either on one hand or both hands for better security). It verifies the validity of the payload/input received at the remote server by comparing it (i.e., the corresponding sequence of keyboard regions – left or right) with the predicted ones based on the wrist motions captured by the wrist-wearable. Only when the user input sufficiently correlates with the wrist motion data, the input is considered legitimate. We build a prototype implementation of IvoriWatch on an Android smartwatch as the wrist-wearable and a desktop PC terminal as a host machine, and evaluate it under benign and adversarial settings. Our results suggest that IvoriWatch can correctly detect the legitimacy of the input in the benign setting, and the manipulated as well as unintended input from a malicious program in the adversarial settings with minimal errors. Although IvoriWatch uses wrist movements for integrity verification, it is not a biometric scheme.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "一些敏感操作，如金融交易、电子邮件构建、安全关键设备(如医疗设备或智能家居系统)的配置，通常通过主机(通常是台式机或笔记本电脑)的web界面来执行。例如，通过标准加密协议(例如，TLS)来保护本地主机和远程服务器之间的通信链路通常是容易的。然而，如果主机本身受到特洛伊木马或恶意软件的危害，恶意对手可以操纵用户提供的输入(例如，汇款信息、电子邮件内容和配置数据)，这可能导致严重的后果，包括财务损失、名誉损害、安全漏洞，甚至危及人命。在本文中，我们介绍了利用腕戴式可穿戴设备(如手表或手镯)对用户提供的输入进行完整性验证的概念。具体来说，我们提出了IvoriWatch1，这是一种透明、安全的完整性验证机制，它在对输入采取行动之前，检查用户提供的从受损主机到远程服务器的输入的完整性。IvoriWatch要求用户佩戴可在手腕上佩戴的手表(为了更好的安全性，可以戴在一只手上或两只手上)。它通过将远程服务器接收的有效载荷/输入(即，相应的键盘区域序列——左或右)与基于腕戴式设备捕获的腕部运动的预测进行比较，来验证有效载荷/输入的有效性。只有当用户输入与腕部运动数据充分相关时，输入才被认为是合法的。我们在Android智能手表上构建了IvoriWatch的原型实现，作为可佩戴的手腕和桌面PC终端作为主机，并在良性和对抗性设置下对其进行了评估。我们的结果表明，IvoriWatch可以正确地检测良性设置中输入的合法性，以及在敌对设置中恶意程序的操纵和非预期输入，并且误差最小。虽然IvoriWatch使用手腕运动进行完整性验证，但它不是一种生物识别方案。",
        "title_zh": "IvoriWatch：探索远程用户输入利用可穿戴设备的透明完整性验证",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2020.html",
        "conf_title": "ACSAC 2020: Virtual Event / Austin, TX, USA",
        "conf_url": "https://doi.org/10.1145/3427228",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3485832.3488026",
        "title": "Dicos: Discovering Insecure Code Snippets from Stack Overflow Posts by Leveraging User Discussions",
        "authors": "Hyunji Hong, Seunghoon Woo, Heejo Lee",
        "abstract": "Online Q&A fora such as Stack Overflow assist developers to solve their faced coding problems. Despite the advantages, Stack Overflow has the potential to provide insecure code snippets that, if reused, can compromise the security of the entire software. We present Dicos, an accurate approach by examining the change history of Stack Overflow posts for discovering insecure code snippets. When a security issue was detected in a post, the insecure code is fixed to be safe through user discussions, leaving a change history. Inspired by this process, Dicos first extracts the change history from the Stack Overflow post, and then analyzes the history whether it contains security patches, by utilizing pre-selected features that can effectively identify security patches. Finally, when such changes are detected, Dicos determines that the code snippet before applying the security patch is insecure. To evaluate Dicos, we collected 1,958,283 Stack Overflow posts tagged with C, C++, and Android. When we applied Dicos on the collected posts, Dicos discovered 12,458 insecure posts (i.e., 14,719 insecure code snippets) from the collected posts with 91% precision and 93% recall. We further confirmed that the latest versions of 151 out of 2,000 popular C/C++ open-source software contain at least one insecure code snippet taken from Stack Overflow, being discovered by Dicos. Our proposed approach, Dicos, can contribute to preventing further propagation of insecure codes and thus creating a safe code reuse environment.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "在线问答论坛，如堆栈溢出，帮助开发人员解决他们面临的编码问题。尽管有这些优点，堆栈溢出也有可能提供不安全的代码片段，如果重复使用，会危及整个软件的安全性。我们提出了Dicos，一种通过检查栈溢出的变化历史来发现不安全代码片段的精确方法。当在帖子中检测到安全问题时，不安全的代码会通过用户讨论被修复为安全的，并留下更改历史。受此过程的启发，Dicos首先从堆栈溢出post中提取更改历史，然后利用预先选择的可以有效识别安全补丁的特征，分析该历史是否包含安全补丁。最后，当检测到这种变化时，Dicos确定应用安全补丁之前的代码片段是不安全的。为了评估Dicos，我们收集了1，958，283个标记为C、C++和Android的堆栈溢出帖子。当我们对收集的帖子应用Dicos时，Dicos从收集的帖子中发现了12，458个不安全的帖子(即14，719个不安全的代码片段)，准确率为91%，召回率为93%。我们进一步证实，在2000个流行的C/C++开源软件中，有151个软件的最新版本包含至少一个取自Stack Overflow的不安全代码片段，这些代码片段是由Dicos发现的。我们提出的方法Dicos有助于防止不安全代码的进一步传播，从而创建一个安全的代码重用环境。",
        "title_zh": "DICO：通过利用用户讨论来从堆栈溢出帖子中发现不安全的代码段",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2021.html",
        "conf_title": "ACSAC 2021: Virtual Event, USA",
        "conf_url": "https://doi.org/10.1145/3485832",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3485832.3485916",
        "title": "Can We Leverage Predictive Uncertainty to Detect Dataset Shift and Adversarial Examples in Android Malware Detection?",
        "authors": "Deqiang Li, Tian Qiu, Shuo Chen, Qianmu Li, Shouhuai Xu",
        "abstract": "The deep learning approach to detecting malicious software (malware) is promising but has yet to tackle the problem of dataset shift, namely that the joint distribution of examples and their labels associated with the test set is different from that of the training set. This problem causes the degradation of deep learning models without users’ notice. In order to alleviate the problem, one approach is to let a classifier not only predict the label on a given example but also present its uncertainty (or confidence) on the predicted label, whereby a defender can decide whether to use the predicted label or not. While intuitive and clearly important, the capabilities and limitations of this approach have not been well understood. In this paper, we conduct an empirical study to evaluate the quality of predictive uncertainties of malware detectors. Specifically, we re-design and build 24 Android malware detectors (by transforming four off-the-shelf detectors with six calibration methods) and quantify their uncertainties with nine metrics, including three metrics dealing with data imbalance. Our main findings are: (i) predictive uncertainty indeed helps achieve reliable malware detection in the presence of dataset shift, but cannot cope with adversarial evasion attacks; (ii) approximate Bayesian methods are promising to calibrate and generalize malware detectors to deal with dataset shift, but cannot cope with adversarial evasion attacks; (iii) adversarial evasion attacks can render calibration methods useless, and it is an open problem to quantify the uncertainty associated with the predicted labels of adversarial examples (i.e., it is not effective to use predictive uncertainty to detect adversarial examples).",
        "files": {
            "openAccessPdf": "https://dl.acm.org/doi/pdf/10.1145/3485832.3485916"
        },
        "abstract_zh": "用于检测恶意软件(恶意软件)的深度学习方法是有前途的，但尚未解决数据集转移的问题，即与测试集相关联的示例及其标签的联合分布不同于训练集的分布。这个问题导致深度学习模型在用户没有察觉的情况下退化。为了缓解该问题，一种方法是让分类器不仅预测给定例子上的标签，而且还在预测的标签上呈现其不确定性(或置信度),由此防御者可以决定是否使用预测的标签。虽然直观且明显重要，但这种方法的能力和局限性还没有被很好地理解。在本文中，我们进行了一项实证研究，以评估质量的预测不确定性的恶意软件检测器。具体来说，我们重新设计并构建了24个Android恶意软件检测器(通过用六种校准方法改造四个现成的检测器)，并用九个指标量化它们的不确定性，其中包括三个处理数据不平衡的指标。我们的主要发现是:(1)预测不确定性确实有助于在数据集变化的情况下实现可靠的恶意软件检测，但无法应对对抗性的规避攻击；(ii)近似贝叶斯方法有希望校准和推广恶意软件检测器以处理数据集转移，但是不能应对对抗性规避攻击；(iii)对抗性规避攻击可以使校准方法变得无用，并且量化与对抗性示例的预测标签相关联的不确定性是一个公开的问题(即，使用预测不确定性来检测对抗性示例是无效的)。",
        "title_zh": "我们可以利用预测性不确定性来检测Android恶意软件检测中的数据集偏移和对抗示例吗？",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2021.html",
        "conf_title": "ACSAC 2021: Virtual Event, USA",
        "conf_url": "https://doi.org/10.1145/3485832",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3485832.3485902",
        "title": "An Exploration of ARM System-Level Cache and GPU Side Channels",
        "authors": "Patrick Cronin, Xing Gao, Haining Wang, Chase Cotton",
        "abstract": "Advanced RISC Machines (ARM) processors have recently gained market share in both cloud computing and desktop applications. Meanwhile, ARM devices have shifted to a more peripheral based design, wherein designers attach a number of coprocessors and accelerators to the System-on-a-Chip (SoC). By adopting a System-Level Cache, which acts as a shared cache between the CPU-cores and peripherals, ARM attempts to alleviate the memory bottleneck issues that exist between data sources and accelerators. This paper investigates emerging security threats introduced by this new System-Level Cache. Specifically, we demonstrate that the System-Level Cache can still be exploited to create a cache occupancy channel to accurately fingerprint websites. We redesign and optimize the attack for various browsers based on the ARM cache design, which can significantly reduce the attack duration while increasing accuracy. Moreover, we introduce a novel GPU contention channel in mobile devices, which can achieve similar accuracy to the cache occupancy channel. We conduct a thorough evaluation by examining these attacks across multiple devices, including iOS, Android, and MacOS with the new M1 MacBook Air. The experimental results demonstrate that (1) the System-Level Cache based website fingerprinting technique can achieve promising accuracy in both open (up to 90%) and closed (up to 95%) world scenarios, and (2) our GPU contention channel is more effective than the CPU cache channel on Android devices.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "高级RISC机器(ARM)处理器最近在云计算和桌面应用程序中都获得了市场份额。与此同时，ARM设备已经转向更加基于外设的设计，其中设计人员将许多协处理器和加速器附加到片上系统(SoC)。通过采用系统级缓存，作为CPU内核和外设之间的共享缓存，ARM试图缓解数据源和加速器之间存在的内存瓶颈问题。本文研究了这种新的系统级缓存带来的新的安全威胁。具体来说，我们证明了系统级缓存仍然可以用来创建缓存占用通道，以准确地对网站进行指纹识别。我们在ARM缓存设计的基础上，针对各种浏览器重新设计和优化了攻击，在提高准确率的同时，可以显著减少攻击持续时间。此外，我们在移动设备中引入了一种新的GPU竞争通道，它可以达到与缓存占用通道相似的精度。我们通过检查多种设备上的这些攻击进行了彻底的评估，包括iOS、Android和装有新M1 MacBook Air的MacOS。实验结果表明:( 1)基于系统级缓存的网站指纹识别技术可以在开放(高达90%)和封闭(高达95%)世界场景中获得令人满意的准确性;( 2)我们的GPU竞争通道比Android设备上的CPU缓存通道更有效。",
        "title_zh": "探索手臂系统级缓存和GPU侧通道",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2021.html",
        "conf_title": "ACSAC 2021: Virtual Event, USA",
        "conf_url": "https://doi.org/10.1145/3485832",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3485832.3485901",
        "title": "Towards Stalkerware Detection with Precise Warnings",
        "authors": "Yufei Han, Kevin Alejandro Roundy, Acar Tamersoy",
        "abstract": "Stalkerware enables individuals to conduct covert surveillance on a targeted person’s device. Android devices are a particularly fertile ground for stalkerware, most of which spy on a single communication channel, sensor, or category of private data, though 27% of stalkerware surveil multiple of private data sources. We present Dosmelt, a system that enables stalkerware warnings that precisely characterize the types of surveillance conducted by Android stalkerware so that surveiled individuals can take appropriate mitigating action. Our methodology uses active learning in a semi-supervised learning setting to tackle this task at scale, which would otherwise require expert labeling of significant number of stalkerware apps. Dosmelt leverages the observation that stalkerware differs from other categories of spyware in its open advertising of its surveillance capabilities, which we detect on the basis of the titles and self-descriptions of stalkerware apps that are posted on Android app stores. Dosmelt achieves up to 96% AUC for stalkerware detection with a 91% Macro-F1 score of surveillance capability attribution for stalkerware apps. Dosmelt has detected hundreds of new stalkerware apps that we have added to the Stalkerware Threat List.",
        "files": {
            "openAccessPdf": "https://hal.archives-ouvertes.fr/hal-03449857/file/ACSAC-stalkerware-precise-warnings-HAL.pdf"
        },
        "abstract_zh": "Stalkerware使个人能够对目标人的设备进行秘密监视。Android设备是跟踪软件的特别沃土，大多数跟踪软件监视单个通信通道、传感器或一类私人数据，尽管27%的跟踪软件监视多个私人数据源。我们介绍了Dosmelt，这是一个能够准确描述Android stalkerware进行的监视类型的stalkerware警告系统，以便被监视的个人可以采取适当的缓解措施。我们的方法在半监督学习环境中使用主动学习来大规模处理这项任务，否则需要对大量stalkerware应用程序进行专家标记。Dosmelt利用了这样一种观察，即stalkerware不同于其他类别的间谍软件，它公开宣传其监视功能，我们根据Android应用程序商店上发布的stalkerware应用程序的标题和自我描述来检测这些功能。Dosmelt实现了高达96%的跟踪软件检测AUC，对跟踪软件应用程序的监控能力属性的宏观评分为91%。Dosmelt检测到数百个我们添加到stalkerware威胁列表中的新Stalkerware应用程序。",
        "title_zh": "朝着缠扰器软件检测带有精确的警告",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2021.html",
        "conf_title": "ACSAC 2021: Virtual Event, USA",
        "conf_url": "https://doi.org/10.1145/3485832",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3485832.3488021",
        "title": "Repack Me If You Can: An Anti-Repackaging Solution Based on Android Virtualization",
        "authors": "Antonio Ruggia, Eleonora Losiouk, Luca Verderame, Mauro Conti, Alessio Merlo",
        "abstract": "A growing trend in repackaging attacks exploits the Android virtualization technique, in which malicious code can run together with the victim app in a virtual container. In such a scenario, the attacker can directly build a malicious container capable of hosting the victim app instead of tampering with it, thus neglecting any anti-repackaging protection developed so far. Also, existing anti-virtualization techniques are ineffective since the malicious container can intercept - and tamper with - such controls at runtime. So far, only two solutions have been specifically designed to address virtualization-based repackaging attacks. However, their effectiveness is limited since they both rely on static taint analysis, thus not being able to evaluate code dynamically loaded at runtime. To mitigate such a problem, in this paper we introduce MARVEL, the first methodology that allows preventing both traditional and virtualization-based repackaging attacks. MARVEL strongly relies on the virtualization technique to build a secure virtual environment where protected apps can run and be checked at runtime. To assess the viability and reliability of MARVEL, we implemented it in a tool, i.e., MARVELoid, that we tested by protecting 4000 apps with 24 different configurations of the protection parameters (i.e., 96k protection combinations). MARVELoid was able to inject the protection into 97.3% of the cases, with a processing time of 98 seconds per app on average. Moreover, we evaluated the runtime overhead on 45 apps, showing that the introduced protection has a negligible impact in terms of average CPU (<5%) and memory overhead (<0.5%).",
        "files": {
            "openAccessPdf": "https://dl.acm.org/doi/pdf/10.1145/3485832.3488021"
        },
        "abstract_zh": "越来越多的重新打包攻击利用了Android虚拟化技术，恶意代码可以在虚拟容器中与受害者应用程序一起运行。在这种情况下，攻击者可以直接构建一个能够托管受害者应用程序的恶意容器，而不是篡改它，从而忽略了迄今为止开发的任何反重新打包保护。此外，现有的反虚拟化技术是无效的，因为恶意容器可以在运行时拦截并篡改这些控件。到目前为止，只有两种解决方案是专门为解决基于虚拟化的重新打包攻击而设计的。然而，它们的有效性是有限的，因为它们都依赖于静态污点分析，因此不能评估运行时动态加载的代码。为了缓解这一问题，我们在本文中介绍了MARVEL，这是第一种可以防止传统和基于虚拟化的重新打包攻击的方法。MARVEL非常依赖虚拟化技术来构建一个安全的虚拟环境，受保护的应用程序可以在运行时运行并接受检查。为了评估MARVEL的可行性和可靠性，我们在一个工具(即MARVELoid)中实施了它，我们通过使用24种不同的保护参数配置(即96k保护组合)保护4000个应用程序来进行测试。MARVELoid能够为97.3%的案例注入保护，每个应用程序的平均处理时间为98秒。此外，我们评估了45个应用的运行时开销，结果显示，引入的保护对平均CPU (<5%)和内存开销(< 0.5%)的影响可以忽略不计。",
        "title_zh": "如果可以的话，请重新打包我：一种基于Android虚拟化的反式包装解决方案",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2021.html",
        "conf_title": "ACSAC 2021: Virtual Event, USA",
        "conf_url": "https://doi.org/10.1145/3485832",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3485832.3485884",
        "title": "The Emperor's New Autofill Framework: A Security Analysis of Autofill on iOS and Android",
        "authors": "Sean Oesch, Anuj Gautam, Scott Ruoti",
        "abstract": "Password managers help users more effectively manage their passwords, encouraging them to adopt stronger passwords across their many accounts. In contrast to desktop systems where password managers receive no system-level support, mobile operating systems provide autofill frameworks designed to integrate with password managers to provide secure and usable autofill for browsers and other apps installed on mobile devices. In this paper, we evaluate mobile autofill frameworks on iOS and Android, examining whether they achieve substantive benefits over the ad-hoc desktop environment or become a problematic single point of failure. Our results find that while the frameworks address several common issues, they also enforce insecure behavior and fail to provide password managers sufficient information to override the frameworks’ insecure behavior, resulting in mobile managers being less secure than their desktop counterparts overall. We also demonstrate how these frameworks act as a confused deputy in manager-assisted credential phishing attacks. Our results demonstrate the need for significant improvements to mobile autofill frameworks. We conclude the paper with recommendations for the design and implementation of secure autofill frameworks.",
        "files": {
            "openAccessPdf": "https://dl.acm.org/doi/pdf/10.1145/3485832.3485884"
        },
        "abstract_zh": "密码管理器帮助用户更有效地管理他们的密码，鼓励他们在许多帐户中采用更强的密码。与密码管理器得不到系统级支持的桌面系统相比，移动操作系统提供了自动填充框架，旨在与密码管理器集成，为安装在移动设备上的浏览器和其他应用程序提供安全、可用的自动填充。在本文中，我们对iOS和Android上的移动自动填充框架进行了评估，考察了它们相对于ad-hoc桌面环境是否实现了实质性的好处，还是成为了一个有问题的单点故障。我们的结果发现，虽然这些框架解决了几个常见的问题，但它们也实施了不安全的行为，并且未能向密码管理器提供足够的信息来覆盖框架的不安全行为，导致移动管理器总体上不如桌面管理器安全。我们还展示了这些框架如何在经理辅助的凭据网络钓鱼攻击中充当混淆的代理。我们的结果表明，需要对移动自动填充框架进行重大改进。最后，我们给出了设计和实现安全自动填充框架的建议。",
        "title_zh": "皇帝的新自动填充框架：对iOS和Android的自动填充的安全分析",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2021.html",
        "conf_title": "ACSAC 2021: Virtual Event, USA",
        "conf_url": "https://doi.org/10.1145/3485832",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3485832.3485925",
        "title": "MAppGraph: Mobile-App Classification on Encrypted Network Traffic using Deep Graph Convolution Neural Networks",
        "authors": "Thai-Dien Pham, Thien-Lac Ho, Tram Truong Huu, Tien-Dung Cao, Hong Linh Truong",
        "abstract": "Identifying mobile apps based on network traffic has multiple benefits for security and network management. However, it is a challenging task due to multiple reasons. First, network traffic is encrypted using an end-to-end encryption mechanism to protect data privacy. Second, user behavior changes dynamically when using different functionalities of mobile apps. Third, it is hard to differentiate traffic behavior due to common shared libraries and content delivery within modern mobile apps. Existing techniques managed to address the encryption issue but not the others, thus achieving low detection/classification accuracy. In this paper, we present MAppGraph, a novel technique to classify mobile apps, addressing all the above issues. Given a chunk of traffic generated by an app, MAppGraph constructs a communication graph whose nodes are defined by tuples of IP address and port of the services connected by the app, edges are established by the weighted communication correlation among the nodes. We extract information from packet headers without analyzing encrypted payload to form feature vectors of the nodes. We leverage deep graph convolution neural networks to learn the diverse communication behavior of mobile apps from a large number of graphs and achieve a fast classification. To validate our technique, we collect traffic of a hundred mobile apps on the Android platform and run extensive experiments with various experimental scenarios. The results show that MAppGraph significantly improves classification accuracy by up to 20% compared to recently developed techniques and demonstrates its practicality for security and network management of mobile services.",
        "files": {
            "openAccessPdf": "https://research.aalto.fi/files/68131453/ACSAC2021.pdf"
        },
        "abstract_zh": "基于网络流量识别移动应用对安全性和网络管理有多重好处。然而，由于多种原因，这是一项具有挑战性的任务。首先，使用端到端加密机制对网络流量进行加密，以保护数据隐私。第二，当使用移动应用程序的不同功能时，用户行为会动态变化。第三，由于现代移动应用程序中常见的共享库和内容交付，很难区分流量行为。现有技术设法解决了加密问题，但没有解决其他问题，因此实现了较低的检测/分类精度。在本文中，我们提出了MAppGraph，一种新的移动应用分类技术，解决了上述所有问题。给定一个应用程序产生的一大块流量，MAppGraph构建一个通信图，其节点由应用程序连接的服务的IP地址和端口元组定义，边由节点之间的加权通信相关性建立。我们从分组报头中提取信息，而不分析加密的有效载荷来形成节点的特征向量。我们利用深度图卷积神经网络从大量图中学习移动应用的不同通信行为，并实现快速分类。为了验证我们的技术，我们收集了Android平台上100个移动应用的流量，并使用各种实验场景进行了广泛的实验。结果表明，与最近开发的技术相比，MAppGraph显著提高了高达20%的分类精度，并展示了其在移动服务的安全性和网络管理方面的实用性。",
        "title_zh": "mappgraph：使用深图卷积神经网络对加密网络流量进行移动应用分类",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2021.html",
        "conf_title": "ACSAC 2021: Virtual Event, USA",
        "conf_url": "https://doi.org/10.1145/3485832",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3564625.3564641",
        "title": "Analysis of Payment Service Provider SDKs in Android",
        "authors": "Samin Yaseer Mahmud, K. Virgil English, Seaver Thorn, William Enck, Adam Oest, Muhammad Saad",
        "abstract": "Payment Service Providers (PSPs) provide software development toolkits (SDKs) for integrating complex payment processing code into applications. Security weaknesses in payment SDKs can impact thousands of applications. In this work, we propose AARDroid for statically assessing payment SDKs against OWASP’s MASVS industry standard for mobile application security. In creating AARDroid, we adapted application-level requirements and program analysis tools for SDK-specific analysis, tailoring dataflow analysis for SDKs using domain-specific ontologies to infer the security semantics of application programming interfaces (APIs). We apply AARDroid to 50 payment SDKs and discover security weaknesses including saving unencrypted credit card information to files, use of insecure cryptographic primitives, insecure input methods for credit card information, and insecure use of WebViews. These results demonstrate the value of applying security analysis at the SDK granularity to prevent the widespread deployment of insecure code.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "支付服务提供商(PSP)提供软件开发工具包(SDK)，用于将复杂的支付处理代码集成到应用程序中。支付SDK中的安全缺陷会影响成千上万的应用程序。在这项工作中，我们提出了一个AARDroid，用于根据OWASP的MASVS移动应用安全行业标准静态评估支付SDK。在创建AARDroid的过程中，我们将应用级需求和程序分析工具用于特定于SDK的分析，使用特定于领域的本体为SDK定制数据流分析，以推断应用编程接口(API)的安全语义。我们将AARDroid应用于50个支付SDK，并发现了安全漏洞，包括将未加密的信用卡信息保存到文件中，使用不安全的加密原语，信用卡信息的不安全输入方法，以及WebViews的不安全使用。这些结果证明了在SDK粒度上应用安全性分析以防止不安全代码的广泛部署的价值。",
        "title_zh": "Android中支付服务提供商SDK的分析",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2022.html",
        "conf_title": "ACSAC 2022: Austin, TX, USA",
        "conf_url": "https://doi.org/10.1145/3564625",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3564625.3564632",
        "title": "Are There Wireless Hidden Cameras Spying on Me?",
        "authors": "Jeongyoon Heo, Sangwon Gil, Youngman Jung, Jinmok Kim, Donguk Kim, Woojin Park, Yongdae Kim, Kang G. Shin, Choong-Hoon Lee",
        "abstract": "The proliferation of IoT devices has created risks of their abuse for unauthorized sensing/monitoring of our daily activities. Especially, the leakage of images taken by wireless spy cameras in sensitive spaces, such as hotel rooms, Airbnb rentals, public restrooms, and shower rooms, has become a serious privacy concern/threat. To mitigate/address this pressing concern, we propose a Spy Camera Finder (SCamF) that uses ubiquitous smartphones to detect and locate wireless spy cameras by analyzing encrypted Wi-Fi network traffic. Not only by characterizing the network traffic patterns of wireless cameras but also by reconstructing encoded video frame sizes from encrypted traffic, SCamF effectively determines the existence of wireless cameras on the Wi-Fi networks, and accurately verifies whether the thus-detected cameras are indeed recording users’ activities. SCamF also accurately locates spy cameras by analyzing reconstructed video frame sizes. We have implemented SCamF on Android smartphones and evaluated its performance on a real testbed across 20 types of wireless cameras. Our experimental results show SCamF to: (1) classify wireless cameras with an accuracy of 0.98; (2) detect spy cameras among the classified wireless cameras with a true positive rate (TPR) of 0.97; (3) incur low false positive rates (FPRs) of 0 and 0.031 for non-camera devices and cameras not recording the users’ activities, respectively; (4) locate spy cameras with centimeter-level distance errors.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "物联网设备的激增带来了滥用这些设备对我们的日常活动进行未经授权的传感/监控的风险。特别是，在敏感空间(例如酒店房间、Airbnb出租、公共洗手间和淋浴室)中由无线间谍相机拍摄的图像的泄露已经成为严重的隐私问题/威胁。为了缓解/解决这一紧迫的问题，我们提出了一种间谍相机探测器(SCamF)，它使用无处不在的智能手机，通过分析加密的Wi-Fi网络流量来检测和定位无线间谍相机。SCamF不仅通过描述无线摄像头的网络流量模式，还通过从加密流量中重建编码的视频帧大小，有效地确定Wi-Fi网络上无线摄像头的存在，并准确地验证这样检测到的摄像头是否确实在记录用户的活动。SCamF还通过分析重建的视频帧大小来精确定位间谍摄像机。我们已经在Android智能手机上实现了SCamF，并在20种无线摄像头的真实测试平台上评估了它的性能。我们的实验结果显示SCamF能够:(1)以0.98的准确度分类无线相机；(2)以0.97的真阳性率(TPR)在分类的无线摄像机中检测间谍摄像机；(3)对于非相机设备和不记录用户活动的相机，分别导致0和0.031的低假阳性率(FPRs)；(4)定位有厘米级距离误差的间谍相机。",
        "title_zh": "有没有无线隐藏的摄像机在我身上间谍？",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2022.html",
        "conf_title": "ACSAC 2022: Austin, TX, USA",
        "conf_url": "https://doi.org/10.1145/3564625",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3564625.3567979",
        "title": "DF-SCA: Dynamic Frequency Side Channel Attacks are Practical",
        "authors": "Debopriya Roy Dipta, Berk Gülmezoglu",
        "abstract": "The arm race between hardware security engineers and side-channel researchers has become more competitive with more sophisticated attacks and defenses in the last decade. While modern hardware features improve the system performance significantly, they may create new attack surfaces for malicious people to extract sensitive information about users without physical access to the victim device. Although many previously exploited hardware and OS features were patched by OS developers and chip vendors, any feature that is accessible from userspace applications can be exploited to perform software-based side-channel attacks. In this paper, we present DF-SCA, which is a software-based dynamic frequency side-channel attack on Linux and Android OS devices. We exploit unprivileged access to cpufreq interface that exposes real-time CPU core frequency values directly correlated with the system utilization, creating a reliable side-channel for attackers. We show that Dynamic Voltage and Frequency Scaling (DVFS) feature in modern systems can be utilized to perform website fingerprinting attacks for Google Chrome and Tor browsers on modern Intel, AMD, and ARM architectures. We further extend our analysis to a wide selection of scaling governors on Intel and AMD CPUs, verifying that all scaling governors provide enough information on the visited web page. Moreover, we extract properties of keystroke patterns on frequency readings, that leads to 95% accuracy to distinguish the keystrokes from other activities on Android phones. We leverage inter-keystroke timings of a user by training a k-th nearest neighbor model, which achieves 88% password recovery rate in the first guess on Bank of America application. Finally, we propose several countermeasures to mask the user activity to mitigate DF-SCA on Linux-based systems.",
        "files": {
            "openAccessPdf": "https://dl.acm.org/doi/pdf/10.1145/3564625.3567979"
        },
        "abstract_zh": "在过去十年中，硬件安全工程师和旁门左道研究人员之间的军备竞赛随着更复杂的攻击和防御变得更加激烈。虽然现代硬件功能显著提高了系统性能，但它们可能会为恶意用户创造新的攻击面，从而在没有物理接触受害设备的情况下提取用户的敏感信息。尽管许多以前被利用的硬件和操作系统功能都被操作系统开发者和芯片供应商修补过，但是任何可从用户空间应用程序访问的功能都可以被利用来执行基于软件的旁路攻击。在本文中，我们提出了DF-SCA，这是一种基于软件的动态频率旁道攻击Linux和Android操作系统设备。我们利用了对cpufreq接口的非特权访问，该接口暴露了与系统利用率直接相关的实时CPU核心频率值，为攻击者创建了一个可靠的旁路。我们发现，现代系统中的动态电压和频率调节(DVFS)功能可以用来对现代英特尔、AMD和ARM架构上的Google Chrome和Tor浏览器进行网站指纹攻击。我们进一步将我们的分析扩展到英特尔和AMD CPUs上的一系列扩展调控器，验证所有扩展调控器在访问的网页上提供了足够的信息。此外，我们提取频率读数上的击键模式的属性，这导致95%的准确率来区分Android手机上的击键和其他活动。我们通过训练第k个最近邻模型来利用用户的击键时间，该模型在美国银行应用程序上的首次猜测中实现了88%的密码恢复率。最后，我们提出了几个对策来屏蔽用户活动，以减轻基于Linux的系统上的DF-SCA。",
        "title_zh": "DF-SCA：动态频率侧通道攻击是实用的",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2022.html",
        "conf_title": "ACSAC 2022: Austin, TX, USA",
        "conf_url": "https://doi.org/10.1145/3564625",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3359789.3359814",
        "title": "Detecting (absent) app-to-app authentication on cross-device short-distance channels",
        "authors": "Stefano Cristalli, Long Lu, Danilo Bruschi, Andrea Lanzi",
        "abstract": "Short-distance or near-field communication is increasingly used by mobile apps for interacting or exchanging data in a cross-device fashion. In this paper, we identify a security issue, namely cross-device app-to-app communication hijacking (or CATCH), that affect Android apps using short-distance channels (e.g., Bluetooth and Wi-Fi-Direct). This issue causes unauthenticated or malicious app-to-app interactions even when the underlying communication channels are authenticated and secured. In addition to discovering the security issue, we design an algorithm based on data-flow analysis for detecting the presence of CATCH in Android apps. Our algorithm checks if a given app contains an app-to-app authentication scheme, necessary for preventing CATCH. We perform experiments on a set of Android apps and show the CATCH problem is always present on the whole analyzed applications set. We also discuss the impact of the problem in real scenarios by presenting two real case studies. At the end of the paper we reported limitations of our model along with future improvements.",
        "files": {
            "openAccessPdf": "https://dl.acm.org/doi/pdf/10.1145/3359789.3359814"
        },
        "abstract_zh": "移动应用越来越多地使用短距离或近场通信，以跨设备的方式进行交互或交换数据。在本文中，我们发现了一个安全问题，即跨设备应用程序到应用程序的通信劫持(或CATCH)，它会影响使用短距离通道(如蓝牙和Wi-Fi-Direct)的Android应用程序。此问题会导致未经身份验证或恶意的应用程序到应用程序的交互，即使底层通信通道已经过身份验证并受到保护。除了发现安全问题，我们还设计了一种基于数据流分析的算法，用于检测Android应用程序中CATCH的存在。我们的算法检查给定的应用程序是否包含应用程序到应用程序的认证方案，这是防止捕获所必需的。我们对一组Android应用程序进行了实验，结果显示，捕获问题总是出现在整个分析的应用程序集上。我们还通过两个真实的案例研究来讨论这个问题在真实场景中的影响。在文章的最后，我们报告了我们的模型的局限性以及未来的改进。",
        "title_zh": "在跨设备短距离通道上检测（缺乏）应用程序到应用程序身份验证",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2019.html",
        "conf_title": "ACSAC 2019: San Juan, PR, USA",
        "conf_url": "https://doi.org/10.1145/3359789",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3359789.3359828",
        "title": "An empirical study of SMS one-time password authentication in Android apps",
        "authors": "Siqi Ma, Runhan Feng, Juanru Li, Yang Liu, Surya Nepal, Diethelm Ostry, Elisa Bertino, Robert H. Deng, Zhuo Ma, Sanjay Jha",
        "abstract": "A great quantity of user passwords nowadays has been leaked through security breaches of user accounts. To enhance the security of the Password Authentication Protocol (PAP) in such circumstance, Android app developers often implement a complementary One-Time Password (OTP) authentication by utilizing the short message service (SMS). Unfortunately, SMS is not specially designed as a secure service and thus an SMS One-Time Password is vulnerable to many attacks. To check whether a wide variety of currently used SMS OTP authentication protocols in Android apps are properly implemented, this paper presents an empirical study against them. We first derive a set of rules from RFC documents as the guide to implement secure SMS OTP authentication protocol. Then we implement an automated analysis system, AUTH-EYE, to check whether a real-world OTP authentication scheme violates any of these rules. Without accessing server source code, AUTH-EYE executes Android apps to trigger the OTP-relevant functionalities and then analyzes the OTP implementations including those proprietary ones. By only analyzing SMS responses, AUTH-EYE is able to assess the conformance of those implementations to our recommended rules and identify the potentially insecure apps. In our empirical study, AUTH-EYE analyzed 3,303 popular Android apps and found that 544 of them adopt SMS OTP authentication. The further analysis of AUTH-EYE demonstrated a far-from-optimistic status: the implementations of 536 (98.5%) out of the 544 apps violate at least one of our defined rules. The results indicate that Android app developers should seriously consider our discussed security rules and violations so as to implement SMS OTP properly.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "如今，大量的用户密码由于用户账户的安全漏洞而被泄露。为了在这种情况下增强密码认证协议(PAP)的安全性，Android应用开发者通常通过利用短消息服务(SMS)来实现补充的一次性密码(OTP)认证。不幸的是，SMS不是专门设计为安全服务的，因此SMS一次性密码容易受到许多攻击。为了检查Android应用程序中当前使用的各种SMS OTP认证协议是否正确实现，本文提出了一个针对它们的实证研究。我们首先从RFC文档中导出一组规则，作为实现安全SMS OTP认证协议的指南。然后，我们实现了一个自动化分析系统AUTH-EYE，来检查现实世界中的OTP认证方案是否违反了这些规则。在不访问服务器源代码的情况下，AUTH-EYE执行Android应用程序来触发OTP相关的功能，然后分析OTP实现，包括那些专有的实现。仅通过分析短信响应，AUTH-EYE就能够评估这些实施是否符合我们推荐的规则，并识别潜在的不安全应用。在我们的实证研究中，AUTH-EYE分析了3，303个流行的Android应用程序，发现其中544个采用短信OTP认证。对AUTH-EYE的进一步分析表明了一个远非乐观的状态:544个应用中的536个(98.5%)的实现违反了至少一个我们定义的规则。结果表明，Android应用程序开发人员应该认真考虑我们讨论的安全规则和违规行为，以便正确实施SMS OTP。",
        "title_zh": "SMS一次性密码认证的实证研究Android应用程序",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2019.html",
        "conf_title": "ACSAC 2019: San Juan, PR, USA",
        "conf_url": "https://doi.org/10.1145/3359789",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3359789.3359838",
        "title": "Challenge-response behavioral mobile authentication: a comparative study of graphical patterns and cognitive games",
        "authors": "Manar Mohamed, Prakash Shrestha, Nitesh Saxena",
        "abstract": "The most researched behavioral biometrics for mobile device authentication involves the use of touch gestures as the user enters a graphical pattern password (like the one used on Android) or otherwise interacts with the device. However, due to the inherent static nature of these schemes, they are vulnerable to impersonation attacks. In this paper, we investigate challenge-response mechanisms to address this security vulnerability underlying the traditional static biometric schemes. We study the performance, security, and usability of two schemes of such challenge-response interactive biometric authentication geared for mobile devices and contrast them to static graphical pattern based biometrics. The first scheme is based on random graphical patterns. The second scheme, recently introduced for PC class of devices (not mobile), is based on a simple cognitive game involving semantic interactive random challenges. Our results show that the accuracy of user identification with these approaches is similar to static pattern based biometric scheme. Finally, we argue that utilizing interactivity and randomization significantly enhance the security against impersonation attacks. As an independent result, our work demonstrates that the use of motion sensors available on mobile device serves to improve the identification accuracy of schemes that only use touch-based gestures (static and interactive).",
        "files": {
            "openAccessPdf": "https://dl.acm.org/doi/pdf/10.1145/3359789.3359838"
        },
        "abstract_zh": "研究最多的用于移动设备身份验证的行为生物识别技术涉及在用户输入图形模式密码(如Android上使用的密码)或以其他方式与设备交互时使用触摸手势。然而，由于这些方案固有的静态特性，它们容易受到假冒攻击。在本文中，我们研究挑战-响应机制来解决传统静态生物识别方案中的安全漏洞。我们研究了这种适合移动设备的挑战-响应交互式生物认证的两种方案的性能、安全性和可用性，并将它们与基于静态图形模式的生物认证进行了对比。第一种方案基于随机图形模式。第二个方案是最近为PC类设备(非移动设备)推出的，它基于一个简单的认知游戏，涉及语义交互式随机挑战。我们的结果表明，使用这些方法的用户识别的准确性类似于基于静态模式的生物特征识别方案。最后，我们认为，利用交互性和随机化可以显著增强抵御假冒攻击的安全性。作为一个独立的结果，我们的工作表明，使用移动设备上可用的运动传感器有助于提高仅使用基于触摸的手势(静态和交互)的方案的识别准确性。",
        "title_zh": "挑战响应行为移动身份验证：图形模式和认知游戏的比较研究",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2019.html",
        "conf_title": "ACSAC 2019: San Juan, PR, USA",
        "conf_url": "https://doi.org/10.1145/3359789",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3359789.3359839",
        "title": "AppVeto: mobile application self-defense through resource access veto",
        "authors": "Tousif Osman, Mohammad Mannan, Urs Hengartner, Amr M. Youssef",
        "abstract": "Modern mobile operating systems such as Android and Apple iOS allow apps to access various system resources, with or without explicit user permission. Running multiple concurrent apps is also commonly supported, although the OS generally maintains strict separation between apps. However, an app can still get access to another app's private information, such as the user input, through numerous side-channels, mostly enabled by having access to permissioned or permission-less (sometimes even unrelated) resources, e.g., inferring keystroke and swipe gestures from a victim app via the accelerometer or gyroscope. Current mobile OSes do not empower an app to defend itself from such implicit interference from other apps; few exceptions exist such as blocking screenshot captures in Android. We propose a general mechanism for apps to defend themselves from any unwanted implicit or explicit interference from other concurrently running apps. Our AppVeto solution enables an app to easily configure its requirements for a safe environment; a foreground app can request the OS to disallow access---i.e., to enable veto powers---to selected side-channel-prone resources to all other running apps for a certain (short) duration, e.g., no access to the accelerometer during password input. In a sense, we enable a finer-grained access control policy than the current runtime permission model, and delegate the responsibility of the resource access decision (for vetoing) from users to app developers. We implement AppVeto on Android using the Xposed framework, without changing Android APIs. Furthermore, we show that AppVeto imposes negligible overhead, while being effective against several well-known side-channel attacks.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android和苹果iOS等现代移动操作系统允许应用程序访问各种系统资源，无论是否有明确的用户许可。运行多个并发应用程序也是普遍支持的，尽管操作系统通常在应用程序之间保持严格的分离。然而，一个应用程序仍然可以通过许多辅助渠道访问另一个应用程序的私人信息，如用户输入，主要是通过访问许可或无许可(有时甚至是无关的)资源来实现的，例如，通过加速度计或陀螺仪从受害者应用程序推断击键和滑动手势。当前的移动操作系统无法让一个应用程序保护自己免受其他应用程序的隐性干扰；很少有例外，比如在安卓系统中屏蔽截图。我们提出了一种通用机制，让应用程序能够保护自己免受其他同时运行的应用程序的任何不必要的隐式或显式干扰。我们的AppVeto解决方案使应用程序能够轻松配置其对安全环境的要求；前台应用可以请求OS在某个(短的)持续时间内禁止所有其他运行的应用访问-即，启用否决权-所选择的易受侧信道影响的资源，例如，在密码输入期间不能访问加速度计。在某种意义上，我们启用了比当前运行时权限模型更细粒度的访问控制策略，并将资源访问决策(用于否决)的责任从用户委托给应用程序开发人员。我们使用Xposed框架在Android上实现AppVeto，而不改变Android APIs。此外，我们表明AppVeto的开销可以忽略不计，同时可以有效地抵御一些众所周知的旁道攻击。",
        "title_zh": "AppVeto：通过资源访问否决权的移动应用程序自卫",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2019.html",
        "conf_title": "ACSAC 2019: San Juan, PR, USA",
        "conf_url": "https://doi.org/10.1145/3359789",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3359789.3359833",
        "title": "Opening Pandora's box through ATFuzzer: dynamic analysis of AT interface for Android smartphones",
        "authors": "Imtiaz Karim, Fabrizio Cicala, Syed Rafiul Hussain, Omar Chowdhury, Elisa Bertino",
        "abstract": "This paper focuses on checking the correctness and robustness of the AT command interface exposed by the cellular baseband processor through Bluetooth and USB. A device's application processor uses this interface for issuing high-level commands (or, AT commands) to the baseband processor for performing cellular network operations (e.g., placing a phone call). Vulnerabilities in this interface can be leveraged by malicious Bluetooth peripherals to launch pernicious attacks including DoS and privacy attacks. To identify such vulnerabilities, we propose ATFuzzer that uses a grammar-guided evolutionary fuzzing approach which mutates production rules of the AT command grammar instead of concrete AT commands. Empirical evaluation with ATFuzzer on 10 Android smartphones from 6 vendors revealed 4 invalid AT command grammars over Bluetooth and 13 over USB with implications ranging from DoS, downgrade of cellular protocol version (e.g., from 4G to 3G/2G) to severe privacy leaks. The vulnerabilities along with the invalid AT command grammars were responsibly disclosed to affected vendors and two of the reported vulnerabilities have been already assigned CVEs (CVE-2019-16400 and CVE-2019-16401).",
        "files": {
            "openAccessPdf": "https://dl.acm.org/doi/pdf/10.1145/3359789.3359833"
        },
        "abstract_zh": "本文重点检查蜂窝基带处理器通过蓝牙和USB公开的AT命令接口的正确性和健壮性。设备的应用处理器使用该接口向基带处理器发出高级命令(或AT命令)，以执行蜂窝网络操作(例如拨打电话)。恶意蓝牙外设可以利用该接口中的漏洞发起恶意攻击，包括DoS和隐私攻击。为了识别这样的漏洞，我们提出了atFuzzer，它使用一种语法引导的进化模糊化方法，该方法改变AT命令语法的产生式规则，而不是具体的AT命令。使用ATFuzzer对来自6家厂商的10款Android智能手机进行的实证评估显示，蓝牙上有4个无效AT命令语法，USB上有13个无效AT命令语法，其影响范围从DoS、蜂窝协议版本降级(例如，从4G到3G/2G)到严重的隐私泄露。这些漏洞以及无效的AT命令语法已被负责任地披露给受影响的供应商，其中两个报告的漏洞已经被分配了CVE(CVE-2019-16400和CVE-2019-16401)。",
        "title_zh": "通过Atfuzzer打开Pandora的盒子：Android智能手机接口的动态分析",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2019.html",
        "conf_title": "ACSAC 2019: San Juan, PR, USA",
        "conf_url": "https://doi.org/10.1145/3359789",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3134600.3134613",
        "title": "n-Auth: Mobile Authentication Done Right",
        "authors": "Roel Peeters, Jens Hermans, Pieter Maene, Katri Grenman, Kimmo Halunen, Juha Häikiö",
        "abstract": "Weak security, excessive personal data collection for user profiling, and a poor user experience are just a few of the many problems that mobile authentication solutions suffer from. Despite being an interesting platform, mobile devices are still not being used to their full potential for authentication. n-Auth is a firm step in unlocking the full potential of mobile devices in authentication, by improving both security and usability whilst respecting the privacy of the user. Our focus is on the combined usage of several strong cryptographic techniques with secure HCI design principles to achieve a better user experience. We specified and built n-Auth, for which robust Android and iOS apps are openly available through the official stores.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "安全性差、为用户建档收集过多的个人数据以及用户体验差只是移动身份认证解决方案面临的众多问题中的几个。尽管移动设备是一个有趣的平台，但它仍未被充分用于身份认证。n-Auth通过在尊重用户隐私的同时提高安全性和可用性，在释放移动设备在身份认证方面的全部潜力方面迈出了坚实的一步。我们的重点是将几种强大的加密技术与安全HCI设计原则结合使用，以实现更好的用户体验。我们指定并构建了n-Auth，强大的Android和iOS应用程序可以通过官方商店公开获得。",
        "title_zh": "n-auth：移动身份验证正确",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2017.html",
        "conf_title": "ACSAC 2017: Orlando, FL, USA",
        "conf_url": "https://doi.org/10.1145/3134600",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3134600.3134615",
        "title": "Exploitation and Mitigation of Authentication Schemes Based on Device-Public Information",
        "authors": "Antonio Bianchi, Eric Gustafson, Yanick Fratantonio, Christopher Kruegel, Giovanni Vigna",
        "abstract": "Today's mobile applications increasingly rely on communication with a remote backend service to perform many critical functions, including handling user-specific information. This implies that some form of authentication should be used to associate a user with their actions and data. Since schemes involving tedious account creation procedures can represent \"friction\" for users, many applications are moving toward alternative solutions, some of which, while increasing usability, sacrifice security. This paper focuses on a new trend of authentication schemes based on what we call \"device-public\" information, which consists of properties and data that any application running on a device can obtain. While these schemes are convenient to users, since they require little to no interaction, they are vulnerable by design, since all the needed information to authenticate a user is available to any app installed on the device. An attacker with a malicious app on a user's device could easily hijack the user's account, steal private information, send (and receive) messages on behalf of the user, or steal valuable virtual goods. To demonstrate how easily these vulnerabilities can be weaponized, we developed a generic exploitation technique that first mines all relevant data from a victim's phone, and then transfers and injects them into an attacker's phone to fool apps into granting access to the victim's account. Moreover, we developed a dynamic analysis detection system to automatically highlight problematic apps. Using our tool, we analyzed 1,000 popular applications and found that 41 of them, including the popular messaging apps WhatsApp and Viber, were vulnerable. Finally, our work proposes solutions to this issue, based on modifications to the Android API.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "今天的移动应用程序越来越依赖与远程后端服务的通信来执行许多关键功能，包括处理用户特定的信息。这意味着应该使用某种形式的身份验证来将用户与其操作和数据相关联。由于涉及繁琐的帐户创建过程的方案可能会给用户带来“摩擦”，许多应用程序正在转向替代解决方案，其中一些虽然增加了可用性，但牺牲了安全性。本文重点介绍了一种基于“设备公开”信息的身份验证方案的新趋势，这种信息由运行在设备上的任何应用程序都可以获得的属性和数据组成。虽然这些方案对用户来说很方便，因为它们几乎不需要交互，但它们在设计上是易受攻击的，因为验证用户所需的所有信息都可用于设备上安装的任何应用程序。在用户设备上安装恶意应用程序的攻击者可以轻松劫持用户的帐户，窃取私人信息，代表用户发送(和接收)消息，或者窃取有价值的虚拟商品。为了证明这些漏洞可以多么容易地被武器化，我们开发了一种通用的利用技术，首先从受害者的手机中挖掘所有相关数据，然后将它们传输并注入到攻击者的手机中，以欺骗应用程序授权访问受害者的帐户。此外，我们开发了一个动态分析检测系统，自动突出显示有问题的应用程序。使用我们的工具，我们分析了1，000个流行的应用程序，发现其中41个存在漏洞，包括流行的消息应用程序WhatsApp和Viber。最后，我们的工作基于对Android API的修改提出了这个问题的解决方案。",
        "title_zh": "基于设备公共信息的剥削和缓解身份验证方案",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2017.html",
        "conf_title": "ACSAC 2017: Orlando, FL, USA",
        "conf_url": "https://doi.org/10.1145/3134600",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3134600.3134628",
        "title": "Spinner: Semi-Automatic Detection of Pinning without Hostname Verification",
        "authors": "Chris McMahon Stone, Tom Chothia, Flavio D. Garcia",
        "abstract": "Certificate verification is a crucial stage in the establishment of a TLS connection. A common security flaw in TLS implementations is the lack of certificate hostname verification but, in general, this is easy to detect. In security-sensitive applications, the usage of certificate pinning is on the rise. This paper shows that certificate pinning can (and often does) hide the lack of proper hostname verification, enabling MITM attacks. Dynamic (black-box) detection of this vulnerability would typically require the tester to own a high security certificate from the same issuer (and often same intermediate CA) as the one used by the app. We present Spinner, a new tool for black-box testing for this vulnerability at scale that does not require purchasing any certificates. By redirecting traffic to websites which use the relevant certificates and then analysing the (encrypted) network traffic we are able to determine whether the hostname check is correctly done, even in the presence of certificate pinning. We use Spinner to analyse 400 security-sensitive Android and iPhone apps. We found that 9 apps had this flaw, including two of the largest banks in the world: Bank of America and HSBC. We also found that TunnelBear, one of the most popular VPN apps was also vulnerable. These apps have a joint user base of tens of millions of users.",
        "files": {
            "openAccessPdf": "http://pure-oai.bham.ac.uk/ws/files/43290712/Spinner.pdf"
        },
        "abstract_zh": "证书验证是建立TLS连接的关键阶段。TLS实现中的一个常见安全缺陷是缺少证书主机名验证，但一般来说，这很容易检测到。在安全敏感的应用程序中，证书锁定的使用正在增加。本文表明，证书锁定可以(并且经常)隐藏缺少正确的主机名验证，从而导致MITM攻击。此漏洞的动态(黑盒)检测通常要求测试人员拥有与应用程序使用的证书相同的发行者(通常是相同的中间CA)颁发的高安全性证书。我们提出Spinner，这是一种针对这种漏洞进行大规模黑盒测试的新工具，不需要购买任何证书。通过将流量重定向到使用相关证书的网站，然后分析(加密的)网络流量，我们能够确定主机名检查是否正确完成，即使存在证书锁定。我们使用Spinner分析了400个安全敏感的Android和iPhone应用程序。我们发现9个应用程序存在这一缺陷，其中包括世界上最大的两家银行:美国银行和汇丰银行。我们还发现，最流行的VPN应用之一TunnelBear也容易受到攻击。这些应用程序拥有数千万用户的联合用户群。",
        "title_zh": "旋转器：无主机名验证的固定固定的半自动检测",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2017.html",
        "conf_title": "ACSAC 2017: Orlando, FL, USA",
        "conf_url": "https://doi.org/10.1145/3134600",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3134600.3134642",
        "title": "Malware Detection in Adversarial Settings: Exploiting Feature Evolutions and Confusions in Android Apps",
        "authors": "Wei Yang, Deguang Kong, Tao Xie, Carl A. Gunter",
        "abstract": "Existing techniques on adversarial malware generation employ feature mutations based on feature vectors extracted from malware. However, most (if not all) of these techniques suffer from a common limitation: feasibility of these attacks is unknown. The synthesized mutations may break the inherent constraints posed by code structures of the malware, causing either crashes or malfunctioning of malicious payloads. To address the limitation, we present Malware Recomposition Variation (MRV), an approach that conducts semantic analysis of existing malware to systematically construct new malware variants for malware detectors to test and strengthen their detection signatures/models. In particular, we use two variation strategies (i.e., malware evolution attack and malware confusion attack) following structures of existing malware to enhance feasibility of the attacks. Upon the given malware, we conduct semantic-feature mutation analysis and phylogenetic analysis to synthesize mutation strategies. Based on these strategies, we perform program transplantation to automatically mutate malware bytecode to generate new malware variants. We evaluate our MRV approach on actual malware variants, and our empirical evaluation on 1,935 Android benign apps and 1,917 malware shows that MRV produces malware variants that can have high likelihood to evade detection while still retaining their malicious behaviors. We also propose and evaluate three defense mechanisms to counter MRV.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "敌对恶意软件生成的现有技术采用基于从恶意软件提取的特征向量的特征突变。然而，这些技术中的大多数(如果不是全部的话)都有一个共同的局限性:这些攻击的可行性是未知的。合成的突变可能会打破恶意软件的代码结构所造成的固有约束，导致恶意有效载荷崩溃或故障。为了解决这一限制，我们提出了恶意软件重组变体(MRV)，这是一种对现有恶意软件进行语义分析的方法，以便为恶意软件检测器系统地构建新的恶意软件变体，从而测试和加强它们的检测签名/模型。特别地，我们使用两种变化策略(即，恶意软件进化攻击和恶意软件混淆攻击)遵循现有恶意软件的结构来增强攻击的可行性。对于给定的恶意软件，我们进行语义特征突变分析和系统发育分析来合成突变策略。基于这些策略，我们执行程序移植来自动变异恶意软件字节码以生成新的恶意软件变体。我们在实际的恶意软件变种上评估了我们的MRV方法，我们在1，935个Android良性应用和1，917个恶意软件上的经验评估表明，MRV产生的恶意软件变种很有可能逃避检测，同时仍保留其恶意行为。我们也提出并评估三种防御机制来对抗MRV。",
        "title_zh": "对抗设置中的恶意软件检测：在Android应用中利用特征演变和混乱",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2017.html",
        "conf_title": "ACSAC 2017: Orlando, FL, USA",
        "conf_url": "https://doi.org/10.1145/3134600",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3134600.3134647",
        "title": "Supporting Transparent Snapshot for Bare-metal Malware Analysis on Mobile Devices",
        "authors": "Le Guan, Shijie Jia, Bo Chen, Fengwei Zhang, Bo Luo, Jingqiang Lin, Peng Liu, Xinyu Xing, Luning Xia",
        "abstract": "The increasing growth of cybercrimes targeting mobile devices urges an efficient malware analysis platform. With the emergence of evasive malware, which is capable of detecting that it is being analyzed in virtualized environments, bare-metal analysis has become the definitive resort. Existing works mainly focus on extracting the malicious behaviors exposed during bare-metal analysis. However, after malware analysis, it is equally important to quickly restore the system to a clean state to examine the next sample. Unfortunately, state-of-the-art solutions on mobile platforms can only restore the disk, and require a time-consuming system reboot. In addition, all of the existing works require some in-guest components to assist the restoration. Therefore, a kernel-level malware is still able to detect the presence of the in-guest components. We propose Bolt, a transparent restoration mechanism for bare-metal analysis on mobile platform without rebooting. Bolt achieves a reboot-less restoration by simultaneously making a snapshot for both the physical memory and the disk. Memory snapshot is enabled by an isolated operating system (BoltOS) in the ARM TrustZone secure world, and disk snapshot is accomplished by a piece of customized firmware (BoltFTL) for flash-based block devices. Because both the BoltOS and the BoltFTL are isolated from the guest system, even kernel-level malware cannot interfere with the restoration. More importantly, Bolt does not require any modifications into the guest system. As such, Bolt is the first that simultaneously achieves efficiency, isolation, and stealthiness to recover from infection due to malware execution. We have implemented a Bolt prototype working with the Android OS. Experimental results show that Bolt can restore the guest system to a clean state in only 2.80 seconds.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "针对移动设备的网络犯罪日益增多，迫切需要一种高效的恶意软件分析平台。随着能够检测到正在虚拟化环境中被分析的规避型恶意软件的出现，裸机分析已成为最终手段。现有的工作主要集中在提取裸机分析过程中暴露的恶意行为。但是，在恶意软件分析之后，将系统快速恢复到干净的状态以检查下一个样本同样重要。不幸的是，移动平台上最先进的解决方案只能恢复磁盘，并且需要耗时的系统重启。此外，所有现有工程都需要一些来宾内组件来协助修复。因此，内核级恶意软件仍然能够检测来宾内组件的存在。我们提出了Bolt，一种无需重启的透明恢复机制，用于移动平台上的裸机分析。Bolt通过同时为物理内存和磁盘创建快照来实现无需重启的恢复。内存快照由ARM TrustZone安全世界中的隔离操作系统(BoltOS)启用，磁盘快照由基于闪存的块设备的一个定制固件(BoltFTL)完成。因为BoltOS和BoltFTL都与客户系统隔离，所以即使内核级恶意软件也无法干扰恢复。更重要的是，Bolt不需要对客户系统进行任何修改。因此，Bolt是第一个同时实现效率、隔离和隐蔽以从恶意软件执行感染中恢复的软件。我们已经在Android操作系统上实现了一个Bolt原型。实验结果表明，Bolt可以在2.80秒内将客户系统恢复到干净状态。",
        "title_zh": "在移动设备上支持透明快照，以进行裸机的恶意软件分析",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2017.html",
        "conf_title": "ACSAC 2017: Orlando, FL, USA",
        "conf_url": "https://doi.org/10.1145/3134600",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3134600.3134601",
        "title": "Droid-AntiRM: Taming Control Flow Anti-analysis to Support Automated Dynamic Analysis of Android Malware",
        "authors": "Xiaolei Wang, Sencun Zhu, Dehua Zhou, Yuexiang Yang",
        "abstract": "While many test input generation techniques have been proposed to improve the code coverage of dynamic analysis, they are still inefficient in triggering hidden malicious behaviors protected by anti-analysis techniques. In this work, we design and implement Droid-AntiRM, a new approach seeking to tame anti-analysis automatically and improve automated dynamic analysis. Our approach leverages three key observations: 1) Logic-bomb based anti-analysis techniques control the execution of certain malicious behaviors; 2) Anti-analysis techniques are normally implemented through condition statements; 3) Anti-analysis techniques normally have no dependence on program inputs. Based on these observations, Droid-AntiRM uses various techniques to detect anti-analysis in malware samples, and rewrite the condition statements in anti-analysis cases through bytecode instrumentation, thus forcing the hidden behavior to be executed at runtime. Through a study of 3187 malware samples, we find that 32.50% of them employ various anti-analysis techniques. Our experiments demonstrate that Droid-AntiRM can identify anti-analysis instances from 30 malware samples with a true positive rate of 89.15% and zero false negative. By taming the identified anti-analysis, Droid-AntiRM can greatly improve the automated dynamic analysis, successfully triggering 44 additional hidden malicious behaviors from the 30 samples. Further performance evaluation shows that Droid-AntiRM has good efficiency to perform large-scale analysis.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "虽然已经提出了许多测试输入生成技术来提高动态分析的代码覆盖率，但是它们在触发受反分析技术保护的隐藏恶意行为方面仍然是低效的。在这项工作中，我们设计并实现了Droid-antrm，这是一种寻求自动驯服反分析和改进自动动态分析的新方法。我们的方法利用了三个关键的观察:1)基于逻辑炸弹的反分析技术控制某些恶意行为的执行；2)反分析技术通常通过条件语句来实现；3)反分析技术通常不依赖于程序输入。基于这些观察，Droid-antrm使用各种技术来检测恶意软件样本中的反分析，并通过字节码插桩来重写反分析案例中的条件语句，从而强制隐藏的行为在运行时执行。通过对3187个恶意软件样本的研究，我们发现其中32.50%的样本采用了各种反分析技术。我们的实验表明，Droid-antrm可以从30个恶意软件样本中识别反分析实例，正确率为89.15%，零错误率。通过驯服已识别的反分析，Droid-antrm可以极大地改善自动化动态分析，从30个样本中成功触发44个额外的隐藏恶意行为。进一步的性能评估表明，Droid-antrm具有良好的大规模分析效率。",
        "title_zh": "Droid-Antimm：驯服控制流抗分析以支持Android恶意软件的自动动态分析",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2017.html",
        "conf_title": "ACSAC 2017: Orlando, FL, USA",
        "conf_url": "https://doi.org/10.1145/3134600",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3134600.3134636",
        "title": "SecureDroid: Enhancing Security of Machine Learning-based Detection against Adversarial Android Malware Attacks",
        "authors": "Lingwei Chen, Shifu Hou, Yanfang Ye",
        "abstract": "With smart phones being indispensable in people's everyday life, Android malware has posed serious threats to their security, making its detection of utmost concern. To protect legitimate users from the evolving Android malware attacks, machine learning-based systems have been successfully deployed and offer unparalleled flexibility in automatic Android malware detection. In these systems, based on different feature representations, various kinds of classifiers are constructed to detect Android malware. Unfortunately, as classifiers become more widely deployed, the incentive for defeating them increases. In this paper, we explore the security of machine learning in Android malware detection on the basis of a learning-based classifier with the input of a set of features extracted from the Android applications (apps). We consider different importances of the features associated with their contributions to the classification problem as well as their manipulation costs, and present a novel feature selection method (named SecCLS) to make the classifier harder to be evaded. To improve the system security while not compromising the detection accuracy, we further propose an ensemble learning approach (named SecENS) by aggregating the individual classifiers that are constructed using our proposed feature selection method SecCLS. Accordingly, we develop a system called SecureDroid which integrates our proposed methods (i.e., SecCLS and SecENS) to enhance security of machine learning-based Android malware detection. Comprehensive experiments on the real sample collections from Comodo Cloud Security Center are conducted to validate the effectiveness of SecureDroid against adversarial Android malware attacks by comparisons with other alternative defense methods. Our proposed secure-learning paradigm can also be readily applied to other malware detection tasks.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "随着智能手机成为人们日常生活中不可或缺的一部分，Android恶意软件已经对智能手机的安全构成了严重威胁，这使得智能手机的检测成为人们最关心的问题。为了保护合法用户免受不断发展的Android恶意软件攻击，基于机器学习的系统已经成功部署，并在自动Android恶意软件检测方面提供了无与伦比的灵活性。在这些系统中，基于不同的特征表示，构造了各种分类器来检测Android恶意软件。不幸的是，随着分类器的广泛使用，击败它们的动机也在增加。在本文中，我们探讨了机器学习在Android恶意软件检测中的安全性，基于基于学习的分类器，输入从Android应用程序(apps)提取的一组特征。我们考虑了与它们对分类问题的贡献相关的特征的不同重要性以及它们的操作成本，并提出了一种新的特征选择方法(命名为SecCLS ),以使分类器更难被规避。为了提高系统安全性，同时不损害检测精度，我们进一步提出了一种集成学习方法(命名为SecENS ),通过聚合使用我们提出的特征选择方法SecCLS构建的个体分类器。因此，我们开发了一个名为SecureDroid的系统，该系统集成了我们提出的方法(即SecCLS和SecENS)，以增强基于机器学习的Android恶意软件检测的安全性。在Comodo云安全中心的真实样本集上进行了综合实验，通过与其他替代防御方法的比较，验证了SecureDroid对抗对抗性Android恶意软件攻击的有效性。我们提出的安全学习范式也可以很容易地应用于其他恶意软件检测任务。",
        "title_zh": "Securetroid：增强针对对抗性Android恶意软件攻击的基于机器学习的检测的安全性",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2017.html",
        "conf_title": "ACSAC 2017: Orlando, FL, USA",
        "conf_url": "https://doi.org/10.1145/3134600",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3134600.3134609",
        "title": "Towards Baselines for Shoulder Surfing on Mobile Authentication",
        "authors": "Adam J. Aviv, John T. Davin, Flynn Wolf, Ravi Kuber",
        "abstract": "Given the nature of mobile devices and unlock procedures, unlock authentication is a prime target for credential leaking via shoulder surfing, a form of an observation attack. While the research community has investigated solutions to minimize or prevent the threat of shoulder surfing, our understanding of how the attack performs on current systems is less well studied. In this paper, we describe a large online experiment (n = 1173) that works towards establishing a baseline of shoulder surfing vulnerability for current unlock authentication systems. Using controlled video recordings of a victim entering in a set of 4- and 6-length PINs and Android unlock patterns on different phones from different angles, we asked participants to act as attackers, trying to determine the authentication input based on the observation. We find that 6-digit PINs are the most elusive attacking surface where a single observation leads to just 10.8% successful attacks (26.5% with multiple observations). As a comparison, 6-length Android patterns, with one observation, were found to have an attack rate of 64.2% (79.9% with multiple observations). Removing feedback lines for patterns improves security to 35.3% (52.1% with multiple observations). This evidence, as well as other results related to hand position, phone size, and observation angle, suggests the best and worst case scenarios related to shoulder surfing vulnerability which can both help inform users to improve their security choices, as well as establish baselines for researchers.",
        "files": {
            "openAccessPdf": "https://mdsoar.org/bitstream/11603/19836/1/3134600.3134609.pdf"
        },
        "abstract_zh": "鉴于移动设备和解锁程序的性质，解锁身份验证是通过肩窥(一种观察攻击形式)泄露凭据的主要目标。虽然研究界已经研究了最大限度地减少或防止肩扛攻击威胁的解决方案，但我们对攻击如何在当前系统上执行的理解还没有得到很好的研究。在本文中，我们描述了一个大型的在线实验(n = 1173 ),该实验旨在为当前的解锁认证系统建立一个肩部冲浪漏洞基线。使用受害者从不同角度进入一组4和6长度pin和不同手机上的Android解锁模式的受控视频记录，我们要求参与者扮演攻击者，试图根据观察结果确定认证输入。我们发现6位数的pin是最难以捉摸的攻击面，单次观察导致的成功攻击率仅为10.8%(多次观察为26.5%)。作为比较，6长度的Android模式，在一次观察时，被发现具有64.2%的攻击率(在多次观察时为79.9%)。删除模式的反馈线将安全性提高到35.3%(多次观察时为52.1%)。这一证据，以及与手的位置、手机大小和观察角度相关的其他结果，表明了与肩部冲浪漏洞相关的最佳和最差情况，这既可以帮助通知用户改善他们的安全选择，也可以为研究人员建立基线。",
        "title_zh": "朝着基线进行移动身份验证的肩膀冲浪",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2017.html",
        "conf_title": "ACSAC 2017: Orlando, FL, USA",
        "conf_url": "https://doi.org/10.1145/3134600",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3134600.3134638",
        "title": "Analysis of SEAndroid Policies: Combining MAC and DAC in Android",
        "authors": "Haining Chen, Ninghui Li, William Enck, Yousra Aafer, Xiangyu Zhang",
        "abstract": "Android has become a dominant computing platform, and its popularity has coincided with a surge of malware. The incorporation of Security-Enhanced Linux in Android (SEAndroid) is an important security enhancement to the platform. While SEAndroid adds the benefits of mandatory protection that SELinux brought to desktops and servers, the protection is only as good as the policy. Existing Android devices contain a wide variety of SEAndroid policies, depending on both the version of Android as well as the device manufacturer. In this paper, we present an approach to analyze SEAndroid policies in conjunction with the underlying Linux/Unix Discretionary Access Control policies. We apply our approach to four different versions of Android Open Source Project (AOSP) as well as devices from seven different manufacturers, and find several forms of unintentional privilege assignments.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android已经成为一个占主导地位的计算平台，它的流行恰逢恶意软件激增。将安全性增强的Linux并入Android (SEAndroid)是对该平台的一个重要的安全性增强。虽然SEAndroid增加了SELinux为台式机和服务器带来的强制保护的好处，但这种保护只与策略一样好。现有的Android设备包含各种各样的SEAndroid策略，这取决于Android的版本和设备制造商。在本文中，我们提出了一种结合底层Linux/Unix自主访问控制策略来分析SEAndroid策略的方法。我们将我们的方法应用于Android开源项目(AOSP)的四个不同版本以及来自七个不同制造商的设备，并发现了几种形式的无意特权分配。",
        "title_zh": "Seandroid策略的分析：在Android中组合MAC和DAC",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2017.html",
        "conf_title": "ACSAC 2017: Orlando, FL, USA",
        "conf_url": "https://doi.org/10.1145/3134600",
        "keywords": [
            "AOSP",
            "Android"
        ]
    },
    {
        "url": "http://dl.acm.org/citation.cfm?id=2991105",
        "title": "The Achilles heel of OAuth: a multi-platform study of OAuth-based authentication",
        "authors": "Hui Wang, Yuanyuan Zhang, Juanru Li, Dawu Gu",
        "abstract": "Websites and mobile applications today increasingly utilize OAuth for authorization and authentication. Major companies such as Facebook, Google and Twitter all provide OAuth services. The usage of OAuth for authorization is well documented and has been studied by many researchers. However, little work has been done to specify or analyze the usage of OAuth for authentication. Given that many developers have employed OAuth for authentication on multiple platforms, we believe it is imperative to conduct a study to understand how developers customize OAuth for authentication on different platforms. In this paper, we analyze how popular applications on the Web, Android and iOS platform authenticate users with OAuth. Our approach is to dissect the traffic from an attacker's perspective to recover the authentication mechanisms employed by the apps and identify exploitable vulnerabilities. The results show that OAuth-based authentication mechanisms employed by these applications lack sufficient verification and suffer from many vulnerabilities. Closer examination reveals that developers have different tendencies to authenticate users with OAuth on different platforms, and 32.9%, 47.1% and 41.6% of the analyzed mechanisms on the three platforms are vulnerable. We then categorize the root causes of these vulnerabilities and make practical recommendations for developers to help design and implement robust authentication mechanisms with OAuth.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "如今，网站和移动应用程序越来越多地利用OAuth进行授权和认证。脸书、谷歌和Twitter等大公司都提供OAuth服务。OAuth在授权中的使用已经被很好地记录下来，并且被许多研究人员研究过。然而，很少有人详细说明或分析OAuth在身份验证中的用途。鉴于许多开发人员已经在多个平台上使用OAuth进行身份验证，我们认为有必要进行一项研究，以了解开发人员如何在不同平台上定制OAuth进行身份验证。在本文中，我们分析了Web、Android和iOS平台上流行的应用程序如何使用OAuth对用户进行认证。我们的方法是从攻击者的角度剖析流量，以恢复应用程序采用的身份验证机制，并识别可利用的漏洞。结果表明，这些应用所采用的基于OAuth的认证机制缺乏足够的验证，并且存在许多漏洞。进一步研究发现，开发者在不同平台上使用OAuth对用户进行身份认证的倾向不同，三个平台上分别有32.9%、47.1%和41.6%的被分析机制存在漏洞。然后，我们对这些漏洞的根本原因进行分类，并为开发人员提供实用的建议，以帮助设计和实现具有OAuth的健壮的身份验证机制。",
        "title_zh": "Oauth的致命弱点：基于OAUTH的身份验证的多平台研究",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2016.html",
        "conf_title": "ACSAC 2016: Los Angeles, CA, USA",
        "conf_url": "https://doi.org/10.1145/2991079",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "http://dl.acm.org/citation.cfm?id=2991124",
        "title": "Cypider: building community-based cyber-defense infrastructure for android malware detection",
        "authors": "ElMouatez Billah Karbab, Mourad Debbabi, Abdelouahid Derhab, Djedjiga Mouheb",
        "abstract": "The popularity of Android OS has dramatically increased malware apps targeting this mobile OS. The daily amount of malware has overwhelmed the detection process. This fact has motivated the need for developing malware detection and family attribution solutions with the least manual intervention. In response, we propose Cypider framework, a set of techniques and tools aiming to perform a systematic detection of mobile malware by building an efficient and scalable similarity network infrastructure of malicious apps. Our detection method is based on a novel concept, namely malicious community, in which we consider, for a given family, the instances that share common features. Under this concept, we assume that multiple similar Android apps with different authors are most likely to be malicious. Cypider leverages this assumption for the detection of variants of known malware families and zero-day malware. It is important to mention that Cypider does not rely on signature-based or learning-based patterns. Alternatively, it applies community detection algorithms on the similarity network, which extracts sub-graphs considered as suspicious and most likely malicious communities. Furthermore, we propose a novel fingerprinting technique, namely community fingerprint, based on a learning model for each malicious community. Cypider shows excellent results by detecting about 50% of the malware dataset in one detection iteration. Besides, the preliminary results of the community fingerprint are promising as we achieved 87% of the detection.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android操作系统的流行极大地增加了针对这种移动操作系统的恶意软件应用。每天的恶意软件数量已经让检测过程不堪重负。这一事实激发了开发最少人工干预的恶意软件检测和家庭归属解决方案的需求。作为回应，我们提出了Cypider框架，这是一套旨在通过建立一个高效和可扩展的恶意应用相似性网络基础设施来执行移动恶意软件的系统检测的技术和工具。我们的检测方法是基于一个新的概念，即恶意社区，其中我们考虑，对于一个给定的家庭，共享共同特征的实例。在这个概念下，我们假设多个不同作者的相似Android应用最有可能是恶意的。Cypider利用这一假设来检测已知恶意软件家族和零日恶意软件的变种。值得一提的是，Cypider不依赖于基于签名或基于学习的模式。或者，它在相似性网络上应用社区检测算法，该算法提取被认为是可疑和最有可能是恶意社区的子图。此外，我们提出了一种新的指纹技术，即社区指纹，基于每个恶意社区的学习模型。通过在一次检测迭代中检测大约50%的恶意软件数据集，Cypider显示出优异的结果。此外，社区指纹的初步结果是有希望的，因为我们实现了87%的检测。",
        "title_zh": "CYPIDE：基于社区的建筑网络防御基础设施，用于Android恶意软件检测",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2016.html",
        "conf_title": "ACSAC 2016: Los Angeles, CA, USA",
        "conf_url": "https://doi.org/10.1145/2991079",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "http://dl.acm.org/citation.cfm?id=2991120",
        "title": "Understanding and defending the binder attack surface in Android",
        "authors": "Huan Feng, Kang G. Shin",
        "abstract": "In Android, communications between apps and system services are supported by a transaction-based Inter-Process Communication (IPC) mechanism. Binder, as the cornerstone of this IPC mechanism, separates two communicating parties as client and server. As with any client-server model, the server should not make any assumption on the validity (sanity) of client-side transaction. To our surprise, we find this principle has frequently been overlooked in the implementation of Android system services. In this paper, we try to answer why developers keep making this seemingly simple mistake by studying more than 100 vulnerabilities on this attack surface. We analyzed these vulnerabilities to find that most of them are rooted at a common confusion of where the actual security boundary is among system developers. We thus highlight the deficiency of testing only on client-side public APIs and argue for the necessity of testing and protection on the Binder interface --- the actual security boundary. Specifically, we design and implement BinderCracker, an automatic testing framework that supports context-aware fuzzing and actively manages the dependency between transactions. It does not require the source codes of the component under test, is compatible with services in different layers, and performs much more effectively than simple black-box fuzzing. We also call attention to the attack attribution problem for IPC-based attacks. The lack of OS-level support makes it very difficult to identify the culprit apps even for developers with adb access. We address this issue by providing an informative runtime diagnostic tool that tracks the origin, schema, content, and parsing details of each failed transaction. This brings transparency into the IPC process and provides an essential step for other in-depth analysis or forensics.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "在Android中，应用程序和系统服务之间的通信由基于事务的进程间通信(IPC)机制支持。作为这个IPC机制的基石，Binder将通信双方作为客户机和服务器分开。与任何客户端-服务器模型一样，服务器不应该对客户端事务的有效性(健全性)做任何假设。令我们惊讶的是，我们发现这个原则在Android系统服务的实现中经常被忽略。在本文中，我们试图通过研究这个攻击面上的100多个漏洞来回答为什么开发人员会不断犯这个看似简单的错误。我们分析了这些漏洞，发现它们中的大多数都源于系统开发人员对实际安全边界的普遍混淆。因此，我们强调了只在客户端公共API上进行测试的不足，并论证了在绑定器接口(实际的安全边界)上进行测试和保护的必要性。具体来说，我们设计并实现了BinderCracker，这是一个支持上下文感知模糊化并主动管理事务间依赖关系的自动化测试框架。它不需要被测组件的源代码，兼容不同层的服务，比简单的黑盒模糊化要有效得多。我们还呼吁关注基于IPC的攻击的攻击归属问题。由于缺乏操作系统级支持，即使是拥有adb访问权限的开发人员也很难识别出问题应用。我们通过提供一个信息丰富的运行时诊断工具来解决这个问题，该工具可以跟踪每个失败事务的来源、模式、内容和解析细节。这为IPC流程带来了透明度，并为其他深入分析或取证提供了重要的一步。",
        "title_zh": "了解和捍卫Android中的粘合剂攻击表面",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2016.html",
        "conf_title": "ACSAC 2016: Los Angeles, CA, USA",
        "conf_url": "https://doi.org/10.1145/2991079",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "http://dl.acm.org/citation.cfm?id=2991116",
        "title": "FASE: functionality-aware security enforcement",
        "authors": "Petar Tsankov, Marco Pistoia, Omer Tripp, Martin T. Vechev, Pietro Ferrara",
        "abstract": "Dynamic information-flow enforcement systems automatically protect applications against confidentiality and integrity threats. Unfortunately, existing solutions cause undesirable side effects, if not crashes, due to unconstrained modification of run-time values (e.g. anonymizing sensitive identifiers even when these are used for authentication). To address this problem, we present Functionality-Aware Security Enforcement (FASE), a lightweight approach for ef?ciently securing applications without breaking their functionality. The key idea is to let developers specify functionality constraints and then use a run-time synthesizer to replace sensitive values with constraint-compliant ones. Concretely, FASE consists of: (i) an efficient fine-grained data-flow-tracking engine, (ii) a domain-specific language (DSL) for expressing functionality constraints, (iii) a synthesizer that derives constraint-compliant values at security-sensitive operations, and (iv) an enforcement mechanism that automatically repairs illicit flows at run time. We instantiated FASE to the problem of securing Android applications. Our experiments show that the FASE system is useful in practice: Its average run-time overhead is <12%; it avoids the crashes, side effects, and run-time errors exhibited by existing solutions; and the constraints in the FASE DSL are readable and concise.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "动态信息流强制执行系统自动保护应用程序免受机密性和完整性威胁。不幸的是，由于运行时间值的无约束修改(例如，即使敏感标识符用于认证，也匿名化这些标识符)，现有的解决方案即使没有崩溃，也会导致不期望的副作用。为了解决这个问题，我们提出了功能感知安全执行(FASE)，一种轻量级的ef？有效保护应用程序而不破坏其功能。关键思想是让开发人员指定功能约束，然后使用运行时合成器用符合约束的值替换敏感值。具体地说，FASE包括:(I)一个高效的细粒度数据流跟踪引擎，(ii)一个用于表达功能约束的领域特定语言(DSL)，(iii)一个在安全敏感操作中导出约束兼容值的合成器，以及(iv)一个在运行时自动修复非法流的执行机制。我们用FASE的例子来说明保护Android应用程序的问题。我们的实验表明，FASE系统在实践中是有用的:它的平均运行时间开销< 12%；它避免了现有解决方案出现的崩溃、副作用和运行时错误；FASE DSL中的约束是可读和简洁的。",
        "title_zh": "FASE：功能意识的安全执行",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2016.html",
        "conf_title": "ACSAC 2016: Los Angeles, CA, USA",
        "conf_url": "https://doi.org/10.1145/2991079",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3015135.3015140",
        "title": "Active Android malware analysis: an approach based on stochastic games",
        "authors": "Riccardo Sartea, Mila Dalla Preda, Alessandro Farinelli, Roberto Giacobazzi, Isabella Mastroeni",
        "abstract": "Active Malware Analysis focuses on learning the behaviors and the intentions of a malicious piece of software by interacting with it in a safe environment. The process can be formalized as a stochastic game involving two agents, a malware sample and an analyzer, that interact with opposite objectives: the malware sample tries to hide its behavior, while the analyzer aims at gaining as much information on the malware sample as possible. Our goal is to design a software agent that interacts with malware and extracts information on the behavior, learning a policy. We can then analyze different malware policies by using standard clustering approaches. In more detail, we propose a novel method to build malware models that can be used as an input to the stochastic game formulation. We empirically evaluate our method on real malware for the Android systems, showing that our approach can group malware belonging to the same families and identify the presence of possible sub-groups within such families.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "主动恶意软件分析侧重于通过在安全环境中与恶意软件进行交互来了解恶意软件的行为和意图。该过程可以被形式化为涉及两个代理(恶意软件样本和分析器)的随机游戏，这两个代理以相反的目标进行交互:恶意软件样本试图隐藏其行为，而分析器旨在获得关于恶意软件样本的尽可能多的信息。我们的目标是设计一个软件代理，它可以与恶意软件交互并提取行为信息，学习策略。然后，我们可以使用标准的聚类方法来分析不同的恶意软件策略。更详细地说，我们提出了一种新的方法来建立恶意软件模型，该模型可以用作随机游戏公式的输入。我们在Android系统的真实恶意软件上对我们的方法进行了经验评估，表明我们的方法可以对属于相同家族的恶意软件进行分组，并识别这些家族中可能存在的子组。",
        "title_zh": "主动Android恶意软件分析：基于随机游戏的方法",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/ssprew2016.html",
        "conf_title": "6th SSPREW@ACSAC 2016: Los Angeles, CA, USA",
        "conf_url": "https://doi.org/10.1145/3015135",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3015135.3015142",
        "title": "Tightly-coupled self-debugging software protection",
        "authors": "Bert Abrath, Bart Coppens, Stijn Volckaert, Joris Wijnant, Bjorn De Sutter",
        "abstract": "Existing anti-debugging protections are relatively weak. In existing self-debugger approaches, a custom debugger is attached to the main application, of which the control flow is obfuscated by redirecting it through the debugger. The coupling between the debugger and the main application is then quite loose, and not that hard to break by an attacker. In the tightly-coupled self-debugging technique proposed in this paper, full code fragments are migrated from the application to the debugger, making it harder for the attacker to reverse-engineer the program and to deconstruct it into the original unprotected program to attach a debugger or to collect traces. We evaluate a prototype implementation on three complex, real-world Android use cases and present the results of tests conducted by professional penetration testers.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "现有的反调试保护相对较弱。在现有的自调试器方法中，定制调试器被附加到主应用程序，通过调试器重定向控制流来混淆控制流。调试器和主应用程序之间的耦合是相当松散的，被攻击者破坏并不困难。在本文提出的紧耦合自调试技术中，完整的代码片段从应用程序迁移到调试器，使得攻击者更难对程序进行逆向工程，并将其解构为原始的未受保护的程序以附加调试器或收集跟踪。我们在三个复杂的真实世界Android用例上评估了一个原型实现，并展示了由专业渗透测试人员进行的测试结果。",
        "title_zh": "紧密耦合的自欺骗软件保护",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/ssprew2016.html",
        "conf_title": "6th SSPREW@ACSAC 2016: Los Angeles, CA, USA",
        "conf_url": "https://doi.org/10.1145/3015135",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2818000.2818001",
        "title": "Decentralized Authorization and Privacy-Enhanced Routing for Information-Centric Networks",
        "authors": "Mariana Raykova, Hasnain Lakhani, Hasanat Kazmi, Ashish Gehani",
        "abstract": "As information-centric networks are deployed in increasingly diverse settings, there is a growing need to protect the privacy of participants. We describe the design, implementation, and evaluation of a security framework that achieves this. It ensures the integrity and confidentiality of published content, the associated descriptive metadata, and the interests of subscribers. Publishers can scope access to the content, as well as which nodes in the network can broker access to it. Subscribers can limit which nodes can see their interests. Scopes are defined as policies over attributes of the individual nodes. The system transparently realizes the policies with suitable cryptographic primitives. It supports deployment in heterogeneous mobile ad hoc environments where trust may derive from multiple independent sources. Further, no external public key infrastructure is assumed. We also report on the overhead that the security adds in actual deployments on Android devices.",
        "files": {
            "openAccessPdf": "http://dl.acm.org/ft_gateway.cfm?id=2818001&type=pdf"
        },
        "abstract_zh": "随着以信息为中心的网络部署在日益多样化的环境中，保护参与者隐私的需求日益增长。我们描述了实现这一点的安全框架的设计、实现和评估。它确保发布内容、相关描述性元数据和订阅者利益的完整性和机密性。发布者可以限制对内容的访问，以及网络中的哪些节点可以代理对内容的访问。订户可以限制哪些节点可以看到他们的兴趣。范围被定义为单个节点属性上的策略。系统用合适的密码原语透明地实现策略。它支持在异构移动自组织环境中部署，其中信任可能来自多个独立的来源。此外，没有假定外部公钥基础设施。我们还报告了安全性在Android设备上的实际部署中增加的开销。",
        "title_zh": "以信息为中心的网络分散授权和隐私增强路由",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2015.html",
        "conf_title": "31. ACSAC 2015: Los Angeles, CA, USA",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2818000",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2818000.2818024",
        "title": "Vulnerability Assessment of OAuth Implementations in Android Applications",
        "authors": "Hui Wang, Yuanyuan Zhang, Juanru Li, Hui Liu, Wenbo Yang, Bodong Li, Dawu Gu",
        "abstract": "Enforcing security on various implementations of OAuth in Android apps should consider a wide range of issues comprehensively. OAuth implementations in Android apps differ from the recommended specification due to the provider and platform factors, and the varied implementations often become vulnerable. Current vulnerability assessments on these OAuth implementations are ad hoc and lack a systematic manner. As a result, insecure OAuth implementations are still widely used and the situation is far from optimistic in many mobile app ecosystems. To address this problem, we propose a systematic vulnerability assessment framework for OAuth implementations on Android platform. Different from traditional OAuth security analyses that are experiential with a restrictive three-party model, our proposed framework utilizes an systematic security assessing methodology that adopts a five-party, three-stage model to detect typical vulnerabilities of popular OAuth implementations in Android apps. Based on this framework, a comprehensive investigation on vulnerable OAuth implementations is conducted at the level of an entire mobile app ecosystem. The investigation studies the Chinese mainland mobile app markets (e.g., Baidu App Store, Tencent, Anzhi) that covers 15 mainstream OAuth service providers. Top 100 relevant relying party apps (RP apps) are thoroughly assessed to detect vulnerable OAuth implementations, and we further perform an empirical study of over 4,000 apps to validate how frequently developers misuse the OAuth protocol. The results demonstrate that 86.2% of the apps incorporating OAuth services are vulnerable, and this ratio of Chinese mainland Android app market is much higher than that (58.7%) of Google Play.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "在Android应用中的各种OAuth实现上实施安全性应该综合考虑广泛的问题。由于提供商和平台因素，Android应用程序中的OAuth实现不同于推荐的规范，并且各种各样的实现往往容易受到攻击。当前对这些OAuth实现的漏洞评估是临时的，缺乏系统的方式。因此，不安全的OAuth实现仍然被广泛使用，在许多移动应用程序生态系统中，情况远非乐观。为了解决这个问题，我们提出了一个在Android平台上实现OAuth的系统漏洞评估框架。与基于限制性三方模型的传统OAuth安全分析不同，我们提出的框架采用了一种系统的安全评估方法，该方法采用了一种五方三阶段模型来检测Android应用中流行的OAuth实现的典型漏洞。基于这个框架，在整个移动应用生态系统的层面上对易受攻击的OAuth实现进行了全面的调查。该调查研究了覆盖15个主流OAuth服务提供商的中国大陆移动应用市场(如百度应用商店、腾讯、安智)。我们对前100个相关的依赖方应用(RP应用)进行了全面评估，以检测易受攻击的OAuth实现，并进一步对4，000多个应用进行了实证研究，以验证开发人员滥用OAuth协议的频率。结果显示，86.2%包含OAuth服务的应用存在漏洞，中国大陆Android应用市场的这一比例远高于Google Play的58.7%。",
        "title_zh": "OAUTH实施在Android应用中的脆弱性评估",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2015.html",
        "conf_title": "31. ACSAC 2015: Los Angeles, CA, USA",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2818000",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2818000.2818036",
        "title": "BareDroid: Large-Scale Analysis of Android Apps on Real Devices",
        "authors": "Simone Mutti, Yanick Fratantonio, Antonio Bianchi, Luca Invernizzi, Jacopo Corbetta, Dhilung Kirat, Christopher Kruegel, Giovanni Vigna",
        "abstract": "To protect Android users, researchers have been analyzing unknown, potentially-malicious applications by using systems based on emulators, such as the Google's Bouncer and Andrubis. Emulators are the go-to choice because of their convenience: they can scale horizontally over multiple hosts, and can be reverted to a known, clean state in a matter of seconds. Emulators, however, are fundamentally different from real devices, and previous research has shown how it is possible to automatically develop heuristics to identify an emulated environment, ranging from simple flag checks and unrealistic sensor input, to fingerprinting the hypervisor's handling of basic blocks of instructions. Aware of this aspect, malware authors are starting to exploit this fundamental weakness to evade current detection systems. Unfortunately, analyzing apps directly on bare metal at scale has been so far unfeasible, because the time to restore a device to a clean snapshot is prohibitive: with the same budget, one can analyze an order of magnitude less apps on a physical device than on an emulator. In this paper, we propose BareDroid, a system that makes bare-metal analysis of Android apps feasible by quickly restoring real devices to a clean snapshot. We show how BareDroid is not detected as an emulated analysis environment by emulator-aware malware or by heuristics from prior research, allowing BareDroid to observe more potentially malicious activity generated by apps. Moreover, we provide a cost analysis, which shows that replacing emulators with BareDroid requires a financial investment of less than twice the cost of the servers that would be running the emulators. Finally, we release BareDroid as an open source project, in the hope it can be useful to other researchers to strengthen their analysis systems.",
        "files": {
            "openAccessPdf": "http://dl.acm.org/ft_gateway.cfm?id=2818036&type=pdf"
        },
        "abstract_zh": "为了保护Android用户，研究人员一直在使用基于模拟器的系统分析未知的潜在恶意应用程序，如谷歌的Bouncer和Andrubis。模拟器是首选，因为它们很方便:它们可以在多台主机上水平扩展，并且可以在几秒钟内恢复到已知的干净状态。然而，仿真器从根本上不同于真实的设备，之前的研究已经表明如何能够自动开发启发式算法来识别仿真环境，从简单的标志检查和不切实际的传感器输入，到识别虚拟机管理程序对基本指令块的处理。意识到这一点，恶意软件作者开始利用这一根本弱点来规避当前的检测系统。不幸的是，直接在裸机上大规模分析应用程序到目前为止还不可行，因为将设备恢复到干净快照的时间太长了:在相同的预算下，在物理设备上分析的应用程序比在模拟器上少一个数量级。在本文中，我们提出了BareDroid，这是一个通过快速将真实设备恢复到干净的快照来对Android应用进行裸机分析的系统。我们展示了BareDroid如何不被仿真器感知的恶意软件或先前研究的启发式方法检测为仿真分析环境，从而允许BareDroid观察应用程序生成的更多潜在恶意活动。此外，我们提供了一个成本分析，该分析表明用BareDroid替换模拟器所需的投资不到运行模拟器的服务器成本的两倍。最后，我们将BareDroid作为一个开源项目发布，希望它能对其他研究人员增强他们的分析系统有所帮助。",
        "title_zh": "Baredroid：对真实设备上的Android应用的大规模分析",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2015.html",
        "conf_title": "31. ACSAC 2015: Los Angeles, CA, USA",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2818000",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2818000.2818038",
        "title": "Experimental Study with Real-world Data for Android App Security Analysis using Machine Learning",
        "authors": "Sankardas Roy, Jordan DeLoach, Yuping Li, Nic Herndon, Doina Caragea, Xinming Ou, Venkatesh Prasad Ranganath, Hongmin Li, Nicolais Guevara",
        "abstract": "Although Machine Learning (ML) based approaches have shown promise for Android malware detection, a set of critical challenges remain unaddressed. Some of those challenges arise in relation to proper evaluation of the detection approach while others are related to the design decisions of the same. In this paper, we systematically study the impact of these challenges as a set of research questions (i.e., hypotheses). We design an experimentation framework where we can reliably vary several parameters while evaluating ML-based Android malware detection approaches. The results from the experiments are then used to answer the research questions. Meanwhile, we also demonstrate the impact of some challenges on some existing ML-based approaches. The large (market-scale) dataset (benign and malicious apps) we use in the above experiments represents the real-world Android app security analysis scale. We envision this study to encourage the practice of employing a better evaluation strategy and better designs of future ML-based approaches for Android malware detection.",
        "files": {
            "openAccessPdf": "http://dl.acm.org/ft_gateway.cfm?id=2818038&type=pdf"
        },
        "abstract_zh": "虽然基于机器学习(ML)的方法已经显示出对Android恶意软件检测的承诺，但一系列关键挑战仍然没有解决。其中一些挑战与检测方法的正确评估有关，而其他挑战则与检测方法的设计决策有关。在本文中，我们将这些挑战的影响作为一组研究问题(即假设)进行系统研究。我们设计了一个实验框架，在评估基于ML的Android恶意软件检测方法时，我们可以可靠地改变几个参数。实验结果然后被用来回答研究问题。同时，我们也展示了一些挑战对一些现有的基于最大似然的方法的影响。我们在上述实验中使用的大型(市场规模)数据集(良性和恶意应用)代表了真实世界的Android应用安全分析规模。我们预计这项研究将鼓励采用更好的评估策略和更好的设计来检测Android恶意软件。",
        "title_zh": "使用机器学习的Android应用程序安全分析的现实数据的实验研究",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2015.html",
        "conf_title": "31. ACSAC 2015: Los Angeles, CA, USA",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2818000",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2818000.2818005",
        "title": "AuDroid: Preventing Attacks on Audio Channels in Mobile Devices",
        "authors": "Giuseppe Petracca, Yuqiong Sun, Trent Jaeger, Ahmad Atamli",
        "abstract": "Voice control is a popular way to operate mobile devices, enabling users to communicate requests to their devices. However, adversaries can leverage voice control to trick mobile devices into executing commands to leak secrets or to modify critical information. Contemporary mobile operating systems fail to prevent such attacks because they do not control access to the speaker at all and fail to control when untrusted apps may use the microphone, enabling authorized apps to create exploitable communication channels. In this paper, we propose a security mechanism that tracks the creation of audio communication channels explicitly and controls the information flows over these channels to prevent several types of attacks. We design and implement AuDroid, an extension to the SE Linux reference monitor integrated into the Android operating system for enforcing lattice security policies over the dynamically changing use of system audio resources. To enhance flexibility, when information flow errors are detected, the device owner, system apps and services are given the opportunity to resolve information flow errors using known methods, enabling AuDroid to run many configurations safely. We evaluate our approach on 17 widely-used apps that make extensive use of the microphone and speaker, finding that AuDroid prevents six types of attack scenarios on audio channels while permitting all 17 apps to run effectively. AuDroid shows that it is possible to prevent attacks using audio channels without compromising functionality or introducing significant performance overhead.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "语音控制是操作移动设备的一种流行方式，使用户能够向他们的设备传达请求。然而，对手可以利用语音控制来欺骗移动设备执行命令，从而泄露机密或修改关键信息。当代的移动操作系统无法防止这种攻击，因为它们根本无法控制对扬声器的访问，也无法控制不受信任的应用程序何时可以使用麦克风，从而使授权的应用程序能够创建可利用的通信渠道。在本文中，我们提出了一种安全机制，它明确地跟踪音频通信信道的创建，并控制这些信道上的信息流，以防止几种类型的攻击。我们设计并实现了AuDroid，它是SE Linux参考监控器的一个扩展，集成到Android操作系统中，用于在动态变化的系统音频资源使用上实施网格安全策略。为了提高灵活性，当检测到信息流错误时，设备所有者、系统应用和服务有机会使用已知方法解决信息流错误，使AuDroid能够安全地运行许多配置。我们在17个广泛使用麦克风和扬声器的应用上评估了我们的方法，发现AuDroid可以防止音频通道上的六种攻击场景，同时允许所有17个应用有效运行。AuDroid表明，在不损害功能或引入显著性能开销的情况下，使用音频通道来防止攻击是可能的。",
        "title_zh": "Audroid：防止在移动设备中对音频通道的攻击",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2015.html",
        "conf_title": "31. ACSAC 2015: Los Angeles, CA, USA",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2818000",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2818000.2818042",
        "title": "Grab 'n Run: Secure and Practical Dynamic Code Loading for Android Applications",
        "authors": "Luca Falsina, Yanick Fratantonio, Stefano Zanero, Christopher Kruegel, Giovanni Vigna, Federico Maggi",
        "abstract": "Android introduced the dynamic code loading (DCL) mechanism to allow for code reuse, to achieve extensibility, to enable updating functionalities, or to boost application start-up performance. In spite of its wide adoption by developers, previous research has shown that the secure implementation of DCL-based functionality is challenging, often leading to remote code injection vulnerabilities. Unfortunately, previous attempts to address this problem by both the academic and Android developers communities are affected by either practicality or completeness issues, and, in some cases, are affected by severe vulnerabilities. In this paper, we propose, design, implement, and test Grab 'n Run, a novel code verification protocol and a series of supporting libraries, APIs, and tools, that address the problem by abstracting away from the developer many of the challenging implementation details. Grab 'n Run is designed to be practical: Among its tools, it provides a drop-in library, which requires no modifications to the Android framework or the underlying Dalvik/ART runtime, is very similar to the native API, and most code can be automatically rewritten to use it. Grab 'n Run also contains an application-rewriting tool, which allows to easily port legacy or third-party applications to use the secure APIs developed in this work. We evaluate the Grab 'n Run library with a user study, obtaining very encouraging results in vulnerability reduction, ease of use, and speed of development. We also show that the performance overhead introduced by our library is negligible. For the benefit of the security of the Android ecosystem, we released Grab 'n Run as open source.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android引入了动态代码加载(DCL)机制，以允许代码重用，实现可扩展性，支持更新功能，或提高应用程序的启动性能。尽管它被开发人员广泛采用，但以前的研究表明，基于DCL的功能的安全实现是具有挑战性的，通常会导致远程代码注入漏洞。不幸的是，学术界和Android开发者社区以前解决这个问题的尝试受到实用性或完整性问题的影响，并且在某些情况下，受到严重漏洞的影响。在本文中，我们提出、设计、实现并测试Grab 'n Run，这是一种新颖的代码验证协议和一系列支持库、API和工具，通过从开发人员那里抽象出许多具有挑战性的实现细节来解决问题。Grab 'n Run的设计非常实用:在其工具中，它提供了一个嵌入式库，不需要对Android框架或底层Dalvik/ART运行时进行任何修改，与原生API非常相似，大多数代码可以自动重写以使用它。Grab 'n Run还包含一个应用程序重写工具，它允许轻松地移植遗留或第三方应用程序，以使用在这项工作中开发的安全API。我们通过用户研究评估了Grab 'n Run库，在减少漏洞、易用性和开发速度方面获得了非常令人鼓舞的结果。我们还展示了本库引入的性能开销可以忽略不计。为了Android生态系统的安全性，我们开源发布了Grab 'n Run。",
        "title_zh": "抓取'n运行：为Android应用程序加载安全且实用的动态代码",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2015.html",
        "conf_title": "31. ACSAC 2015: Los Angeles, CA, USA",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2818000",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2818000.2818014",
        "title": "Is Bigger Better? Comparing User-Generated Passwords on 3x3 vs. 4x4 Grid Sizes for Android's Pattern Unlock",
        "authors": "Adam J. Aviv, Devon Budzitowski, Ravi Kuber",
        "abstract": "Android's graphical authentication mechanism requires users to unlock their devices by \"drawing\" a pattern that connects a sequence of contact points arranged in a 3x3 grid. Prior studies demonstrated that human-generated 3x3 patterns are weak (CCS'13); large portions can be trivially guessed with sufficient training. An obvious solution would be to increase the grid size to increase the complexity of chosen patterns. In this paper we ask the question: Does increasing the grid size increase the security of human-generated patterns? We conducted two large studies to answer this question, and our analysis shows that for both 3x3 and 4x4 patterns, there is a high incidence of repeated patterns and symmetric pairs (patterns that derive from others based on a sequence of flips and rotations), and many 4x4 patterns are expanded versions of 3x3 patterns. Leveraging this information, we developed an advanced guessing algorithm and used it to quantified the strength of the patterns using the partial guessing entropy. We find that guessing the first 20% (G0.2) of patterns for both 3x3 and 4x4 can be done as efficiently as guessing a random 2-digit PIN. While guessing larger portions of 4x4 patterns (G0.5) requires 2-bits more entropy than guessing the same ratio of 3x3 patterns, it remains on the order of cracking random 3-digit PINs. Of the patterns tested, our guessing algorithm successful cracks 15% of 3x3 patterns within 20 guesses (a typical phone lockout) and 19% of 4x4 patterns within 20 guesses; however, after 50,000 guesses, we correctly guess 95.9% of 3x3 patterns but only 66.7% of 4x4 patterns. While there may be some benefit to expanding the grid size to 4x4, we argue the majority of patterns chosen by users will remain trivially guessable and insecure against broad guessing attacks.",
        "files": {
            "openAccessPdf": "https://mdsoar.org/bitstream/11603/19893/1/2818000.2818014.pdf"
        },
        "abstract_zh": "Android的图形认证机制要求用户通过“绘制”一个图案来解锁他们的设备，该图案连接排列在3×3网格中的一系列接触点。先前的研究表明，人类产生的3x3模式很弱(CCS ' 13)；经过足够的训练，大部分是可以轻易猜出来的。一个显而易见的解决方案是增加网格大小，以增加所选模式的复杂性。在本文中，我们提出了这样一个问题:增加网格大小会增加人类生成的模式的安全性吗？我们进行了两项大型研究来回答这个问题，我们的分析表明，对于3x3和4x4模式，重复模式和对称对(基于翻转和旋转序列从其他模式派生的模式)的发生率很高，许多4x4模式是3x3模式的扩展版本。利用这些信息，我们开发了一种高级猜测算法，并使用部分猜测熵来量化模式的强度。我们发现猜测3x3和4x4模式的前20% (G0.2)与猜测一个随机的2位数PIN一样有效。虽然猜测4x4模式(G0.5)的较大部分比猜测相同比例的3x3模式需要多2位熵，但它仍与破解随机3位数pin的顺序相同。在测试的模式中，我们的猜测算法在20次猜测中成功破解了15%的3×3模式(典型的电话锁定)，在20次猜测中成功破解了19%的4×4模式；然而，在50，000次猜测后，我们正确地猜测了95.9%的3×3图案，但只有66.7%的4×4图案。虽然将网格大小扩展到4x4可能有一些好处，但我们认为用户选择的大多数模式仍将是可随意猜测的，并且在抵御广泛猜测攻击时是不安全的。",
        "title_zh": "更大吗？ 比较3x3与4x4网格大小的用户生成的密码的Android模式解锁",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2015.html",
        "conf_title": "31. ACSAC 2015: Los Angeles, CA, USA",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2818000",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2818000.2818033",
        "title": "Towards Analyzing the Input Validation Vulnerabilities associated with Android System Services",
        "authors": "Chen Cao, Neng Gao, Peng Liu, Ji Xiang",
        "abstract": "Although the input validation vulnerabilities play a critical role in web application security, such vulnerabilities are so far largely neglected in the Android security research community. We found that due to the unique Framework Code layer, Android devices do need specific input validation vulnerability analysis in system services. In this work, we take the first steps to analyze Android specific input validation vulnerabilities. In particular, a) we take the first steps towards measuring the corresponding attack surface and reporting the current input validation status of Android system services. b) We developed a new input validation vulnerability scanner for Android devices. This tool fuzzes all the Android system services by sending requests with malformed arguments to them. Through comprehensive evaluation of Android system with over 90 system services and over 1,900 system service methods, we identified 16 vulnerabilities in Android system services. We have reported all the issues to Google and Google has confirmed them.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "尽管输入验证漏洞在web应用程序安全中起着至关重要的作用，但到目前为止，这种漏洞在Android安全研究社区中基本上被忽略了。我们发现，由于独特的框架代码层，Android设备确实需要在系统服务中进行特定的输入验证漏洞分析。在这项工作中，我们首先分析Android特定的输入验证漏洞。具体来说，a)我们首先测量相应的攻击面，并报告Android系统服务的当前输入验证状态。b)我们为Android设备开发了一个新的输入验证漏洞扫描器。该工具通过向所有Android系统服务发送带有错误参数的请求来模糊这些服务。通过对包含90多个系统服务和1900多个系统服务方法的Android系统进行综合评估，我们确定了Android系统服务中的16个漏洞。我们已经向谷歌报告了所有问题，谷歌已经确认了这些问题。",
        "title_zh": "分析与Android系统服务相关的输入验证漏洞",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2015.html",
        "conf_title": "31. ACSAC 2015: Los Angeles, CA, USA",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2818000",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2818000.2818037",
        "title": "MorphDroid: Fine-grained Privacy Verification",
        "authors": "Pietro Ferrara, Omer Tripp, Marco Pistoia",
        "abstract": "Mobile devices are rich in sensors, such as a Global Positioning System (GPS) tracker, microphone and camera, and have access to numerous sources of personal information, including the device ID, contacts and social data. This richness increases the functionality of mobile apps, but also creates privacy threats. As a result, different solutions have been proposed to verify or enforce privacy policies. A key limitation of existing approaches is that they reason about privacy at a coarse level, without accounting for declassification rules, such that the location for instance is treated as a single unit of information without reference to its many fields. As a result, legitimate app behaviors --- such as releasing the user's city rather than exact address --- are perceived as privacy violations, rendering existing analyses overly conservative and thus of limited usability. In this paper, we present MorphDroid, a novel static analysis algorithm that verifies mobile applications against fine-grained privacy policies. Such policies define constraints over combinations of fine-grained units of private data. Specifically, through a novel design, MorphDroid tracks flows of fine-grained privacy units while addressing important challenges, including (i) detection of correlations between different units (e.g. longitude and latitude) and (ii) modeling of semantic transformations over private data (e.g. conversion of the location into an address). We have implemented MorphDroid, and present a thorough experimental evaluation atop a comprehensive benchmark suite for Android static and dynamic analyses (DroidBench), as well as the 500 top-popular Google Play applications in 2014. Our experiments involve a spectrum of 5 security policies, ranging from a strict coarse-grained policy to a more realistic fine-grained policy that accounts for declassification rules. The experiment on DroidBench shows that MorphDroid achieves precision and recall scores of over 90%. The experiments on popular apps show that the gap between policies is dramatic, the most conservative policy yielding warnings on 171 of the applications (34%), and the more realistic policy flagging only 4 of the applications as misbehaved (< 1%). In addition, MorphDroid exhibits good performance with an average analysis time of < 20 seconds, where on average apps consist of 1.4M lines of code.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "移动设备有丰富的传感器，如全球定位系统(GPS)跟踪器、麦克风和摄像头，并且可以访问大量的个人信息来源，包括设备ID、联系人和社交数据。这种丰富性增加了移动应用的功能，但也带来了隐私威胁。因此，已经提出了不同的解决方案来验证或实施隐私策略。现有方法的一个关键限制是，它们在粗略的水平上对隐私进行推理，而不考虑解密规则，使得例如位置被视为单个信息单元，而不参考它的许多字段。因此，合法的应用程序行为——如发布用户的城市而不是确切地址——被视为侵犯隐私，导致现有分析过于保守，从而限制了可用性。在本文中，我们提出了一种新的静态分析算法MorphDroid，它可以根据细粒度的隐私策略来验证移动应用程序。这种策略定义了对私有数据的细粒度单元组合的约束。具体来说，通过一种新颖的设计，MorphDroid可以跟踪细粒度隐私单元的流动，同时解决重要的挑战，包括(I)检测不同单元之间的相关性(例如经度和纬度)和(ii)对隐私数据的语义转换进行建模(例如将位置转换为地址)。我们已经实现了MorphDroid，并在Android静态和动态分析综合基准套件(DroidBench)以及2014年500款最受欢迎的Google Play应用上进行了全面的实验评估。我们的实验涉及一系列5种安全策略，从严格的粗粒度策略到更现实的细粒度策略(考虑解密规则)。在DroidBench上的实验表明，MorphDroid取得了90%以上的准确率和召回率。对流行应用程序的实验表明，策略之间的差距是巨大的，最保守的策略对171个应用程序(34%)产生警告，而更现实的策略仅将4个应用程序标记为行为不端(< 1%)。此外，MorphDroid表现出良好的性能，平均分析时间不到20秒，平均应用程序由140万行代码组成。",
        "title_zh": "形态学：细粒度的隐私验证",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2015.html",
        "conf_title": "31. ACSAC 2015: Los Angeles, CA, USA",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2818000",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2818000.2818046",
        "title": "MobiPluto: File System Friendly Deniable Storage for Mobile Devices",
        "authors": "Bing Chang, Zhan Wang, Bo Chen, Fengwei Zhang",
        "abstract": "Mobile devices are prevalently used for processing personal private data and sometimes collecting evidence of social injustice or political oppression. The device owners may always feel reluctant to expose this type of data to undesired observers or inspectors. This usually can be achieved by encryption. However, the traditional encryption may not work when an adversary is able to coerce device owners into revealing their encrypted content. Plausibly Deniable Encryption (PDE) is thus designed to protect sensitive data against this type of powerful adversaries. In this paper, we present MobiPluto, a file system friendly PDE scheme for denying the existence of sensitive data stored on mobile devices. MobiPluto achieves deniability feature as nothing but a \"side-effect\" of combining thin provisioning, a well-established tool in Linux kernel, with encryption. This feature makes MobiPluto more plausible for users to have such software on their mobile devices. A salient difference between MobiPluto and the existing PDE schemes is that MobiPluto is \"file system friendly\", i.e., any block-based file systems can be deployed on top of it. Thus, it is possible to deploy MobiPluto on most mobile devices. We provide a proof-of-concept implementation for MobiPluto in an Android phone to assess its feasibility and performance.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "移动设备普遍用于处理个人隐私数据，有时还用于收集社会不公或政治压迫的证据。设备所有者可能总是不愿意将这种类型的数据暴露给不受欢迎的观察者或检查员。这通常可以通过加密来实现。然而，当对手能够强迫设备所有者透露他们的加密内容时，传统的加密可能不起作用。因此，似是而非的可否认加密(PDE)旨在保护敏感数据免受这类强大对手的攻击。在本文中，我们提出了MobiPluto，一个文件系统友好的PDE方案，用于否认存储在移动设备上的敏感数据的存在。MobiPluto实现可否认性特性不过是将精简配置(Linux内核中一个成熟的工具)与加密相结合的“副作用”。这个特性使得MobiPluto更有可能让用户在他们的移动设备上安装这样的软件。mobi luto和现有PDE方案之间的一个显著区别是mobi luto是“文件系统友好的”，即任何基于块的文件系统都可以部署在它上面。因此，在大多数移动设备上部署MobiPluto是可能的。我们提供了一个在Android手机中实现MobiPluto的概念验证，以评估其可行性和性能。",
        "title_zh": "Mobipluto：文件系统友好的移动设备存储",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2015.html",
        "conf_title": "31. ACSAC 2015: Los Angeles, CA, USA",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2818000",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2818000.2818041",
        "title": "SeSQLite: Security Enhanced SQLite: Mandatory Access Control for Android databases",
        "authors": "Simone Mutti, Enrico Bacis, Stefano Paraboschi",
        "abstract": "SQLite is the most widely deployed in-process library that implements a SQL database engine. It offers high storage efficiency, fast query operation and small memory needs. Due to the fact that a complete SQLite database is stored in a single cross-platform disk file and SQLite does not support multiple users, anyone who has direct access to the file can read the whole database content. SELinux was originally developed as a Mandatory Access Control (MAC) mechanism for Linux to demonstrate how to overcome DAC limitations. However, SELinux provides per-file protection, thus the database file is treated as an atomic unit, impeding the definition of a fine-grained mandatory access control (MAC) policy for database objects. We introduce SeSQLite, an SQLite extension that integrates SELinux access controls into SQLite with minimal performance and storage overhead. SeSQLite implements labeling and access control at both schema level (for tables and columns) and row level. This permits the management of a fine-grained access policy for database objects. A prototype has been implemented and it has been used to improve the security of Android Content Providers.",
        "files": {
            "openAccessPdf": "https://aisberg.unibg.it/bitstream/10446/57990/1/SeSQLite.pdf"
        },
        "abstract_zh": "SQLite是部署最广泛的进程内库，它实现了SQL数据库引擎。它提供了高存储效率、快速查询操作和较小的内存需求。由于完整的SQLite数据库存储在单个跨平台磁盘文件中，并且SQLite不支持多用户，因此任何直接访问该文件的人都可以读取整个数据库内容。SELinux最初是作为Linux的强制访问控制(MAC)机制开发的，用于演示如何克服DAC的限制。但是，SELinux提供了基于文件的保护，因此数据库文件被视为一个原子单元，这妨碍了为数据库对象定义细粒度的强制访问控制(MAC)策略。我们引入了SeSQLite，这是一个SQLite扩展，它以最小的性能和存储开销将SELinux访问控制集成到SQLite中。SeSQLite在模式级(对于表和列)和行级实现了标记和访问控制。这允许对数据库对象的细粒度访问策略进行管理。已经实现了一个原型，并用于提高Android内容提供商的安全性。",
        "title_zh": "Sesqlite：安全增强SQLITE：Android数据库的强制性访问控制",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2015.html",
        "conf_title": "31. ACSAC 2015: Los Angeles, CA, USA",
        "conf_url": "http://dl.acm.org/citation.cfm?id=2818000",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2843859.2843860",
        "title": "OpSeq: Android Malware Fingerprinting",
        "authors": "Aisha I. Ali-Gombe, Irfan Ahmed, Golden G. Richard III, Vassil Roussev",
        "abstract": "Android malware are often created by injecting malicious payloads into benign applications. They employ code and string obfuscation techniques to hide their presence from antivirus scanners. Recent studies have shown that common antivirus software and static analysis tools are not resilient to such obfuscation techniques. To address this problem, we develop a robust fingerprinting approach that can deal with complex obfuscation with a high degree of accuracy. Our approach, called OpSeq, scores similarity as a function of normalized opcode sequences found in sensitive functional modules as well as app permission requests. This combination of structural and behavioral features results in a distinctive fingerprint for a malware sample, thereby improving our model's overall recall rate. We tested our prototype on 1,192 known malware samples belonging to 25 different families, 359 benign apps, and 207 new obfuscated malware variants. The empirical results show that OpSeq can correctly detect known malware with an F-Score of 98%.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android恶意软件通常是通过将恶意负载注入良性应用程序来创建的。他们采用代码和字符串混淆技术来隐藏自己的存在，从反病毒扫描。最近的研究表明，常见的反病毒软件和静态分析工具无法抵御这种混淆技术。为了解决这个问题，我们开发了一种鲁棒的指纹识别方法，它可以以很高的准确度处理复杂的混淆。我们的方法称为OpSeq，根据敏感功能模块和应用程序权限请求中的规范化操作码序列对相似性进行评分。这种结构和行为特征的结合产生了恶意软件样本的独特指纹，从而提高了我们模型的整体召回率。我们在属于25个不同家族的1，192个已知恶意软件样本、359个良性应用程序和207个新的混淆恶意软件变体上测试了我们的原型。实验结果表明，OpSeq可以正确检测已知恶意软件，F值为98%。",
        "title_zh": "OPSEQ：Android恶意软件指纹印刷",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/pprew2015.html",
        "conf_title": "5. PPREW@ACSAC 2015: Los Angeles, CA, USA",
        "conf_url": "https://doi.org/10.1145/2843859",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/2843859.2843866",
        "title": "Enriching reverse engineering through visual exploration of Android binaries",
        "authors": "Ashutosh Jain, Hugo Gonzalez, Natalia Stakhanova",
        "abstract": "The appearance of the Android platform and its popularity has resulted in a sharp rise in the number of reported vulnerabilities and consequently in the number of mobile threats. Leveraging openness of Android app markets and the lack of security testing, malware authors commonly employ a suite of widely available tools to facilitate the app development. Analysis of individual apps for malware detection often requires understanding of app functionality and complex, time-consuming analysis of its behavior. Since tools tend to leave traces in the program structure, we can potentially use visual exploration of these artifacts to enrich reverse engineering of malware analysis. In this paper, we focus on this approach and investigate internal structure of Android executable files and their characteristics under various tools and development conditions. We show that the majority of obfuscation and optimization tools leave distinct artifacts that can be leveraged in Android binary analysis to trace origin of a malware sample on hand.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android平台的出现及其流行导致报告的漏洞数量急剧上升，从而导致移动威胁的数量增加。利用Android应用市场的开放性和缺乏安全测试，恶意软件作者通常采用一套广泛可用的工具来促进应用开发。对单个应用程序进行恶意软件检测分析通常需要了解应用程序的功能，并对其行为进行复杂、耗时的分析。由于工具往往会在程序结构中留下痕迹，我们可以潜在地使用这些工件的视觉探索来丰富恶意软件分析的逆向工程。在本文中，我们将重点放在这种方法上，研究Android可执行文件的内部结构及其在各种工具和开发条件下的特征。我们表明，大多数混淆和优化工具都会留下不同的工件，可以在Android二进制分析中利用这些工件来追踪现有恶意软件样本的来源。",
        "title_zh": "通过视觉探索Android二进制",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/pprew2015.html",
        "conf_title": "5. PPREW@ACSAC 2015: Los Angeles, CA, USA",
        "conf_url": "https://doi.org/10.1145/2843859",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3274694.3274731",
        "title": "Using Loops For Malware Classification Resilient to Feature-unaware Perturbations",
        "authors": "Aravind Machiry, Nilo Redini, Eric Gustafson, Yanick Fratantonio, Yung Ryn Choe, Christopher Kruegel, Giovanni Vigna",
        "abstract": "In the past few years, both the industry and the academic communities have developed several approaches to detect malicious Android apps. State-of-the-art research approaches achieve very high accuracy when performing malware detection on existing datasets. These approaches perform their malware classification tasks in an \"offline\" scenario, where malware authors cannot learn from and adapt their malicious apps to these systems. In real-world deployments, however, adversaries get feedback about whether their app was detected, and can react accordingly by transforming their code until they are able to influence the classification. In this work, we propose a new approach for detecting Android malware that is designed to be resilient to feature-unaware perturbations without retraining. Our work builds on two key ideas. First, we consider only a subset of the codebase of a given app, both for precision and performance aspects. For this paper, our implementation focuses exclusively on the loops contained in a given app. We hypothesize, and empirically verify, that the code contained in apps' loops is enough to precisely detect malware. This provides the additional benefits of being less prone to noise and errors, and being more performant. The second idea is to build a feature space by extracting a set of labels for each loop, and by then considering each unique combination of these labels as a different feature: The combinatorial nature of this feature space makes it prohibitively difficult for an attacker to influence our feature vector and avoid detection, without access to the specific model used for classification. We assembled these techniques into a prototype, called LoopMC, which can locate loops in applications, extract features, and perform classification, without requiring source code. We used LoopMC to classify about 20,000 benign and malicious applications. While focusing on a smaller portion of the program may seem counterintuitive, the results of these experiments are surprising: our system achieves a classification accuracy of 99.3% and 99.1% for the Malware Genome Project and VirusShare datasets respectively, which outperforms previous approaches. We also evaluated LoopMC, along with the related work, in the context of various evasion techniques, and show that our system is more resilient to evasion.",
        "files": {
            "openAccessPdf": "https://dl.acm.org/doi/pdf/10.1145/3274694.3274731"
        },
        "abstract_zh": "在过去的几年里，行业和学术界都开发了几种方法来检测恶意的Android应用程序。当在现有数据集上执行恶意软件检测时，最先进的研究方法实现了非常高的准确性。这些方法在“离线”场景中执行其恶意软件分类任务，恶意软件作者无法从这些系统中学习并调整其恶意应用程序。然而，在现实世界的部署中，对手会获得关于他们的应用程序是否被检测到的反馈，并可以通过转换他们的代码做出相应的反应，直到他们能够影响分类。在这项工作中，我们提出了一种新的检测Android恶意软件的方法，该方法无需重新训练就可以对功能未知的干扰具有弹性。我们的工作基于两个关键理念。首先，我们只考虑给定应用程序代码库的子集，包括精度和性能方面。对于本文，我们的实现只关注给定应用程序中包含的循环。我们假设并通过经验验证，应用程序循环中包含的代码足以精确检测恶意软件。这提供了额外的好处，即不容易出现噪音和错误，并且性能更高。第二个想法是通过为每个循环提取一组标签来构建特征空间，然后将这些标签的每个唯一组合视为不同的特征:该特征空间的组合性质使得攻击者难以影响我们的特征向量并避免检测，而不访问用于分类的特定模型。我们将这些技术组装成一个原型，称为LoopMC，它可以定位应用程序中的循环，提取特征，并执行分类，而不需要源代码。我们使用LoopMC对大约20，000个良性和恶意应用程序进行了分类。虽然专注于程序的一小部分可能看起来违反直觉，但这些实验的结果令人惊讶:我们的系统对恶意软件基因组计划和病毒共享数据集分别实现了99.3%和99.1%的分类准确率，这优于以前的方法。我们还在各种规避技术的背景下评估了LoopMC以及相关工作，并表明我们的系统对规避更具弹性。",
        "title_zh": "使用循环进行恶意软件分类的弹性弹性",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2018.html",
        "conf_title": "ACSAC 2018: San Juan, PR, USA",
        "conf_url": "https://doi.org/10.1145/3274694",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3274694.3274707",
        "title": "StateDroid: Stateful Detection of Stealthy Attacks in Android Apps via Horn-Clause Verification",
        "authors": "Mohsin Junaid, Jiang Ming, David Chenho Kung",
        "abstract": "Profit-driven cyber-criminals are motivated to prolong Android malware's lifetime by hiding malicious behaviors from raising suspicion. Stealthy malware has become an emerging challenge to Android security as it can remain undetected for quite a long time. However, traditional defense techniques are insufficient in face of this new threat. Our in-depth study on published malware analysis reports and corresponding code analysis leads to three key observations: 1) a stealthy attack goes through multiple states; 2) state transitions are caused by a sequence of attack actions; 3) an attack action typically involves several Android APIs on different objects. These insights motivate us to design a two-layer finite state machine (FSM) model, named StateDroid, to depict multi-step stealthy attacks in terms of state transitions. Our goal is to reason about various stealthy attacks from an Android app in one pass. However, the heterogeneous characteristics of attack actions make automatic construction of accurate detection model a challenging work. To overcome this obstacle, StateDroid abstracts the semantics of Android APIs and attacks as Horn clauses, and then it automatically constructs the two-layer FSM model via Horn-clause verification. We have developed an open-source prototype of StateDroid and evaluated it extensively with ground truth dataset, 1, 505 Google Play apps, and 1, 369 malicious apps, respectively. The encouraging experimental results demonstrate the efficacy of StateDroid. Our study shows stealthy attacks have been quite common among new-generation malware such as notorious ransomware, and we even identify 7.5% of recent Google Play apps exhibit unexpected stealthy behaviors.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "受利润驱动的网络犯罪分子通过隐藏恶意行为来延长Android恶意软件的生命周期，以免引起怀疑。隐形恶意软件已经成为Android安全的一个新挑战，因为它可以在相当长的时间内保持不被检测到。然而，面对这种新的威胁，传统的防御技术是不够的。我们对已发布的恶意软件分析报告和相应的代码分析的深入研究导致了三个关键的观察结果:1)一个秘密攻击经历多个状态；2)状态转换是由一系列攻击动作引起的；3)攻击行为通常涉及不同对象上的几个Android APIs。这些见解促使我们设计了一个两层有限状态机(FSM)模型，命名为StateDroid，以状态转换来描述多步隐形攻击。我们的目标是一次性推理出来自Android应用程序的各种秘密攻击。然而，攻击行为的异构特性使得自动构建准确的检测模型成为一项具有挑战性的工作。为了克服这一障碍，StateDroid将Android APIs和攻击的语义抽象为Horn子句，然后通过Horn子句验证自动构建两层FSM模型。我们已经开发了一个StateDroid的开源原型，并分别使用ground truth数据集、1505个Google Play应用和1369个恶意应用对其进行了广泛的评估。令人鼓舞的实验结果证明了StateDroid的有效性。我们的研究表明，隐蔽攻击在新一代恶意软件(如臭名昭著的勒索软件)中非常常见，我们甚至发现最近7.5%的Google Play应用程序表现出意想不到的隐蔽行为。",
        "title_zh": "陈述：通过喇叭条件验证对Android应用中隐身攻击的状态检测",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2018.html",
        "conf_title": "ACSAC 2018: San Juan, PR, USA",
        "conf_url": "https://doi.org/10.1145/3274694",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3274694.3274744",
        "title": "Improving Accuracy of Android Malware Detection with Lightweight Contextual Awareness",
        "authors": "Joey Allen, Matthew Landen, Sanya Chaba, Yang Ji, Simon Pak Ho Chung, Wenke Lee",
        "abstract": "In Android malware detection, recent work has shown that using contextual information of sensitive API invocation in the modeling of applications is able to improve the classification accuracy. However, the improvement brought by this context-awareness varies depending on how this information is used in the modeling. In this paper, we perform a comprehensive study on the effectiveness of using the contextual information in prior state-of-the-art detection systems. We find that this information has been \"over-used\" such that a large amount of non-essential metadata built into the models weakens the generalizability and longevity of the model, thus finally affects the detection accuracy. On the other hand, we find that the entrypoint of API invocation has the strongest impact on the classification correctness, which can further improve the accuracy if being properly captured. Based on this finding, we design and implement a lightweight, circumstance-aware detection system, named \"PIKADROID\" that only uses the API invocation and its entrypoint in the modeling. For extracting the meaningful entrypoints, PIKADROID applies a set of static analysis techniques to extract and sanitize the reachable entrypoints of a sensitive API, then constructs a frequency model for classification decision. In the evaluation, we show that this slim model significantly improves the detection accuracy on a data set of 23,631 applications by achieving an f-score of 97.41%, while maintaining a false positive rating of 0.96%.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "在Android恶意软件检测中，最近的工作表明，在应用程序建模中使用敏感API调用的上下文信息能够提高分类精度。然而，这种上下文感知所带来的改进取决于如何在建模中使用该信息。在本文中，我们对在现有技术水平的检测系统中使用上下文信息的有效性进行了全面的研究。我们发现这些信息被“过度使用”,以至于模型中内置的大量非必要元数据削弱了模型的可推广性和寿命，从而最终影响了检测精度。另一方面，我们发现API调用的入口点对分类正确性的影响最大，如果被正确捕获，可以进一步提高分类的准确性。基于这一发现，我们设计并实现了一个轻量级的环境感知检测系统，命名为“PIKADROID ”,该系统在建模中只使用API调用及其入口点。为了提取有意义的入口点，PIKADROID应用一组静态分析技术来提取和净化敏感API的可达入口点，然后构建一个用于分类决策的频率模型。在评估中，我们表明，这种瘦模型通过实现97.41%的f值，显著提高了23，631个应用程序数据集上的检测准确性，同时保持了0.96%的误报率。",
        "title_zh": "通过轻巧的上下文意识提高Android恶意软件检测的准确性",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2018.html",
        "conf_title": "ACSAC 2018: San Juan, PR, USA",
        "conf_url": "https://doi.org/10.1145/3274694",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3274694.3274726",
        "title": "A Large Scale Investigation of Obfuscation Use in Google Play",
        "authors": "Dominik Wermke, Nicolas Huaman, Yasemin Acar, Bradley Reaves, Patrick Traynor, Sascha Fahl",
        "abstract": "Android applications are frequently plagiarized or repackaged, and software obfuscation is a recommended protection against these practices. However, there is very little data on the overall rates of app obfuscation, the techniques used, or factors that lead to developers to choose to obfuscate their apps. In this paper, we present the first comprehensive analysis of the use of and challenges to software obfuscation in Android applications. We analyzed 1.7 million free Android apps from Google Play to detect various obfuscation techniques, finding that only 24.92% of apps are obfuscated by the developer. To better understand this rate of obfuscation, we surveyed 308 Google Play developers about their experiences and attitudes about obfuscation. We found that while developers feel that apps in general are at risk of plagiarism, they do not fear theft of their own apps. Developers also report difficulties obfuscating their own apps. To better understand, we conducted a follow-up study where the vast majority of 70 participants failed to obfuscate a realistic sample app even while many mistakenly believed they had been successful. These findings have broad implications both for improving the security of Android apps and for all tools that aim to help developers write more secure software.",
        "files": {
            "openAccessPdf": "http://arxiv.org/pdf/1801.02742"
        },
        "abstract_zh": "Android应用程序经常被抄袭或重新打包，软件混淆是针对这些做法的推荐保护措施。然而，关于应用混淆的总体比率、使用的技术或导致开发者选择混淆他们的应用的因素的数据非常少。在本文中，我们首次全面分析了Android应用中软件混淆的使用和挑战。我们分析了Google Play的170万个免费Android应用程序，以检测各种混淆技术，发现只有24.92%的应用程序被开发者混淆。为了更好地理解这种混淆率，我们调查了308名Google Play开发者，了解他们对混淆的体验和态度。我们发现，虽然开发者觉得应用程序总体上有被剽窃的风险，但他们并不担心自己的应用程序被盗。开发者也报告了混淆他们自己的应用程序的困难。为了更好地理解，我们进行了一项后续研究，70名参与者中的绝大多数都没有混淆一个真实的样本应用程序，尽管许多人错误地认为他们已经成功了。这些发现对提高Android应用程序的安全性和所有旨在帮助开发者编写更安全软件的工具都有广泛的意义。",
        "title_zh": "对Google Play中混淆使用的大规模调查",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2018.html",
        "conf_title": "ACSAC 2018: San Juan, PR, USA",
        "conf_url": "https://doi.org/10.1145/3274694",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3274694.3274702",
        "title": "Comparing Video Based Shoulder Surfing with Live Simulation",
        "authors": "Adam J. Aviv, Flynn Wolf, Ravi Kuber",
        "abstract": "We analyze the claims that video recreations of shoulder surfing attacks offer a suitable alternative and a baseline, as compared to evaluation in a live setting. We recreated a subset of the factors of a prior video-simulation experiment conducted by Aviv et al. (ACSAC 2017), and model the same scenario using live participants (n = 36) instead (i.e., the victim and attacker were both present). The live experiment confirmed that for Android's graphical patterns video simulation is consistent with the live setting for attacker success rates. However, both 4- and 6-digit PINs demonstrate statistically significant differences in attacker performance, with live attackers performing as much 1.9x better than in the video simulation. The security benefits gained from removing feedback lines in Android's graphical patterns are also greatly diminished in the live setting, particularly under multiple attacker observations, but overall, the data suggests that video recreations can provide a suitable baseline measure for attacker success rate. However, we caution that researchers should consider that these baselines may greatly underestimate the threat of an attacker in live settings.",
        "files": {
            "openAccessPdf": "https://mdsoar.org/bitstream/11603/19829/1/3274694.3274702.pdf"
        },
        "abstract_zh": "与现场评估相比，我们分析了肩部冲浪攻击的视频再现提供了一个合适的替代方案和基线。我们重新创建了Aviv等人(ACSAC 2017)之前进行的视频模拟实验的因素子集，并使用现场参与者(n = 36)模拟了相同的场景(即受害者和攻击者都在场)。现场实验证实，对于Android的图形模式，视频模拟与攻击者成功率的现场设置是一致的。然而，4位和6位pin在攻击者性能方面表现出统计上的显著差异，真实攻击者的性能比视频模拟中高1.9倍。从移除Android图形模式中的反馈线获得的安全好处在现场设置中也大大减少，特别是在多个攻击者观察的情况下，但总的来说，数据表明视频再现可以为攻击者成功率提供合适的基线测量。然而，我们警告说，研究人员应该考虑到这些基线可能会大大低估攻击者在真实环境中的威胁。",
        "title_zh": "将基于视频的肩膀冲浪与实时模拟进行比较",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2018.html",
        "conf_title": "ACSAC 2018: San Juan, PR, USA",
        "conf_url": "https://doi.org/10.1145/3274694",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3274694.3274709",
        "title": "An Historical Analysis of the SEAndroid Policy Evolution",
        "authors": "Bumjin Im, Ang Chen, Dan S. Wallach",
        "abstract": "Android adopted SELinux's mandatory access control (MAC) mechanisms in 2013. Since then, billions of Android devices have benefited from mandatory access control security policies. These policies are expressed in a variety of rules, maintained by Google and extended by Android OEMs. Over the years, the rules have grown to be quite complex, making it challenging to properly understand or configure these policies. In this paper, we perform a measurement study on the SEAndroid repository to understand the evolution of these policies. We propose a new metric to measure the complexity of the policy by expanding policy rules, with their abstraction features such as macros and groups, into primitive \"boxes\", which we then use to show that the complexity of the SEAndroid policies has been growing exponentially over time. By analyzing the Git commits, snapshot by snapshot, we are also able to analyze the \"age\" of policy rules, the trend of changes, and the contributor composition. We also look at hallmark events in Android's history, such as the \"Stagefright\" vulnerability in Android's media facilities, pointing out how these events led to changes in the MAC policies. The growing complexity of Android's mandatory policies suggests that we will eventually hit the limits of our ability to understand these policies, requiring new tools and techniques.",
        "files": {
            "openAccessPdf": "http://arxiv.org/pdf/1812.00920"
        },
        "abstract_zh": "Android在2013年采用了SELinux的强制访问控制(MAC)机制。自那以后，数十亿Android设备受益于强制访问控制安全政策。这些政策表现在各种各样的规则中，由Google维护，由Android OEMs扩展。多年来，这些规则已经变得相当复杂，使得正确理解或配置这些策略变得非常困难。在本文中，我们对SEAndroid存储库进行了度量研究，以了解这些策略的演变。我们提出了一种新的度量标准，通过将策略规则及其抽象特征(如宏和组)扩展到原始的“盒子”中来测量策略的复杂性，然后我们使用这些盒子来显示SEAndroid策略的复杂性随着时间的推移呈指数增长。通过逐个快照地分析Git提交，我们还能够分析策略规则的“年龄”、变化趋势和贡献者构成。我们还关注Android历史上的标志性事件，如Android媒体设施中的“Stagefright”漏洞，指出这些事件如何导致MAC政策的变化。Android强制政策的日益复杂性表明，我们最终将触及理解这些政策的能力极限，这需要新的工具和技术。",
        "title_zh": "对塞安德治疗政策进化的历史分析",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2018.html",
        "conf_title": "ACSAC 2018: San Juan, PR, USA",
        "conf_url": "https://doi.org/10.1145/3274694",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3274694.3274713",
        "title": "IAC: On the Feasibility of Utilizing Neural Signals for Access Control",
        "authors": "Md. Lutfor Rahman, Ajaya Neupane, Chengyu Song",
        "abstract": "Access control is the core security mechanism of an operating system (OS). Ideally, the access control system should enforce context integrity, i.e., an application can only access security and privacy sensitive resources expected by users. Unfortunately, existing access control systems, including the permission systems in modern OS like iOS and Android, all fail to enforce context integrity thus allow apps to abuse their permissions. A naive approach to enforce context integrity is to prompt users every time a sensitive resource is accessed, but this will quickly lead to habituation. The state-of-art solutions include (1) user-driven access control, which binds a predefined context to protected GUI elements and (2) predicting users' authorization decision based on their previous behaviors and privacy preferences. However, previous studies have shown that the first approach is vulnerable to attacks (e.g., clickjacking) and the second approach i challenging to implement as it is difficult to infer the context. In this work, we explore the feasibility of a novel approach to enforce the context integrity---by inferring what task users want to do under the given context from their neural signals; then automatically authorizes access to a predefined set of sensitive resources that are necessary for that task. We conducted a comprehensive user study including 41 participants where we collected their neural signals when they were performing tasks that required access to sensitive resources. After preprocessing and features extraction, we trained machine learning classifier to infer what kind of tasks a user wants to perform. The experiment results show that the classifier was able to infer the high-level intents like take a photo with a weighted average precision of 88%.",
        "files": {
            "openAccessPdf": "https://dl.acm.org/doi/pdf/10.1145/3274694.3274713?download=true"
        },
        "abstract_zh": "访问控制是操作系统的核心安全机制。理想情况下，访问控制系统应该实施上下文完整性，即应用程序只能访问用户期望的安全和隐私敏感资源。不幸的是，现有的访问控制系统，包括iOS和Android等现代操作系统中的权限系统，都无法实施上下文完整性，从而允许应用程序滥用其权限。一种加强上下文完整性的天真方法是在每次访问敏感资源时提示用户，但这将很快导致习惯化。最先进的解决方案包括(1)用户驱动的访问控制，它将预定义的上下文绑定到受保护的GUI元素，以及(2)根据用户以前的行为和隐私偏好预测用户的授权决策。然而，以前的研究表明，第一种方法容易受到攻击(例如，点击劫持)，第二种方法很难实现，因为很难推断上下文。在这项工作中，我们探索了一种新方法的可行性，通过从神经信号推断用户在给定的环境下想要做什么；然后自动授权访问该任务所需的一组预定义的敏感资源。我们进行了一项全面的用户研究，包括41名参与者，在他们执行需要访问敏感资源的任务时，我们收集了他们的神经信号。在预处理和特征提取之后，我们训练机器学习分类器来推断用户想要执行什么样的任务。实验结果表明，该分类器能够以88%的加权平均精度推断出拍照等高层意图。",
        "title_zh": "IAC：利用神经信号进行访问控制的可行性",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acsac/acsac2018.html",
        "conf_title": "ACSAC 2018: San Juan, PR, USA",
        "conf_url": "https://doi.org/10.1145/3274694",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1186/s13635-019-0087-1",
        "title": "Machine learning-based dynamic analysis of Android apps with improved code coverage",
        "authors": "Suleiman Y. Yerima, Mohammed K. Alzaylaee, Sakir Sezer",
        "abstract": "",
        "files": {
            "openAccessPdf": "https://jis-eurasipjournals.springeropen.com/track/pdf/10.1186/s13635-019-0087-1"
        },
        "abstract_zh": "",
        "title_zh": "基于机器学习的Android应用动态分析，具有改进的代码覆盖率",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/ejisec/ejisec2019.html",
        "conf_title": "EURASIP Journal on Information Security, Volume 2019",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1186/s13635-017-0061-8",
        "title": "Sensor Guardian: prevent privacy inference on Android sensors",
        "authors": "Xiaolong Bai, Jie Yin, Yu-Ping Wang",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "传感器卫士:防止安卓传感器上的隐私推断",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/ejisec/ejisec2017.html",
        "conf_title": "EURASIP Journal on Information Security, Volume 2017",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1186/s13635-017-0065-4",
        "title": "A new approach for managing Android permissions: learning users' preferences",
        "authors": "Arnaud Oglaza, Romain Laborde, Pascale Zaraté, Abdelmalek Benzekri, François Barrère",
        "abstract": "",
        "files": {
            "openAccessPdf": "https://jis-eurasipjournals.springeropen.com/track/pdf/10.1186/s13635-017-0065-4"
        },
        "abstract_zh": "",
        "title_zh": "管理Android权限的新方法:学习用户偏好",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/ejisec/ejisec2017.html",
        "conf_title": "EURASIP Journal on Information Security, Volume 2017",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-99277-8_16",
        "title": "Forensic Analysis of Android Steganography Apps",
        "authors": "Wenhao Chen, Yangxiao Wang, Yong Guan, Jennifer Newman, Li Lin, Stephanie Reinders",
        "abstract": "",
        "files": {
            "openAccessPdf": "https://hal.inria.fr/hal-01988836/file/472401_1_En_16_Chapter.pdf"
        },
        "abstract_zh": "",
        "title_zh": "Android隐写应用的取证分析",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ifip11-9/df2018.html",
        "conf_title": "Digital Forensics 2018: New Delhi, India",
        "conf_url": "https://doi.org/10.1007/978-3-319-99277-8",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-46279-0_19",
        "title": "A Tool for Volatile Memory Acquisition from Android Devices",
        "authors": "Haiyu Yang, Jianwei Zhuge, Huiming Liu, Wei Liu",
        "abstract": "",
        "files": {
            "openAccessPdf": "https://hal.inria.fr/hal-01758679/file/431606_1_En_19_Chapter.pdf"
        },
        "abstract_zh": "",
        "title_zh": "从Android设备获取易失性内存的工具",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ifip11-9/df2016.html",
        "conf_title": "Digital Forensics 2016: New Delhi, India",
        "conf_url": "https://doi.org/10.1007/978-3-319-46279-0",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-030-58201-2_12",
        "title": "Code Between the Lines: Semantic Analysis of Android Applications",
        "authors": "Johannes Feichtner, Stefan Gruber",
        "abstract": "",
        "files": {
            "openAccessPdf": "https://hal.inria.fr/hal-03440841/file/497034_1_En_12_Chapter.pdf"
        },
        "abstract_zh": "",
        "title_zh": "字里行间的代码:Android应用程序的语义分析",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sec/sec2020.html",
        "conf_title": "SEC 2020: Maribor, Slovenia",
        "conf_url": "https://doi.org/10.1007/978-3-030-58201-2",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-031-06975-8_22",
        "title": "AndroClonium: Bytecode-Level Code Clone Detection for Obfuscated Android Apps",
        "authors": "Ardalan Foroughipour, Natalia Stakhanova, Farzaneh Abazari, Bahman Sistany",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "AndroClonium:针对模糊Android应用的字节码级代码克隆检测",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sec/sec2022.html",
        "conf_title": "SEC 2022: Copenhagen, Denmark",
        "conf_url": "https://doi.org/10.1007/978-3-031-06975-8",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-33630-5_23",
        "title": "NativeProtector: Protecting Android Applications by Isolating and Intercepting Third-Party Native Libraries",
        "authors": "Yu-Yang Hong, Yu-Ping Wang, Jie Yin",
        "abstract": "",
        "files": {
            "openAccessPdf": "https://hal.inria.fr/hal-01369567/file/421518_1_En_23_Chapter.pdf"
        },
        "abstract_zh": "",
        "title_zh": "NativeProtector:通过隔离和拦截第三方原生库来保护Android应用程序",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sec/sec2016.html",
        "conf_title": "SEC 2016: Ghent, Belgium",
        "conf_url": "https://doi.org/10.1007/978-3-319-33630-5",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-99828-2_20",
        "title": "Hunting Password Leaks in Android Applications",
        "authors": "Johannes Feichtner",
        "abstract": "",
        "files": {
            "openAccessPdf": "https://hal.inria.fr/hal-02023717/file/472722_1_En_20_Chapter.pdf"
        },
        "abstract_zh": "",
        "title_zh": "寻找Android应用程序中的密码泄露",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sec/sec2018.html",
        "conf_title": "SEC 2018: Poznan, Poland",
        "conf_url": "https://doi.org/10.1007/978-3-319-99828-2",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-99828-2_24",
        "title": "Detection and Response to Data Exfiltration from Internet of Things Android Devices",
        "authors": "Mariem Graa, Ivan Marco Lobe Kome, Nora Cuppens-Boulahia, Frédéric Cuppens, Vincent Frey",
        "abstract": "",
        "files": {
            "openAccessPdf": "https://hal.inria.fr/hal-02023715/file/472722_1_En_24_Chapter.pdf"
        },
        "abstract_zh": "",
        "title_zh": "物联网Android设备数据泄露的检测和响应",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sec/sec2018.html",
        "conf_title": "SEC 2018: Poznan, Poland",
        "conf_url": "https://doi.org/10.1007/978-3-319-99828-2",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-58469-0_14",
        "title": "Detection of Side Channel Attacks Based on Data Tainting in Android Systems",
        "authors": "Mariem Graa, Nora Cuppens-Boulahia, Frédéric Cuppens, Jean-Louis Lanet, Routa Moussaileb",
        "abstract": "",
        "files": {
            "openAccessPdf": "https://hal.inria.fr/hal-01648994/file/449885_1_En_14_Chapter.pdf"
        },
        "abstract_zh": "",
        "title_zh": "Android系统中基于数据污染的旁路攻击检测",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sec/sec2017.html",
        "conf_title": "SEC 2017: Rome, Italy",
        "conf_url": "https://doi.org/10.1007/978-3-319-58469-0",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-58469-0_36",
        "title": "RiskInDroid: Machine Learning-Based Risk Analysis on Android",
        "authors": "Alessio Merlo, Gabriel Claudiu Georgiu",
        "abstract": "",
        "files": {
            "openAccessPdf": "https://hal.inria.fr/hal-01648990/file/449885_1_En_36_Chapter.pdf"
        },
        "abstract_zh": "",
        "title_zh": "RiskInDroid:基于机器学习的Android风险分析",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sec/sec2017.html",
        "conf_title": "SEC 2017: Rome, Italy",
        "conf_url": "https://doi.org/10.1007/978-3-319-58469-0",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-18467-8_34",
        "title": "ApkCombiner: Combining Multiple Android Apps to Support Inter-App Analysis",
        "authors": "Li Li, Alexandre Bartel, Tegawendé F. Bissyandé, Jacques Klein, Yves Le Traon",
        "abstract": "",
        "files": {
            "openAccessPdf": "https://link.springer.com/content/pdf/10.1007/978-3-319-18467-8_34.pdf"
        },
        "abstract_zh": "",
        "title_zh": "ApkCombiner:组合多个Android应用程序以支持应用程序间分析",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sec/sec2015.html",
        "conf_title": "SEC 2015: Hamburg, Germany",
        "conf_url": "https://doi.org/10.1007/978-3-319-18467-8",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-18467-8_35",
        "title": "Assessment of the Susceptibility to Data Manipulation of Android Games with In-app Purchases",
        "authors": "Francisco Vigário, Miguel Neto, Diogo Fonseca, Mário M. Freire, Pedro R. M. Inácio",
        "abstract": "",
        "files": {
            "openAccessPdf": "https://link.springer.com/content/pdf/10.1007/978-3-319-18467-8_35.pdf"
        },
        "abstract_zh": "",
        "title_zh": "应用内购买的Android游戏易受数据操纵影响的评估",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sec/sec2015.html",
        "conf_title": "SEC 2015: Hamburg, Germany",
        "conf_url": "https://doi.org/10.1007/978-3-319-18467-8",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-18467-8_36",
        "title": "An Empirical Study on Android for Saving Non-shared Data on Public Storage",
        "authors": "Xiangyu Liu, Zhe Zhou, Wenrui Diao, Zhou Li, Kehuan Zhang",
        "abstract": "",
        "files": {
            "openAccessPdf": "http://arxiv.org/pdf/1407.5410"
        },
        "abstract_zh": "",
        "title_zh": "Android在公共存储上保存非共享数据的实证研究",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/sec/sec2015.html",
        "conf_title": "SEC 2015: Hamburg, Germany",
        "conf_url": "https://doi.org/10.1007/978-3-319-18467-8",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-59870-3_5",
        "title": "Splitting Third-Party Libraries' Privileges from Android Apps",
        "authors": "Jiawei Zhan, Quan Zhou, Xiaozhuo Gu, Yuewu Wang, Yingjiao Niu",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "将第三方图书馆的权限从Android应用中分离出来",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acisp/acisp2017-2.html",
        "conf_title": "22. ACISP 2017: Auckland, New Zealand",
        "conf_url": "https://doi.org/10.1007/978-3-319-59870-3",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-40367-0_32",
        "title": "A Feasible No-Root Approach on Android",
        "authors": "Yao Cheng, Yingjiu Li, Robert H. Deng",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "一种可行的Android无根方法",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acisp/acisp2016-2.html",
        "conf_title": "21. ACISP 2016: Melbourne, VIC, Australia",
        "conf_url": "https://doi.org/10.1007/978-3-319-40367-0",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-93638-3_48",
        "title": "ANTSdroid: Automatic Malware Family Behaviour Generation and Analysis for Android Apps",
        "authors": "Yeali S. Sun, Chien-Chun Chen, Shun-Wen Hsiao, Meng Chang Chen",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "ants droid:Android应用的自动恶意软件家族行为生成和分析",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/acisp/acisp2018.html",
        "conf_title": "23rd ACISP 2018: Wollongong, NSW, Australia",
        "conf_url": "https://doi.org/10.1007/978-3-319-93638-3",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1108/ICS-04-2019-0049",
        "title": "AppAware: a policy visualization model for mobile applications",
        "authors": "Ioannis Paspatis, Aggeliki Tsohou, Spyros Kokolakis",
        "abstract": "Privacy policies emerge as the main mechanism to inform users on the way their information is managed by online service providers, and still remain the dominant approach for this purpose. The literature notes that users find difficulties in understanding privacy policies because they are usually written in technical or legal language even, although most users are unfamiliar with them. These difficulties have led most users to skip reading privacy policies and blindly accept them. This study aims to address this challenge this paper presents AppAware, a multiplatform tool that intends to improve the visualization of privacy policies for mobile applications.,AppAware formulates a visualized report with the permission set of an application, which is easily understandable by a common user. AppAware aims to bridge the difficulty to read privacy policies and android’s obscure permission set with a new privacy policy visualization model. Thus, we propose AppAware parser, a mobile add-on that acts complementary with AppAware and helps mobile device users to monitor the applications they installed to their smart device.,To validate AppAware, the authors conducted a survey through questionnaire aiming to evaluate AppAware in terms of installability, usability and viability-purpose. The results demonstrate that AppAware is assessed above average by the users in all categories.,In the best of the authors’ knowledge, there is no such approach as AppAware as an application nor AppAware parser as add-on.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "隐私政策成为告知用户在线服务提供商如何管理其信息的主要机制，并且仍然是实现这一目的的主要方法。文献指出，用户很难理解隐私政策，因为它们通常是用技术或法律语言编写的，尽管大多数用户对它们并不熟悉。这些困难导致大多数用户跳过阅读隐私政策，盲目接受。本研究旨在解决这一挑战。本文介绍了AppAware，这是一个多平台工具，旨在改善移动应用程序隐私策略的可视化。AppAware使用应用程序的权限集来制定可视化的报告，这对于普通用户来说是容易理解的。AppAware旨在通过一种新的隐私政策可视化模型来消除阅读隐私政策和android模糊权限集的困难。因此，我们提出了AppAware parser，一个与AppAware互补的移动插件，帮助移动设备用户监控他们安装到智能设备上的应用程序。为了验证AppAware，作者通过问卷进行了一项调查，旨在评估AppAware的可安装性、可用性和可行性。结果表明，在所有类别中，用户对AppAware的评价都高于平均水平。据作者所知，既没有AppAware作为应用程序，也没有AppAware parser作为插件。",
        "title_zh": "AppAware:一个面向移动应用的策略可视化模型",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/imcs/imcs28.html",
        "conf_title": "Information and Computer Security, Volume 28",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1108/ICS-03-2021-0038",
        "title": "To sell, or not to sell: social media data-breach in second-hand Android devices",
        "authors": "Oussama Benrhouma, Ali Alzahrani, Ahmad B. Alkhodre, Abdallah Namoun, Wasim Ahmad Bhat",
        "abstract": "\nPurpose\nThe purpose of this paper is to investigate the private-data pertaining to the interaction of users with social media applications that can be recovered from second-hand Android devices.\n\n\nDesign/methodology/approach\nThis study uses a black-box testing-principles based methodology to develop use-cases that simulate real-world case-scenarios of the activities performed by the users on the social media application. The authors executed these use-cases in a controlled experiment and examined the Android smartphone to recover the private-data pertaining to these use-cases.\n\n\nFindings\nThe results suggest that the social media data recovered from Android devices can reveal a complete timeline of activities performed by the user, identify all the videos watched, uploaded, shared and deleted by the user, disclose the username and user-id of the user, unveil the email addresses used by the user to download the application and share the videos with other users and expose the social network of the user on the platform. Forensic investigators may find this data helpful in investigating crimes such as cyber bullying, racism, blasphemy, vehicle thefts, road accidents and so on. However, this data-breach in Android devices is a threat to user's privacy, identity and profiling in second-hand market.\n\n\nPractical implications\nPerceived notion of data sanitisation as a result of application removal and factory-reset can have serious implications. Though being helpful to forensic investigators, it leaves the user vulnerable to privacy breach, identity theft, profiling and social network revealing in second-hand market. At the same time, users' sensitivity towards data-breach might compel users to refrain from selling their Android devices in second-hand market and hamper device recycling.\n\n\nOriginality/value\nThis study attempts to bridge the literature gap in social media data-breach in second-hand Android devices by experimentally determining the extent of the breach. The findings of this study can help digital forensic investigators in solving crimes such as vehicle theft, road accidents, cybercrimes and so on. It can assist smartphone users to decide whether to sell their smartphones in a second-hand market, and at the same time encourage developers and researchers to design methods of social media data sanitisation.\n",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "目的\n本文的目的是调查可以从二手Android设备中恢复的与用户与社交媒体应用程序的交互有关的私人数据。\n\n\n设计/方法/途径\n这项研究使用基于黑盒测试原则的方法来开发用例，模拟用户在社交媒体应用程序上执行的活动的真实场景。作者在受控实验中执行了这些用例，并检查了Android智能手机，以恢复与这些用例相关的私人数据。\n\n\n调查的结果\n结果表明，从Android设备中恢复的社交媒体数据可以揭示用户执行活动的完整时间线，识别用户观看、上传、共享和删除的所有视频，泄露用户的用户名和用户id，揭示用户下载应用程序和与其他用户共享视频所使用的电子邮件地址，并暴露用户在平台上的社交网络。法医调查人员可能会发现这些数据有助于调查网络欺凌、种族主义、亵渎、车辆盗窃、交通事故等犯罪。然而，Android设备中的这种数据泄露对二手市场中用户的隐私、身份和个人资料构成了威胁。\n\n\n实际影响\n由于应用程序删除和工厂重置而产生的数据净化概念可能会产生严重的影响。虽然有助于法医调查人员，但它使用户在二手市场上容易受到隐私侵犯、身份盗窃、侧写和社交网络泄露的影响。与此同时，用户对数据泄露的敏感性可能会迫使用户不在二手市场出售他们的Android设备，并阻碍设备回收。\n\n\n创意/价值\n这项研究试图通过实验确定泄露的程度，填补二手Android设备中社交媒体数据泄露的文献空白。这项研究的发现可以帮助数字法医调查人员解决车辆盗窃、交通事故、网络犯罪等犯罪。它可以帮助智能手机用户决定是否在二手市场出售他们的智能手机，同时鼓励开发者和研究人员设计社交媒体数据净化的方法。",
        "title_zh": "卖还是不卖:二手安卓设备的社交媒体数据泄露",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/imcs/imcs30.html",
        "conf_title": "Information and Computer Security, Volume 30",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1108/ICS-12-2020-0196",
        "title": "BioGames: a new paradigm and a behavioral biometrics collection tool for research purposes",
        "authors": "Ioannis Stylios, Spyros Kokolakis, Andreas Skalkos, Sotirios Chatzis",
        "abstract": "\nPurpose\nThe purpose of this paper is to present a new paradigm, named BioGames, for the extraction of behavioral biometrics (BB) conveniently and entertainingly. To apply the BioGames paradigm, the authors developed a BB collection tool for mobile devices named BioGames App. The BioGames App collects keystroke dynamics, touch gestures, and motion modalities and is available on GitHub. Interested researchers and practitioners may use it to create their datasets for research purposes.\n\n\nDesign/methodology/approach\nOne major challenge for BB and continuous authentication (CA) research is the lack of actual BB datasets for research purposes. The compilation and refinement of an appropriate set of BB data constitute a challenge and an open problem. The issue is aggravated by the fact that most users are reluctant to participate in long demanding procedures entailed in the collection of research biometric data. As a result, they do not complete the data collection procedure, or they do not complete it correctly. Therefore, the authors propose a new paradigm and introduce a BB collection tool, which they call BioGames, for the extraction of biometric features in a convenient way. The BioGames paradigm proposes a methodology where users play games without participating in an experimental painstaking process. The BioGames App collects keystroke dynamics, touch gestures, and motion modalities.\n\n\nFindings\nThe authors proposed a new paradigm for the collection of BB on mobile devices and created the BioGames application. The BioGames App is an Android application that collects BB data on mobile devices and sends them to a database. The database design allows multiple users to store their sensor data at any time. Thus, there is no concern about data separation and synchronization. BioGames App is General Data Protection Regulation (GDPR) compliant as it collects and processes only anonymous data.\n\n\nOriginality/value\nThe BioGames App is a publicly available tool that combines the keystroke dynamics, touch gestures, and motion modalities. In addition, it uses a methodology where users play games without participating in an experimental painstaking process.\n",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "目的\n本文的目的是提出一种新的范式，即生物游戏，用于方便而有趣地提取行为生物特征。为了应用BioGames范式，作者开发了一个名为BioGames App的移动设备BB收集工具。BioGames应用程序收集击键动力学、触摸手势和运动模式，可在GitHub上获得。感兴趣的研究人员和从业人员可以使用它来创建用于研究目的的数据集。\n\n\n设计/方法/途径\nBB和连续认证(CA)研究的一个主要挑战是缺乏用于研究目的的实际BB数据集。汇编和完善一套适当的BB数据构成了一个挑战和公开的问题。由于大多数用户不愿意参与收集生物特征数据的漫长而苛刻的程序，这一问题变得更加严重。结果，他们没有完成数据收集程序，或者他们没有正确地完成数据收集程序。因此，作者提出了一种新的范式，并介绍了一种BB收集工具，他们称之为BioGames，用于以一种方便的方式提取生物特征。BioGames范式提出了一种方法，在这种方法中，用户在不参与艰苦的实验过程的情况下玩游戏。BioGames应用程序收集击键动力学、触摸手势和运动模式。\n\n\n调查的结果\n作者提出了在移动设备上收集BB的新模式，并创建了BioGames应用程序。BioGames应用程序是一个Android应用程序，它收集移动设备上的BB数据，并将它们发送到数据库。数据库设计允许多个用户随时存储他们的传感器数据。因此，不存在数据分离和同步的问题。BioGames App符合通用数据保护条例(GDPR ),因为它仅收集和处理匿名数据。\n\n\n创意/价值\nBioGames应用程序是一个公开可用的工具，它结合了击键动力学、触摸手势和运动模式。此外，它使用了一种方法，在这种方法中，用户玩游戏时不需要参与实验性的艰苦过程。",
        "title_zh": "生物游戏:一种新的范式和用于研究目的的行为生物测定学收集工具",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/imcs/imcs30.html",
        "conf_title": "Information and Computer Security, Volume 30",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1108/ICS-11-2020-0182",
        "title": "Bayesian evaluation of privacy-preserving risk communication for user android app preferences",
        "authors": "Behnood Momenzadeh, Shakthidhar Gopavaram, Sanchari Das, L. Jean Camp",
        "abstract": "\nPurpose\nThe purpose of this paper is to propose practical and usable interactions that will allow more informed, risk-aware comparisons for individuals during app selections. The authors include an explicit argument for the role of human decision-making during app selection and close with a discussion of the strengths of a Bayesian approach to evaluating privacy and security interventions.\n\n\nDesign/methodology/approach\nThe authors focused on the risk communication in mobile marketplace’s realm, examining how risk indicators can help people choose more secure and privacy-preserving apps. Combining canonical findings in risk perception with previous work in usable security, the authors designed indicators for each app to enable decisions that prioritize risk avoidance. Specifically, the authors performed a natural experiment with N = 60 participants, where they asked them to select applications on Android tablets with accurate real-time marketplace data.\n\n\nFindings\nIn the aggregate, the authors found that app selections changed to be more risk-averse in the presence of a user-centered multi-level warning system using visual indicators that enabled a click-thru to the more detailed risk and permissions information.\n\n\nOriginality/value\nPrivacy research in the laboratory is often in conflict with privacy decision-making in the marketplace, resulting in a privacy paradox. To better understand this, the authors implemented a research design based on clinical experimental approaches, testing the interaction in a noisy, confounded field environment.\n",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "目的\n本文的目的是提出实用和可用的交互方式，以便在选择应用程序时为个人提供更明智、更有风险意识的比较。作者对人类决策在应用程序选择中的作用进行了明确的论证，并在结束时讨论了贝叶斯方法在评估隐私和安全干预方面的优势。\n\n\n设计/方法/途径\n作者关注移动市场领域的风险沟通，研究风险指标如何帮助人们选择更安全和保护隐私的应用程序。结合风险认知方面的典型发现和以前在可用安全性方面的工作，作者为每个应用程序设计了指标，以实现优先规避风险的决策。具体来说，作者对N = 60名参与者进行了一项自然实验，要求他们根据准确的实时市场数据选择Android平板电脑上的应用程序。\n\n\n调查的结果\n总的来说，作者发现，在以用户为中心的多级警告系统存在的情况下，应用程序的选择变得更加规避风险，该系统使用视觉指示器，允许点击更详细的风险和权限信息。\n\n\n创意/价值\n实验室中的隐私研究往往与市场中的隐私决策相冲突，从而导致隐私悖论。为了更好地理解这一点，作者实施了一项基于临床实验方法的研究设计，在嘈杂、混乱的现场环境中测试相互作用。",
        "title_zh": "用户android应用偏好隐私保护风险沟通的贝叶斯评估",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/imcs/imcs29.html",
        "conf_title": "Information and Computer Security, Volume 29",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1108/ICS-03-2017-0011",
        "title": "Forensic analysis of Google Allo messenger on Android platform",
        "authors": "Vinayak Agrawal, Shashikala Tapaswi",
        "abstract": "\nPurpose\nThe purpose of this paper is to conduct a forensic analysis of Google Allo messenger on an Android-based mobile phone. The focus was on the analysis of the data stored by this application in the internal memory of the mobile device, with minimal use of third-party applications. The findings were compared with the already existing works on this topic. Android is the most popular operating system for mobile devices, and these devices often contain a massive amount of personal information about the user such as photos and contact details. Analysis of these applications is required in case of a forensic investigation and makes the process easier for forensic analysts.\n\n\nDesign/methodology/approach\nLogical acquisition of the data stored by these applications was performed. A locked Android device was used for this purpose. Some scripts are presented to help in data acquisition using Android Debug Bridge (ADB). Manual forensic analysis of the device image was performed to see whether the activities carried out on these applications are stored in the internal memory of the device. A comparative analysis of an existing mobile forensic tool was also performed to show the effectiveness of the methodology adopted.\n\n\nFindings\nForensic artifacts were recovered from Allo application. Multimedia content such as images were also retrieved from the internal memory.\n\n\nResearch limitations/implications\nAs this study was conducted for forensic analysis, it assumed that the mobile device used already has USB debugging enabled on it, although this might not be the applicable in some of the cases. This work provides an optimal approach to acquiring artifacts with minimal use of third-party applications.\n\n\nPractical implications\nMost of the mobile devices contain messaging application such as Allo installed. A large amount of personal information can be obtained from the forensic analysis of these applications, which can be useful in any criminal investigation.\n\n\nOriginality/value\nThis is the first study which focuses on the Google Allo application. The proposed methodology was able to extract almost as much as the data obtained using earlier approaches, but with minimal third-party application usage.\n",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "目的\n本文的目的是对Android手机上的Google Allo messenger进行取证分析。重点是分析该应用程序存储在移动设备内存中的数据，尽量少使用第三方应用程序。这些发现与已经存在的关于这个主题的工作进行了比较。Android是最受欢迎的移动设备操作系统，这些设备通常包含用户的大量个人信息，如照片和联系方式。在法庭调查的情况下，需要对这些应用程序进行分析，这使得法庭分析员的工作变得更加容易。\n\n\n设计/方法/途径\n对这些应用程序存储的数据进行逻辑采集。为此使用了锁定的Android设备。提供了一些脚本来帮助使用Android调试桥(ADB)进行数据采集。对设备映像执行手动取证分析，以查看在这些应用程序上执行的活动是否存储在设备的内部存储器中。还对现有的移动取证工具进行了比较分析，以显示所采用的方法的有效性。\n\n\n调查的结果\n从Allo应用程序中恢复了法医人工制品。还从内部存储器中检索多媒体内容，例如图像。\n\n\n研究限制/影响\n由于本研究是为取证分析而进行的，因此假设所使用的移动设备已经启用了USB调试，尽管这在某些情况下可能不适用。这项工作提供了一种最少使用第三方应用程序来获取工件的最佳方法。\n\n\n实际影响\n大多数移动设备都安装了消息应用程序，如Allo。从这些应用程序的法医分析中可以获得大量的个人信息，这在任何刑事调查中都是有用的。\n\n\n创意/价值\n这是第一项针对Google Allo应用程序的研究。所提出的方法能够提取几乎与使用早期方法获得的数据一样多的数据，但使用最少的第三方应用程序。",
        "title_zh": "Android平台上Google Allo messenger的取证分析",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/imcs/imcs27.html",
        "conf_title": "Information and Computer Security, Volume 27",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1108/ICS-10-2014-0071",
        "title": "Reengineering the user: privacy concerns about personal data on smartphones",
        "authors": "Matina Tsavli, Pavlos S. Efraimidis, Vasilios Katos, Lilian Mitrou",
        "abstract": "Purpose – This paper aims to discuss the privacy and security concerns that have risen from the permissions model in the Android operating system, along with two shortcomings that have not been adequately addressed. Design/methodology/approach – The impact of the applications’ evolutionary increment of permission requests from both the user’s and the developer’s point of view is studied, and finally, a series of remedies against the erosion of users’ privacy is proposed. Findings – The results of this work indicate that, even though providing access to personal data of smartphone users is by definition neither problematic nor unlawful, today’s smartphone operating systems do not provide an adequate level of protection for the user’s personal data. However, there are several ideas that can significantly improve the situation and mitigate privacy concerns of users of smart devices. Research limitations/implications – The proposed approach was evaluated through an examination of the Android’s permission mode...",
        "files": {
            "openAccessPdf": "http://eprints.bournemouth.ac.uk/24543/7/Reengineering%20the%20user.pdf"
        },
        "abstract_zh": "目的-本文旨在讨论Android操作系统中权限模型带来的隐私和安全问题，以及尚未得到充分解决的两个缺点。设计/方法/途径——从用户和开发人员的角度研究了应用程序不断增加的权限请求的影响，最后，提出了一系列防止用户隐私受到侵犯的补救措施。调查结果——这项工作的结果表明，尽管提供对智能手机用户个人数据的访问从定义上来说没有问题也不违法，但今天的智能手机操作系统并没有为用户的个人数据提供足够的保护。然而，有几个想法可以显著改善这种情况，并减轻智能设备用户的隐私担忧。研究限制/影响-通过检查机器人的许可模式对提议的方法进行了评估...",
        "title_zh": "再造用户:智能手机上个人数据的隐私问题",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/imcs/imcs23.html",
        "conf_title": "Information and Computer Security, Volume 23",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1108/ICS-02-2014-0013",
        "title": "Logical acquisition and analysis of data from android mobile devices",
        "authors": "Himanshu Srivastava, Shashikala Tapaswi",
        "abstract": "Purpose – The purpose of this paper is to propose an approach that helps in acquisition of live data as well as data stored in the internal/external memory of android mobile device considering that the data on the device are not much altered during the extraction process. Also, the emphasis is laid on testing the validity of existing forensic tools against the data obtained manually and by using this approach. Smartphones have spurred the mobile computing technology, and Android is widely used as an Operating System in these devices. These days, users store most of their personal information like emails, images, contacts etc., on Phones/Tablets as their data would be readily accessible and thus convenient for them. Design/methodology/approach – Android Operating System is built on the Linux Kernel and scripts to extract data from Android Mobile Device with the use of Android Debugging Bridge have been written. The approach is more focused on the logical acquisition of data from devices rather than acquisi...",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "目的–考虑到设备上的数据在提取过程中不会发生太大变化，本文的目的是提出一种有助于获取实时数据以及存储在android移动设备内部/外部存储器中的数据的方法。此外，重点放在根据手动获取的数据和使用这种方法获取的数据测试现有取证工具的有效性。智能手机推动了移动计算技术的发展，Android作为操作系统被广泛应用于这些设备中。如今，用户存储大部分个人信息，如电子邮件、图像、联系人等。在手机/平板电脑上，因为他们的数据很容易访问，因此对他们来说很方便。设计/方法/途径——Android操作系统建立在Linux内核上，使用Android调试桥从Android移动设备提取数据的脚本已经编写完成。这种方法更侧重于从设备中逻辑地获取数据，而不是...",
        "title_zh": "从android移动设备逻辑采集和分析数据",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/imcs/imcs23.html",
        "conf_title": "Information and Computer Security, Volume 23",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1108/ICS-01-2015-0001",
        "title": "A study on usability and security features of the Android pattern lock screen",
        "authors": "Panagiotis Andriotis, George C. Oikonomou, Alexios Mylonas, Theo Tryfonas",
        "abstract": "Purpose – The Android pattern lock screen (or graphical password) is a popular user authentication method that relies on the advantages provided by the visual representation of a password, which enhance its memorability. Graphical passwords are vulnerable to attacks (e.g. shoulder surfing); thus, the need for more complex passwords becomes apparent. This paper aims to focus on the features that constitute a usable and secure pattern and investigate the existence of heuristic and physical rules that possibly dictate the formation of a pattern. Design/methodology/approach – The authors conducted a survey to study the users’ understanding of the security and usability of the pattern lock screen. The authors developed an Android application that collects graphical passwords, by simulating user authentication in a mobile device. This avoids any potential bias that is introduced when the survey participants are not interacting with a mobile device while forming graphical passwords (e.g. in Web or hard-copy surv...",
        "files": {
            "openAccessPdf": "https://discovery.ucl.ac.uk/1479403/1/Andriotis%20et%20al%202015%20A%20study%20on%20usability%20and%20security%20features%20of%20the%20Android%20pattern%20lock%20screen%20AAM.pdf"
        },
        "abstract_zh": "目的Android模式锁定屏幕(或图形密码)是一种流行的用户身份验证方法，它依赖于密码的可视化表示所提供的优势，这些优势增强了密码的可记忆性。图形密码易受攻击(如肩窥)；因此，对更复杂的密码的需求变得显而易见。本文旨在关注构成可用和安全模式的特征，并调查可能决定模式形成的启发式和物理规则的存在。设计/方法/途径-作者进行了一项调查，研究用户对模式锁定屏幕的安全性和可用性的理解。作者开发了一个Android应用程序，通过在移动设备中模拟用户认证来收集图形密码。这避免了当调查参与者在形成图形密码时没有与移动设备交互时引入的任何潜在偏差(例如，在网络或硬拷贝调查中)...",
        "title_zh": "Android模式锁屏的可用性和安全性研究",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/imcs/imcs24.html",
        "conf_title": "Information and Computer Security, Volume 24",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1108/ICS-12-2014-0078",
        "title": "Evaluating the effect of multi-touch behaviours on Android unlock patterns",
        "authors": "Weizhi Meng",
        "abstract": "Purpose \n \n \n \n \nThis paper aims to evaluate the effect of multi-touch behaviours on creating Android unlock patterns (AUPs) by realising that users can perform more actions in touch-enabled mobile phones. \n \n \n \n \nDesign/methodology/approach \n \n \n \n \nThe author conducted two user studies with a total of 45 participates and performed two major experiments in the main user study. \n \n \n \n \nFindings \n \n \n \n \nThe user study indicates that the multi-touch behaviours can have a positive impact on creating patterns; however, there are only nine touchable points for the original AUPs, which may reduce the usability when performing a multi-touch movement. \n \n \n \n \nResearch limitations/implications \n \n \n \n \nAn even larger user study could be conducted to further analyse the patterns generated by users, that is, to analyse the specific password space by integrating the behaviours of multi-touch and to involve more types of multi-touch behaviours in creating an AUP. \n \n \n \n \nPractical implications \n \n \n \n \nThis work explores the effect of multi-touch movement on creating AUPs. The results should be of interest for software developers and security researchers for exploring the effect of multi-touch behaviours on the creation of graphical passwords on mobile phones. \n \n \n \n \nOriginality/value \n \n \n \n \nThe author conducts two user studies with a total of 45 participants to investigate the impact of multi-touch behaviours on creating AUPs. In addition, to address the issue of usability, the author proposes two ways: increasing the number of touchable points and improve the rules of pattern creation.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "目的\n\n\n\n\n本文旨在通过认识到用户可以在支持触摸的手机上执行更多的操作，来评估多点触摸行为对创建Android解锁模式(AUPs)的影响。\n\n\n\n\n设计/方法/途径\n\n\n\n\n作者进行了两次用户研究，共有45人参与，并在主要用户研究中进行了两次主要实验。\n\n\n\n\n调查的结果\n\n\n\n\n用户研究表明，多点触摸行为可以对创建模式产生积极影响；然而，原始aup只有九个可触摸点，这可能会降低执行多点触摸移动时的可用性。\n\n\n\n\n研究限制/影响\n\n\n\n\n可以进行更大规模的用户研究，以进一步分析用户生成的模式，即通过整合多点触摸的行为来分析特定的密码空间，并在创建AUP时涉及更多类型的多点触摸行为。\n\n\n\n\n实际影响\n\n\n\n\n这项工作探索了多点触摸运动对创建aup的影响。软件开发人员和安全研究人员应该会对这些结果感兴趣，以探索多点触摸行为对在移动电话上创建图形密码的影响。\n\n\n\n\n创意/价值\n\n\n\n\n作者进行了两项用户研究，共有45名参与者，以调查多点触摸行为对创建aup的影响。此外，为了解决可用性问题，作者提出了两种方法:增加可触摸点的数量和改进图案创建规则。",
        "title_zh": "评估多点触摸行为对Android解锁模式的影响",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/journals/imcs/imcs24.html",
        "conf_title": "Information and Computer Security, Volume 24",
        "conf_url": "",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3437880.3460412",
        "title": "Meta and Media Data Stream Forensics in the Encrypted Domain of Video Conferences",
        "authors": "Robert Altschaffel, Jonas Hielscher, Stefan Kiltz, Jana Dittmann",
        "abstract": "Our paper presents a systematic approach to investigate whether and how events can be identified and extracted during the use of video conferencing software. Our approach is based on the encrypted meta and multimedia data exchanged during video conference sessions. It relies on the network data stream which contains data interpretable without decryption (plain data) and encrypted data (encrypted content) some of which is decrypted using our approach (decrypted content). This systematic approach uses a forensic process model and the fission of network data streams before applying methods on the specific individual data types. Our approach is applied exemplary to the Zoom Videoconferencing Service with Client Version 5.4.57862.0110 [4], the mobile Android App Client Version 5.5.2 (1328) [4], the webbased client and the servers (accessed between Jan 21st and Feb 4th). The investigation includes over 50 different configurations. For the heuristic speaker identification, two series of nine sets for eight different speakers are collected. The results show that various user data can be derived from characteristics of encrypted media streams, even if end-to-end encryption is used. The findings suggest user privacy risks. Our approach offers the identification of various events, which enable activity tracking (e.g. camera on/off, increased activity in front of camera) by evaluating heuristic features of the network streams. Further research into user identification within the encrypted audio stream based on pattern recognition using heuristic features of the corresponding network data stream is conducted and suggests the possibility to identify users within a specific set.",
        "files": {
            "openAccessPdf": "https://dl.acm.org/doi/pdf/10.1145/3437880.3460412"
        },
        "abstract_zh": "我们的论文提出了一个系统的方法来研究在视频会议软件的使用过程中，事件是否以及如何被识别和提取。我们的方法基于视频会议期间交换的加密元数据和多媒体数据。它依赖于网络数据流，该数据流包含无需解密即可解释的数据(普通数据)和加密数据(加密内容)，其中一些数据使用我们的方法解密(解密内容)。这种系统方法在对特定的单个数据类型应用方法之前，使用取证过程模型和网络数据流的分裂。我们的方法示例性地应用于Zoom视频会议服务，客户端版本为5.4.57862.0110 [4]，移动Android应用客户端版本为5.5.2 (1328) [4]，基于网络的客户端和服务器(在1月21日和2月4日之间访问)。调查包括50多种不同的配置。对于启发式说话人识别，收集八个不同说话人的两个系列的九个集合。结果表明，即使使用端到端加密，也可以从加密媒体流的特征中导出各种用户数据。研究结果表明用户隐私存在风险。我们的方法提供了对各种事件的识别，这使得能够通过评估网络流的启发式特征来进行活动跟踪(例如，摄像机开/关、摄像机前的活动增加)。基于使用相应网络数据流的启发式特征的模式识别，对加密音频流内的用户识别进行进一步研究，并提出在特定集合内识别用户的可能性。",
        "title_zh": "视频会议加密领域的元数据流和媒体数据流取证",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/ih/ihmmsec2021.html",
        "conf_title": "9th IH&MMSec 2021: Virtual Event, Belgium",
        "conf_url": "https://doi.org/10.1145/3437880",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3545948.3545980",
        "title": "Katana: Robust, Automated, Binary-Only Forensic Analysis of Linux Memory Snapshots",
        "authors": "Fabian Franzen, Tobias Holl, Manuel Andreas, Julian Kirsch, Jens Grossklags",
        "abstract": "The development and research of tools for forensically analyzing Linux memory snapshots have stalled in recent years as they cannot deal with the high degree of configurability and fail to handle security advances like structure layout randomization. Existing tools such as Volatility and Rekall require a pre-generated profile of the operating system, which is not always available, and can be invalidated by the smallest source code or configuration changes in the kernel. In this paper, we create a reference model of the control and data flow of selected representative Linux kernels. Using this model, ABI properties, and Linux’s own runtime information, we apply a configuration- and instruction-set-agnostic structural matching between the reference model and the loaded kernel to obtain enough information to drive all practically relevant forensic analyses. We implemented our approach in Katana 1, and evaluated it against Volatility. Katana is superior where no perfect profile information is available. Furthermore, we show correct functionality on an extensive set of 85 kernels with different configurations and 45 realistic snapshots taken while executing popular Linux distributions or recent versions of Android from version 8.1 to 11. Our approach translates to other CPU architectures in the Internet-of-Things (IoT) device domain such as MIPS and ARM64 as we show by analyzing a TP-Link router and a smart camera. We also successfully generalize to modified Linux kernels such as Android.",
        "files": {
            "openAccessPdf": "https://dl.acm.org/doi/pdf/10.1145/3545948.3545980"
        },
        "abstract_zh": "用于法医分析Linux存储器快照的工具的开发和研究在最近几年停滞不前，因为它们不能处理高度的可配置性，并且不能处理诸如结构布局随机化之类的安全进步。现有的工具，如Volatility和Rekall，需要预先生成操作系统的配置文件，这并不总是可用的，并且可能会因内核中最小的源代码或配置更改而失效。在本文中，我们创建了一个具有代表性的Linux内核的控制和数据流的参考模型。使用该模型、ABI属性和Linux自身的运行时信息，我们在参考模型和加载的内核之间应用配置和指令集不可知的结构匹配，以获得足够的信息来驱动所有实际相关的取证分析。我们在Katana 1中实现了我们的方法，并评估了它的波动性。武士刀在没有完美轮廓信息的情况下更胜一筹。此外，我们在一组广泛的85个内核上显示了正确的功能，这些内核具有不同的配置和45个真实的快照，这些快照是在执行流行的Linux发行版或从版本8.1到版本11的最新版本的Android时拍摄的。我们的方法可以转化为物联网(IoT)设备领域的其他CPU架构，如MIPS和ARM64，我们通过分析TP-Link路由器和智能摄像机来展示这一点。我们还成功地推广到修改后的Linux内核，如Android。",
        "title_zh": "katana:Linux内存快照的健壮、自动化、仅二进制取证分析",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/raid/raid2022.html",
        "conf_title": "25th RAID 2022: Limassol, Cyprus",
        "conf_url": "https://doi.org/10.1145/3545948",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3545948.3545951",
        "title": "Odile: A scalable tracing tool for non-rooted and on-device Android phones",
        "authors": "Alain Tchana, Lavoisier Lavoisier Wapet, Yérom-David Bromberg",
        "abstract": "As Android’s popularity continues to grow among consumers and device manufacturers, it is also becoming a prime target for malware authors. Although static app analysis is quite simple to use and scale very well, it is inefficient when the app is obfuscated or the malicious code is dynamically downloaded at runtime. Runtime analysis of app behavior is thus becoming paramount for reverse engineers and app market maintainers (e.g., Google Play) to ensure that running apps do not include some malicious payload. However, dynamic binary instrumentation of apps to track on-device app behavior at runtime is very challenging: (i) it does not scale with the number of the intercepted calls as it increases the memory footprint of the instrumented app, ineluctably leading to Out-Of-Memory crash, and (ii) it can not do API-level tracing at scale. Further, most of the time it requires either to root/jailbreak devices, or the use of a modified Android system, preventing its use on any end-user phone. We introduce a new dynamic binary instrumentation tool, named Odile , to help reverse engineers to perform on-device analysis for non-rooted Android devices. Odile provides a new scalable tracing approach that we call delegated instrumentation. It leverages Android’s instrumentation module and mainly relies on ART reverse engineering. We demonstrate the effectiveness of Odile in tracing various app types (including benign apps and malware). In particular, we show how much Odile outperforms Frida , the state-of-the-art tool in the domain.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "随着Android在消费者和设备制造商中的受欢迎程度持续增长，它也成为恶意软件作者的主要目标。虽然静态应用程序分析非常易于使用和扩展，但当应用程序被混淆或恶意代码在运行时被动态下载时，它的效率会很低。因此，对应用行为的运行时分析对于逆向工程师和应用市场维护者(例如，Google Play)来说变得至关重要，以确保运行中的应用不包括一些恶意负载。然而，应用程序的动态二进制检测以在运行时跟踪设备上的应用程序行为是非常具有挑战性的:(I)它不随着被拦截的调用的数量而扩展，因为它增加了被检测的应用程序的内存占用，不可避免地导致内存不足的崩溃，以及(ii)它不能大规模地进行API级别的跟踪。此外，大多数时候，它要么需要root/越狱设备，要么需要使用经过修改的Android系统，这使得它无法在任何终端用户手机上使用。我们引入了一个新的动态二进制插装工具，名为Odile，以帮助逆向工程师对非根Android设备执行设备上分析。Odile提供了一种新的可伸缩的跟踪方法，我们称之为委托工具。它利用了Android的仪器模块，主要依靠ART逆向工程。我们展示了Odile在跟踪各种应用程序类型(包括良性应用程序和恶意软件)方面的有效性。特别是，我们展示了Odile在多大程度上优于该领域最先进的工具Frida。",
        "title_zh": "Odile:一个可扩展的追踪工具，用于非根设备和设备上的Android手机",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/raid/raid2022.html",
        "conf_title": "25th RAID 2022: Limassol, Cyprus",
        "conf_url": "https://doi.org/10.1145/3545948",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1145/3471621.3471625",
        "title": "On the Usability (In)Security of In-App Browsing Interfaces in Mobile Apps",
        "authors": "Zicheng Zhang",
        "abstract": "Due to the frequent encountering of web URLs in various application scenarios (e.g., chatting and email reading), many mobile apps build their in-app browsing interfaces (IABIs) to provide a seamless user experience. Although this achieves user-friendliness by avoiding the constant switching between the subject app and the system built-in browser apps, we find that IABIs, if not well designed or customized, could result in usability security risks. In this paper, we conduct the first empirical study on the usability (in)security of in-app browsing interfaces in both Android and iOS apps. Specifically, we collect a dataset of 25 high-profile mobile apps from five common application categories that contain IABIs, including Facebook and Gmail, and perform a systematic analysis (not end-user study though) that comprises eight carefully designed security tests and covers the entire course of opening, displaying, and navigating an in-app web page. During this process, we obtain three major security findings: (1) about 30% of the tested apps fail to provide enough URL information for users to make informed decisions on opening an URL; (2) nearly all custom IABIs have various problems in providing sufficient indicators to faithfully display an in-app page to users, whereas ten IABIs that are based on Chrome Custom Tabs and SFSafariViewController are generally secure; and (3) only a few IABIs give warnings to remind users of the risk of inputting passwords during navigating a (potentially phishing) login page. Most developers had acknowledged our findings but their willingness and readiness to fix usability issues are rather low compared to fixing technical vulnerabilities, which is a puzzle in usability security research. Nevertheless, to help mitigate risky IABIs and guide future designs, we propose a set of secure IABI design principles.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "由于在各种应用场景(例如，聊天和电子邮件阅读)中经常遇到web URLs，许多移动应用构建其应用内浏览界面(IABIs)来提供无缝的用户体验。虽然这通过避免主题应用和系统内置浏览器应用之间的不断切换实现了用户友好性，但我们发现，如果设计或定制不好，IABIs可能会导致可用性安全风险。在本文中，我们对Android和iOS应用中的应用内浏览界面的可用性(In)安全性进行了首次实证研究。具体来说，我们从包含IABIs的五个常见应用类别(包括脸书和Gmail)中收集了25个高知名度移动应用的数据集，并进行系统分析(但不是最终用户研究)，其中包括八项精心设计的安全测试，涵盖了打开、显示和导航应用内网页的整个过程。在这个过程中，我们获得了三个主要的安全发现:(1)大约30%的测试应用程序未能提供足够的URL信息，让用户在打开URL时做出明智的决定；(2)几乎所有的定制iabi在提供足够的指示器以忠实地向用户显示应用内页面方面都存在各种问题，而基于Chrome定制标签和SFSafariViewController的十个iabi一般都是安全的；以及(3)只有少数IABIs给出警告，以提醒用户在导航(潜在的网络钓鱼)登录页面期间输入密码的风险。大多数开发者承认我们的发现，但是与修复技术漏洞相比，他们修复可用性问题的意愿和准备程度相当低，这是可用性安全研究中的一个难题。尽管如此，为了帮助减轻风险和指导未来的设计，我们提出了一套安全的IABI设计原则。",
        "title_zh": "移动应用中应用内浏览界面的可用性安全性",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/raid/raid2021.html",
        "conf_title": "24th RAID 2021: San Sebastian, Spain",
        "conf_url": "https://doi.org/10.1145/3471621",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/raid2020/presentation/tileria",
        "title": "WearFlow: Expanding Information Flow Analysis To Companion Apps in Wear OS",
        "authors": "Marcos Tileria, Jorge Blasco, Guillermo Suarez-Tangil",
        "abstract": "Smartwatches and wearable technology have proliferated in the recent years featured by a seamless integration with a paired smartphone. Many mobile applications now come with a companion app that the mobile OS deploys on the wearable. These execution environments expand the context of mobile applications across more than one device, introducing new security and privacy issues. One such issue is that current information ﬂow analysis techniques can not capture communication between devices. This can lead to undetected privacy leaks when developers use these channels. In this paper, we present WearFlow, a framework that uses static analysis to detect sensitive data ﬂows across mobile and wearable companion apps in Android. WearFlow augments taint analysis capabilities to enable inter-device analysis of apps. WearFlow models proprietary libraries embedded in Google Play Services and instruments the mobile and wearable app to allow for a precise information ﬂow analysis between them. We evaluate WearFlow on a test suite purposely designed to cover different scenarios for the communication Mobile-Wear, which we release as Wear-Bench . We also run WearFlow on 3K+ real-world apps and discover privacy violations in popular apps (10M+ downloads).",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "智能手表和可穿戴技术近年来激增，其特点是与配对的智能手机无缝集成。许多移动应用程序现在都附带了一个配套应用程序，移动操作系统将其部署在可穿戴设备上。这些执行环境将移动应用程序的上下文扩展到多个设备，带来了新的安全和隐私问题。其中一个问题是，当前的信息流分析技术无法捕捉设备之间的通信。当开发人员使用这些渠道时，这可能会导致未被发现的隐私泄露。在本文中，我们介绍了WearFlow，这是一个使用静态分析来检测Android中移动和可穿戴配套应用之间的敏感数据流的框架。WearFlow增强了污点分析能力，支持应用程序的设备间分析。WearFlow对嵌入在Google Play服务中的专有库进行建模，并为移动和可穿戴应用提供工具，以实现它们之间的精确信息流分析。我们在一个测试套件上对WearFlow进行了评估，该测试套件旨在覆盖通信移动穿戴的不同场景，我们将其发布为Wear-Bench。我们还在3K+现实世界的应用程序上运行WearFlow，并在热门应用程序中发现侵犯隐私的行为(下载量超过1000万)。",
        "title_zh": "WearFlow:将信息流分析扩展到Wear OS中的配套应用",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/raid/raid2020.html",
        "conf_title": "23rd RAID 2020: San Sebastian, Spain",
        "conf_url": "https://www.usenix.org/conference/raid2020",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/raid2020/presentation/ibdah",
        "title": "Dark Firmware: A Systematic Approach to Exploring Application Security Risks in the Presence of Untrusted Firmware",
        "authors": "Duha Ibdah, Nada Lachtar, Abdulrahman Abu Elkhail, Anys Bacha, Hafiz Malik",
        "abstract": "Compromising lower levels of the computing stack is attractive to attackers since malware that resides in layers that span firmware and hardware are notoriously difficult to detect and remove. This trend raises concerns about the security of the system components that we have grown accustomed to trusting, especially as the number of supply chain attacks continues to rise. In this work, we explore the risks associated with application security in the presence of untrusted firmware. We present a novel firmware attack that leverages system management cycles to covertly collect data from the application layer. We show that system interrupts that are used for managing the platform, can be leveraged to extract sensitive application data from outgoing requests even when the HTTPS protocol is used. We evaluate the robustness of our attack under diverse and stressful application usage conditions running on Ubuntu 18.04 and Android 8.1 operating systems. We conduct a proof-of-concept implementation of the attack using firmware configured to run with the aforementioned OSs and a mix of popular applications without disrupting the normal functionality of the system. Finally, we discuss a possible countermeasure that can be used to defend against firmware attacks.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "危及较低级别的计算栈对攻击者来说是有吸引力的，因为众所周知，驻留在跨越固件和硬件的层中的恶意软件难以检测和移除。这一趋势引发了人们对我们已经习惯于信任的系统组件的安全性的担忧，尤其是在供应链攻击数量持续上升的情况下。在这项工作中，我们探讨了在不可信固件存在的情况下与应用安全相关的风险。我们提出了一种新颖的固件攻击，它利用系统管理周期从应用层秘密收集数据。我们表明，即使在使用HTTPS协议的情况下，用于管理平台的系统中断也可以用来从传出的请求中提取敏感的应用程序数据。我们评估了我们的攻击在Ubuntu 18.04和Android 8.1操作系统上运行的多样化和紧张的应用程序使用条件下的鲁棒性。我们使用配置为与上述操作系统和流行应用程序混合运行的固件，在不中断系统正常功能的情况下，对攻击进行了概念验证。最后，我们讨论一个可能的对策，可以用来抵御固件攻击。",
        "title_zh": "黑暗固件:在不可信固件存在的情况下探索应用程序安全风险的系统方法",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/raid/raid2020.html",
        "conf_title": "23rd RAID 2020: San Sebastian, Spain",
        "conf_url": "https://www.usenix.org/conference/raid2020",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/raid2019/presentation/sivan",
        "title": "Analysis of Location Data Leakage in the Internet Traffic of Android-based Mobile Devices",
        "authors": "Nir Sivan, Ron Bitton, Asaf Shabtai",
        "abstract": "In recent years we have witnessed a shift towards personalized, context-based applications and services for mobile device users. A key component of many of these services is the ability to infer the current location and predict the future location of users based on location sensors embedded in the devices. Such knowledge enables service providers to present relevant and timely offers to their users and better manage traffic congestion control, thus increasing customer satisfaction and engagement. However, such services suffer from location data leakage which has become one of today's most concerning privacy issues for smartphone users. In this paper we focus specifically on location data that is exposed by Android applications via Internet network traffic in plaintext (i.e., without encryption) without the user's awareness. We present an empirical evaluation, involving the network traffic of real mobile device users, aimed at: (1) measuring the extent of location data leakage in the Internet traffic of Android-based smartphone devices; and (2) understanding the value of this data by inferring users' points of interests (POIs). This was achieved by analyzing the Internet traffic recorded from the smartphones of a group of 71 participants for an average period of 37 days. We also propose a procedure for mining and filtering location data from raw network traffic and utilize geolocation clustering methods to infer users' POIs. The key findings of this research center on the extent of this phenomenon in terms of both ubiquity and severity; we found that over 85\\% of devices of users are leaking location data, and the exposure rate of users' POIs, derived from the relatively sparse leakage indicators, is around 61%.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "近年来，我们见证了面向移动设备用户的个性化、基于上下文的应用和服务的转变。许多这些服务的一个关键组成部分是基于嵌入在设备中的位置传感器推断用户当前位置和预测用户未来位置的能力。这些知识使服务提供商能够向他们的用户提供相关和及时的服务，并更好地管理交通拥堵控制，从而提高客户满意度和参与度。然而，这种服务受到位置数据泄露的影响，这已经成为当今智能手机用户最关心的隐私问题之一。在本文中，我们特别关注Android应用程序通过互联网网络流量在用户不知情的情况下以明文形式(即未经加密)暴露的位置数据。我们提出了一个实证评估，涉及真实移动设备用户的网络流量，旨在:(1)测量基于Android的智能手机设备的互联网流量中位置数据泄漏的程度；以及(2)通过推断用户的兴趣点(poi)来理解这些数据的价值。这是通过分析一组71名参与者的智能手机在平均37天内记录的互联网流量实现的。我们还提出了一个从原始网络流量中挖掘和过滤位置数据的过程，并利用地理位置聚类方法来推断用户的兴趣点。这项研究的主要发现集中在这种现象在普遍性和严重性方面的程度；我们发现，超过85%的用户设备正在泄漏位置数据，从相对稀疏的泄漏指标得出的用户兴趣点暴露率约为61%。",
        "title_zh": "基于Android的移动设备互联网流量中的位置数据泄露分析",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/raid/raid2019.html",
        "conf_title": "22nd RAID 2019: Beijing, China",
        "conf_url": "https://www.usenix.org/conference/raid2019",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/raid2019/presentation/diao",
        "title": "Kindness is a Risky Business: On the Usage of the Accessibility APIs in Android",
        "authors": "Wenrui Diao, Yue Zhang, Li Zhang, Zhou Li, Fenghao Xu, Xiaorui Pan, Xiangyu Liu, Jian Weng, Kehuan Zhang, XiaoFeng Wang",
        "abstract": "Wenrui Diao∗†, Yue Zhang‡, Li Zhang‡, Zhou Li§, Fenghao Xu¶, Xiaorui Pan‖, Xiangyu Liu\\, Jian Weng‡, Kehuan Zhang¶, and XiaoFeng Wang‖ ∗Key Laboratory of Cryptologic Technology and Information Security, Ministry of Education, Shandong University, diaowenrui@sdu.edu.cn †School of Cyber Science and Technology, Shandong University ‡Jinan University, {zyueinfosec, zhanglikernel, cryptjweng}@gmail.com §University of California, Irvine, zhou.li@uci.edu ¶The Chinese University of Hong Kong, {xf016, khzhang}@ie.cuhk.edu.hk ‖Indiana University Bloomington, xiaopan@umail.iu.edu, xw7@indiana.edu \\Alibaba Inc., eason.lxy@alibaba-inc.com Abstract",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "刁文瑞、张岳、张李、周力、徐逢浩、潘晓瑞、刘翔宇、翁建、张克欢、王晓峰密码技术与信息安全教育部重点实验室、山东大学、山东大学网络科学与技术学院、济南大学、加州大学、欧文分校、香港中文大学、",
        "title_zh": "善良是一件冒险的事情:Android中易访问API的使用",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/raid/raid2019.html",
        "conf_title": "22nd RAID 2019: Beijing, China",
        "conf_url": "https://www.usenix.org/conference/raid2019",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/raid2019/presentation/duan",
        "title": "Automatic Generation of Non-intrusive Updates for Third-Party Libraries in Android Applications",
        "authors": "Yue Duan, Lian Gao, Jie Hu, Heng Yin",
        "abstract": "Third-Party libraries, which are ubiquitous in Android apps, have exposed great security threats to end users as they rarely get timely updates from the app developers, leaving many security vulnerabilities unpatched. This issue is due to the fact that manually updating libraries can be technically nontrivial and time-consuming for app developers. In this paper, we propose a technique that performs automatic generation of non-intrusive updates for third-party libraries in Android apps. Given an Android app with an outdated library and a newer version of the library, we automatically update the old library in a way that is guaranteed to be fully backward compatible and imposes zero impact to the library’s interactions with other components. To understand the potential impact of code changes, we propose a novel Value-sensitive Differential Slicing algorithm that leverages the diffing information between two versions of a library. The new slicing algorithm greatly reduces the over-conservativeness of the traditional slicing while still preserving the soundness with respect to update generation. We have implemented a prototype called LIBBANDAID. We further evaluated its efficacy on 9 popular libraries with 173 security commits across 83 different versions and 100 real-world open-source apps. The experimental results show that LIBBANDAID can achieve a high average successful updating rate of 80.6% for security vulnerabilities and an even higher rate of 94.07% when further combined with potentially patchable vulnerabilities.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android应用中普遍存在的第三方库给最终用户带来了巨大的安全威胁，因为它们很少从应用开发者那里获得及时的更新，导致许多安全漏洞没有得到修补。这个问题是由于手动更新库对于应用程序开发人员来说在技术上是不简单且耗时的。在本文中，我们提出了一种在Android应用中为第三方库自动生成非侵入式更新的技术。给定一个带有过时库和较新版本库的Android应用程序，我们会自动更新旧库，保证完全向后兼容，并且对库与其他组件的交互没有影响。为了理解代码变化的潜在影响，我们提出了一种新的值敏感差分切片算法，该算法利用了库的两个版本之间的差异信息。新的切片算法大大降低了传统切片的过度保守性，同时仍然保持了更新生成的合理性。我们已经实现了一个名为LIBBANDAID的原型。我们进一步评估了它在9个流行库上的功效，在83个不同版本和100个真实开源应用上进行了173次安全提交。实验结果表明，LIBBANDAID对安全漏洞的平均成功更新率高达80.6%，当进一步结合潜在的可修补漏洞时，平均成功更新率更高，达到94.07%。",
        "title_zh": "自动生成Android应用程序中第三方库的非侵入式更新",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/raid/raid2019.html",
        "conf_title": "22nd RAID 2019: Beijing, China",
        "conf_url": "https://www.usenix.org/conference/raid2019",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/raid2019/presentation/nisi",
        "title": "Exploring Syscall-Based Semantics Reconstruction of Android Applications",
        "authors": "Dario Nisi, Antonio Bianchi, Yanick Fratantonio",
        "abstract": "Within the realm of program analysis, dynamic analysis approaches are at the foundation of many frameworks. In the context of Android security, the vast majority of existing frameworks perform API-level tracing (i.e., they aim at obtaining the trace of the APIs invoked by a given app), and use this information to determine whether the app under analysis contains unwanted or malicious functionality. However, previous works have shown that these API-level tracing and instrumentation mechanisms can be easily evaded, regardless of their specific implementation details. An alternative to API-level tracing is syscall-level tracing. This approach works at a lower level and it extracts the sequence of syscalls invoked by a given app: the advantage is that this approach can be implemented in kernel space and, thus, it cannot be evaded and it can be very challenging, if not outright impossible, to be detected by code running in user space. However, while this approach offers more security guarantees, it is affected by a significant limitation: most of the semantics of the app’s behavior is lost. These syscalls are in fact low-level and do not carry as much information as the highly semantics-rich Android APIs. In other words, there is a significant semantic gap. This paper presents the first exploration of how much it would take to bridge this gap and how challenging this endeavor would be. We propose an approach, an analysis framework, and a pipeline to gain insights into the peculiarities of this problem and we show that it is much more challenging than what previously thought.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "在程序分析领域，动态分析方法是许多框架的基础。在Android安全的背景下，绝大多数现有框架执行API级跟踪(即，它们旨在获得由给定应用调用的API的跟踪)，并使用该信息来确定被分析的应用是否包含不想要的或恶意的功能。然而，以前的工作表明，这些API级的跟踪和插装机制可以很容易地被规避，而不管它们的具体实现细节。API级跟踪的替代方法是系统调用级跟踪。这种方法在较低的级别上工作，它提取给定应用程序调用的系统调用序列:优点是这种方法可以在内核空间中实现，因此它不能被规避，并且如果不是完全不可能的话，它可能非常具有挑战性，能够被运行在用户空间中的代码检测到。然而，虽然这种方法提供了更多的安全保证，但它受到一个重大限制的影响:应用程序行为的大部分语义都丢失了。这些系统调用实际上是低级的，不像语义丰富的Android APIs那样携带那么多信息。换句话说，有一个明显的语义鸿沟。本文首次探讨了弥合这一差距需要多少成本，以及这一努力的挑战性。我们提出了一种方法、一个分析框架和一个管道来深入了解这个问题的特殊性，我们表明这比以前认为的更具挑战性。",
        "title_zh": "探索基于Syscall的Android应用语义重构",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/raid/raid2019.html",
        "conf_title": "22nd RAID 2019: Beijing, China",
        "conf_url": "https://www.usenix.org/conference/raid2019",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/raid2019/presentation/yuan",
        "title": "Towards Large-Scale Hunting for Android Negative-Day Malware",
        "authors": "Lun-Pin Yuan, Wenjun Hu, Ting Yu, Peng Liu, Sencun Zhu",
        "abstract": "Android malware writers often utilize online malware scanners to check how well their malware can evade detection, and indeed we can find malware scan reports that were generated before the major outbreaks of such malware. If we could identify in-development malware before malware deployment, we would have developed effective defense mechanisms to prevent malware from causing devastating consequences. To this end, we propose Lshand to discover undiscovered malware before day zero, which we refer to as negative-day malware. The challenge includes scalability and the fact that malware writers would apply detection evasion techniques and submission anonymization techniques. Our approach is based on the observation that malware development is a continuous process and thus malware variants inevitably will share certain characteristics throughout its development process. Accordingly, Lshand clusters scan reports based on selective features and then performs further analysis on those seemingly benign apps that share similarity with malware variants. We implemented and evaluated Lshand with submissions to VirusTotal. Our results show that Lshand is capable of hunting down undiscovered malware in a large scale, and our manual analysis and a third-party scanner have confirmed our negative-day malware findings to be malware or grayware.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android恶意软件作者经常利用在线恶意软件扫描器来检查他们的恶意软件可以逃避检测的程度，事实上我们可以找到在此类恶意软件大规模爆发之前生成的恶意软件扫描报告。如果我们能够在恶意软件部署之前识别出开发中的恶意软件，我们就会开发出有效的防御机制来防止恶意软件造成毁灭性的后果。为此，我们建议Lshand在零日之前发现未被发现的恶意软件，我们称之为负日恶意软件。挑战包括可扩展性和恶意软件作者会应用检测规避技术和提交匿名化技术的事实。我们的方法基于恶意软件开发是一个连续过程的观察，因此恶意软件变体不可避免地将在其整个开发过程中共享某些特征。相应地，Lshand集群基于选择性特征扫描报告，然后对那些与恶意软件变种具有相似性的看似良性的应用程序执行进一步分析。我们用提交给VirusTotal的文件实现并评估了Lshand。我们的结果表明，Lshand能够在大范围内追捕未发现的恶意软件，我们的手动分析和第三方扫描程序已确认我们的负面恶意软件调查结果是恶意软件或灰色软件。",
        "title_zh": "大规模搜寻Android负面日恶意软件",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/raid/raid2019.html",
        "conf_title": "22nd RAID 2019: Beijing, China",
        "conf_url": "https://www.usenix.org/conference/raid2019",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://www.usenix.org/conference/raid2019/presentation/ali-gombe",
        "title": "DroidScraper: A Tool for Android In-Memory Object Recovery and Reconstruction",
        "authors": "Aisha I. Ali-Gombe, Sneha Sudhakaran, Andrew Case, Golden G. Richard III",
        "abstract": "There is a growing need for post-mortem analysis in forensics investigations involving mobile devices, particularly when application-specific behaviors must be analyzed. This is especially true for architectures such as Android, where traditional kernel-level memory analysis frameworks such as Volatility [9] face serious challenges recovering and providing context for user-space artifacts. In this research work, we developed an app-agnostic userland memory analysis technique that targets the new Android Runtime (ART). Leveraging its latest memory allocation algorithms, called region-based memory management, we develop a system called DroidScraper that recovers vital runtime data structures for applications by enumerating and reconstructing allocated objects from a process memory image. The result of our evaluation shows DroidScraper can recover and decode nearly 90% of all live objects in all allocated memory regions.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "在涉及移动设备的取证调查中，越来越需要事后分析，尤其是在必须分析特定于应用的行为时。对于Android等架构来说尤其如此，在这些架构中，Volatility [9]等传统内核级内存分析框架面临着恢复和提供用户空间工件上下文的严峻挑战。在这项研究工作中，我们开发了一种针对新Android运行时(ART)的与应用无关的用户内存分析技术。利用其最新的内存分配算法，称为基于区域的内存管理，我们开发了一个名为DroidScraper的系统，该系统通过枚举和重建进程内存映像中的分配对象来恢复应用程序的重要运行时数据结构。我们的评估结果显示，DroidScraper可以恢复和解码所有分配的内存区域中近90%的所有活动对象。",
        "title_zh": "DroidScraper:Android内存对象恢复和重建工具",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/raid/raid2019.html",
        "conf_title": "22nd RAID 2019: Beijing, China",
        "conf_url": "https://www.usenix.org/conference/raid2019",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-030-00470-5_1",
        "title": "Proteus: Detecting Android Emulators from Instruction-Level Profiles",
        "authors": "Onur Sahin, Ayse K. Coskun, Manuel Egele",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "Proteus:从指令级配置文件中检测Android模拟器",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/raid/raid2018.html",
        "conf_title": "21st RAID 2018: Heraklion, Crete, Greece",
        "conf_url": "https://doi.org/10.1007/978-3-030-00470-5",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-26362-5_17",
        "title": "AppSpear: Bytecode Decrypting and DEX Reassembling for Packed Android Malware",
        "authors": "Wenbo Yang, Yuanyuan Zhang, Juanru Li, Junliang Shu, Bodong Li, Wenjun Hu, Dawu Gu",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "AppSpear:打包Android恶意软件的字节码解密和DEX重组",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/raid/raid2015.html",
        "conf_title": "18. RAID 2015: Kyoto, Japan",
        "conf_url": "https://doi.org/10.1007/978-3-319-26362-5",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-45719-2_16",
        "title": "Small Changes, Big Changes: An Updated View on the Android Permission System",
        "authors": "Yury Zhauniarovich, Olga Gadyatskaya",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "小变化，大变化:Android权限系统的更新视图",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/raid/raid2016.html",
        "conf_title": "19. RAID 2016: Paris, France",
        "conf_url": "https://doi.org/10.1007/978-3-319-45719-2",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-45719-2_21",
        "title": "Blender: Self-randomizing Address Space Layout for Android Apps",
        "authors": "Mingshen Sun, John C. S. Lui, Yajin Zhou",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "blender:Android应用的自随机化地址空间布局",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/raid/raid2016.html",
        "conf_title": "19. RAID 2016: Paris, France",
        "conf_url": "https://doi.org/10.1007/978-3-319-45719-2",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-66332-6_7",
        "title": "Precisely and Scalably Vetting JavaScript Bridge in Android Hybrid Apps",
        "authors": "Guangliang Yang, Abner Mendoza, Jialong Zhang, Guofei Gu",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "在Android混合应用中精确和可扩展地检查JavaScript桥",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/raid/raid2017.html",
        "conf_title": "20. RAID 2017: Atlanta, GA, USA",
        "conf_url": "https://doi.org/10.1007/978-3-319-66332-6",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-66332-6_9",
        "title": "Android Malware Clustering Through Malicious Payload Mining",
        "authors": "Yuping Li, Jiyong Jang, Xin Hu, Xinming Ou",
        "abstract": "",
        "files": {
            "openAccessPdf": "http://arxiv.org/pdf/1707.04795"
        },
        "abstract_zh": "",
        "title_zh": "通过恶意负载挖掘进行Android恶意软件聚类",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/raid/raid2017.html",
        "conf_title": "20. RAID 2017: Atlanta, GA, USA",
        "conf_url": "https://doi.org/10.1007/978-3-319-66332-6",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-66332-6_15",
        "title": "Trapped by the UI: The Android Case",
        "authors": "Efthimios Alepis, Constantinos Patsakis",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "被用户界面困住:安卓案例",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/raid/raid2017.html",
        "conf_title": "20. RAID 2017: Atlanta, GA, USA",
        "conf_url": "https://doi.org/10.1007/978-3-319-66332-6",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/EuroSPW54576.2021.00029",
        "title": "Cybercrime Specialization: An Exposé of a Malicious Android Obfuscation-as-a-Service",
        "authors": "Vít Sembera, Masarah Paquet-Clouston, Sebastián García, María José Erquiaga",
        "abstract": "Malware authors constantly obfuscate their files and defenders regularly develop new techniques to detect them. Given this cat-and-mouse game, specialized obfuscation services have appeared in the cybercrime industry. These services allow malware authors to obfuscate their code for a fee. This study investigates an automated obfuscation-as-a-service platform for Android applications and yields unique insights on the technical difficulties and business reality of those behind such a specialized service. The service investigated was found to be average in quality, mainly using known obfuscation techniques, and generating obfuscated applications that were still detected by anti-viruses. It had a small clientele of large-scale attackers who used the service to decrease anti-virus detections of highly malicious applications, thus increasing their chances of compromising devices. Depending on the price bundles considered, operators offering the service were estimated to have made a minimum revenue ranging from USD 5,100 (conservative) to USD 61,160 (optimistic) for a six-month operation. This study illustrates that even though obfuscation-as-a-service is a market niche, taking advantage of the value added from this specialization is not effortless nor easily accessible to everyone involved in cybercrime.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "恶意软件作者不断混淆他们的文件，防御者定期开发新技术来检测它们。鉴于这种猫捉老鼠的游戏，专门的混淆服务已经出现在网络犯罪行业。这些服务允许恶意软件作者付费模糊他们的代码。这项研究调查了Android应用程序的自动化混淆即服务平台，并对这种专业化服务背后的技术困难和业务现实产生了独特的见解。被调查的服务质量一般，主要使用已知的混淆技术，生成的混淆应用程序仍能被反病毒软件检测到。它有一小部分大规模攻击者的客户，他们使用该服务来减少高度恶意应用程序的反病毒检测，从而增加他们危害设备的机会。根据所考虑的价格组合，提供服务的运营商估计六个月运营的最低收入在5，100美元(保守估计)到61，160美元(乐观估计)之间。这项研究表明，尽管模糊处理即服务是一个利基市场，但利用这种专业化带来的附加值对参与网络犯罪的每个人来说并不容易，也不容易。",
        "title_zh": "网络犯罪特殊化:恶意Android混淆即服务的曝光",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/eurosp/eurosp2021w.html",
        "conf_title": "EuroS&P 2021: Vienna, Austria - Workshops",
        "conf_url": "https://doi.org/10.1109/EuroSPW54576.2021",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/EuroSP51992.2021.00038",
        "title": "AppJitsu: Investigating the Resiliency of Android Applications",
        "authors": "Onur Zungur, Antonio Bianchi, Gianluca Stringhini, Manuel Egele",
        "abstract": "The Android platform gives mobile device users the opportunity to extend the capabilities of their systems by installing developer-authored apps. Companies leverage this capability to reach their customers and conduct business operations such as financial transactions. End-users can obtain custom Android applications (apps) from the Google Play, some of which are security-sensitive due to the nature of the data that they handle, such as apps from the FINANCE category. Although there are recommendations and standardized guidelines for secure app development with various self-defense techniques, the adoption of such methods is not mandatory and is left to the discretion of developers. Unfortunately, malicious actors can tamper with the app runtime environment and then exploit the attack vectors which arise from the tampering, such as executing foreign code with elevated privileges on the mobile platform. In this paper, we present AppJITSU, a dynamic app analysis framework that evaluates the resiliency of security-critical apps. We exercise the most popular 455 financial apps in attack-specific hostile environments to demonstrate the current state of resiliency against known tampering methods. Our results indicate that 25.05% of the tested apps have no resiliency against any common hostile methods or tools, whereas only 10.77% employed all defensive methods.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android平台让移动设备用户有机会通过安装开发人员创作的应用程序来扩展他们系统的功能。公司利用这种能力来接触他们的客户并进行业务操作，如金融交易。最终用户可以从Google Play获得定制的Android应用程序(应用程序)，其中一些应用程序由于其处理的数据的性质而具有安全敏感性，例如金融类别的应用程序。尽管存在使用各种自我防御技术进行安全应用程序开发的建议和标准化指南，但这些方法的采用并不是强制性的，而是由开发人员自行决定。不幸的是，恶意行为者可以篡改应用运行时环境，然后利用篡改产生的攻击媒介，例如在移动平台上以提升的权限执行外来代码。在本文中，我们介绍了AppJITSU，这是一个动态应用分析框架，用于评估安全关键型应用的弹性。我们在特定攻击的敌对环境中测试了最受欢迎的455款金融应用程序，以展示当前抵御已知篡改方法的能力。我们的结果表明，25.05%的测试应用程序无法抵御任何常见的恶意方法或工具，而只有10.77%的应用程序采用了所有防御方法。",
        "title_zh": "AppJitsu:调查Android应用程序的弹性",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/eurosp/eurosp2021.html",
        "conf_title": "EuroS&P 2021: Vienna, Austria",
        "conf_url": "https://doi.org/10.1109/EuroSP51992.2021",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/EuroSP51992.2021.00041",
        "title": "Nonce@Once: A Single-Trace EM Side Channel Attack on Several Constant-Time Elliptic Curve Implementations in Mobile Platforms",
        "authors": "Monjur Alam, Baki Berkay Yilmaz, Frank Werner, Niels Samwel, Alenka G. Zajic, Daniel Genkin, Yuval Yarom, Milos Prvulovic",
        "abstract": "We present the first side-channel attack on full-fledged smartphones that recovers the elliptic curve secret scalar from the electromagnetic signal that corresponds to a single scalar-by-point multiplication in current versions of Libgcrypt, OpenSSL, HACL* and curve25519-donna. To avoid leaking information via side channels, these implementations follow the recommendations of RFC 7748 and use a constant-time conditional swap operation. Our attack targets signal differences created by systematic changes in operand values during this conditional swap operation. We deploy the attack, using low-cost equipment (<$800), against two Android-based mobile phones and against a Linux-based IoT development board. We repeat the attack 100 times, each time with a different scalar, on each device. In all of the implementations considered in this work, our attack successfully recovers the full secret key within seconds. To mitigate the attack we suggest randomizing the exclusive-or mask in the conditional swap operation. We show that this countermeasure is effective in preventing this and similar attacks.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "我们提出了对成熟智能手机的第一个侧信道攻击，该攻击从电磁信号中恢复椭圆曲线秘密标量，该电磁信号对应于当前版本的Libgcrypt、OpenSSL、HACL*和curve25519-donna中的单个标量逐点乘法。为了避免通过旁路泄漏信息，这些实现遵循RFC 7748的建议，并使用恒定时间条件交换操作。我们的攻击目标是在这种条件交换操作中，由操作数值的系统变化产生的信号差异。我们使用低成本设备(< 800美元)，针对两部基于Android的手机和一个基于Linux的物联网开发板部署了攻击。我们在每台设备上重复攻击100次，每次使用不同的标量。在本文考虑的所有实现中，我们的攻击成功地在几秒钟内恢复了完整的密钥。为了减轻攻击，我们建议在条件交换操作中随机化异或掩码。我们证明了这种对策在防止这种攻击和类似攻击方面是有效的。",
        "title_zh": "Nonce@Once:对移动平台中几个常数时间椭圆曲线实现的单迹EM旁道攻击",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/eurosp/eurosp2021.html",
        "conf_title": "EuroS&P 2021: Vienna, Austria",
        "conf_url": "https://doi.org/10.1109/EuroSP51992.2021",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/EuroSP51992.2021.00044",
        "title": "ANDRuspex: Leveraging Graph Representation Learning to Predict Harmful App Installations on Mobile Devices",
        "authors": "Yun Shen, Gianluca Stringhini",
        "abstract": "Android's security model severely limits the capabilities of anti-malware software. Unlike commodity anti-malware solutions on desktop systems, their Android counterparts run as sandboxed applications without root privileges and are limited by Android's permission system. As such, PHAs on Android are usually willingly installed by victims, as they come disguised as useful applications with hidden malicious functionality, and are encountered on mobile app stores as suggestions based on the apps that a user previously installed. Users with similar interests and app installation history are likely to be exposed and to decide to install the same PHA. This observation gives us the opportunity to develop predictive approaches that can warn the user about which PHAs they will encounter and potentially be tempted to install in the near future. These approaches could then be used to complement commodity anti-malware solutions, which are focused on post-fact detection, closing the window of opportunity that existing solutions suffer from. In this paper we develop ANDRuspex, a system based on graph representation learning, allowing us to learn latent relationships between user devices and PHAs and leverage them for prediction. We test ANDRuspex on a real world dataset of PHA installations collected by a security company, and show that our approach achieves very high prediction results (up to 0.994 TPR at 0.0001 FPR), while at the same time outperforming alternative baseline methods. We also demonstrate that ANDRuspex is robust and its runtime performance is acceptable for a real world deployment.",
        "files": {
            "openAccessPdf": "http://arxiv.org/pdf/2103.05476"
        },
        "abstract_zh": "Android的安全模式严重限制了反恶意软件的能力。与桌面系统上的商用反恶意软件解决方案不同，它们的Android对手是作为沙盒应用程序运行的，没有root权限，并且受到Android权限系统的限制。因此，Android上的PHA通常是受害者自愿安装的，因为它们伪装成具有隐藏恶意功能的有用应用程序，并在移动应用程序商店中作为基于用户先前安装的应用程序的建议出现。具有相似兴趣和应用安装历史的用户很可能会接触到并决定安装相同的PHA。这一观察为我们提供了开发预测方法的机会，该方法可以警告用户他们将会遇到哪些PHA，以及在不久的将来可能会安装哪些PHA。然后，这些方法可以用于补充商业反恶意软件解决方案，这些解决方案侧重于事后检测，关闭了现有解决方案遭受的机会之窗。在本文中，我们开发了ANDRuspex，这是一个基于图形表示学习的系统，允许我们学习用户设备和PHA之间的潜在关系，并利用它们进行预测。我们在一家安全公司收集的PHA安装的真实世界数据集上测试ANDRuspex，并显示我们的方法实现了非常高的预测结果(在0.0001 FPR时高达0.994 TPR)，同时优于替代基线方法。我们还证明了ANDRuspex是健壮的，并且它的运行时性能对于实际部署来说是可以接受的。",
        "title_zh": "ANDRuspex:利用图形表示学习来预测移动设备上有害应用的安装",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/eurosp/eurosp2021.html",
        "conf_title": "EuroS&P 2021: Vienna, Austria",
        "conf_url": "https://doi.org/10.1109/EuroSP51992.2021",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/EuroSP51992.2021.00053",
        "title": "Poster: DyPolDroid: User-Centered Counter-Policies Against Android Permission-Abuse Attacks",
        "authors": "Matthew Hill, Carlos E. Rubio-Medrano, Luis Claramunt, Jaejong Baek, Gail-Joon Ahn",
        "abstract": "Android applications are extremely popular, as they are used for banking, social media, e-commerce, etc. However, several malicious applications have recently carried out data leaks and spurious credit card charges by abusing the Android Permissions granted initially to them by unaware users in good faith. To alleviate this pressing concern, we present DyPolDroid, a dynamic, semi-automated security framework that builds upon Android Enterprise, a device-management framework for organizations, allowing for users to design and enforce custom Counter-Policies, effectively protecting against such malicious applications without requiring advanced security and/or technical expertise.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android应用程序非常受欢迎，因为它们用于银行、社交媒体、电子商务等。然而，一些恶意应用程序最近通过滥用最初由不知情的用户善意授予他们的Android权限，进行了数据泄露和虚假的信用卡收费。为了缓解这种迫切的担忧，我们提出了DyPolDroid，这是一种动态的半自动安全框架，构建于Android Enterprise之上，Android Enterprise是一种面向组织的设备管理框架，允许用户设计和实施定制的应对策略，有效地防范此类恶意应用程序，而无需高级安全和/或技术专业知识。",
        "title_zh": "海报:DyPolDroid:针对Android权限滥用攻击的以用户为中心的对策",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/eurosp/eurosp2021.html",
        "conf_title": "EuroS&P 2021: Vienna, Austria",
        "conf_url": "https://doi.org/10.1109/EuroSP51992.2021",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/EuroSPW51379.2020.00023",
        "title": "A Cross-Platform Evaluation of Privacy Notices and Tracking Practices",
        "authors": "Maryam Mehrnezhad",
        "abstract": "As online services diversify, protecting user privacy becomes more complicated since user tracking as well as presented privacy options vary across platforms. We conduct a cross-platform evaluation on three different platforms: PC browser, mobile browser, and mobile apps, which is the first study of its kind. We study the tracking behaviours, privacy notice presentation, user control options, and further privacy enhancing technologies. Our study considers the top 116 EU websites and their corresponding Android apps (available for 101 out of 116 services). The results show that the privacy consent banner is presented to the user in various and inconsistent ways across websites, browsers, and mobile apps, where the majority of these consent notices do not comply with the GDPR. In addition, most of these services start tracking the user right after the website is loaded and the app starts running, without waiting for the user to interact with the privacy consent. This behaviour can be considered not respectful to the user and is, indeed, not compliant with current regulations.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "随着在线服务的多样化，保护用户隐私变得更加复杂，因为用户跟踪以及呈现的隐私选项会因平台而异。我们在三个不同的平台上进行跨平台评估:PC浏览器、移动浏览器和移动应用程序，这是同类研究中的首次。我们研究跟踪行为、隐私声明呈现、用户控制选项和进一步的隐私增强技术。我们的研究考虑了排名前116位的欧盟网站及其相应的Android应用程序(116项服务中有101项可用)。结果显示，隐私同意横幅在网站、浏览器和移动应用程序中以各种不一致的方式呈现给用户，其中大多数同意通知不符合GDPR。此外，大多数这些服务在网站加载和应用程序开始运行后就开始跟踪用户，而无需等待用户与隐私同意书进行交互。这种行为可以被认为是对用户的不尊重，并且确实不符合当前的规定。",
        "title_zh": "隐私声明和跟踪实践的跨平台评估",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/eurosp/eurosp2020w.html",
        "conf_title": "EuroS&P 2020: Genoa, Italy - Workshops",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/9229477/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/EuroSPW51379.2020.00089",
        "title": "Abusing Android Runtime for Application Obfuscation",
        "authors": "Pierre Graux, Jean-François Lalande, Pierre Wilke, Valérie Viet Triem Tong",
        "abstract": "Studying Android obfuscation techniques is an essential task for understanding and analyzing malicious applications. Obfuscation techniques have already been extensively studied for market applications but never for precompiled applications used in smartphone firmwares. In this paper, we describe two new obfuscation techniques that take advantage of the duality between assembly and Dalvik bytecode and, as far as we know, have never been described before. We also propose detection methods for these obfuscation techniques. We apply them to vendor firmwares and market applications in order to evaluate their usage in the wild. We found that even if they do not seem to be already used in the wild, they are fully practical.",
        "files": {
            "openAccessPdf": "https://hal-centralesupelec.archives-ouvertes.fr/hal-02877815/file/bfo-camera.pdf"
        },
        "abstract_zh": "研究Android混淆技术是理解和分析恶意应用程序的基本任务。混淆技术已经在市场应用中得到了广泛的研究，但从未用于智能手机固件中的预编译应用。在本文中，我们描述了两种新的混淆技术，这两种技术利用了汇编和Dalvik字节码之间的二元性，据我们所知，这两种技术以前从未被描述过。我们还提出了这些混淆技术的检测方法。我们将它们应用于供应商固件和市场应用程序，以评估它们在野外的使用情况。我们发现，即使它们似乎没有在野外使用过，它们也是完全实用的。",
        "title_zh": "滥用Android运行时进行应用混淆",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/eurosp/eurosp2020w.html",
        "conf_title": "EuroS&P 2020: Genoa, Italy - Workshops",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/9229477/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/EuroSPW51379.2020.00090",
        "title": "Revealing Similarities in Android Malware by Dissecting their Methods",
        "authors": "Michele Pasetto, Niccolò Marastoni, Mila Dalla Preda",
        "abstract": "One of the most challenging problems in the fight against Android malware is finding a way to classify them according to their behavior, in order to be able to utilize previously gathered knowledge in analysis and prevention.In this paper we introduce a novel technique that discovers similarities between Android malware samples by comparing fragments of executed traces (strands) generated from their most suspect methods. This way we can accurately pinpoint which (possibly) malicious behaviors are shared between these different samples, allowing for easier analysis and classification.We implement this approach in a tool, StrAndroid, that we evaluate on a few dataset of malware and ransomware samples, comparing its results to an existing similarity tool.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "在对抗Android恶意软件的斗争中，最具挑战性的问题之一是找到一种根据它们的行为对它们进行分类的方法，以便能够在分析和预防中利用以前收集的知识。在本文中，我们介绍了一种新的技术，通过比较从最可疑的方法生成的已执行跟踪(链)的片段来发现Android恶意软件样本之间的相似性。通过这种方式，我们可以准确地查明这些不同样本之间共享了哪些(可能的)恶意行为，从而更容易进行分析和分类。我们在工具StrAndroid中实现了这种方法，我们在几个恶意软件和勒索软件样本数据集上进行评估，将其结果与现有的相似性工具进行比较。",
        "title_zh": "通过剖析Android恶意软件的方法揭示其相似性",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/eurosp/eurosp2020w.html",
        "conf_title": "EuroS&P 2020: Genoa, Italy - Workshops",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/9229477/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/EuroSPW55150.2022.00012",
        "title": "Are Our Animals Leaking Information About Us? Security and Privacy Evaluation of Animal-related Apps",
        "authors": "Scott Harper, Maryam Mehrnezhad, Matthew Leach",
        "abstract": "Novel technologies are increasingly being applied to farm and companion animals, and are proving popular with those who keep animals. Although this rapidly growing industry is introducing cybersecurity risks to both animals and their owners, it remains an under-researched field. In this study, we have identified multiple security and privacy vulnerabilities by evaluating 40 popular Android apps for farm and companion animals. We demonstrated that several of these applications are putting their users at risk by exposing their login details. The apps also perform poorly in terms of protecting the users' privacy with over half of the apps communicating with a tracker before the user can consent, violating the General Data Protection Regulation (GDPR). Accordingly, only 4 of the apps explicitly informed the user of their privacy policy and obtain consent. Our findings are important since they highlight the poor privacy practices present in animal-based applications, as well as the easily preventable security vulnerabilities that were reported to the companies responsible.",
        "files": {
            "openAccessPdf": "https://eprints.ncl.ac.uk/fulltext.aspx?url=282784/2B3E6C06-5223-4A1A-9EBA-5AB04298B4D7.pdf&pub_id=282784"
        },
        "abstract_zh": "新技术正越来越多地应用于农场和伴侣动物，并受到那些饲养动物的人的欢迎。尽管这个快速增长的行业给动物和它们的主人都带来了网络安全风险，但它仍然是一个研究不足的领域。在这项研究中，我们通过评估40款用于农场和宠物的流行Android应用程序，发现了多个安全和隐私漏洞。我们证明了这些应用程序中有几个暴露了用户的登录信息，从而将用户置于风险之中。这些应用在保护用户隐私方面也表现不佳，超过一半的应用在用户同意前与追踪器通信，违反了一般数据保护规定(GDPR)。因此，只有4个应用明确告知用户他们的隐私政策并获得同意。我们的发现很重要，因为它们突出了动物应用中存在的不良隐私做法，以及向负责公司报告的容易预防的安全漏洞。",
        "title_zh": "我们的动物泄露了我们的信息吗？动物相关应用的安全性和隐私评估",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/eurosp/eurosp2022w.html",
        "conf_title": "EuroS&P 2022: Genoa, Italy - Workshops",
        "conf_url": "https://doi.org/10.1109/EuroSPW55150.2022",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/EuroSPW55150.2022.00024",
        "title": "Reliability of IP Geolocation Services for Assessing the Compliance of International Data Transfers",
        "authors": "Miguel Cozar, David Rodriguez, José M. del Álamo, Danny S. Guamán",
        "abstract": "The General Data Protection Regulation sets strict requirements to allow personal data transfers outside the European Economic Area. Thus, knowing the geographical destination of data transfers is becoming increasingly important for different stakeholders such as data controllers that may become data exporters or data protection authorities who need to assess data processing compliance. To this end, several online databases and services provide geolocation data for IP addresses with different accuracy and reliability levels. This paper analyzes ten different IP geolocation services to understand their reliability against known ground truth and applies them to further assess whether 767 Android apps indeed carry out international personal data transfers. Our results show great discrepancy depending on the service used, thus demonstrating the uncertainty data controllers and supervisory authorities face to assess these data flows.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "《一般数据保护条例》规定了严格的要求，允许将个人数据转移到欧洲经济区之外。因此，了解数据传输的地理目的地对于不同的利益相关者变得越来越重要，例如可能成为数据导出者的数据控制者或需要评估数据处理合规性的数据保护机构。为此，一些在线数据库和服务以不同的准确度和可靠性水平为IP地址提供地理定位数据。本文分析了十种不同的IP地理定位服务，以了解它们相对于已知事实的可靠性，并应用它们来进一步评估767个Android应用程序是否确实进行国际个人数据传输。我们的结果显示了很大的差异，取决于所使用的服务，从而证明了数据控制者和监管当局在评估这些数据流时所面临的不确定性。",
        "title_zh": "评估国际数据传输合规性的IP地理定位服务的可靠性",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/eurosp/eurosp2022w.html",
        "conf_title": "EuroS&P 2022: Genoa, Italy - Workshops",
        "conf_url": "https://doi.org/10.1109/EuroSPW55150.2022",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/EuroSP53844.2022.00042",
        "title": "SAUSAGE: Security Analysis of Unix domain Socket usAGE in Android",
        "authors": "Mounir Elgharabawy, Blas Kojusner, Mohammad Mannan, Kevin R. B. Butler, Byron Williams, Amr M. Youssef",
        "abstract": "The Android operating system is currently the most popular mobile operating system in the world. Android is based on Linux and therefore inherits its features including its Inter-Process Communication (IPC) mechanisms. These mechanisms are used by processes to communicate with one another and are extensively used in Android. While Android-specific IPC mechanisms have been studied extensively, Unix domain sockets have not been examined comprehensively, despite playing a crucial role in the IPC of highly privileged system daemons. In this paper, we propose Sausage, an efficient novel static analysis framework to study the security properties of these sockets. Sausage considers access control policies implemented in the Android security model, as well as authentication checks implemented by the daemon binaries. It is a fully static analysis framework, specifically designed to analyze Unix domain socket usage in Android system daemons, at scale. We use this framework to analyze 200 Android images across eight popular smartphone vendors spanning Android versions 7–9. As a result, we uncover multiple access control misconfigurations and insecure authentication checks. Our notable findings include a permission bypass in highly privileged Qualcomm system daemons and an unprotected socket that allows an untrusted app to set the scheduling priority of other processes running on the system, despite the implementation of mandatory SELinux policies. Ultimately, the results of our analysis are worrisome; all vendors except the Android Open Source Project (AOSP) have access control issues, allowing an untrusted app to communicate to highly privileged daemons through Unix domain sockets introduced by hardware manufacturer or vendor customization.",
        "files": {
            "openAccessPdf": "http://arxiv.org/pdf/2204.01516"
        },
        "abstract_zh": "Android操作系统是目前世界上最流行的移动操作系统。Android基于Linux，因此继承了它的特性，包括进程间通信(IPC)机制。这些机制被进程用来相互通信，在Android中被广泛使用。虽然Android特定的IPC机制已经得到了广泛的研究，但是Unix域套接字还没有得到全面的研究，尽管它在高特权系统守护进程的IPC中起着至关重要的作用。在本文中，我们提出了香肠，一个有效的新的静态分析框架来研究这些套接字的安全属性。香肠考虑了在Android安全模型中实现的访问控制策略，以及由守护程序二进制文件实现的认证检查。这是一个完全静态的分析框架，专门用于分析Android系统守护进程中Unix域套接字的使用情况。我们使用该框架分析了8家流行智能手机厂商的200张Android图片，涵盖Android 7-9版本。结果，我们发现了多个访问控制错误配置和不安全的身份验证检查。我们值得注意的发现包括高特权高通系统守护程序中的权限旁路，以及一个不受保护的套接字，该套接字允许不受信任的应用程序设置系统上运行的其他进程的调度优先级，尽管实施了强制SELinux策略。最终，我们的分析结果令人担忧；除Android开源项目(AOSP)之外的所有供应商都存在访问控制问题，允许不受信任的应用程序通过硬件制造商或供应商定制引入的Unix域套接字与高权限守护程序通信。",
        "title_zh": "香肠:Android中Unix域套接字使用的安全性分析",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/eurosp/eurosp2022.html",
        "conf_title": "EuroS&P 2022: Genoa, Italy",
        "conf_url": "https://doi.org/10.1109/EuroSP53844.2022",
        "keywords": [
            "AOSP",
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/EuroSPW.2019.00051",
        "title": "Geost Botnet. Operational Security Failures of a New Android Banking Threat",
        "authors": "Sebastián García, María José Erquiaga, Anna Shirokova, Carlos García Garino",
        "abstract": "Effective operational security is difficult to maintain due to an increase in the costs of work and a decrease in the performance of actions. This is true both for security analysts and malicious attackers. It is tedious, and errors are easy to make. This paper describes the rare discovery of a new Android banking botnet, named Geost, from the operational security failures of its botmaster. They made many mistakes, including using the illegal proxy network of the HtBot malware, not encrypting their Command and Control servers, re-using security services, trusting other attackers with less operational security, and not encrypting chat sessions. The Geost botnet has hundreds of malicious domains, thirteen IP addresses for C&C servers, approximately 800,000 victims in Russia, and potential access to several million Euros in the bank accounts of the victims. More importantly, the operational security mistakes lead to the discovery of members of an underground group that develop and maintain the C&C of Geost. It is seldom possible to glimpse into the decisions taken by the attackers due to failures in their operational security. This research presents the finding of a new Android banking botnet from operational security mistakes, creates an overview of the botnet operation, analyses the victims, and study the relationships with the discovered groups of developers.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "由于工作成本的增加和行动绩效的下降，有效的行动安全难以维持。对于安全分析师和恶意攻击者来说都是如此。这很乏味，而且很容易出错。本文描述了一个新的Android银行僵尸网络的罕见发现，命名为Geost，从其僵尸主机的操作安全故障。他们犯了许多错误，包括使用HtBot恶意软件的非法代理网络，没有加密他们的命令和控制服务器，重复使用安全服务，信任其他操作安全性较低的攻击者，以及没有加密聊天会话。Geost僵尸网络拥有数百个恶意域名、C&C服务器的13个IP地址、俄罗斯大约80万名受害者，以及受害者银行账户中数百万欧元的潜在访问权限。更重要的是，操作安全错误导致发现了一个开发和维护Geost C&C的地下组织成员。由于操作安全性方面的失败，很少能够窥见攻击者所做的决定。这项研究介绍了从操作安全错误中发现的新Android银行僵尸网络，概述了僵尸网络的操作，分析了受害者，并研究了与所发现的开发人员群体的关系。",
        "title_zh": "Geost僵尸网络。一个新的Android银行威胁的操作安全失败",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/eurosp/eurosp2019w.html",
        "conf_title": "EuroS&P 2019: Stockholm, Sweden - Workshops",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8790672/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/EuroSP.2019.00012",
        "title": "Up-To-Crash: Evaluating Third-Party Library Updatability on Android",
        "authors": "Jie Huang, Nataniel P. Borges Jr., Sven Bugiel, Michael Backes",
        "abstract": "Buggy and flawed third-party libraries increase their host app's attack surface and put the users' privacy at risk. To avert this risk, libraries have to be kept updated to their newest versions by the app developers that integrate them into their projects. Recent researches revealed that the prevalence of outdated third-party libraries in Android apps is indeed a rampant problem, but also suggested that there is a great opportunity for drop-in replacements of outdated libraries, which would not even require cooperation by the app developers to update the libraries. However, all those conclusions are based on static app analysis, which can only provide an abstract view. In this work, we extend the updatability analysis to the runtime of apps. We implement a solution to update third-party libraries with drop-in replacements by their newer versions. To verify the feasibility of this developer-independent update mechanism, we dynamically test 3,000 real world apps for 3 popular libraries (78 library versions) for runtime failures stemming from incompatible library updates. To investigate the updatability of libraries in-depth, exploration enhanced dynamic testing is adopted to monitor the runtime behaviors of 15 apps before and after library updating. From our test, we find that the prior reported updatability rate is under real conditions overestimated by a factor of 1.57-2.06. Through root cause analysis, we find that the underlying problems prohibiting easy updates are intricate, such as deprecated functions, changed data structures, or entangled dependencies between different libraries and even the host app. We think our results not only put a more realistic light on the library updatability problem in Android, but also provide valuable insights for future solutions that provide automatic library updates or that try to support the app developers in better maintaining their external dependencies.",
        "files": {
            "openAccessPdf": "https://ieeexplore.ieee.org/ielx7/8790377/8806708/08806753.pdf"
        },
        "abstract_zh": "漏洞百出的第三方库增加了其主机应用程序的攻击面，并将用户的隐私置于风险之中。为了避免这种风险，应用程序开发人员必须将库更新到最新版本，并将它们集成到他们的项目中。最近的研究表明，过时的第三方库在Android应用程序中的流行确实是一个猖獗的问题，但也表明存在一个很好的机会来替换过时的库，这甚至不需要应用程序开发者的合作来更新库。然而，所有这些结论都是基于静态应用程序分析，只能提供一个抽象的视图。在这项工作中，我们将可更新性分析扩展到应用程序的运行时。我们实现了一个解决方案，用第三方库的新版本来更新第三方库。为了验证这种独立于开发人员的更新机制的可行性，我们对3个流行库(78个库版本)的3，000个真实世界的应用程序进行了动态测试，以发现由不兼容的库更新引起的运行时故障。为了深入研究库的可更新性，采用exploration enhanced动态测试对15个应用在库更新前后的运行时行为进行了监测。从我们的测试中，我们发现先前报告的可更新率在真实条件下被高估了1.57-2.06倍。通过根本原因分析，我们发现阻碍轻松更新的潜在问题错综复杂，例如不推荐使用的功能、更改的数据结构，或者不同库甚至主机应用程序之间纠缠不清的依赖关系。我们认为，我们的结果不仅对Android中的库可更新性问题有了更现实的认识，而且为未来提供自动库更新或试图支持应用程序开发人员更好地维护外部依赖关系的解决方案提供了宝贵的见解。",
        "title_zh": "直到崩溃:评估Android上第三方库的可更新性",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/eurosp/eurosp2019.html",
        "conf_title": "EuroS&P 2019: Stockholm, Sweden",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8790377/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/EuroSP.2019.00014",
        "title": "DroidEvolver: Self-Evolving Android Malware Detection System",
        "authors": "Ke Xu, Yingjiu Li, Robert H. Deng, Kai Chen, Jiayun Xu",
        "abstract": "Given the frequent changes in the Android framework and the continuous evolution of Android malware, it is challenging to detect malware over time in an effective and scalable manner. To address this challenge, we propose DroidEvolver, an Android malware detection system that can automatically and continually update itself during malware detection without any human involvement. While most existing malware detection systems can be updated by retraining on new applications with true labels, DroidEvolver requires neither retraining nor true labels to update itself, mainly due to the insight that DroidEvolver makes necessary and lightweight update using online learning techniques with evolving feature set and pseudo labels. The detection performance of DroidEvolver is evaluated on a dataset of 33,294 benign applications and 34,722 malicious applications developed over a period of six years. Using 6,286 applications dated in 2011 as the initial training set, DroidEvolver achieves high detection F-measure (95.27%), which only declines by 1.06% on average per year over the next five years for classifying 57,539 newly appeared applications. Note that such new applications could use new techniques and new APIs, which are not known to DroidEvolver when initialized with 2011 applications. Compared with the state-of-the-art overtime malware detection system MAMADROID, the F-measure of DroidEvolver is 2.19 times higher on average (10.21 times higher for the fifth year), and the efficiency of DroidEvolver is 28.58 times higher than MAMADROID during malware detection. DroidEvolver is also shown robust against typical code obfuscation techniques.",
        "files": {
            "openAccessPdf": "https://ieeexplore.ieee.org/ielx7/8790377/8806708/08806731.pdf"
        },
        "abstract_zh": "鉴于Android框架的频繁变化和Android恶意软件的不断演变，以有效和可扩展的方式检测恶意软件是一项挑战。为了应对这一挑战，我们提出了DroidEvolver，这是一个Android恶意软件检测系统，可以在恶意软件检测过程中自动持续更新自己，而无需任何人工参与。虽然大多数现有的恶意软件检测系统可以通过对具有真实标签的新应用程序进行再训练来更新，但droid over既不需要再训练也不需要真实标签来更新自身，这主要是因为droid over使用具有不断发展的特征集和伪标签的在线学习技术来进行必要的轻量级更新。DroidEvolver的检测性能是在六年时间内开发的33，294个良性应用程序和34，722个恶意应用程序的数据集上评估的。使用2011年的6，286个应用程序作为初始训练集，DroidEvolver实现了高检测F-measure (95.27%)，在接下来的五年中，对于分类57，539个新出现的应用程序，平均每年仅下降1.06%。请注意，这些新的应用程序可能会使用新的技术和新的API，这是DroidEvolver在用2011应用程序初始化时所不知道的。与最先进的超时恶意软件检测系统MAMADROID相比，droid over的F-measure平均高2.19倍(第五年高10.21倍)，droid over在恶意软件检测过程中的效率比MAMADROID高28.58倍。DroidEvolver也显示出对典型代码混淆技术的鲁棒性。",
        "title_zh": "DroidEvolver:自我进化的Android恶意软件检测系统",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/eurosp/eurosp2019.html",
        "conf_title": "EuroS&P 2019: Stockholm, Sweden",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8790377/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/EuroSPW.2017.57",
        "title": "From Smashed Screens to Smashed Stacks: Attacking Mobile Phones Using Malicious Aftermarket Parts",
        "authors": "Omer Shwartz, Guy Shitrit, Asaf Shabtai, Yossi Oren",
        "abstract": "In this preliminary study we present thefirst practical attack on a modern smartphone whichis mounted through a malicious aftermarket replace-ment part (specifically, a replacement touchscreen). Our attack exploits the lax security checks on thepackets traveling between the touchscreen's embed-ded controller and the phone's main CPU, and isable to achieve kernel-level code execution privilegeson modern Android phones protected by SELinux. This attack is memory independent and survives datawipes and factory resets. We evaluate two phonesfrom major vendors and present a proof-of-concept attack in actual hardware on one phone and an emulation level attack on the other. Through a semi-automated source code review of 26 recent Androidphones from 8 different vendors, we believe that ourattack vector can be applied to many other phones, and that it is very difficult to protect against. Similarattacks should also be possible on other smart devicessuch as printers, cameras and cars, which similarlycontain user-replaceable sub-units.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "在这项初步研究中，我们展示了对现代智能手机的第一次实际攻击，该智能手机是通过恶意售后更换部件(具体来说，是更换触摸屏)安装的。我们的攻击利用了对在触摸屏嵌入式控制器和手机主CPU之间传输的数据包的宽松安全检查，并能够在受SELinux保护的现代Android手机上获得内核级代码执行权限。这种攻击是独立于内存的，可以经受数据擦除和工厂重置。我们评估了主要供应商的两款手机，并在一款手机上展示了实际硬件中的概念验证攻击，在另一款手机上展示了仿真级攻击。通过对来自8个不同厂商的26款最新手机的半自动源代码审查，我们认为我们的攻击向量可以应用于许多其他手机，并且很难防范。类似的任务在其他智能设备上也应该是可能的，比如打印机、照相机和汽车，它们同样包含用户可替换的子单元。",
        "title_zh": "从破碎的屏幕到破碎的堆栈:使用恶意售后零件攻击手机",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/eurosp/eurosp2017w.html",
        "conf_title": "EuroS&P 2017: Paris, France - Workshops",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7966454/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/EuroSP.2017.33",
        "title": "Privacy Threats through Ultrasonic Side Channels on Mobile Devices",
        "authors": "Daniel Arp, Erwin Quiring, Christian Wressnegger, Konrad Rieck",
        "abstract": "Device tracking is a serious threat to the privacy of users, as it enables spying on their habits and activities. A recent practice embeds ultrasonic beacons in audio and tracks them using the microphone of mobile devices. This side channel allows an adversary to identify a user's current location, spy on her TV viewing habits or link together her different mobile devices. In this paper, we explore the capabilities, the current prevalence and technical limitations of this new tracking technique based on three commercial tracking solutions. To this end, we develop detection approaches for ultrasonic beacons and Android applications capable of processing these. Our findings confirm our privacy concerns: We spot ultrasonic beacons in various web media content and detect signals in 4 of 35 stores in two European cities that are used for location tracking. While we do not find ultrasonic beacons in TV streams from 7 countries, we spot 234 Android applications that are constantly listening for ultrasonic beacons in the background without the user's knowledge.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "设备跟踪是对用户隐私的严重威胁，因为它可以监视用户的习惯和活动。最近的一项实践是在音频中嵌入超声波信标，并使用移动设备的麦克风跟踪它们。这个边信道允许对手识别用户的当前位置，窥探她的电视观看习惯，或者将她不同的移动设备连接在一起。在本文中，我们基于三种商业跟踪解决方案，探讨了这种新跟踪技术的能力、当前流行程度和技术局限性。为此，我们开发了超声波信标检测方法和能够处理这些方法的Android应用程序。我们的发现证实了我们对隐私的担忧:我们在各种网络媒体内容中发现了超声波信标，并在两个欧洲城市的35家商店中的4家检测到了用于位置跟踪的信号。虽然我们在7个国家的电视流中没有发现超声波信标，但我们发现234个Android应用程序在用户不知情的情况下不断在后台侦听超声波信标。",
        "title_zh": "通过移动设备上的超声波侧信道的隐私威胁",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/eurosp/eurosp2017.html",
        "conf_title": "EuroS&P 2017: Paris, France",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7961955/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/EuroSP.2017.44",
        "title": "Open Doors for Bob and Mallory: Open Port Usage in Android Apps and Security Implications",
        "authors": "Yunhan Jack Jia, Qi Alfred Chen, Yikai Lin, Chao Kong, Zhuoqing Morley Mao",
        "abstract": "Open ports are typically used by server software to serve remote clients, and the usage historically leads to remote exploitation due to insufficient protection. Smartphone operating systems inherit the open port support, but since they are significantly different from traditional server machines in performance and availability guarantees, little is known about how smartphone applications use open ports and what the security implications are. In this paper, we perform the first systematic study of open port usage on mobile platform and their security implications. To achieve this goal, we design and implement OPAnalyzer, a static analysis tool which can effectively identify and characterize vulnerable open port usage in Android applications. Using OPAnalyzer, we perform extensive usage and vulnerability analysis on a dataset with over 100K Android applications. OPAnalyzer successfully classifies 99% of the mobile usage of open ports into 5 distinct families, and from the output, we are able to identify several mobile-specific usage scenarios such as data sharing in physical proximity. In our subsequent vulnerability analysis, we find that nearly half of the usage is unprotected and can be directly exploited remotely. From the identified vulnerable usage, we discover 410 vulnerable applications with 956 potential exploits in total. We manually confirmed the vulnerabilities for 57 applications, including popular ones with 10 to 50 million downloads on the official market, and also an app that is pre-installed on some device models. These vulnerabilities can be exploited to cause highly-severe damage such as remotely stealing contacts, photos, and even security credentials, and also performing sensitive actions such as malware installation and malicious code execution. We have reported these vulnerabilities and already got acknowledged by the application developers for some of them. We also propose countermeasures and improved practices for each usage scenario.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "服务器软件通常使用开放端口来为远程客户端提供服务，由于保护不足，这种使用通常会导致远程攻击。智能手机操作系统继承了开放端口支持，但由于它们在性能和可用性保证方面与传统的服务器机器有很大不同，人们对智能手机应用程序如何使用开放端口以及安全影响知之甚少。在本文中，我们对移动平台上开放端口的使用及其安全含义进行了首次系统研究。为了实现这一目标，我们设计并实现了一个静态分析工具OPAnalyzer，它可以有效地识别和描述Android应用程序中易受攻击的开放端口使用。使用OPAnalyzer，我们对超过100K个Android应用程序的数据集进行了广泛的使用和漏洞分析。OPAnalyzer成功地将开放端口的99%的移动使用分类为5个不同的系列，从输出中，我们能够识别几个特定于移动的使用场景，如物理邻近的数据共享。在我们随后的漏洞分析中，我们发现近一半的使用是不受保护的，可以直接被远程利用。从已识别的易受攻击的用法中，我们发现了410个易受攻击的应用程序，总共有956个潜在漏洞。我们手动确认了57个应用程序的漏洞，包括官方市场上下载量达到1000万至5000万的热门应用程序，以及一些设备型号上预装的应用程序。这些漏洞可以被利用来造成高度严重的损害，例如远程窃取联系人、照片甚至安全凭证，还可以执行敏感操作，例如恶意软件安装和恶意代码执行。我们已经报告了这些漏洞，其中一些已经得到了应用程序开发人员的认可。我们还为每个使用场景提出了对策和改进的实践。",
        "title_zh": "为Bob和Mallory打开大门:Android应用中的开放端口使用和安全含义",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/eurosp/eurosp2017.html",
        "conf_title": "EuroS&P 2017: Paris, France",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7961955/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/EuroSP.2017.24",
        "title": "LUNA: Quantifying and Leveraging Uncertainty in Android Malware Analysis through Bayesian Machine Learning",
        "authors": "Michael Backes, Mohammad Nauman",
        "abstract": "Android's growing popularity seems to be hindered only by the amount of malware surfacing for this open platform. Machine learning algorithms have been successfully used for detecting the rapidly growing number of malware families appearing on a daily basis. Existing solutions along these lines, however, have a common limitation: they are all based on classical statistical inference and thus ignore the concept of uncertainty invariably involved in any prediction task. In this paper, we show that ignoring this uncertainty leads to incorrect classification of both benign and malicious apps. To reduce these errors, we utilize Bayesian machine learning – an alternative paradigm based on Bayesian statistical inference – which preserves the concept of uncertainty in all steps of calculation. We move from a black-box to a white-box approach to identify the effects different features (such as sensitive resource usage, declared activities, services and intent filters etc.) have on the classification status of an app. We show that incorporating uncertainty in the learning pipeline helps to reduce incorrect decisions, and significantly improves the accuracy of classification. We achieve a false positive rate of 0.2% compared to the previous best of 1%. We present sufficient details to allow the reader to reproduce our results through openly available probabilistic programming tools and to extend our techniques well beyond the boundaries of this paper.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android越来越受欢迎似乎只是受到这个开放平台上恶意软件数量的阻碍。机器学习算法已经被成功地用于检测每天出现的数量迅速增长的恶意软件家族。然而，沿着这些思路的现有解决方案有一个共同的局限性:它们都是基于经典的统计推断，因此忽略了任何预测任务中都不可避免地涉及的不确定性的概念。在本文中，我们表明忽略这种不确定性会导致良性和恶意应用程序的错误分类。为了减少这些错误，我们利用贝叶斯机器学习——一种基于贝叶斯统计推断的替代范式——在所有计算步骤中保留不确定性的概念。我们从黑盒方法转移到白盒方法，以识别不同特征(如敏感资源使用、声明的活动、服务和意图过滤器等)的影响。)对一个app的分类状态有影响。我们表明，在学习管道中引入不确定性有助于减少不正确的决策，并显著提高分类的准确性。我们实现了0.2%的误报率，而之前的最高值为1%。我们提供了足够的细节，允许读者通过公开可用的概率编程工具复制我们的结果，并扩展我们的技术，使其远远超出本文的范围。",
        "title_zh": "LUNA:通过贝叶斯机器学习量化和利用Android恶意软件分析中的不确定性",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/eurosp/eurosp2017.html",
        "conf_title": "EuroS&P 2017: Paris, France",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7961955/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/EuroSP.2017.26",
        "title": "Block Me If You Can: A Large-Scale Study of Tracker-Blocking Tools",
        "authors": "Georg Merzdovnik, Markus Huber, Damjan Buhov, Nick Nikiforakis, Sebastian Neuner, Martin Schmiedecker, Edgar R. Weippl",
        "abstract": "In this paper, we quantify the effectiveness of third-party tracker blockers on a large scale. First, we analyze the architecture of various state-of-the-art blocking solutions and discuss the advantages and disadvantages of each method. Second, we perform a two-part measurement study on the effectiveness of popular tracker-blocking tools. Our analysis quantifies the protection offered against trackers present on more than 100,000 popular websites and 10,000 popular Android applications. We provide novel insights into the ongoing arms race between trackers and developers of blocking tools as well as which tools achieve the best results under what circumstances. Among others, we discover that rule-based browser extensions outperform learning-based ones, trackers with smaller footprints are more successful at avoiding being blocked, and CDNs pose a major threat towards the future of tracker-blocking tools. Overall, the contributions of this paper advance the field of web privacy by providing not only the largest study to date on the effectiveness of tracker-blocking tools, but also by highlighting the most pressing challenges and privacy issues of third-party tracking.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "在本文中，我们大规模量化了第三方追踪器拦截器的有效性。首先，我们分析了各种先进的模块化解决方案的架构，并讨论了每种方法的优缺点。其次，我们对流行的跟踪拦截工具的有效性进行了两部分的测量研究。我们的分析量化了针对100，000多个流行网站和10，000个流行Android应用程序上的追踪器提供的保护。我们对拦截工具的追踪者和开发者之间正在进行的军备竞赛以及哪些工具在什么情况下能取得最好的结果提供了新颖的见解。其中，我们发现基于规则的浏览器扩展优于基于学习的浏览器扩展，足迹较小的追踪器在避免被阻止方面更成功，cdn对追踪器阻止工具的未来构成了重大威胁。总的来说，本文的贡献推进了网络隐私领域，不仅提供了迄今为止最大规模的关于跟踪拦截工具有效性的研究，还强调了第三方跟踪最紧迫的挑战和隐私问题。",
        "title_zh": "如果你能阻止我:一项关于跟踪拦截工具的大规模研究",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/eurosp/eurosp2017.html",
        "conf_title": "EuroS&P 2017: Paris, France",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7961955/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/EuroSP.2017.43",
        "title": "ARTist: The Android Runtime Instrumentation and Security Toolkit",
        "authors": "Michael Backes, Sven Bugiel, Oliver Schranz, Philipp von Styp-Rekowsky, Sebastian Weisgerber",
        "abstract": "With the introduction of Android 5 Lollipop, the Android Runtime (ART) superseded the Dalvik Virtual Machine (DVM) by introducing ahead-of-time compilation and native execution of applications, effectively deprecating seminal works such as TaintDroid that hitherto depend on the DVM. In this paper, we discuss alternatives to overcome those restrictions and highlight advantages for the security community that can be derived from ART's novel on-device compiler dex2oat and its accompanying runtime components. To this end, we introduce ARTist, a compiler-based application instrumentation solution for Android that does not depend on operating system modifications and solely operates on the application layer. Since dex2oat is yet uncharted, our approach required first and foremost a thorough study of the compiler suite's internals and in particular of the new default compiler backend called Optimizing. We document the results of this study in this paper to facilitate independent research on this topic and exemplify the viability of ARTist by realizing two use cases. In particular, we conduct a case study on whether taint tracking can be re-instantiated using a compiler-based app instrumentation framework. Overall, our results provide compelling arguments for the community to choose compiler-based approaches over alternative bytecode or binary rewriting approaches for security solutions on Android.",
        "files": {
            "openAccessPdf": "http://arxiv.org/pdf/1607.06619"
        },
        "abstract_zh": "随着Android 5 Lollipop的推出，Android运行时(ART)通过引入应用程序的提前编译和本机执行取代了Dalvik虚拟机(DVM)，有效地削弱了迄今为止依赖于DVM的开创性工作，如TaintDroid。在本文中，我们讨论了克服这些限制的替代方案，并强调了安全社区可以从ART的新型设备上编译器dex2oat及其附带的运行时组件中获得的优势。为此，我们引入了ARTist，这是一个基于编译器的Android应用程序插装解决方案，它不依赖于操作系统的修改，只在应用层上运行。由于dex2oat尚未被开发，我们的方法首先需要彻底研究编译器套件的内部，特别是新的默认编译器后端优化。我们在本文中记录了这项研究的结果，以促进对这一主题的独立研究，并通过实现两个用例来举例说明ARTist的可行性。特别是，我们进行了一个案例研究，研究污点跟踪是否可以使用基于编译器的应用程序检测框架重新实例化。总的来说，我们的结果为社区在Android上选择基于编译器的方法而不是替代的字节码或二进制重写方法提供了令人信服的论据。",
        "title_zh": "艺术家:Android运行时工具和安全工具包",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/eurosp/eurosp2017.html",
        "conf_title": "EuroS&P 2017: Paris, France",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7961955/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/EuroSP.2016.16",
        "title": "HornDroid: Practical and Sound Static Analysis of Android Applications by SMT Solving",
        "authors": "Stefano Calzavara, Ilya Grishchenko, Matteo Maffei",
        "abstract": "We present HornDroid, a new tool for the static analysis of information flow properties in Android applications. The core idea underlying HornDroid is to use Horn clauses for soundly abstracting the semantics of Android applications and to express security properties as a set of proof obligations that are automatically discharged by an off-the-shelf SMT solver. This approach makes it possible to fine-tune the analysis in order to achieve a high degree of precision while still using off-the-shelf verification tools, thereby leveraging the recent advances in this field. As a matter of fact, HornDroid outperforms state-of-the-art Android static analysis tools on benchmarks proposed by the community. Moreover, HornDroid is the first static analysis tool for Android to come with a formal proof of soundness, which covers the core of the analysis technique: besides yielding correctness assurances, this proof allowed us to identify some critical corner-cases that affect the soundness guarantees provided by some of the previous static analysis tools for Android.",
        "files": {
            "openAccessPdf": "http://arxiv.org/pdf/1707.07866"
        },
        "abstract_zh": "我们介绍了HornDroid，这是一个用于静态分析Android应用程序中信息流属性的新工具。HornDroid的核心思想是使用Horn子句来合理地抽象Android应用程序的语义，并将安全属性表达为一组证明义务，由现成的SMT求解器自动履行。这种方法可以对分析进行微调，以实现高精度，同时仍然使用现成的验证工具，从而利用该领域的最新进展。事实上，在社区提出的基准测试中，HornDroid优于最先进的Android静态分析工具。此外，HornDroid是第一个为Android提供可靠性正式证明的静态分析工具，它涵盖了分析技术的核心:除了产生正确性保证之外，这种证明还允许我们确定一些影响Android以前的静态分析工具所提供的可靠性保证的关键极限情况。",
        "title_zh": "HornDroid:通过SMT求解对Android应用程序进行实用可靠的静态分析",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/eurosp/eurosp2016.html",
        "conf_title": "EuroS&P 2016: Saarbrücken, Germany",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7467055/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/EuroSP.2016.40",
        "title": "AppScanner: Automatic Fingerprinting of Smartphone Apps from Encrypted Network Traffic",
        "authors": "Vincent F. Taylor, Riccardo Spolaor, Mauro Conti, Ivan Martinovic",
        "abstract": "Automatic fingerprinting and identification of smartphone apps is becoming a very attractive data gathering technique for adversaries, network administrators, investigators and marketing agencies. In fact, the list of apps installed on a device can be used to identify vulnerable apps for an attacker to exploit, uncover a victim's use of sensitive apps, assist network planning, and aid marketing. However, app fingerprinting is complicated by the vast number of apps available for download, the wide range of devices they may be installed on, and the use of payload encryption protocols such as HTTPS/TLS. In this paper, we present a novel methodology and a framework implementing it, called AppScanner, for the automatic fingerprinting and real-time identification of Android apps from their encrypted network traffic. To build app fingerprints, we run apps automatically on a physical device to collect their network traces. We apply various processing strategies to these network traces before extracting the features that are used to train our supervised learning algorithms. Our fingerprint generation methodology is highly scalable and does not rely on inspecting packet payloads, thus our framework works even when HTTPS/TLS is employed. We built and deployed this lightweight framework and ran a thorough set of experiments to assess its performance. We automatically profiled 110 of the most popular apps in the Google Play Store and were later able to re-identify them with more than 99% accuracy.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "智能手机应用程序的自动指纹识别和识别正在成为对手、网络管理员、调查人员和营销机构非常有吸引力的数据收集技术。事实上，安装在设备上的应用程序列表可用于识别易受攻击的应用程序以供攻击者利用，揭露受害者对敏感应用程序的使用，帮助网络规划和辅助营销。然而，由于可供下载的应用程序数量庞大，安装这些应用程序的设备种类繁多，以及使用HTTPS/TLS等有效载荷加密协议，应用程序指纹识别变得非常复杂。在本文中，我们提出了一种新的方法和实现它的框架，称为AppScanner，用于从加密的网络流量中自动指纹识别和实时识别Android应用程序。为了构建应用指纹，我们在物理设备上自动运行应用，以收集它们的网络痕迹。在提取用于训练我们的监督学习算法的特征之前，我们对这些网络轨迹应用各种处理策略。我们的指纹生成方法是高度可扩展的，并且不依赖于检查分组有效载荷，因此我们的框架即使在使用HTTPS/TLS时也能工作。我们构建并部署了这个轻量级框架，并运行了一组全面的实验来评估它的性能。我们自动分析了谷歌Play商店最受欢迎的110个应用程序，后来能够以超过99%的准确率重新识别它们。",
        "title_zh": "AppScanner:从加密的网络流量中自动提取智能手机应用的指纹",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/eurosp/eurosp2016.html",
        "conf_title": "EuroS&P 2016: Saarbrücken, Germany",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7467055/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/EuroSP.2016.41",
        "title": "How Secure is TextSecure?",
        "authors": "Tilman Frosch, Christian Mainka, Christoph Bader, Florian Bergsma, Jörg Schwenk, Thorsten Holz",
        "abstract": "Instant Messaging has gained popularity by users for both private and business communication as low-cost short message replacement on mobile devices. However, before releases about mass surveillance performed by intelligence services such as NSA and GCHQ and Facebook's acquisition of WhatsApp, most mobile messaging apps did not protect confidentiality or integrity of the messages. A messaging app that claims to provide secure instant messaging and has attracted a lot of attention is TextSecure. Besides numerous direct installations, its protocol is part of Android's most popular aftermarket firmware Cyanogen-Mod. TextSecure's successor Signal continues to use the underlying protocol for text messaging. In this paper, we present the first complete description of TextSecure's complex cryptographic protocol, provide a security analysis of its three main components (key exchange, key derivation and authenticated encryption), and discuss the main security claims of TextSecure. Furthermore, we formally prove that - if key registration is assumed to be secure - TextSecure's push messaging can indeed achieve most of the claimed security goals.",
        "files": {
            "openAccessPdf": "http://eprint.iacr.org/2014/904.pdf"
        },
        "abstract_zh": "即时消息作为移动设备上的低成本短消息替代品，已经获得了用户对于私人和商业通信的欢迎。然而，在NSA和GCHQ等情报机构进行大规模监控的消息发布以及脸书收购WhatsApp之前，大多数移动通讯应用都没有保护消息的机密性或完整性。一款号称能提供安全即时通讯并吸引了大量关注的消息应用是TextSecure。除了众多的直接安装，它的协议是Android最受欢迎的售后固件Cyanogen-Mod的一部分。TextSecure的后继信号继续使用文本消息的底层协议。本文首次完整描述了TextSecure的复杂密码协议，对其三个主要组成部分(密钥交换、密钥导出和认证加密)进行了安全性分析，并讨论了TextSecure的主要安全声明。此外，我们正式证明——如果密钥注册被认为是安全的——text secure的推送消息确实可以实现大多数声称的安全目标。",
        "title_zh": "TextSecure有多安全？",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/eurosp/eurosp2016.html",
        "conf_title": "EuroS&P 2016: Saarbrücken, Germany",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7467055/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/EuroSP.2018.00040",
        "title": "DeepRefiner: Multi-layer Android Malware Detection System Applying Deep Neural Networks",
        "authors": "Ke Xu, Yingjiu Li, Robert H. Deng, Kai Chen",
        "abstract": "As malicious behaviors vary significantly across mobile malware, it is challenging to detect malware both efficiently and effectively. Also due to the continuous evolution of malicious behaviors, it is difficult to extract features by laborious human feature engineering and keep up with the speed of malware evolution. To solve these challenges, we propose DeepRefiner to identify malware both efficiently and effectively. The novel technique enabling effectiveness is the semantic-based deep learning. We use Long Short Term Memory on the semantic structure of Android bytecode, avoiding missing the details of method-level bytecode semantics. To achieve efficiency, we apply Multilayer Perceptron on the xml files based on the finding that most malware can be efficiently identified using information only from xml files. We evaluate the detection performance of DeepRefiner with 62,915 malicious applications and 47,525 benign applications, showing that DeepRefiner effectively detects malware with an accuracy of 97.74% and a false positive rate of 2.54%. We compare DeepRefiner with a state-of-the-art single classifierbased detection system, StormDroid, and ten widely used signature-based anti-virus scanners. The experimental results show that DeepRefiner significantly outperforms StormDroid and anti-virus scanners. In addition, we evaluate the robustness of DeepRefiner against typical obfuscation techniques and adversarial samples. The experimental results demonstrate that DeepRefiner is robust in detecting obfuscated malicious applications.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "由于恶意行为在移动恶意软件中变化很大，因此高效和有效地检测恶意软件具有挑战性。此外，由于恶意行为的不断演变，很难通过费力的人体特征工程来提取特征，并跟上恶意软件演变的速度。为了解决这些挑战，我们建议DeepRefiner既高效又有效地识别恶意软件。实现有效性的新技术是基于语义的深度学习。我们对Android字节码的语义结构使用长短期记忆，避免遗漏方法级字节码语义的细节。为了提高效率，我们在xml文件上应用了多层感知器，这是基于这样一个发现:仅使用来自xml文件的信息就可以有效地识别大多数恶意软件。我们使用62，915个恶意应用程序和47，525个良性应用程序评估了DeepRefiner的检测性能，显示DeepRefiner有效检测恶意软件，准确率为97.74%，误报率为2.54%。我们将DeepRefiner与最先进的基于单一分类器的检测系统StormDroid以及十种广泛使用的基于签名的反病毒扫描器进行了比较。实验结果表明，DeepRefiner明显优于StormDroid和反病毒扫描器。此外，我们评估了DeepRefiner对典型混淆技术和敌对样本的鲁棒性。实验结果表明，DeepRefiner在检测混淆的恶意应用程序方面是鲁棒的。",
        "title_zh": "DeepRefiner:应用深度神经网络的多层Android恶意软件检测系统",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/eurosp/eurosp2018.html",
        "conf_title": "EuroS&P 2018: London, UK",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8405665/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/EuroSPW.2018.00008",
        "title": "Vulnerability Detection on Mobile Applications Using State Machine Inference",
        "authors": "Wesley van der Lee, Sicco Verwer",
        "abstract": "Although the importance of mobile applications grows every day, recent vulnerability reports argue the application's deficiency to meet modern security standards. Testing strategies alleviate the problem by identifying security violations in software implementations. This paper proposes a novel testing methodology that applies state machine learning of mobile Android applications in combination with algorithms that discover attack paths in the learned state machine. The presence of an attack path evidences the existence of a vulnerability in the mobile application. We apply our methods to real-life apps and show that the novel methodology is capable of identifying vulnerabilities.",
        "files": {
            "openAccessPdf": "https://repository.tudelft.nl/islandora/object/uuid%3A1d8e42cd-9823-4f08-8e75-55db33019d69/datastream/OBJ/download"
        },
        "abstract_zh": "尽管移动应用程序的重要性与日俱增，但最近的漏洞报告认为该应用程序不足以满足现代安全标准。测试策略通过识别软件实现中的安全违规来缓解这个问题。本文提出了一种新的测试方法，将移动Android应用程序的状态机学习与在学习到的状态机中发现攻击路径的算法相结合。攻击路径的存在证明了移动应用程序中存在漏洞。我们将我们的方法应用于现实生活中的应用程序，并表明这种新颖的方法能够识别漏洞。",
        "title_zh": "基于状态机推理的移动应用漏洞检测",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/eurosp/eurosp2018w.html",
        "conf_title": "EuroS&P 2018: London, UK - Workshops",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/8405666/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/EuroSPW59978.2023.00022",
        "title": "Comparing Privacy Label Disclosures of Apps Published in both the App Store and Google Play Stores",
        "authors": "David Rodriguez, Akshath Jain, José M. del Álamo, Norman Sadeh",
        "abstract": "Apple and Android introduced privacy labels in 2020 and 2022 respectively as a way of providing consumers with succinct summaries of mobile apps’ more salient data practices. A number of apps are published in both stores, offering us the opportunity to compare their privacy label disclosures in the two app stores. This paper compares the data practices privacy labels are intended to capture in each store. It then proceeds to analyze the disclosures of 822 apps published in both app stores, focusing on possible discrepancies. This analysis reveals that privacy label disclosures of what is ostensibly the same mobile app can be quite different. We discuss the different possible reasons behind these differences, including the possibility that these discrepancies might be indicative of potential privacy compliance issues. In particular, focusing on data collection disclosures of five different data types (location, contact info, sensitive info, identifiers, and health & fitness) we find discrepancies between iOS and Google Play privacy label disclosures in 66.5% of the mobile apps we analyze.",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "比较App Store和Google Play商店中发布的应用程序的隐私标签披露",
        "abstract_zh": "苹果和安卓分别在2020年和2022年推出了隐私标签，作为向消费者提供移动应用更突出的数据实践的简明摘要的一种方式。两家商店都发布了许多应用程序，这为我们提供了比较两家应用程序商店隐私标签披露的机会。本文比较了隐私标签旨在每个商店获取的数据做法。然后，它继续分析两个应用商店中发布的822个应用的披露，重点关注可能的差异。这一分析表明，表面上相同的移动应用程序的隐私标签披露可能会有很大不同。我们讨论了这些差异背后不同的可能原因，包括这些差异可能表明潜在的隐私合规性问题。特别是，通过关注五种不同数据类型(位置、联系信息、敏感信息、标识符和健康与健身)的数据收集披露，我们发现在我们分析的66.5%的移动应用中，iOS和Google Play隐私标签披露之间存在差异。",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/eurosp/eurosp2023w.html",
        "conf_title": "EuroS&P 2023: Delft, Netherlands - Workshops",
        "conf_url": "https://doi.org/10.1109/EuroSPW59978.2023",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/EuroSPW59978.2023.00051",
        "title": "Masking Location Streams in the Presence of Colluding Service Providers",
        "authors": "Toon Dehaene, Michiel Willocx, Bert Lagaisse, Vincent Naessens",
        "abstract": "Many service providers rely on location data or streams to offer personalized services. However, reckless release of location streams can have serious privacy implications, especially with respect to sensitive zones, paths and time intervals. Unfortunately, current approaches by mobile platform providers to enhance privacy expose major shortcomings, especially with respect to releasing location information of frequently visited areas and in the presence of colluding service providers that are willing to combine local knowledge to retrieve more accurate information.This paper presents a practical approach to obfuscate location streams in the presence of the aforementioned challenges. Our solution combines multiple technologies and is validated through the development of a novel privacy-friendly location service in Android. It aims to realize a reasonable trade-off between privacy and utility concerns respectively raised by end-users and service providers. Thereby, sensitive locations, zones, paths, timestamps, and time intervals are highly configurable.",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "在碰撞服务提供商面前掩盖位置流",
        "abstract_zh": "许多服务提供商依靠位置数据或流提供个性化服务。 但是，鲁ck的位置流的释放可能具有严重的隐私影响，尤其是在敏感区域，路径和时间间隔方面。 不幸的是，移动平台提供商的当前方法以增强隐私性揭示了主要缺点，尤其是在释放经常访问的地区的位置信息以及在场的核算服务提供商面前，这些信息愿意结合当地知识以检索更准确的信息。 在面临上述挑战的情况下，一种实用的方法来混淆位置流。 我们的解决方案结合了多种技术，并通过开发Android的新型隐私友好位置服务得到验证。 它旨在实现最终用户和服务提供商提出的隐私和公用事业问题之间的合理权衡。 因此，敏感的位置，区域，路径，时间戳和时间间隔是高度可配置的。",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/eurosp/eurosp2023w.html",
        "conf_title": "EuroS&P 2023: Delft, Netherlands - Workshops",
        "conf_url": "https://doi.org/10.1109/EuroSPW59978.2023",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/EuroSPW59978.2023.00065",
        "title": "TLS → Post-Quantum TLS: Inspecting the TLS landscape for PQC adoption on Android",
        "authors": "Dimitri Mankowski, Thom Wiggers, Veelasha Moonsamy",
        "abstract": "The ubiquitous use of smartphones has contributed to more and more users conducting their online browsing activities through apps, rather than web browsers. In order to provide a seamless browsing experience to the users, apps rely on a variety of HTTP-based APIs and third-party libraries, and make use of the TLS protocol to secure the underlying communication. With NIST’s recent announcement of the first standards for post-quantum algorithms, there is a need to better understand the constraints and requirements of TLS usage by Android apps in order to make an informed decision for migration to the post-quantum world. In this paper, we performed an analysis of TLS usage by highest-ranked apps from Google Play Store to assess the resulting overhead for adoption of post-quantum algorithms. Our results show that apps set up large numbers of TLS connections with a median of 94, often to the same hosts. At the same time, many apps make little use of resumption to reduce the overhead of the TLS handshake. This will greatly magnify the impact of the transition to post-quantum cryptography, and we make recommendations for developers, server operators and the mobile operating systems to invest in making more use of these mitigating features or improving their accessibility. Finally, we briefly discuss how alternative proposals for post-quantum TLS handshakes might reduce the overhead.",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "TLS→Quantum TLS：检查Android上采用PQC的TLS景观",
        "abstract_zh": "无处不在的智能手机使用已为越来越多的用户通过应用程序而不是网络浏览器进行在线浏览活动。 为了向用户提供无缝的浏览体验，应用程序依靠各种基于HTTP的API和第三方库，并利用TLS协议来确保基础通信。 随着NIST最近宣布量词后算法的第一条标准，有必要更好地了解Android应用程序TLS使用的限制和要求，以便做出明智的决定，以迁移到后量子世界。 在本文中，我们通过Google Play商店的最高应用程序对TLS的使用进行了分析，以评估由此产生的量词后算法的开销。 我们的结果表明，应用程序设置了大量的TLS连接，中位数为94，通常是在同一主机上。 同时，许多应用程序几乎不利用恢复来减少TLS握手的开销。 这将大大扩大过渡到量子后加密的影响，我们为开发人员，服务器运营商和移动操作系统提出建议，以便更多地利用这些缓解功能或改善其可访问性。 最后，我们简要讨论Quantum TLS握手的替代建议如何减少开销。",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/eurosp/eurosp2023w.html",
        "conf_title": "EuroS&P 2023: Delft, Netherlands - Workshops",
        "conf_url": "https://doi.org/10.1109/EuroSPW59978.2023",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/EuroSP57164.2023.00010",
        "title": "Android, Notify Me When It Is Time To Go Phishing",
        "authors": "Antonio Ruggia, Andrea Possemato, Alessio Merlo, Dario Nisi, Simone Aonzo",
        "abstract": "A mobile banking app just started up, and the notification \"App updated, click here to restart\" appears. The graphic theme is the same as the bank. Can we trust it? What if we cannot even trust that tapping an app actually loads the original one? More generally, what if Android notifies an attacker when her victim has just launched the target app of her phishing campaign so that she could cast the hook at the perfect moment?In this paper, we abuse inotify APIs, a mechanism for monitoring file system events, to mount a state inference-based phishing attack from a malicious app installed on the victim's smartphone. We also verified the novelty of our work analyzing 10,000 recent Android malware, and although we found some cases where malware uses inotify for their petty purposes, our attack seems to be publicly unknown.However, since Android constantly evolves year after year, we studied its feasibility over different Android versions and attacker's capabilities. By analyzing 4, 863 of the most popular apps, the most disconcerting finding is that if the attacker knows the installation path of the target app, all Android apps are vulnerable, regardless of the system version. Getting the installation path of an app is a capability that is only protected by a normal permission, and to make matters worse, there are workarounds to get it even without such permission.Even if this capability is denied, we propose different attack models under which this attack is still possible; however, at the end of our work, we provide the remediation to eradicate once and for all these attacks. Through this work, we reported three vulnerabilities to Google. Two were acknowledged as bugs of moderate severity, while the last one was already known but not public.",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "Android，到了钓鱼的时候通知我",
        "abstract_zh": "某手机银行app刚启动，出现“App更新，点击此处重启”的通知。图形主题与银行相同。我们能相信它吗？如果我们甚至不能相信点击一个应用程序实际上会加载原来的应用程序，那该怎么办？更一般地说，如果当受害者刚刚启动她的钓鱼活动的目标应用程序时，Android通知攻击者，以便她可以在完美的时刻抛出钩子，会怎么样？在本文中，我们滥用inotify APIs(一种监控文件系统事件的机制)，从受害者智能手机上安装的恶意应用程序发起基于状态推断的网络钓鱼攻击。我们还验证了我们的工作的新颖性，分析了10，000个最近的Android恶意软件，尽管我们发现了一些恶意软件出于其琐碎目的使用inotify的情况，但我们的攻击似乎并不为人所知。然而，由于Android年复一年不断发展，我们研究了它在不同Android版本和攻击者能力上的可行性。通过分析4863个最受欢迎的应用程序，最令人不安的发现是，如果攻击者知道目标应用程序的安装路径，所有Android应用程序都容易受到攻击，无论系统版本如何。获取应用程序的安装路径是一项仅受普通权限保护的功能，更糟糕的是，即使没有这样的权限，也有变通办法可以获取它。即使这种能力被否认，我们提出了不同的攻击模型，在这些模型下，这种攻击仍然是可能的；但是，在工作结束时，我们会提供补救措施来彻底根除这些攻击。通过这项工作，我们向Google报告了三个漏洞。两个被认为是中等严重程度的错误，而最后一个是已知的，但不是公开的。",
        "year": "2023",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/eurosp/eurosp2023.html",
        "conf_title": "EuroS&P 2023: Delft, Netherlands",
        "conf_url": "https://doi.org/10.1109/EuroSP57164.2023",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SRDSW.2016.15",
        "title": "BioALeg - Enabling Biometric Authentication in Legacy Web Sites",
        "authors": "Sharareh Monfared, Daniel Andrade, Luís E. T. Rodrigues, João Nuno Silva",
        "abstract": "The authentication of users in legacy web sites via mobile devices is still a challenging problem. Users are required to provide passwords, introducing several vulnerabilities: since strong passwords are hard to memorize, users often use weak passwords that are easy to break, and passwords can be intercepted by malware and stolen. In this paper we propose a novel architecture, named BioALeg, to support secure biometric authentication on legacy websites. Our approach leverages the potential of a Secured Personal Device (SPD), a hardware add-on for mobile phones that is being developed in the context of the PCAS European project. The device offers biometric authentication and secure storage services. BioALeg uses this infrastructure, and a companion web site plugin, to support biometric authentication in legacy web sites that currently use username/password authentication. In order to perform authentication, the smartphone requests a One Time Password (OTP) to the service provider when the user tries to access the service using the SPD. Due to the architecture and implementation of the SPD, the OTP transfer only occurs after the owner of the phone and SPD is correctly authenticated using biometrics. The PCAS infrastructure guarantees that, after the biometric authentication, the user identity is valid and accepted by all components. BioALeg has been implemented as an Android service and integrated with legacy web sites.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "通过移动设备对传统网站中的用户进行身份验证仍然是一个具有挑战性的问题。要求用户提供密码，介绍了几个漏洞:由于强密码难以记忆，用户往往使用容易破解的弱密码，密码会被恶意软件拦截并窃取。在本文中，我们提出了一种新的架构，命名为BioALeg，以支持传统网站上的安全生物认证。我们的方法利用了安全个人设备(SPD)的潜力，这是一种在PCAS欧洲项目背景下开发的移动电话硬件附件。该设备提供生物认证和安全存储服务。BioALeg使用这个基础设施和一个配套的网站插件来支持当前使用用户名/密码认证的传统网站中的生物认证。为了执行身份验证，当用户试图使用SPD访问服务时，智能手机会向服务提供商请求一次性密码(OTP)。由于SPD的架构和实现方式，OTP传输仅在手机和SPD的所有者使用生物特征被正确认证之后才发生。PCAS基础设施保证，在生物认证之后，用户身份是有效的，并且被所有组件接受。BioALeg已经作为Android服务实现，并与传统网站集成。",
        "title_zh": "传统网站中支持生物认证的生物腿",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/srds/srds2016w.html",
        "conf_title": "35. SRDS 2016: Budapest, Hungary - Workshops",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7593913/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SRDSW.2016.18",
        "title": "Thwarting Data Exfiltration by Repackaged Applications",
        "authors": "Daniel Andrade, Thor Kristoffersen, Ivar Rummelhoff, Alex Gerdov, João Nuno Silva",
        "abstract": "Android applications are subject to repackaging attacks, where popular applications are modified, often by inserting malicious logic, re-signed, and then uploaded to an online store to be later on downloaded and installed by unsuspicious users. This paper presents a set of protocols for increasing trust in special-purpose Android applications, termed secured trusted applications, during communication with a trustworthy external hardware device for storing sensitive end user data, termed secured personal device. The proposed approach requires neither operating system modification nor root privileges. The evaluation of our solution shows that the authenticity and integrity of applications, and the confidentiality and integrity of communication, is ensured as long as Android operates correctly.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "Android应用程序会受到重新打包攻击，其中流行的应用程序会被修改，通常是通过插入恶意逻辑，重新签名，然后上传到在线商店，供不可疑的用户下载和安装。本文提出了一组协议，用于在与用于存储敏感终端用户数据的可信外部硬件设备(称为安全个人设备)通信期间，增加专用Android应用(称为安全可信应用)中的信任。所提出的方法既不需要修改操作系统，也不需要root权限。对我们的解决方案的评估表明，只要Android正确运行，应用的真实性和完整性以及通信的机密性和完整性就能得到保证。",
        "title_zh": "通过重新打包的应用程序阻止数据泄露",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/srds/srds2016w.html",
        "conf_title": "35. SRDS 2016: Budapest, Hungary - Workshops",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7593913/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SRDS.2016.013",
        "title": "ShareIff: A Sticky Policy Middleware for Self-Destructing Messages in Android Applications",
        "authors": "Antonio Goulao, Nuno O. Duarte, Nuno Santos",
        "abstract": "Self-destructing messaging applications have garnered immense popularity due to the arrival of Snapchat. However, Snapchat's history has shown that building such services on modern mobile platforms is very challenging. In fact, either caused by programming errors or due to the limitations of existing mobile operating systems, in Snapchat and other similar applications it is possible to recover supposedly deleted messages against the senders' expectations, therefore leaving millions of users potentially vulnerable to privacy breaches. This paper presents ShareIff, a middleware for Android that provides an API for secure sharing and display of self-destructing messages. Using this middleware, Snapchat or any similar application, is able to encrypt the message on the sender's endpoint and send it to the recipient such that the message can be decrypted and securely displayed only on the recipient's device for the amount of time specified by the sender. ShareIff provides this property by relying on specialized cryptographic protocols and operating system mechanisms. ShareIff offers application developers a simple programming abstraction and adds marginal overheads to system and app.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "由于Snapchat的到来，自毁式消息应用程序获得了巨大的人气。然而，Snapchat的历史表明，在现代移动平台上构建这样的服务非常具有挑战性。事实上，无论是由于编程错误还是由于现有移动操作系统的限制，在Snapchat和其他类似的应用程序中，都有可能违背发送者的期望恢复据称已删除的消息，从而使数百万用户的隐私可能受到侵犯。本文介绍了ShareIff，一个用于Android的中间件，它提供了一个用于安全共享和显示自毁消息的API。使用这种中间件，Snapchat或任何类似的应用程序能够在发送方的端点上加密消息，并将其发送给接收方，以便消息可以被解密，并仅在发送方指定的时间内在接收方的设备上安全地显示。ShareIff通过依赖专门的加密协议和操作系统机制来提供该属性。ShareIff为应用程序开发人员提供了简单的编程抽象，并增加了系统和应用程序的边际开销。",
        "title_zh": "share IFF:Android应用程序中用于自毁消息的粘性策略中间件",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/srds/srds2016.html",
        "conf_title": "35. SRDS 2016: Budapest, Hungary",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7790033/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SRDSW.2015.21",
        "title": "SMS Botnet Detection for Android Devices through Intent Capture and Modeling",
        "authors": "Erik Johnson, Issa Traoré",
        "abstract": "Mobile devices are subject to an increased attack surface vector as compared to desktop computing, due to the nature of sensors, radios, and increased peripherals. We investigate in this work mobile botnets with a specific focus on Android, which is the most widely adopted mobile platform, and a prime target for malicious software, 79% of reported malware threats to mobile operating systems are targeted at Android. Our analysis focuses on a short messaging service (SMS) botnet structure and investigates a new detection model using the concept of intents. We show that transparent control can be achieved by a remote endpoint, yet also detected by our proposed intent detection model. Intents are late run-time bindings mechanisms provided to applications in the Android operating system. Intents provide a clear and accurate picture of device behaviour with external sources, due to their design as a late run time binding mechanism in the Android Operating System. We propose an intent logging system to capture sample data, and use this as the basis to design and evaluate our proposed detection scheme.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "与桌面计算相比，由于传感器、无线电和越来越多的外围设备的性质，移动设备受到的攻击面越来越大。我们在这项工作中研究了移动僵尸网络，特别关注Android，这是最广泛采用的移动平台，也是恶意软件的主要目标，79%的报告的移动操作系统恶意软件威胁都是针对Android的。我们的分析侧重于短消息服务(SMS)僵尸网络结构，并研究了一种使用意图概念的新检测模型。我们证明了透明控制可以通过远程端点来实现，也可以通过我们提出的意图检测模型来检测。Intents是Android操作系统中提供给应用程序的后期运行时绑定机制。由于Intents被设计为Android操作系统中的后期运行时绑定机制，因此它可以清晰、准确地描述外部设备的行为。我们提出一个意图记录系统来捕获样本数据，并以此为基础来设计和评估我们提出的检测方案。",
        "title_zh": "通过意图捕获和建模对Android设备进行短信僵尸网络检测",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/srds/srds2015w.html",
        "conf_title": "34. SRDS 2015: Montreal, QC, Canada - Workshops",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7371401/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SRDSW.2015.18",
        "title": "On the Use of Mobile GPU for Accelerating Malware Detection Using Trace Analysis",
        "authors": "Manel Abdellatif, Chamseddine Talhi, Abdelwahab Hamou-Lhadj, Michel R. Dagenais",
        "abstract": "Malware detection on mobile phones involves analysing and matching large amount of data streams against a set of known malware signatures. Unfortunately, as the number of threats grows continuously, the number of malware signatures grows proportionally. This is time consuming and leads to expensive computation costs, especially for mobile devices where memory, power and computation capabilities are limited. As the security threat level is getting worse, parallel computation capabilities for mobile phones is getting better with the evolution of mobile graphical processing units (GPUs). In this paper, we discuss how we can benefit from the evolving parallel processing capabilities of mobile devices in order to accelerate malware detection on Android mobile phones. We have designed and implemented a parallel host-based anti-malware for mobile devices that exploits the computation capabilities of mobile GPUs. A series of computation and memory optimization techniques are proposed to increase the detection throughput. The results suggest that mobile graphic cards can be used effectively to accelerate malware detection for mobile phones.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "手机上的恶意软件检测包括分析大量数据流，并将其与一组已知的恶意软件签名进行匹配。不幸的是，随着威胁数量的持续增长，恶意软件签名的数量也成比例增长。这是耗时的，并且导致昂贵的计算成本，尤其是对于存储器、功率和计算能力有限的移动设备。随着安全威胁水平的恶化，随着移动图形处理单元(GPU)的发展，手机的并行计算能力越来越好。在本文中，我们讨论了如何从移动设备不断发展的并行处理能力中获益，以加速Android手机上的恶意软件检测。我们为移动设备设计并实现了一个基于并行主机的反恶意软件，它利用了移动GPU的计算能力。提出了一系列计算和存储优化技术来提高检测吞吐量。结果表明，移动图形卡可以有效地用于加速移动电话的恶意软件检测。",
        "title_zh": "使用移动GPU通过跟踪分析加速恶意软件检测",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/srds/srds2015w.html",
        "conf_title": "34. SRDS 2015: Montreal, QC, Canada - Workshops",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7371401/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1109/SRDS.2015.41",
        "title": "PmDroid: Permission Supervision for Android Advertising",
        "authors": "Xing Gao, Dachuan Liu, Haining Wang, Kun Sun",
        "abstract": "It is well-known that Android mobile advertising networks may abuse their host applications' permission to collect private information. Since the advertising library and host app are running in the same process, the current Android permission mechanism cannot prevent an ad network from collecting private data that is out of an ad network's permission range. In this paper, we propose PmDroid to protect the data that is not under the scope of the ad network's permission set. PmDroid can block the data from being sent to advertising servers at the occurrence of permission violation in ad networks. Moreover, we utilize PmDroid to assess how serious the permission violation problem is in the ad networks. We first implement 53 sample apps using a single ad network library. We grant all permissions of Android 4.3 to these apps and record the data sent to the Internet. Then, we further analyze 430 published market apps. In total, there are 76 ad networks identified in our experiments. We compare the permission of data received by these ad networks with their official documents. Our experimental results indicate that the permission violation is a real problem in existing ad network markets.",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "众所周知，Android移动广告网络可能会滥用其主机应用程序的权限来收集私人信息。由于广告库和主机应用程序在同一进程中运行，当前的Android权限机制无法阻止广告网络收集广告网络权限范围之外的私人数据。在本文中，我们提出PmDroid来保护不在广告网络权限集范围内的数据。PmDroid可以在广告网络中出现权限违规时阻止数据发送到广告服务器。此外，我们利用PmDroid来评估广告网络中的权限违规问题有多严重。我们首先使用一个广告网络库实现了53个示例应用。我们将Android 4.3的所有权限授予这些应用，并记录发送到互联网的数据。然后，我们进一步分析了430个已发布的市场应用。在我们的实验中，总共识别出76个广告网络。我们将这些广告网络收到的数据的许可与它们的官方文件进行比较。我们的实验结果表明，在现有的广告网络市场中，许可违反是一个真实的问题。",
        "title_zh": "pm droid:Android广告的权限监管",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/srds/srds2015.html",
        "conf_title": "34. SRDS 2015: Montreal, QC, Canada",
        "conf_url": "https://ieeexplore.ieee.org/xpl/conhome/7371402/proceeding",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-030-63095-9_14",
        "title": "AOMDroid: Detecting Obfuscation Variants of Android Malware Using Transfer Learning",
        "authors": "Yu Jiang, Ruixuan Li, Junwei Tang, Ali Davanian, Heng Yin",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "AOMDroid:使用迁移学习检测Android恶意软件的混淆变种",
        "year": "2020",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/securecomm/securecomm2020-2.html",
        "conf_title": "16th SecureComm 2020: Washington, DC, USA",
        "conf_url": "https://doi.org/10.1007/978-3-030-63095-9",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-030-90022-9_7",
        "title": "Horus: A Security Assessment Framework for Android Crypto Wallets",
        "authors": "Md Shahab Uddin, Mohammad Mannan, Amr M. Youssef",
        "abstract": "",
        "files": {
            "openAccessPdf": "https://spectrum.library.concordia.ca/id/eprint/988864/7/Uddin_MASc_F2021.pdf"
        },
        "abstract_zh": "",
        "title_zh": "Horus:Android加密钱包的安全评估框架",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/securecomm/securecomm2021-2.html",
        "conf_title": "17th SecureComm 2021: Virtual Event",
        "conf_url": "https://doi.org/10.1007/978-3-030-90022-9",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-030-90022-9_12",
        "title": "Mobile Handset Privacy: Measuring the Data iOS and Android Send to Apple and Google",
        "authors": "Douglas J. Leith",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "手机隐私:测量iOS和Android发送给苹果和谷歌的数据",
        "year": "2021",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/securecomm/securecomm2021-2.html",
        "conf_title": "17th SecureComm 2021: Virtual Event",
        "conf_url": "https://doi.org/10.1007/978-3-030-90022-9",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-030-37231-6_19",
        "title": "IIFA: Modular Inter-app Intent Information Flow Analysis of Android Applications",
        "authors": "Abhishek Tiwari, Sascha Groß, Christian Hammer",
        "abstract": "",
        "files": {
            "openAccessPdf": "http://arxiv.org/pdf/1812.05380"
        },
        "abstract_zh": "",
        "title_zh": "IIFA:安卓应用的模块化应用间意向信息流分析",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/securecomm/securecomm2019-2.html",
        "conf_title": "15th SecureComm 2019: Orlando, FL, USA",
        "conf_url": "https://doi.org/10.1007/978-3-030-37231-6",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-030-37228-6_11",
        "title": "Obfusifier: Obfuscation-Resistant Android Malware Detection System",
        "authors": "Zhiqiang Li, Jun Sun, Qiben Yan, Witawas Srisa-an, Yutaka Tsutano",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "Obfusifier:抗混淆的Android恶意软件检测系统",
        "year": "2019",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/securecomm/securecomm2019-1.html",
        "conf_title": "15th SecureComm 2019: Orlando, FL, USA",
        "conf_url": "https://doi.org/10.1007/978-3-030-37228-6",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-030-01701-9_10",
        "title": "Understanding Android Obfuscation Techniques: A Large-Scale Investigation in the Wild",
        "authors": "Shuaike Dong, Menghao Li, Wenrui Diao, Xiangyu Liu, Jian Liu, Zhou Li, Fenghao Xu, Kai Chen, Xiaofeng Wang, Kehuan Zhang",
        "abstract": "",
        "files": {
            "openAccessPdf": "http://arxiv.org/pdf/1801.01633"
        },
        "abstract_zh": "",
        "title_zh": "理解Android混淆技术:野外大规模调查",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/securecomm/securecomm2018-1.html",
        "conf_title": "14th SecureComm 2018: Singapore",
        "conf_url": "https://doi.org/10.1007/978-3-030-01701-9",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-030-01701-9_14",
        "title": "Lexical Mining of Malicious URLs for Classifying Android Malware",
        "authors": "Shanshan Wang, Qiben Yan, Zhenxiang Chen, Lin Wang, Riccardo Spolaor, Bo Yang, Mauro Conti",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "用于Android恶意软件分类的恶意URL词汇挖掘",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/securecomm/securecomm2018-1.html",
        "conf_title": "14th SecureComm 2018: Singapore",
        "conf_url": "https://doi.org/10.1007/978-3-030-01701-9",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-030-01701-9_15",
        "title": "GranDroid: Graph-Based Detection of Malicious Network Behaviors in Android Applications",
        "authors": "Zhiqiang Li, Jun Sun, Qiben Yan, Witawas Srisa-an, Shakthi Bachala",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "GranDroid:基于图的anDroid应用程序恶意网络行为检测",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/securecomm/securecomm2018-1.html",
        "conf_title": "14th SecureComm 2018: Singapore",
        "conf_url": "https://doi.org/10.1007/978-3-030-01701-9",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-030-01701-9_16",
        "title": "FGFDect: A Fine-Grained Features Classification Model for Android Malware Detection",
        "authors": "Chao Liu, Jianan Li, Min Yu, Bo Luo, Song Li, Kai Chen, Weiqing Huang, Bin Lv",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "FGFDect:一种用于Android恶意软件检测的细粒度特征分类模型",
        "year": "2018",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/securecomm/securecomm2018-1.html",
        "conf_title": "14th SecureComm 2018: Singapore",
        "conf_url": "https://doi.org/10.1007/978-3-030-01701-9",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-78813-5_2",
        "title": "Enhancing Android Security Through App Splitting",
        "authors": "Drew Davidson, Vaibhav Rastogi, Mihai Christodorescu, Somesh Jha",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "通过应用拆分增强Android安全性",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/securecomm/securecomm2017.html",
        "conf_title": "13th SecureComm 2017: Niagara Falls, ON, Canada",
        "conf_url": "https://doi.org/10.1007/978-3-319-78813-5",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-78813-5_9",
        "title": "ThiefTrap - An Anti-theft Framework for Android",
        "authors": "Sascha Groß, Abhishek Tiwari, Christian Hammer",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "ThiefTrap——Android的防盗框架",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/securecomm/securecomm2017.html",
        "conf_title": "13th SecureComm 2017: Niagara Falls, ON, Canada",
        "conf_url": "https://doi.org/10.1007/978-3-319-78813-5",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-78813-5_23",
        "title": "Visual Analysis of Android Malware Behavior Profile Based on PMCG_droid : A Pruned Lightweight APP Call Graph",
        "authors": "Yan Zhang, Gui Peng, Lu Yang, Yazhe Wang, Minghui Tian, Jianxing Hu, Liming Wang, Chen Song",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "基于PMCG_droid的Android恶意软件行为模式可视化分析:一个剪枝的轻量级应用调用图",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/securecomm/securecomm2017.html",
        "conf_title": "13th SecureComm 2017: Niagara Falls, ON, Canada",
        "conf_url": "https://doi.org/10.1007/978-3-319-78813-5",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-78813-5_26",
        "title": "Defining and Detecting Environment Discrimination in Android Apps",
        "authors": "Yunfeng Hong, Yongjian Hu, Chun-Ming Lai, Shyhtsun Felix Wu, Iulian Neamtiu, Patrick D. McDaniel, Paul L. Yu, Hasan Cam, Gail-Joon Ahn",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "定义和检测Android应用程序中的环境歧视",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/securecomm/securecomm2017.html",
        "conf_title": "13th SecureComm 2017: Niagara Falls, ON, Canada",
        "conf_url": "https://doi.org/10.1007/978-3-319-78813-5",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-78816-6_8",
        "title": "Possible Keyloggers Without Implementing a Keyboard in Android",
        "authors": "Itzael Jiménez Aranda, Eleazar Aguirre Anaya, Raúl Acosta Bermejo, Ponciano Jorge Escamilla-Ambrosio",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "在Android中没有实现键盘的可能的键盘记录器",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/securecomm/securecomm2017w.html",
        "conf_title": "ATCS/SePrIoT@SecureComm 2017: Niagara Falls, ON, Canada",
        "conf_url": "https://doi.org/10.1007/978-3-319-78816-6",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-78816-6_18",
        "title": "SAFEDroid: Using Structural Features for Detecting Android Malwares",
        "authors": "Sevil Sen, Ahmet Ilhan Aysan, John A. Clark",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "SAFEDroid:使用结构特征检测Android恶意软件",
        "year": "2017",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/securecomm/securecomm2017w.html",
        "conf_title": "ATCS/SePrIoT@SecureComm 2017: Niagara Falls, ON, Canada",
        "conf_url": "https://doi.org/10.1007/978-3-319-78816-6",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-59608-2_2",
        "title": "H-Binder: A Hardened Binder Framework on Android Systems",
        "authors": "Dong Shen, Zhangkai Zhang, Xuhua Ding, Zhoujun Li, Robert H. Deng",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "h-Binder:Android系统上一个加固的Binder框架",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/securecomm/securecomm2016.html",
        "conf_title": "12. SecureComm 2016: Guangzhou, China",
        "conf_url": "https://doi.org/10.1007/978-3-319-59608-2",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-59608-2_3",
        "title": "Exploiting Android System Services Through Bypassing Service Helpers",
        "authors": "Yacong Gu, Yao Cheng, Lingyun Ying, Yemian Lu, Qi Li, Purui Su",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "通过绕过服务助手利用Android系统服务",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/securecomm/securecomm2016.html",
        "conf_title": "12. SecureComm 2016: Guangzhou, China",
        "conf_url": "https://doi.org/10.1007/978-3-319-59608-2",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-59608-2_19",
        "title": "IacCE: Extended Taint Path Guided Dynamic Analysis of Android Inter-App Data Leakage",
        "authors": "Tianjun Wu, Yuexiang Yang",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "IacCE:扩展污点路径引导的Android应用间数据泄漏动态分析",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/securecomm/securecomm2016.html",
        "conf_title": "12. SecureComm 2016: Guangzhou, China",
        "conf_url": "https://doi.org/10.1007/978-3-319-59608-2",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-59608-2_33",
        "title": "DroidClassifier: Efficient Adaptive Mining of Application-Layer Header for Classifying Android Malware",
        "authors": "Zhiqiang Li, Lichao Sun, Qiben Yan, Witawas Srisa-an, Zhenxiang Chen",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "DroidClassifier:用于Android恶意软件分类的应用层报头的高效自适应挖掘",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/securecomm/securecomm2016.html",
        "conf_title": "12. SecureComm 2016: Guangzhou, China",
        "conf_url": "https://doi.org/10.1007/978-3-319-59608-2",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-59608-2_35",
        "title": "Data Flow Analysis on Android Platform with Fragment Lifecycle Modeling",
        "authors": "Yongfeng Li, Jinbin Ouyang, Shanqing Guo, Bing Mao",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "基于片段生命周期建模的Android平台数据流分析",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/securecomm/securecomm2016.html",
        "conf_title": "12. SecureComm 2016: Guangzhou, China",
        "conf_url": "https://doi.org/10.1007/978-3-319-59608-2",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-59608-2_36",
        "title": "Alde: Privacy Risk Analysis of Analytics Libraries in the Android Ecosystem",
        "authors": "Xing Liu, Sencun Zhu, Wei Wang, Jiqiang Liu",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "alde:Android生态系统中分析库的隐私风险分析",
        "year": "2016",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/securecomm/securecomm2016.html",
        "conf_title": "12. SecureComm 2016: Guangzhou, China",
        "conf_url": "https://doi.org/10.1007/978-3-319-59608-2",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-28865-9_2",
        "title": "Detection, Classification and Characterization of Android Malware Using API Data Dependency",
        "authors": "Yongfeng Li, Tong Shen, Xin Sun, Xuerui Pan, Bing Mao",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "使用API数据依赖性的Android恶意软件的检测、分类和表征",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/securecomm/securecomm2015.html",
        "conf_title": "11. SecureComm 2015: Dallas, TX, USA",
        "conf_url": "https://doi.org/10.1007/978-3-319-28865-9",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-28865-9_4",
        "title": "Using Provenance Patterns to Vet Sensitive Behaviors in Android Apps",
        "authors": "Chao Yang, Guangliang Yang, Ashish Gehani, Vinod Yegneswaran, Dawood Tariq, Guofei Gu",
        "abstract": "",
        "files": {
            "openAccessPdf": "http://www.csl.sri.com/users/gehani/papers/SecureComm-2015.Dagger.pdf"
        },
        "abstract_zh": "",
        "title_zh": "使用出处模式审查Android应用中的敏感行为",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/securecomm/securecomm2015.html",
        "conf_title": "11. SecureComm 2015: Dallas, TX, USA",
        "conf_url": "https://doi.org/10.1007/978-3-319-28865-9",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-28865-9_14",
        "title": "Uranine: Real-time Privacy Leakage Monitoring without System Modification for Android",
        "authors": "Vaibhav Rastogi, Zhengyang Qu, Jedidiah McClurg, Yinzhi Cao, Yan Chen",
        "abstract": "",
        "files": {
            "openAccessPdf": "http://pages.cs.wisc.edu/%7Evrastogi/static/papers/rqmcc15.pdf"
        },
        "abstract_zh": "",
        "title_zh": "uranine:Android无需系统修改的实时隐私泄露监控",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/securecomm/securecomm2015.html",
        "conf_title": "11. SecureComm 2015: Dallas, TX, USA",
        "conf_url": "https://doi.org/10.1007/978-3-319-28865-9",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-28865-9_30",
        "title": "POSTER: API-Level Multi-policy Access Control Enforcement for Android Middleware",
        "authors": "Dongdong Tian, Xiaohong Li, Jing Hu, Guangquan Xu, Zhiyong Feng",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "海报:Android中间件的API级多策略访问控制实施",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/securecomm/securecomm2015.html",
        "conf_title": "11. SecureComm 2015: Dallas, TX, USA",
        "conf_url": "https://doi.org/10.1007/978-3-319-28865-9",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-319-28865-9_38",
        "title": "POSTER: A Collaborative Approach on Behavior-Based Android Malware Detection",
        "authors": "Chanwoo Bae, Jesung Jung, Jaehyun Nam, Seungwon Shin",
        "abstract": "",
        "files": {
            "openAccessPdf": ""
        },
        "abstract_zh": "",
        "title_zh": "海报:基于行为的Android恶意软件检测协作方法",
        "year": "2015",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/securecomm/securecomm2015.html",
        "conf_title": "11. SecureComm 2015: Dallas, TX, USA",
        "conf_url": "https://doi.org/10.1007/978-3-319-28865-9",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-031-25538-0_27",
        "title": "AttackMiner: A Graph Neural Network Based Approach for Attack Detection from Audit Logs",
        "authors": "Yuedong Pan, Lijun Cai, Tao Leng, Lixin Zhao, Jiangang Ma, Aimin Yu, Dan Meng",
        "abstract": "Research on Hierarchical Clustering Algorithm based on Cluster Outline.- Exploration of Fault Diagnosis Technology for Air Compressor-Based on Internet of Things.- An Enhancement Algorithm Based on Fuzzy Sets Algorithm using Computer Vision System for Chip Image Processing.- Development of DDoS Attack Defense System Based on IKEv2 Protocol.- Power Data Network Dynamic Simulation Platform.- An Emotional Model based on Multiple Factors.- Multi-source and Heterogeneous Knowledge Organization and Representation for Knowledge Fusion in Cloud Manufacturing.- Research of Dynamics and Deploying Control Method of Tethered Satellite.- Using Auto Associative Neural Networks for Signal Recognition Technology on Sky Screen.- Research on the Hotspot Information Push System for the Online Journal based on Open Source Framework.- Development of Control System of Wheel Type Backhoe Loader.- Some results on fuzzy weak Boolean filters of non-commutative residuated lattice.- CGPS: A Collaborative Game in Parking Lot Search.- A Fuzzy-Based Context-aware Privacy Preserving Scheme For Mobile Computing Services.- Research and Application of Trust Management System.- Ranaad-Xek-A Prototype Design of Traditional Thai Musical Instrument Application for Android Tablet PC.- Identifying Accurate Refactoring Opportunities Using Metrics.- Research on Neural Network Predictive Control of Induction Motor Servo System for Robot.- Research on Scale-out Workloads and Optimal Design of Multicore Processors.- Study of Modified Montgomery's Algorithm and Its Application to 1024-bit RSA.- A MVS-based Object-relational Model of the Internet of Things.- Rateless Codes Based Unequal Loss Protection for Layer-coded Media Delivery.- Construction of the Grade-3 System for GJB5000A-2008.- Virtual Training System of Assembly and Disassembly based on Petri Net.- The Design of Visual RBAC Model based on UML and XACML Integrating.- A New Approach to Reproduce Traffic Accident based on the Data of Vehicle Video Recorders.- Improved RNS Montgomery modular multiplication with residue recovery.- Functionally Equivalent C Code Clone Refactoring by Combining Static Analysis with Dynamic Testing.- Architecture Designing of Astronaut Onboard Training System based on AR Technology.- Design and Implementation of Bibliometrics System based on RIA.- SAR Image Filtering based on Quantum-inspired Estimation of Speckle Variance.- Image Semantic Annotation Approach based on the Feature Matching.- Research on Transmission and Transformation Land Reclamation based on BP Neural Network.- TTP-ACE: A Trusted Third Party for Auditing in Cloud Environment.- Pattern Recognition based on the Nonparametric Kernel Regression Method in A-share Market.- The Research on the Detection and Defense Method of the Smurf Type DDos Attack.- A Preliminary Analysis of Web Usage Behaviors from Web Access Log Files-A Case Study of Prince of Songkla University, Thailand.- Assessment of BER Performance of a Power Line Communication System in the Presence of Transformer and Performance Improvement Using Diversity Reception.- A Multi-constraint Anonymous Parameter Design Method Based on the Attribute Significance of Rough Set.- Design and Implementation of a Middleware for Service-Oriented Distributed Systems.- Refactoring Structure Semantics Similar Clones Combining Standardization with Metrics.- A Retail Outlets Classification Model Based on Adaboost.- Extensions of Statecharts with Time of Transition, Time Delay of Message Transmitting, and Arrival Probability of Message.- The Optimization of Hadoop Scheduling Algorithms on Distributed System for Processing Traffic Information.- Understanding the Capacity Scaling of Personal Communications Services.- VHDL Implementation of Complex Number Multiplier Using Vedic Mathematics.- Key Security Technologies of Cloud Computing Platforms.- The Measurement and Analysis of Software Engineering Risk based on Information Entropy.- GRACE: A Gradient Distance based Peer-to-Peer Network Supporting Efficient Content-based Retrieval.- Image Denoising Using Discrete Orthonormal S-transform.- Analyzing Services Composition Using Petri Nets.- FPGA-based Image Processing for Seamless Tiled Display System.- 2D Simulation of Static Interface States in GaN HEMT with AlN/GaN super-Lattice as Barrier Layer.- Study on Model and Platform Architecture of Cloud Manufacturing for Aerospace Conglomerate.- Services Composition Algorithm for Vehicle Network Based on Multiple Ontology.- Design and Application of Virtual Laboratory For Photography.- The Research of Travel-time Tomography Based on Forward calculation and Inversion.- Protein Secondary Structure Prediction based on Improved C-SVM for Unbalanced Datasets.- An Algorithm for Speckle Noise based on SVD and QSF.- A Generation Model of Function Call Based on the Control Flow Graph.- A Novel Community-based Trust Model for P2P Networks.- The Algorithm of Mining Frequent Itemsets based on MapReduce.- Multi-Feature Metric Guided Mesh Simplification.- Research of Medical Image Fusion Algorithms based on Nonsubsampled Contourlet.- Influence of Previous Cueing Validity on Gaze-Evoked Attention Orienting.- Application of RBF Neural Network in Intelligent Fault Diagnosis System.- An Analysis of the Keys to the Executable Domain-Specific Model.",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "AttackMiner:一种基于图神经网络的审计日志攻击检测方法",
        "abstract_zh": "",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/securecomm/securecomm2022.html",
        "conf_title": "18th SecureComm 2022:\nVirtual Event",
        "conf_url": "https://doi.org/10.1007/978-3-031-25538-0",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-031-25538-0_29",
        "title": "What Data Do the Google Dialer and Messages Apps on Android Send to Google?",
        "authors": "Douglas J. Leith",
        "abstract": "We report on measurements of the data sent to Google by the Google Messages and Google Dialer apps on an Android handset. We find that these apps tell Google when message/phone calls are made/received. The data sent by Google Messages includes a hash of the message text, allowing linking of sender and receiver in a message exchange. The data sent by Google Dialer includes the call time and duration, again allowing linking of the two handsets engaged in a phone call. Phone numbers are also sent to Google. In addition, the timing and duration of other user interactions with the apps are sent to Google. There is no opt out from this data collection. The data is sent via two channels, (i) the Google Play Services Clearcut logger and (ii) Google/Firebase Analytics. This study is therefore one of the first to cast light on the actual telemetry data sent by Google Play Services, which to date has largely been opaque. We informed Google of our findings and delayed publication for several months to engage with them. On foot of this report Google say that they plan to make multiple changes to their Messages and Dialer apps.",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "Android上的Google Dialer和Messages应用程序会向Google发送哪些数据？",
        "abstract_zh": "我们报道了通过Android手机上的Google Messages和Google Dialer应用程序发送给Google的数据的测量结果。我们发现，这些应用程序会告诉谷歌何时发出/收到消息/电话。Google Messages发送的数据包括消息文本的散列，允许在消息交换中链接发送者和接收者。谷歌拨号器发送的数据包括通话时间和持续时间，再次允许连接两部正在通话的手机。电话号码也被发送到谷歌。此外，其他用户与应用程序交互的时间和持续时间也会发送到谷歌。没有选择退出这个数据收集。数据通过两个渠道发送，(Google Play服务Clearcut logger和(ii) Google/Firebase Analytics。因此，这项研究是首次揭示Google Play服务发送的实际遥测数据，迄今为止，这些数据在很大程度上是不透明的。我们向谷歌通报了我们的发现，并推迟了几个月发表，以便与他们合作。在这篇报道的基础上，谷歌说他们计划对他们的消息和拨号器应用程序进行多项修改。",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/securecomm/securecomm2022.html",
        "conf_title": "18th SecureComm 2022:\nVirtual Event",
        "conf_url": "https://doi.org/10.1007/978-3-031-25538-0",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-031-25538-0_30",
        "title": "Detection and Privacy Leakage Analysis of Third-Party Libraries in Android Apps",
        "authors": "Xiantong Hao, Dandan Ma, Hongliang Liang",
        "abstract": "Third-party libraries are widely used in APP development, providing technical solutions for APP rich functions, but some third-party libraries can collect many user privacy information and cause data leakage. According to our survey, about 60% of Android applications use android packing services. Existing tools cannot effectively detect third-party libraries used in packed applications, and their analysis results of third-party library privacy leaks are not comprehensive. To overcome these limitations, we improve the traditional third- party library detection tools so that it can detect third-party libraries used in packed applications. We propose a fine-grained privacy-collecting third-party library detection framework for detecting the privacy leakage of third-party libraries in Android applications by combining Androguard, Frida and improved third-party library detection tools. Our experimental results on 300 mainstream apps show that our framework provides good support for analyzing packed applications, and our approach can detect more third-party libraries and provide a more comprehensive analysis of privacy leaks of third-party libraries than existing tools.",
        "files": {
            "openAccessPdf": ""
        },
        "title_zh": "Android应用中第三方库的检测和隐私泄露分析",
        "abstract_zh": "第三方库在APP开发中应用广泛，为APP丰富的功能提供了技术解决方案，但有些第三方库会收集很多用户隐私信息，造成数据泄露。根据我们的调查，大约60%的android应用程序使用Android打包服务。现有工具无法有效检测打包应用中使用的第三方库，其对第三方库隐私泄露的分析结果也不全面。为了克服这些限制，我们改进了传统的第三方库检测工具，使其能够检测打包应用程序中使用的第三方库。我们提出了一个细粒度的隐私收集第三方库检测框架，通过结合Androguard、Frida和改进的第三方库检测工具来检测Android应用中第三方库的隐私泄露。我们在300个主流应用程序上的实验结果表明，我们的框架为分析打包应用程序提供了良好的支持，我们的方法可以检测更多的第三方库，并提供比现有工具更全面的第三方库隐私泄漏分析。",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/securecomm/securecomm2022.html",
        "conf_title": "18th SecureComm 2022:\nVirtual Event",
        "conf_url": "https://doi.org/10.1007/978-3-031-25538-0",
        "keywords": [
            "Android"
        ]
    },
    {
        "url": "https://doi.org/10.1007/978-3-031-25538-0_35",
        "title": "Silver Surfers on the Tech Wave: Privacy Analysis of Android Apps for the Elderly",
        "authors": "Pranay Kapoor, Rohan Pagey, Mohammad Mannan, Amr M. Youssef",
        "abstract": "",
        "files": {
            "openAccessPdf": "https://spectrum.library.concordia.ca/id/eprint/991057/1/Kapoor_MASc_F2022.pdf"
        },
        "title_zh": "科技浪潮中的银发冲浪者:老年人安卓应用的隐私分析",
        "abstract_zh": "",
        "year": "2022",
        "dblp_url": "https://dblp.uni-trier.de/db/conf/securecomm/securecomm2022.html",
        "conf_title": "18th SecureComm 2022:\nVirtual Event",
        "conf_url": "https://doi.org/10.1007/978-3-031-25538-0",
        "keywords": [
            "Android"
        ]
    }
]